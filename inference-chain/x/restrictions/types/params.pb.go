// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: inference/restrictions/params.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EmergencyTransferExemption defines an exemption template for emergency transfers
type EmergencyTransferExemption struct {
	ExemptionId   string `protobuf:"bytes,1,opt,name=exemption_id,json=exemptionId,proto3" json:"exemption_id,omitempty"`
	FromAddress   string `protobuf:"bytes,2,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	ToAddress     string `protobuf:"bytes,3,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	MaxAmount     string `protobuf:"bytes,4,opt,name=max_amount,json=maxAmount,proto3" json:"max_amount,omitempty"`
	UsageLimit    uint64 `protobuf:"varint,5,opt,name=usage_limit,json=usageLimit,proto3" json:"usage_limit,omitempty"`
	ExpiryBlock   uint64 `protobuf:"varint,6,opt,name=expiry_block,json=expiryBlock,proto3" json:"expiry_block,omitempty"`
	Justification string `protobuf:"bytes,7,opt,name=justification,proto3" json:"justification,omitempty"`
}

func (m *EmergencyTransferExemption) Reset()         { *m = EmergencyTransferExemption{} }
func (m *EmergencyTransferExemption) String() string { return proto.CompactTextString(m) }
func (*EmergencyTransferExemption) ProtoMessage()    {}
func (*EmergencyTransferExemption) Descriptor() ([]byte, []int) {
	return fileDescriptor_7bd3f4339216f702, []int{0}
}
func (m *EmergencyTransferExemption) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EmergencyTransferExemption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EmergencyTransferExemption.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EmergencyTransferExemption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmergencyTransferExemption.Merge(m, src)
}
func (m *EmergencyTransferExemption) XXX_Size() int {
	return m.Size()
}
func (m *EmergencyTransferExemption) XXX_DiscardUnknown() {
	xxx_messageInfo_EmergencyTransferExemption.DiscardUnknown(m)
}

var xxx_messageInfo_EmergencyTransferExemption proto.InternalMessageInfo

func (m *EmergencyTransferExemption) GetExemptionId() string {
	if m != nil {
		return m.ExemptionId
	}
	return ""
}

func (m *EmergencyTransferExemption) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *EmergencyTransferExemption) GetToAddress() string {
	if m != nil {
		return m.ToAddress
	}
	return ""
}

func (m *EmergencyTransferExemption) GetMaxAmount() string {
	if m != nil {
		return m.MaxAmount
	}
	return ""
}

func (m *EmergencyTransferExemption) GetUsageLimit() uint64 {
	if m != nil {
		return m.UsageLimit
	}
	return 0
}

func (m *EmergencyTransferExemption) GetExpiryBlock() uint64 {
	if m != nil {
		return m.ExpiryBlock
	}
	return 0
}

func (m *EmergencyTransferExemption) GetJustification() string {
	if m != nil {
		return m.Justification
	}
	return ""
}

// ExemptionUsage tracks usage of exemptions per account
type ExemptionUsage struct {
	ExemptionId    string `protobuf:"bytes,1,opt,name=exemption_id,json=exemptionId,proto3" json:"exemption_id,omitempty"`
	AccountAddress string `protobuf:"bytes,2,opt,name=account_address,json=accountAddress,proto3" json:"account_address,omitempty"`
	UsageCount     uint64 `protobuf:"varint,3,opt,name=usage_count,json=usageCount,proto3" json:"usage_count,omitempty"`
}

func (m *ExemptionUsage) Reset()         { *m = ExemptionUsage{} }
func (m *ExemptionUsage) String() string { return proto.CompactTextString(m) }
func (*ExemptionUsage) ProtoMessage()    {}
func (*ExemptionUsage) Descriptor() ([]byte, []int) {
	return fileDescriptor_7bd3f4339216f702, []int{1}
}
func (m *ExemptionUsage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExemptionUsage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExemptionUsage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExemptionUsage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExemptionUsage.Merge(m, src)
}
func (m *ExemptionUsage) XXX_Size() int {
	return m.Size()
}
func (m *ExemptionUsage) XXX_DiscardUnknown() {
	xxx_messageInfo_ExemptionUsage.DiscardUnknown(m)
}

var xxx_messageInfo_ExemptionUsage proto.InternalMessageInfo

func (m *ExemptionUsage) GetExemptionId() string {
	if m != nil {
		return m.ExemptionId
	}
	return ""
}

func (m *ExemptionUsage) GetAccountAddress() string {
	if m != nil {
		return m.AccountAddress
	}
	return ""
}

func (m *ExemptionUsage) GetUsageCount() uint64 {
	if m != nil {
		return m.UsageCount
	}
	return 0
}

// Params defines the parameters for the module.
type Params struct {
	// Block height when transfer restrictions end (default: 1,555,000)
	RestrictionEndBlock uint64 `protobuf:"varint,1,opt,name=restriction_end_block,json=restrictionEndBlock,proto3" json:"restriction_end_block,omitempty"`
	// Array of governance-approved emergency transfer exemption templates
	EmergencyTransferExemptions []EmergencyTransferExemption `protobuf:"bytes,2,rep,name=emergency_transfer_exemptions,json=emergencyTransferExemptions,proto3" json:"emergency_transfer_exemptions"`
	// Usage tracking for emergency exemptions per account
	ExemptionUsageTracking []ExemptionUsage `protobuf:"bytes,3,rep,name=exemption_usage_tracking,json=exemptionUsageTracking,proto3" json:"exemption_usage_tracking"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_7bd3f4339216f702, []int{2}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetRestrictionEndBlock() uint64 {
	if m != nil {
		return m.RestrictionEndBlock
	}
	return 0
}

func (m *Params) GetEmergencyTransferExemptions() []EmergencyTransferExemption {
	if m != nil {
		return m.EmergencyTransferExemptions
	}
	return nil
}

func (m *Params) GetExemptionUsageTracking() []ExemptionUsage {
	if m != nil {
		return m.ExemptionUsageTracking
	}
	return nil
}

func init() {
	proto.RegisterType((*EmergencyTransferExemption)(nil), "inference.restrictions.EmergencyTransferExemption")
	proto.RegisterType((*ExemptionUsage)(nil), "inference.restrictions.ExemptionUsage")
	proto.RegisterType((*Params)(nil), "inference.restrictions.Params")
}

func init() {
	proto.RegisterFile("inference/restrictions/params.proto", fileDescriptor_7bd3f4339216f702)
}

var fileDescriptor_7bd3f4339216f702 = []byte{
	// 496 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x3f, 0x6f, 0x13, 0x31,
	0x18, 0xc6, 0xe3, 0x24, 0x04, 0xd5, 0x81, 0x22, 0x0e, 0xa8, 0x4e, 0x41, 0xbd, 0x94, 0x82, 0x20,
	0x62, 0xb8, 0x93, 0xc2, 0x82, 0xba, 0x35, 0x28, 0x03, 0x12, 0x03, 0x8a, 0xca, 0xc2, 0x62, 0x39,
	0x3e, 0xdf, 0x61, 0x5a, 0xdb, 0x27, 0xdb, 0x27, 0x25, 0x12, 0x1b, 0x1b, 0x53, 0x3f, 0x02, 0x1f,
	0x81, 0x8f, 0xd1, 0x81, 0xa1, 0x23, 0x13, 0x42, 0xc9, 0x00, 0x1f, 0x03, 0xd9, 0xbe, 0x5c, 0x13,
	0x44, 0xa4, 0x2e, 0x91, 0xf3, 0xf3, 0x73, 0xef, 0x9f, 0xe7, 0xf5, 0x0b, 0x1f, 0x33, 0x91, 0x51,
	0x45, 0x05, 0xa1, 0x89, 0xa2, 0xda, 0x28, 0x46, 0x0c, 0x93, 0x42, 0x27, 0x05, 0x56, 0x98, 0xeb,
	0xb8, 0x50, 0xd2, 0xc8, 0x60, 0xaf, 0x16, 0xc5, 0xeb, 0xa2, 0xde, 0x5d, 0xcc, 0x99, 0x90, 0x89,
	0xfb, 0xf5, 0xd2, 0xde, 0xfd, 0x5c, 0xe6, 0xd2, 0x1d, 0x13, 0x7b, 0xf2, 0xf4, 0xf0, 0xbc, 0x09,
	0x7b, 0x63, 0x4e, 0x55, 0x4e, 0x05, 0x99, 0x9f, 0x28, 0x2c, 0x74, 0x46, 0xd5, 0x78, 0x46, 0x79,
	0x61, 0x03, 0x05, 0x8f, 0xe0, 0x2d, 0xba, 0xfa, 0x83, 0x58, 0x1a, 0x82, 0x03, 0x30, 0xd8, 0x99,
	0x74, 0x6b, 0xf6, 0x3a, 0xb5, 0x92, 0x4c, 0x49, 0x8e, 0x70, 0x9a, 0x2a, 0xaa, 0x75, 0xd8, 0xf4,
	0x12, 0xcb, 0x8e, 0x3d, 0x0a, 0xf6, 0x21, 0x34, 0xb2, 0x16, 0xb4, 0x9c, 0x60, 0xc7, 0xc8, 0xb5,
	0x6b, 0x8e, 0x67, 0x08, 0x73, 0x59, 0x0a, 0x13, 0xb6, 0xfd, 0x35, 0xc7, 0xb3, 0x63, 0x07, 0x82,
	0x3e, 0xec, 0x96, 0x1a, 0xe7, 0x14, 0x9d, 0x31, 0xce, 0x4c, 0x78, 0xe3, 0x00, 0x0c, 0xda, 0x13,
	0xe8, 0xd0, 0x1b, 0x4b, 0x7c, 0x91, 0x05, 0x53, 0x73, 0x34, 0x3d, 0x93, 0xe4, 0x34, 0xec, 0x38,
	0x45, 0xd7, 0xb3, 0x91, 0x45, 0xc1, 0x13, 0x78, 0xfb, 0x63, 0xa9, 0x0d, 0xcb, 0x18, 0xc1, 0xb6,
	0xee, 0xf0, 0xa6, 0xcb, 0xb2, 0x09, 0x8f, 0xda, 0x7f, 0xbe, 0xf6, 0xc1, 0xe1, 0x67, 0x00, 0x77,
	0x6b, 0x07, 0xde, 0xd9, 0x34, 0xd7, 0xb1, 0xe1, 0x19, 0xbc, 0x83, 0x09, 0xb1, 0x05, 0xff, 0xe3,
	0xc4, 0x6e, 0x85, 0x57, 0xdd, 0xd6, 0xed, 0x38, 0xea, 0xdc, 0x58, 0xb5, 0xf3, 0xca, 0x92, 0xaa,
	0x8a, 0xef, 0x4d, 0xd8, 0x79, 0xeb, 0x46, 0x1d, 0x0c, 0xe1, 0x83, 0xb5, 0xe1, 0x22, 0x2a, 0xd2,
	0xaa, 0x51, 0xe0, 0xbe, 0xbd, 0xb7, 0x76, 0x39, 0x16, 0xa9, 0x6f, 0xf8, 0x13, 0xdc, 0xa7, 0xab,
	0xb1, 0x22, 0x53, 0xcd, 0x15, 0xd5, 0x05, 0xdb, 0xe2, 0x5a, 0x83, 0xee, 0x70, 0x18, 0xff, 0xff,
	0x01, 0xc5, 0xdb, 0xdf, 0xc4, 0xa8, 0x7d, 0xf1, 0xb3, 0xdf, 0x98, 0x3c, 0xa4, 0x5b, 0x15, 0x3a,
	0xc8, 0x60, 0x78, 0xe5, 0x97, 0xef, 0xd6, 0x28, 0x4c, 0x4e, 0x99, 0xc8, 0xc3, 0x96, 0x4b, 0xfc,
	0x74, 0x6b, 0xe2, 0x0d, 0xe7, 0xab, 0x64, 0x7b, 0x74, 0x83, 0x9e, 0x54, 0xb1, 0x8e, 0x06, 0xd6,
	0xaa, 0x2f, 0xbf, 0xbf, 0x3d, 0xef, 0x5f, 0x2d, 0xcb, 0x6c, 0x73, 0x5d, 0xbc, 0x87, 0xa3, 0xc9,
	0xc5, 0x22, 0x02, 0x97, 0x8b, 0x08, 0xfc, 0x5a, 0x44, 0xe0, 0x7c, 0x19, 0x35, 0x2e, 0x97, 0x51,
	0xe3, 0xc7, 0x32, 0x6a, 0xbc, 0x7f, 0x99, 0x33, 0xf3, 0xa1, 0x9c, 0xc6, 0x44, 0xf2, 0xa4, 0x50,
	0x32, 0x2d, 0x89, 0xd1, 0x84, 0xb9, 0x50, 0x5b, 0x83, 0x9a, 0x79, 0x41, 0xf5, 0xb4, 0xe3, 0x56,
	0xe8, 0xc5, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf7, 0xa5, 0xef, 0x78, 0xaa, 0x03, 0x00, 0x00,
}

func (this *EmergencyTransferExemption) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EmergencyTransferExemption)
	if !ok {
		that2, ok := that.(EmergencyTransferExemption)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ExemptionId != that1.ExemptionId {
		return false
	}
	if this.FromAddress != that1.FromAddress {
		return false
	}
	if this.ToAddress != that1.ToAddress {
		return false
	}
	if this.MaxAmount != that1.MaxAmount {
		return false
	}
	if this.UsageLimit != that1.UsageLimit {
		return false
	}
	if this.ExpiryBlock != that1.ExpiryBlock {
		return false
	}
	if this.Justification != that1.Justification {
		return false
	}
	return true
}
func (this *ExemptionUsage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExemptionUsage)
	if !ok {
		that2, ok := that.(ExemptionUsage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ExemptionId != that1.ExemptionId {
		return false
	}
	if this.AccountAddress != that1.AccountAddress {
		return false
	}
	if this.UsageCount != that1.UsageCount {
		return false
	}
	return true
}
func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RestrictionEndBlock != that1.RestrictionEndBlock {
		return false
	}
	if len(this.EmergencyTransferExemptions) != len(that1.EmergencyTransferExemptions) {
		return false
	}
	for i := range this.EmergencyTransferExemptions {
		if !this.EmergencyTransferExemptions[i].Equal(&that1.EmergencyTransferExemptions[i]) {
			return false
		}
	}
	if len(this.ExemptionUsageTracking) != len(that1.ExemptionUsageTracking) {
		return false
	}
	for i := range this.ExemptionUsageTracking {
		if !this.ExemptionUsageTracking[i].Equal(&that1.ExemptionUsageTracking[i]) {
			return false
		}
	}
	return true
}
func (m *EmergencyTransferExemption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmergencyTransferExemption) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EmergencyTransferExemption) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Justification) > 0 {
		i -= len(m.Justification)
		copy(dAtA[i:], m.Justification)
		i = encodeVarintParams(dAtA, i, uint64(len(m.Justification)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ExpiryBlock != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.ExpiryBlock))
		i--
		dAtA[i] = 0x30
	}
	if m.UsageLimit != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.UsageLimit))
		i--
		dAtA[i] = 0x28
	}
	if len(m.MaxAmount) > 0 {
		i -= len(m.MaxAmount)
		copy(dAtA[i:], m.MaxAmount)
		i = encodeVarintParams(dAtA, i, uint64(len(m.MaxAmount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ToAddress) > 0 {
		i -= len(m.ToAddress)
		copy(dAtA[i:], m.ToAddress)
		i = encodeVarintParams(dAtA, i, uint64(len(m.ToAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintParams(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ExemptionId) > 0 {
		i -= len(m.ExemptionId)
		copy(dAtA[i:], m.ExemptionId)
		i = encodeVarintParams(dAtA, i, uint64(len(m.ExemptionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExemptionUsage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExemptionUsage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExemptionUsage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UsageCount != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.UsageCount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.AccountAddress) > 0 {
		i -= len(m.AccountAddress)
		copy(dAtA[i:], m.AccountAddress)
		i = encodeVarintParams(dAtA, i, uint64(len(m.AccountAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ExemptionId) > 0 {
		i -= len(m.ExemptionId)
		copy(dAtA[i:], m.ExemptionId)
		i = encodeVarintParams(dAtA, i, uint64(len(m.ExemptionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExemptionUsageTracking) > 0 {
		for iNdEx := len(m.ExemptionUsageTracking) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExemptionUsageTracking[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.EmergencyTransferExemptions) > 0 {
		for iNdEx := len(m.EmergencyTransferExemptions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EmergencyTransferExemptions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.RestrictionEndBlock != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.RestrictionEndBlock))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EmergencyTransferExemption) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExemptionId)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.ToAddress)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.MaxAmount)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if m.UsageLimit != 0 {
		n += 1 + sovParams(uint64(m.UsageLimit))
	}
	if m.ExpiryBlock != 0 {
		n += 1 + sovParams(uint64(m.ExpiryBlock))
	}
	l = len(m.Justification)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	return n
}

func (m *ExemptionUsage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExemptionId)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.AccountAddress)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if m.UsageCount != 0 {
		n += 1 + sovParams(uint64(m.UsageCount))
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RestrictionEndBlock != 0 {
		n += 1 + sovParams(uint64(m.RestrictionEndBlock))
	}
	if len(m.EmergencyTransferExemptions) > 0 {
		for _, e := range m.EmergencyTransferExemptions {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if len(m.ExemptionUsageTracking) > 0 {
		for _, e := range m.ExemptionUsageTracking {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EmergencyTransferExemption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmergencyTransferExemption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmergencyTransferExemption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExemptionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExemptionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsageLimit", wireType)
			}
			m.UsageLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsageLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiryBlock", wireType)
			}
			m.ExpiryBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiryBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Justification", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Justification = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExemptionUsage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExemptionUsage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExemptionUsage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExemptionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExemptionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsageCount", wireType)
			}
			m.UsageCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsageCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestrictionEndBlock", wireType)
			}
			m.RestrictionEndBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RestrictionEndBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmergencyTransferExemptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmergencyTransferExemptions = append(m.EmergencyTransferExemptions, EmergencyTransferExemption{})
			if err := m.EmergencyTransferExemptions[len(m.EmergencyTransferExemptions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExemptionUsageTracking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExemptionUsageTracking = append(m.ExemptionUsageTracking, ExemptionUsage{})
			if err := m.ExemptionUsageTracking[len(m.ExemptionUsageTracking)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)

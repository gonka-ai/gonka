// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: inference/streamvesting/vesting_schedule.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EpochCoins represents the coins to be unlocked in a specific epoch
type EpochCoins struct {
	Coins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=coins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"coins"`
}

func (m *EpochCoins) Reset()         { *m = EpochCoins{} }
func (m *EpochCoins) String() string { return proto.CompactTextString(m) }
func (*EpochCoins) ProtoMessage()    {}
func (*EpochCoins) Descriptor() ([]byte, []int) {
	return fileDescriptor_9eb8c6db5760cec1, []int{0}
}
func (m *EpochCoins) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EpochCoins) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EpochCoins.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EpochCoins) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochCoins.Merge(m, src)
}
func (m *EpochCoins) XXX_Size() int {
	return m.Size()
}
func (m *EpochCoins) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochCoins.DiscardUnknown(m)
}

var xxx_messageInfo_EpochCoins proto.InternalMessageInfo

func (m *EpochCoins) GetCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Coins
	}
	return nil
}

// VestingSchedule defines a participant's vesting schedule
type VestingSchedule struct {
	// participant_address is the address of the participant
	ParticipantAddress string `protobuf:"bytes,1,opt,name=participant_address,json=participantAddress,proto3" json:"participant_address,omitempty"`
	// epoch_amounts contains the coins to vest for each epoch
	// The first element is unlocked in the next epoch, second in epoch+1, etc.
	// Each element contains sdk.Coins supporting multiple denominations per epoch
	EpochAmounts []EpochCoins `protobuf:"bytes,2,rep,name=epoch_amounts,json=epochAmounts,proto3" json:"epoch_amounts"`
}

func (m *VestingSchedule) Reset()         { *m = VestingSchedule{} }
func (m *VestingSchedule) String() string { return proto.CompactTextString(m) }
func (*VestingSchedule) ProtoMessage()    {}
func (*VestingSchedule) Descriptor() ([]byte, []int) {
	return fileDescriptor_9eb8c6db5760cec1, []int{1}
}
func (m *VestingSchedule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VestingSchedule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VestingSchedule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VestingSchedule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VestingSchedule.Merge(m, src)
}
func (m *VestingSchedule) XXX_Size() int {
	return m.Size()
}
func (m *VestingSchedule) XXX_DiscardUnknown() {
	xxx_messageInfo_VestingSchedule.DiscardUnknown(m)
}

var xxx_messageInfo_VestingSchedule proto.InternalMessageInfo

func (m *VestingSchedule) GetParticipantAddress() string {
	if m != nil {
		return m.ParticipantAddress
	}
	return ""
}

func (m *VestingSchedule) GetEpochAmounts() []EpochCoins {
	if m != nil {
		return m.EpochAmounts
	}
	return nil
}

func init() {
	proto.RegisterType((*EpochCoins)(nil), "inference.streamvesting.EpochCoins")
	proto.RegisterType((*VestingSchedule)(nil), "inference.streamvesting.VestingSchedule")
}

func init() {
	proto.RegisterFile("inference/streamvesting/vesting_schedule.proto", fileDescriptor_9eb8c6db5760cec1)
}

var fileDescriptor_9eb8c6db5760cec1 = []byte{
	// 359 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x51, 0xcd, 0x4a, 0xf3, 0x40,
	0x14, 0xcd, 0x7c, 0x7f, 0xd0, 0x7c, 0x8a, 0x18, 0x05, 0x6b, 0x17, 0xa9, 0xd4, 0x4d, 0x11, 0x9c,
	0xa1, 0x8a, 0x0b, 0xdd, 0xb5, 0xe2, 0x0b, 0xb4, 0xe0, 0xc2, 0x4d, 0x99, 0x4c, 0xa6, 0xe9, 0xa0,
	0x99, 0x09, 0xb9, 0x93, 0xa2, 0x3e, 0x85, 0x2f, 0x20, 0xb8, 0x14, 0x57, 0x3e, 0x46, 0x97, 0x5d,
	0xba, 0x52, 0x69, 0x17, 0xfa, 0x18, 0x32, 0x33, 0xc1, 0x56, 0xc1, 0x4d, 0xee, 0x25, 0xe7, 0x9c,
	0x3b, 0xe7, 0xdc, 0xeb, 0x63, 0x21, 0x07, 0x3c, 0xe7, 0x92, 0x71, 0x02, 0x3a, 0xe7, 0x34, 0x1d,
	0x71, 0xd0, 0x42, 0x26, 0xa4, 0xac, 0x7d, 0x60, 0x43, 0x1e, 0x17, 0x17, 0x1c, 0x67, 0xb9, 0xd2,
	0x2a, 0xd8, 0xf8, 0xe4, 0xe3, 0x2f, 0xfc, 0xda, 0x2a, 0x4d, 0x85, 0x54, 0xc4, 0x7e, 0x1d, 0xb7,
	0xb6, 0x9e, 0xa8, 0x44, 0xd9, 0x96, 0x98, 0xae, 0xfc, 0x1b, 0x32, 0x05, 0xa9, 0x02, 0x12, 0x51,
	0xe0, 0x64, 0xd4, 0x8a, 0xb8, 0xa6, 0x2d, 0xc2, 0x94, 0x90, 0x0e, 0x6f, 0x5c, 0xfb, 0xfe, 0x49,
	0xa6, 0xd8, 0xf0, 0x58, 0x09, 0x09, 0xc1, 0xc0, 0xff, 0x6b, 0x30, 0xa8, 0xa2, 0xad, 0xdf, 0xcd,
	0xff, 0x7b, 0x9b, 0xd8, 0xa9, 0xb1, 0x51, 0xe3, 0x52, 0x8d, 0x0d, 0xb5, 0x73, 0x30, 0x7e, 0xae,
	0x7b, 0x0f, 0x2f, 0xf5, 0x66, 0x22, 0xf4, 0xb0, 0x88, 0x30, 0x53, 0x29, 0x29, 0x9f, 0x72, 0x65,
	0x17, 0xe2, 0x73, 0xa2, 0xaf, 0x32, 0x0e, 0x56, 0x00, 0xf7, 0x6f, 0x8f, 0x3b, 0xa8, 0xeb, 0xc6,
	0x1f, 0xfd, 0x79, 0xbf, 0xab, 0xa3, 0xc6, 0x2d, 0xf2, 0x57, 0x4e, 0x5d, 0xa0, 0x5e, 0x99, 0x3b,
	0x20, 0xfe, 0x5a, 0x46, 0x73, 0x2d, 0x98, 0xc8, 0xa8, 0xd4, 0x7d, 0x1a, 0xc7, 0x39, 0x07, 0xe3,
	0x07, 0x35, 0x2b, 0xdd, 0x60, 0x01, 0x6a, 0x3b, 0x24, 0xe8, 0xf9, 0xcb, 0xdc, 0x04, 0xe8, 0xd3,
	0x54, 0x15, 0x52, 0x43, 0xf5, 0x97, 0xb5, 0xbe, 0x8d, 0x7f, 0x58, 0x1d, 0x9e, 0xc7, 0xed, 0x54,
	0x4c, 0x08, 0x67, 0x6c, 0xc9, 0x0e, 0x69, 0xbb, 0x19, 0xce, 0x5f, 0xa7, 0x37, 0x9e, 0x86, 0x68,
	0x32, 0x0d, 0xd1, 0xeb, 0x34, 0x44, 0x37, 0xb3, 0xd0, 0x9b, 0xcc, 0x42, 0xef, 0x69, 0x16, 0x7a,
	0x67, 0x87, 0x0b, 0xa9, 0xb3, 0x5c, 0xc5, 0x05, 0xd3, 0xc0, 0x84, 0xbd, 0xeb, 0xfc, 0xc2, 0x97,
	0xdf, 0x6e, 0x6c, 0x97, 0x11, 0xfd, 0xb3, 0x7b, 0xdf, 0xff, 0x08, 0x00, 0x00, 0xff, 0xff, 0x33,
	0x66, 0x54, 0x1c, 0x0b, 0x02, 0x00, 0x00,
}

func (this *EpochCoins) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EpochCoins)
	if !ok {
		that2, ok := that.(EpochCoins)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Coins) != len(that1.Coins) {
		return false
	}
	for i := range this.Coins {
		if !this.Coins[i].Equal(&that1.Coins[i]) {
			return false
		}
	}
	return true
}
func (this *VestingSchedule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VestingSchedule)
	if !ok {
		that2, ok := that.(VestingSchedule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ParticipantAddress != that1.ParticipantAddress {
		return false
	}
	if len(this.EpochAmounts) != len(that1.EpochAmounts) {
		return false
	}
	for i := range this.EpochAmounts {
		if !this.EpochAmounts[i].Equal(&that1.EpochAmounts[i]) {
			return false
		}
	}
	return true
}
func (m *EpochCoins) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EpochCoins) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EpochCoins) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVestingSchedule(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VestingSchedule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VestingSchedule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VestingSchedule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EpochAmounts) > 0 {
		for iNdEx := len(m.EpochAmounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EpochAmounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVestingSchedule(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ParticipantAddress) > 0 {
		i -= len(m.ParticipantAddress)
		copy(dAtA[i:], m.ParticipantAddress)
		i = encodeVarintVestingSchedule(dAtA, i, uint64(len(m.ParticipantAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintVestingSchedule(dAtA []byte, offset int, v uint64) int {
	offset -= sovVestingSchedule(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EpochCoins) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovVestingSchedule(uint64(l))
		}
	}
	return n
}

func (m *VestingSchedule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ParticipantAddress)
	if l > 0 {
		n += 1 + l + sovVestingSchedule(uint64(l))
	}
	if len(m.EpochAmounts) > 0 {
		for _, e := range m.EpochAmounts {
			l = e.Size()
			n += 1 + l + sovVestingSchedule(uint64(l))
		}
	}
	return n
}

func sovVestingSchedule(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVestingSchedule(x uint64) (n int) {
	return sovVestingSchedule(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EpochCoins) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVestingSchedule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EpochCoins: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EpochCoins: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVestingSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVestingSchedule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVestingSchedule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVestingSchedule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVestingSchedule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VestingSchedule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVestingSchedule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VestingSchedule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VestingSchedule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVestingSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVestingSchedule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVestingSchedule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParticipantAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochAmounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVestingSchedule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVestingSchedule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVestingSchedule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochAmounts = append(m.EpochAmounts, EpochCoins{})
			if err := m.EpochAmounts[len(m.EpochAmounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVestingSchedule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVestingSchedule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVestingSchedule(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVestingSchedule
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVestingSchedule
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVestingSchedule
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVestingSchedule
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVestingSchedule
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVestingSchedule
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVestingSchedule        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVestingSchedule          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVestingSchedule = fmt.Errorf("proto: unexpected end of group")
)

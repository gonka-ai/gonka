// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: inference/genesistransfer/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1df3317d4ed4316, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1df3317d4ed4316, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryTransferStatusRequest is request type for the Query/TransferStatus RPC method.
type QueryTransferStatusRequest struct {
	GenesisAddress string `protobuf:"bytes,1,opt,name=genesis_address,json=genesisAddress,proto3" json:"genesis_address,omitempty"`
}

func (m *QueryTransferStatusRequest) Reset()         { *m = QueryTransferStatusRequest{} }
func (m *QueryTransferStatusRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTransferStatusRequest) ProtoMessage()    {}
func (*QueryTransferStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1df3317d4ed4316, []int{2}
}
func (m *QueryTransferStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTransferStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTransferStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTransferStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTransferStatusRequest.Merge(m, src)
}
func (m *QueryTransferStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTransferStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTransferStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTransferStatusRequest proto.InternalMessageInfo

func (m *QueryTransferStatusRequest) GetGenesisAddress() string {
	if m != nil {
		return m.GenesisAddress
	}
	return ""
}

// QueryTransferStatusResponse is response type for the Query/TransferStatus RPC method.
type QueryTransferStatusResponse struct {
	IsTransferred  bool            `protobuf:"varint,1,opt,name=is_transferred,json=isTransferred,proto3" json:"is_transferred,omitempty"`
	TransferRecord *TransferRecord `protobuf:"bytes,2,opt,name=transfer_record,json=transferRecord,proto3" json:"transfer_record,omitempty"`
}

func (m *QueryTransferStatusResponse) Reset()         { *m = QueryTransferStatusResponse{} }
func (m *QueryTransferStatusResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTransferStatusResponse) ProtoMessage()    {}
func (*QueryTransferStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1df3317d4ed4316, []int{3}
}
func (m *QueryTransferStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTransferStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTransferStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTransferStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTransferStatusResponse.Merge(m, src)
}
func (m *QueryTransferStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTransferStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTransferStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTransferStatusResponse proto.InternalMessageInfo

func (m *QueryTransferStatusResponse) GetIsTransferred() bool {
	if m != nil {
		return m.IsTransferred
	}
	return false
}

func (m *QueryTransferStatusResponse) GetTransferRecord() *TransferRecord {
	if m != nil {
		return m.TransferRecord
	}
	return nil
}

// QueryTransferHistoryRequest is request type for the Query/TransferHistory RPC method.
type QueryTransferHistoryRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryTransferHistoryRequest) Reset()         { *m = QueryTransferHistoryRequest{} }
func (m *QueryTransferHistoryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTransferHistoryRequest) ProtoMessage()    {}
func (*QueryTransferHistoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1df3317d4ed4316, []int{4}
}
func (m *QueryTransferHistoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTransferHistoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTransferHistoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTransferHistoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTransferHistoryRequest.Merge(m, src)
}
func (m *QueryTransferHistoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTransferHistoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTransferHistoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTransferHistoryRequest proto.InternalMessageInfo

func (m *QueryTransferHistoryRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryTransferHistoryResponse is response type for the Query/TransferHistory RPC method.
type QueryTransferHistoryResponse struct {
	TransferRecords []TransferRecord    `protobuf:"bytes,1,rep,name=transfer_records,json=transferRecords,proto3" json:"transfer_records"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryTransferHistoryResponse) Reset()         { *m = QueryTransferHistoryResponse{} }
func (m *QueryTransferHistoryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTransferHistoryResponse) ProtoMessage()    {}
func (*QueryTransferHistoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1df3317d4ed4316, []int{5}
}
func (m *QueryTransferHistoryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTransferHistoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTransferHistoryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTransferHistoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTransferHistoryResponse.Merge(m, src)
}
func (m *QueryTransferHistoryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTransferHistoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTransferHistoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTransferHistoryResponse proto.InternalMessageInfo

func (m *QueryTransferHistoryResponse) GetTransferRecords() []TransferRecord {
	if m != nil {
		return m.TransferRecords
	}
	return nil
}

func (m *QueryTransferHistoryResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllowedAccountsRequest is request type for the Query/AllowedAccounts RPC method.
type QueryAllowedAccountsRequest struct {
}

func (m *QueryAllowedAccountsRequest) Reset()         { *m = QueryAllowedAccountsRequest{} }
func (m *QueryAllowedAccountsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllowedAccountsRequest) ProtoMessage()    {}
func (*QueryAllowedAccountsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1df3317d4ed4316, []int{6}
}
func (m *QueryAllowedAccountsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllowedAccountsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllowedAccountsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllowedAccountsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllowedAccountsRequest.Merge(m, src)
}
func (m *QueryAllowedAccountsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllowedAccountsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllowedAccountsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllowedAccountsRequest proto.InternalMessageInfo

// QueryAllowedAccountsResponse is response type for the Query/AllowedAccounts RPC method.
type QueryAllowedAccountsResponse struct {
	AllowedAccounts []string `protobuf:"bytes,1,rep,name=allowed_accounts,json=allowedAccounts,proto3" json:"allowed_accounts,omitempty"`
	RestrictToList  bool     `protobuf:"varint,2,opt,name=restrict_to_list,json=restrictToList,proto3" json:"restrict_to_list,omitempty"`
}

func (m *QueryAllowedAccountsResponse) Reset()         { *m = QueryAllowedAccountsResponse{} }
func (m *QueryAllowedAccountsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllowedAccountsResponse) ProtoMessage()    {}
func (*QueryAllowedAccountsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1df3317d4ed4316, []int{7}
}
func (m *QueryAllowedAccountsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllowedAccountsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllowedAccountsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllowedAccountsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllowedAccountsResponse.Merge(m, src)
}
func (m *QueryAllowedAccountsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllowedAccountsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllowedAccountsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllowedAccountsResponse proto.InternalMessageInfo

func (m *QueryAllowedAccountsResponse) GetAllowedAccounts() []string {
	if m != nil {
		return m.AllowedAccounts
	}
	return nil
}

func (m *QueryAllowedAccountsResponse) GetRestrictToList() bool {
	if m != nil {
		return m.RestrictToList
	}
	return false
}

// QueryTransferEligibilityRequest is request type for the Query/TransferEligibility RPC method.
type QueryTransferEligibilityRequest struct {
	GenesisAddress string `protobuf:"bytes,1,opt,name=genesis_address,json=genesisAddress,proto3" json:"genesis_address,omitempty"`
}

func (m *QueryTransferEligibilityRequest) Reset()         { *m = QueryTransferEligibilityRequest{} }
func (m *QueryTransferEligibilityRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTransferEligibilityRequest) ProtoMessage()    {}
func (*QueryTransferEligibilityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1df3317d4ed4316, []int{8}
}
func (m *QueryTransferEligibilityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTransferEligibilityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTransferEligibilityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTransferEligibilityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTransferEligibilityRequest.Merge(m, src)
}
func (m *QueryTransferEligibilityRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTransferEligibilityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTransferEligibilityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTransferEligibilityRequest proto.InternalMessageInfo

func (m *QueryTransferEligibilityRequest) GetGenesisAddress() string {
	if m != nil {
		return m.GenesisAddress
	}
	return ""
}

// QueryTransferEligibilityResponse is response type for the Query/TransferEligibility RPC method.
type QueryTransferEligibilityResponse struct {
	IsEligible         bool   `protobuf:"varint,1,opt,name=is_eligible,json=isEligible,proto3" json:"is_eligible,omitempty"`
	Reason             string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	AlreadyTransferred bool   `protobuf:"varint,3,opt,name=already_transferred,json=alreadyTransferred,proto3" json:"already_transferred,omitempty"`
}

func (m *QueryTransferEligibilityResponse) Reset()         { *m = QueryTransferEligibilityResponse{} }
func (m *QueryTransferEligibilityResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTransferEligibilityResponse) ProtoMessage()    {}
func (*QueryTransferEligibilityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1df3317d4ed4316, []int{9}
}
func (m *QueryTransferEligibilityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTransferEligibilityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTransferEligibilityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTransferEligibilityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTransferEligibilityResponse.Merge(m, src)
}
func (m *QueryTransferEligibilityResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTransferEligibilityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTransferEligibilityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTransferEligibilityResponse proto.InternalMessageInfo

func (m *QueryTransferEligibilityResponse) GetIsEligible() bool {
	if m != nil {
		return m.IsEligible
	}
	return false
}

func (m *QueryTransferEligibilityResponse) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *QueryTransferEligibilityResponse) GetAlreadyTransferred() bool {
	if m != nil {
		return m.AlreadyTransferred
	}
	return false
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "inference.genesistransfer.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "inference.genesistransfer.QueryParamsResponse")
	proto.RegisterType((*QueryTransferStatusRequest)(nil), "inference.genesistransfer.QueryTransferStatusRequest")
	proto.RegisterType((*QueryTransferStatusResponse)(nil), "inference.genesistransfer.QueryTransferStatusResponse")
	proto.RegisterType((*QueryTransferHistoryRequest)(nil), "inference.genesistransfer.QueryTransferHistoryRequest")
	proto.RegisterType((*QueryTransferHistoryResponse)(nil), "inference.genesistransfer.QueryTransferHistoryResponse")
	proto.RegisterType((*QueryAllowedAccountsRequest)(nil), "inference.genesistransfer.QueryAllowedAccountsRequest")
	proto.RegisterType((*QueryAllowedAccountsResponse)(nil), "inference.genesistransfer.QueryAllowedAccountsResponse")
	proto.RegisterType((*QueryTransferEligibilityRequest)(nil), "inference.genesistransfer.QueryTransferEligibilityRequest")
	proto.RegisterType((*QueryTransferEligibilityResponse)(nil), "inference.genesistransfer.QueryTransferEligibilityResponse")
}

func init() {
	proto.RegisterFile("inference/genesistransfer/query.proto", fileDescriptor_e1df3317d4ed4316)
}

var fileDescriptor_e1df3317d4ed4316 = []byte{
	// 779 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x4b, 0x6f, 0xd3, 0x4a,
	0x14, 0x8e, 0x5b, 0xdd, 0xdc, 0x66, 0xaa, 0x9b, 0xf4, 0x4e, 0x2b, 0x54, 0x42, 0x49, 0x8b, 0xa5,
	0x3e, 0x25, 0x6c, 0x5a, 0xc4, 0x43, 0x2d, 0x9b, 0x56, 0x14, 0x10, 0x0f, 0xa9, 0xb8, 0x45, 0x42,
	0xb0, 0xb0, 0x26, 0xce, 0xd4, 0x1d, 0xc9, 0xf1, 0xb8, 0x33, 0x13, 0x20, 0x42, 0x6c, 0x58, 0xb3,
	0x40, 0x62, 0xc3, 0x96, 0x1d, 0x4b, 0x7e, 0x05, 0xea, 0xb2, 0x12, 0x2c, 0x58, 0x21, 0xd4, 0x22,
	0xc1, 0xbf, 0x00, 0x65, 0x66, 0xdc, 0xd6, 0x4e, 0xd2, 0x3c, 0x36, 0x91, 0x7d, 0x9e, 0xdf, 0x77,
	0xfc, 0x9d, 0xa3, 0x80, 0x69, 0x12, 0x6e, 0x63, 0x86, 0x43, 0x0f, 0xdb, 0x3e, 0x0e, 0x31, 0x27,
	0x5c, 0x30, 0x14, 0xf2, 0x6d, 0xcc, 0xec, 0xdd, 0x1a, 0x66, 0x75, 0x2b, 0x62, 0x54, 0x50, 0x78,
	0xf6, 0x28, 0xcc, 0x4a, 0x85, 0x15, 0xff, 0x47, 0x55, 0x12, 0x52, 0x5b, 0xfe, 0xaa, 0xe8, 0xe2,
	0x98, 0x4f, 0x7d, 0x2a, 0x1f, 0xed, 0xc6, 0x93, 0xb6, 0x4e, 0xf8, 0x94, 0xfa, 0x01, 0xb6, 0x51,
	0x44, 0x6c, 0x14, 0x86, 0x54, 0x20, 0x41, 0x68, 0xc8, 0xb5, 0x77, 0xc1, 0xa3, 0xbc, 0x4a, 0xb9,
	0x5d, 0x46, 0x1c, 0xab, 0xd6, 0xf6, 0xb3, 0xc5, 0x32, 0x16, 0x68, 0xd1, 0x8e, 0x90, 0x4f, 0x42,
	0x19, 0xac, 0x63, 0x67, 0xda, 0x83, 0x8e, 0x10, 0x43, 0xd5, 0xb8, 0xe6, 0x6c, 0xfb, 0x38, 0xfd,
	0xae, 0x02, 0xcd, 0x31, 0x00, 0x1f, 0x36, 0x5a, 0x6e, 0xc8, 0x6c, 0x07, 0xef, 0xd6, 0x30, 0x17,
	0xe6, 0x53, 0x30, 0x9a, 0xb0, 0xf2, 0x88, 0x86, 0x1c, 0xc3, 0x9b, 0x20, 0xab, 0xba, 0x8c, 0x1b,
	0x53, 0xc6, 0xdc, 0xf0, 0xd2, 0x05, 0xab, 0xed, 0x70, 0x2c, 0x95, 0xba, 0x96, 0xdb, 0xfb, 0x3e,
	0x99, 0xf9, 0xf8, 0xeb, 0xd3, 0x82, 0xe1, 0xe8, 0x5c, 0x73, 0x1d, 0x14, 0x65, 0xf1, 0x2d, 0x1d,
	0xba, 0x29, 0x90, 0xa8, 0xc5, 0xad, 0xe1, 0x2c, 0x28, 0xe8, 0x52, 0x2e, 0xaa, 0x54, 0x18, 0xe6,
	0xaa, 0x59, 0xce, 0xc9, 0x6b, 0xf3, 0xaa, 0xb2, 0x9a, 0xef, 0x0d, 0x70, 0xae, 0x65, 0x1d, 0x0d,
	0x76, 0x1a, 0xe4, 0x09, 0x77, 0x63, 0x3c, 0x0c, 0x57, 0x64, 0x9d, 0x21, 0xe7, 0x3f, 0xc2, 0xb7,
	0x8e, 0x8d, 0xd0, 0x01, 0x85, 0x38, 0xc6, 0x65, 0xd8, 0xa3, 0xac, 0x32, 0x3e, 0x20, 0xc9, 0xcd,
	0x9f, 0x42, 0x2e, 0x2e, 0xe0, 0xc8, 0x04, 0x27, 0x2f, 0x12, 0xef, 0x26, 0x4e, 0x21, 0xbb, 0x43,
	0xb8, 0xa0, 0xac, 0x1e, 0x53, 0xbc, 0x05, 0xc0, 0xf1, 0x87, 0xd5, 0xa3, 0x9c, 0xb1, 0x94, 0x0a,
	0xac, 0x86, 0x0a, 0x2c, 0x25, 0x40, 0xad, 0x02, 0x6b, 0x03, 0xf9, 0x58, 0xe7, 0x3a, 0x27, 0x32,
	0xcd, 0x3d, 0x03, 0x4c, 0xb4, 0xee, 0xa3, 0x47, 0xe0, 0x82, 0x91, 0x14, 0xb7, 0xc6, 0x30, 0x07,
	0x7b, 0x22, 0x77, 0xf2, 0x0b, 0x16, 0x92, 0x3c, 0x39, 0xbc, 0x9d, 0x60, 0xa2, 0xe6, 0x36, 0xdb,
	0x91, 0x89, 0x42, 0x97, 0xa0, 0x72, 0x5e, 0x4f, 0x6c, 0x35, 0x08, 0xe8, 0x73, 0x5c, 0x59, 0xf5,
	0x3c, 0x5a, 0x0b, 0xc5, 0x91, 0x1e, 0xb9, 0x26, 0xda, 0xe4, 0xd6, 0x44, 0xe7, 0xc1, 0x08, 0x52,
	0x2e, 0x17, 0x69, 0x9f, 0x24, 0x9a, 0x73, 0x0a, 0x28, 0x99, 0x02, 0xe7, 0xc0, 0x08, 0xc3, 0x5c,
	0x30, 0xe2, 0x09, 0x57, 0x50, 0x37, 0x20, 0x5c, 0x48, 0xe0, 0x43, 0x4e, 0x3e, 0xb6, 0x6f, 0xd1,
	0xfb, 0x84, 0x0b, 0xf3, 0x2e, 0x98, 0x4c, 0x4c, 0x77, 0x3d, 0x20, 0x3e, 0x29, 0x93, 0x80, 0x88,
	0x7a, 0xcf, 0x62, 0x7d, 0x63, 0x80, 0xa9, 0xf6, 0xc5, 0x34, 0x8b, 0x49, 0x30, 0x4c, 0xb8, 0x8b,
	0xa5, 0x27, 0xc0, 0x5a, 0xae, 0x80, 0xf0, 0x75, 0x6d, 0x81, 0x67, 0x40, 0x96, 0x61, 0xc4, 0xf5,
	0xa8, 0x73, 0x8e, 0x7e, 0x83, 0x36, 0x18, 0x45, 0x01, 0xc3, 0xa8, 0x52, 0x4f, 0xe8, 0x7d, 0x50,
	0x16, 0x80, 0xda, 0x75, 0x42, 0xf4, 0x4b, 0x7f, 0xfe, 0x05, 0xff, 0x48, 0x38, 0xf0, 0x83, 0x01,
	0xb2, 0x6a, 0x55, 0xe1, 0xc5, 0x53, 0x34, 0xd1, 0x7c, 0x23, 0x8a, 0x56, 0xb7, 0xe1, 0x8a, 0x9d,
	0x79, 0xfd, 0xf5, 0x97, 0x9f, 0xef, 0x06, 0x96, 0xe0, 0x25, 0x3b, 0x62, 0xb4, 0x52, 0xf3, 0x04,
	0xf7, 0x88, 0x3c, 0x50, 0x9d, 0x4e, 0x1a, 0xfc, 0x6a, 0x80, 0x7c, 0x72, 0xc9, 0xe1, 0x95, 0x4e,
	0xcd, 0x5b, 0x1e, 0x97, 0xe2, 0xd5, 0x5e, 0xd3, 0x34, 0xf6, 0x4d, 0x89, 0xfd, 0x01, 0xbc, 0xd7,
	0x3d, 0xf6, 0xa3, 0xc5, 0xe3, 0xb2, 0x94, 0xfd, 0x32, 0x25, 0x94, 0x57, 0xf0, 0xb3, 0x01, 0x0a,
	0xa9, 0xcd, 0x85, 0x5d, 0x03, 0x4c, 0x9e, 0x94, 0xe2, 0xb5, 0x9e, 0xf3, 0x34, 0xb3, 0x35, 0xc9,
	0xec, 0x06, 0x5c, 0xee, 0x83, 0xd9, 0x8e, 0x06, 0xdd, 0x20, 0x92, 0xda, 0xcc, 0xce, 0x44, 0x5a,
	0x6f, 0x7a, 0x67, 0x22, 0x6d, 0x4e, 0x40, 0x3f, 0x44, 0xd2, 0x27, 0x03, 0xfe, 0x36, 0xc0, 0x68,
	0x8b, 0x05, 0x85, 0xcb, 0xdd, 0x4e, 0xb7, 0xf9, 0x44, 0x14, 0x57, 0xfa, 0xca, 0xd5, 0xa4, 0x1e,
	0x4b, 0x52, 0x0e, 0xdc, 0xe8, 0xe3, 0xeb, 0xe0, 0xe3, 0x7a, 0xcd, 0xe2, 0x5b, 0x7b, 0xb4, 0x77,
	0x50, 0x32, 0xf6, 0x0f, 0x4a, 0xc6, 0x8f, 0x83, 0x92, 0xf1, 0xf6, 0xb0, 0x94, 0xd9, 0x3f, 0x2c,
	0x65, 0xbe, 0x1d, 0x96, 0x32, 0x4f, 0x56, 0x7c, 0x22, 0x76, 0x6a, 0x65, 0xcb, 0xa3, 0xd5, 0xf6,
	0x5d, 0x5f, 0x34, 0xf7, 0xad, 0x47, 0x98, 0x97, 0xb3, 0xf2, 0x5f, 0xc5, 0xe5, 0xbf, 0x01, 0x00,
	0x00, 0xff, 0xff, 0xcb, 0xe7, 0xcb, 0x7e, 0x5d, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// TransferStatus queries the completion status for a specific genesis account.
	TransferStatus(ctx context.Context, in *QueryTransferStatusRequest, opts ...grpc.CallOption) (*QueryTransferStatusResponse, error)
	// TransferHistory retrieves historical transfer records with optional pagination.
	TransferHistory(ctx context.Context, in *QueryTransferHistoryRequest, opts ...grpc.CallOption) (*QueryTransferHistoryResponse, error)
	// AllowedAccounts queries the whitelist of accounts eligible for transfer (if enabled).
	AllowedAccounts(ctx context.Context, in *QueryAllowedAccountsRequest, opts ...grpc.CallOption) (*QueryAllowedAccountsResponse, error)
	// TransferEligibility validates whether a specific account can be transferred.
	TransferEligibility(ctx context.Context, in *QueryTransferEligibilityRequest, opts ...grpc.CallOption) (*QueryTransferEligibilityResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/inference.genesistransfer.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TransferStatus(ctx context.Context, in *QueryTransferStatusRequest, opts ...grpc.CallOption) (*QueryTransferStatusResponse, error) {
	out := new(QueryTransferStatusResponse)
	err := c.cc.Invoke(ctx, "/inference.genesistransfer.Query/TransferStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TransferHistory(ctx context.Context, in *QueryTransferHistoryRequest, opts ...grpc.CallOption) (*QueryTransferHistoryResponse, error) {
	out := new(QueryTransferHistoryResponse)
	err := c.cc.Invoke(ctx, "/inference.genesistransfer.Query/TransferHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllowedAccounts(ctx context.Context, in *QueryAllowedAccountsRequest, opts ...grpc.CallOption) (*QueryAllowedAccountsResponse, error) {
	out := new(QueryAllowedAccountsResponse)
	err := c.cc.Invoke(ctx, "/inference.genesistransfer.Query/AllowedAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TransferEligibility(ctx context.Context, in *QueryTransferEligibilityRequest, opts ...grpc.CallOption) (*QueryTransferEligibilityResponse, error) {
	out := new(QueryTransferEligibilityResponse)
	err := c.cc.Invoke(ctx, "/inference.genesistransfer.Query/TransferEligibility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// TransferStatus queries the completion status for a specific genesis account.
	TransferStatus(context.Context, *QueryTransferStatusRequest) (*QueryTransferStatusResponse, error)
	// TransferHistory retrieves historical transfer records with optional pagination.
	TransferHistory(context.Context, *QueryTransferHistoryRequest) (*QueryTransferHistoryResponse, error)
	// AllowedAccounts queries the whitelist of accounts eligible for transfer (if enabled).
	AllowedAccounts(context.Context, *QueryAllowedAccountsRequest) (*QueryAllowedAccountsResponse, error)
	// TransferEligibility validates whether a specific account can be transferred.
	TransferEligibility(context.Context, *QueryTransferEligibilityRequest) (*QueryTransferEligibilityResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) TransferStatus(ctx context.Context, req *QueryTransferStatusRequest) (*QueryTransferStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferStatus not implemented")
}
func (*UnimplementedQueryServer) TransferHistory(ctx context.Context, req *QueryTransferHistoryRequest) (*QueryTransferHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferHistory not implemented")
}
func (*UnimplementedQueryServer) AllowedAccounts(ctx context.Context, req *QueryAllowedAccountsRequest) (*QueryAllowedAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllowedAccounts not implemented")
}
func (*UnimplementedQueryServer) TransferEligibility(ctx context.Context, req *QueryTransferEligibilityRequest) (*QueryTransferEligibilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferEligibility not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.genesistransfer.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TransferStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTransferStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TransferStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.genesistransfer.Query/TransferStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TransferStatus(ctx, req.(*QueryTransferStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TransferHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTransferHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TransferHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.genesistransfer.Query/TransferHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TransferHistory(ctx, req.(*QueryTransferHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllowedAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllowedAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllowedAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.genesistransfer.Query/AllowedAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllowedAccounts(ctx, req.(*QueryAllowedAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TransferEligibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTransferEligibilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TransferEligibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.genesistransfer.Query/TransferEligibility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TransferEligibility(ctx, req.(*QueryTransferEligibilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "inference.genesistransfer.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "TransferStatus",
			Handler:    _Query_TransferStatus_Handler,
		},
		{
			MethodName: "TransferHistory",
			Handler:    _Query_TransferHistory_Handler,
		},
		{
			MethodName: "AllowedAccounts",
			Handler:    _Query_AllowedAccounts_Handler,
		},
		{
			MethodName: "TransferEligibility",
			Handler:    _Query_TransferEligibility_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inference/genesistransfer/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTransferStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTransferStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTransferStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GenesisAddress) > 0 {
		i -= len(m.GenesisAddress)
		copy(dAtA[i:], m.GenesisAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.GenesisAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTransferStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTransferStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTransferStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TransferRecord != nil {
		{
			size, err := m.TransferRecord.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.IsTransferred {
		i--
		if m.IsTransferred {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTransferHistoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTransferHistoryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTransferHistoryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTransferHistoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTransferHistoryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTransferHistoryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TransferRecords) > 0 {
		for iNdEx := len(m.TransferRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TransferRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllowedAccountsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllowedAccountsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllowedAccountsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAllowedAccountsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllowedAccountsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllowedAccountsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RestrictToList {
		i--
		if m.RestrictToList {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.AllowedAccounts) > 0 {
		for iNdEx := len(m.AllowedAccounts) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AllowedAccounts[iNdEx])
			copy(dAtA[i:], m.AllowedAccounts[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.AllowedAccounts[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTransferEligibilityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTransferEligibilityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTransferEligibilityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GenesisAddress) > 0 {
		i -= len(m.GenesisAddress)
		copy(dAtA[i:], m.GenesisAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.GenesisAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTransferEligibilityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTransferEligibilityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTransferEligibilityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AlreadyTransferred {
		i--
		if m.AlreadyTransferred {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x12
	}
	if m.IsEligible {
		i--
		if m.IsEligible {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTransferStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GenesisAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTransferStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsTransferred {
		n += 2
	}
	if m.TransferRecord != nil {
		l = m.TransferRecord.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTransferHistoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTransferHistoryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TransferRecords) > 0 {
		for _, e := range m.TransferRecords {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllowedAccountsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAllowedAccountsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AllowedAccounts) > 0 {
		for _, s := range m.AllowedAccounts {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.RestrictToList {
		n += 2
	}
	return n
}

func (m *QueryTransferEligibilityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GenesisAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTransferEligibilityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsEligible {
		n += 2
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.AlreadyTransferred {
		n += 2
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTransferStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTransferStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTransferStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GenesisAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTransferStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTransferStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTransferStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTransferred", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsTransferred = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TransferRecord == nil {
				m.TransferRecord = &TransferRecord{}
			}
			if err := m.TransferRecord.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTransferHistoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTransferHistoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTransferHistoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTransferHistoryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTransferHistoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTransferHistoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransferRecords = append(m.TransferRecords, TransferRecord{})
			if err := m.TransferRecords[len(m.TransferRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllowedAccountsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllowedAccountsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllowedAccountsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllowedAccountsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllowedAccountsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllowedAccountsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedAccounts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedAccounts = append(m.AllowedAccounts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestrictToList", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RestrictToList = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTransferEligibilityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTransferEligibilityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTransferEligibilityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GenesisAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTransferEligibilityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTransferEligibilityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTransferEligibilityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEligible", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEligible = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlreadyTransferred", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AlreadyTransferred = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)

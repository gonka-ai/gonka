// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: inference/bls/params.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the module.
type Params struct {
	// Total number of slots for DKG (e.g., 100 for PoC)
	ITotalSlots uint32 `protobuf:"varint,1,opt,name=i_total_slots,json=iTotalSlots,proto3" json:"i_total_slots,omitempty"`
	// Polynomial degree offset (e.g., floor(i_total_slots / 2))
	TSlotsDegreeOffset uint32 `protobuf:"varint,2,opt,name=t_slots_degree_offset,json=tSlotsDegreeOffset,proto3" json:"t_slots_degree_offset,omitempty"`
	// Duration in blocks for the dealing phase (e.g., 5 blocks for PoC)
	DealingPhaseDurationBlocks int64 `protobuf:"varint,3,opt,name=dealing_phase_duration_blocks,json=dealingPhaseDurationBlocks,proto3" json:"dealing_phase_duration_blocks,omitempty"`
	// Duration in blocks for the verification phase (e.g., 3 blocks for PoC)
	VerificationPhaseDurationBlocks int64 `protobuf:"varint,4,opt,name=verification_phase_duration_blocks,json=verificationPhaseDurationBlocks,proto3" json:"verification_phase_duration_blocks,omitempty"`
	// Duration in blocks for threshold signing deadline (e.g., 10 blocks for PoC)
	SigningDeadlineBlocks int64 `protobuf:"varint,5,opt,name=signing_deadline_blocks,json=signingDeadlineBlocks,proto3" json:"signing_deadline_blocks,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef541167904df278, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetITotalSlots() uint32 {
	if m != nil {
		return m.ITotalSlots
	}
	return 0
}

func (m *Params) GetTSlotsDegreeOffset() uint32 {
	if m != nil {
		return m.TSlotsDegreeOffset
	}
	return 0
}

func (m *Params) GetDealingPhaseDurationBlocks() int64 {
	if m != nil {
		return m.DealingPhaseDurationBlocks
	}
	return 0
}

func (m *Params) GetVerificationPhaseDurationBlocks() int64 {
	if m != nil {
		return m.VerificationPhaseDurationBlocks
	}
	return 0
}

func (m *Params) GetSigningDeadlineBlocks() int64 {
	if m != nil {
		return m.SigningDeadlineBlocks
	}
	return 0
}

// PartialSignature represents a partial signature from a single participant in threshold signing
type PartialSignature struct {
	// participant_address is the address of the participant who submitted this partial signature
	ParticipantAddress string `protobuf:"bytes,1,opt,name=participant_address,json=participantAddress,proto3" json:"participant_address,omitempty"`
	// slot_indices are the slot indices this participant is signing for (from their current epoch assignment)
	SlotIndices []uint32 `protobuf:"varint,2,rep,packed,name=slot_indices,json=slotIndices,proto3" json:"slot_indices,omitempty"`
	// signature is the BLS partial signature (G1 point, 48-byte compressed format)
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *PartialSignature) Reset()         { *m = PartialSignature{} }
func (m *PartialSignature) String() string { return proto.CompactTextString(m) }
func (*PartialSignature) ProtoMessage()    {}
func (*PartialSignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef541167904df278, []int{1}
}
func (m *PartialSignature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartialSignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PartialSignature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PartialSignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartialSignature.Merge(m, src)
}
func (m *PartialSignature) XXX_Size() int {
	return m.Size()
}
func (m *PartialSignature) XXX_DiscardUnknown() {
	xxx_messageInfo_PartialSignature.DiscardUnknown(m)
}

var xxx_messageInfo_PartialSignature proto.InternalMessageInfo

func (m *PartialSignature) GetParticipantAddress() string {
	if m != nil {
		return m.ParticipantAddress
	}
	return ""
}

func (m *PartialSignature) GetSlotIndices() []uint32 {
	if m != nil {
		return m.SlotIndices
	}
	return nil
}

func (m *PartialSignature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterType((*Params)(nil), "inference.bls.Params")
	proto.RegisterType((*PartialSignature)(nil), "inference.bls.PartialSignature")
}

func init() { proto.RegisterFile("inference/bls/params.proto", fileDescriptor_ef541167904df278) }

var fileDescriptor_ef541167904df278 = []byte{
	// 446 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xb1, 0x8e, 0x13, 0x31,
	0x10, 0x86, 0xb3, 0x09, 0x9c, 0x74, 0xe6, 0x22, 0x81, 0xb9, 0x83, 0x25, 0x82, 0x4d, 0x48, 0x75,
	0x42, 0x22, 0x2b, 0x84, 0x44, 0x41, 0x77, 0x51, 0x9a, 0x88, 0x82, 0x28, 0xa1, 0xa2, 0xb1, 0xbc,
	0xb6, 0xb3, 0x37, 0x62, 0x63, 0xaf, 0x3c, 0x5e, 0x04, 0xaf, 0x40, 0xc5, 0x13, 0x20, 0x1e, 0x81,
	0x82, 0x87, 0xb8, 0xf2, 0x44, 0x45, 0x89, 0x92, 0x02, 0x1e, 0x03, 0xd9, 0xde, 0xe3, 0x4e, 0xe8,
	0x9a, 0xd5, 0xfa, 0xff, 0xfe, 0xf9, 0xbd, 0x33, 0xb3, 0x64, 0x00, 0x7a, 0xad, 0xac, 0xd2, 0x42,
	0xe5, 0x45, 0x85, 0x79, 0xcd, 0x2d, 0xdf, 0xe0, 0xa4, 0xb6, 0xc6, 0x19, 0xda, 0xff, 0xc7, 0x26,
	0x45, 0x85, 0x83, 0x3b, 0x7c, 0x03, 0xda, 0xe4, 0xe1, 0x19, 0x1d, 0x83, 0x07, 0xc2, 0xe0, 0xc6,
	0x20, 0x0b, 0xa7, 0x3c, 0x1e, 0x5a, 0x74, 0x58, 0x9a, 0xd2, 0x44, 0xdd, 0xbf, 0x45, 0x75, 0x7c,
	0xd6, 0x25, 0x7b, 0x8b, 0x70, 0x07, 0x1d, 0x93, 0x3e, 0x30, 0x67, 0x1c, 0xaf, 0x18, 0x56, 0xc6,
	0x61, 0x9a, 0x8c, 0x92, 0xe3, 0xfe, 0xf2, 0x16, 0xbc, 0xf1, 0xda, 0xca, 0x4b, 0xf4, 0x19, 0x39,
	0x72, 0x91, 0x32, 0xa9, 0x4a, 0xab, 0x14, 0x33, 0xeb, 0x35, 0x2a, 0x97, 0x76, 0x83, 0x97, 0xba,
	0x60, 0x9b, 0x05, 0xf4, 0x3a, 0x10, 0x7a, 0x42, 0x1e, 0x49, 0xc5, 0x2b, 0xd0, 0x25, 0xab, 0x4f,
	0x39, 0x2a, 0x26, 0x1b, 0xcb, 0x1d, 0x18, 0xcd, 0x8a, 0xca, 0x88, 0x77, 0x98, 0xf6, 0x46, 0xc9,
	0x71, 0x6f, 0x39, 0x68, 0x4d, 0x0b, 0xef, 0x99, 0xb5, 0x96, 0x69, 0x70, 0xd0, 0x57, 0x64, 0xfc,
	0x5e, 0x59, 0x58, 0x83, 0x88, 0x85, 0xd7, 0xe7, 0xdc, 0x08, 0x39, 0xc3, 0xab, 0xce, 0xeb, 0xc2,
	0x5e, 0x90, 0xfb, 0x08, 0xa5, 0xf6, 0xdf, 0x23, 0x15, 0x97, 0x15, 0x68, 0x75, 0x91, 0x70, 0x33,
	0x24, 0x1c, 0xb5, 0x78, 0xd6, 0xd2, 0x58, 0xf7, 0x72, 0xf8, 0xe7, 0xeb, 0x30, 0xf9, 0xf4, 0xfb,
	0xdb, 0x93, 0x7b, 0x97, 0x1b, 0xfa, 0x10, 0x76, 0x14, 0xe7, 0x37, 0xfe, 0x92, 0x90, 0xdb, 0x0b,
	0x6e, 0x1d, 0xf0, 0x6a, 0x05, 0xa5, 0xe6, 0xae, 0xb1, 0x8a, 0xce, 0xc9, 0xdd, 0xda, 0x6b, 0x02,
	0x6a, 0xae, 0x1d, 0xe3, 0x52, 0x5a, 0x85, 0x71, 0xb4, 0xfb, 0xd3, 0xf4, 0xc7, 0xf7, 0xa7, 0x87,
	0xed, 0x92, 0x4e, 0x22, 0x59, 0x39, 0x0b, 0xba, 0x5c, 0xd2, 0x2b, 0x45, 0x2d, 0xa1, 0x8f, 0xc9,
	0x81, 0x9f, 0x3c, 0x03, 0x2d, 0x41, 0x28, 0x4c, 0xbb, 0xa3, 0x9e, 0x5f, 0x8f, 0xd7, 0xe6, 0x51,
	0xa2, 0x0f, 0xc9, 0x3e, 0x5e, 0x5c, 0x1d, 0xe6, 0x7a, 0xb0, 0xbc, 0x14, 0xa6, 0xf3, 0xb3, 0x6d,
	0x96, 0x9c, 0x6f, 0xb3, 0xe4, 0xd7, 0x36, 0x4b, 0x3e, 0xef, 0xb2, 0xce, 0xf9, 0x2e, 0xeb, 0xfc,
	0xdc, 0x65, 0x9d, 0xb7, 0x79, 0x09, 0xee, 0xb4, 0x29, 0x26, 0xc2, 0x6c, 0xf2, 0xda, 0x1a, 0xd9,
	0x08, 0x87, 0x02, 0x42, 0x8b, 0xff, 0x37, 0xeb, 0x3e, 0xd6, 0x0a, 0x8b, 0xbd, 0xf0, 0xf7, 0x3c,
	0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xc2, 0x17, 0xb3, 0x19, 0xae, 0x02, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ITotalSlots != that1.ITotalSlots {
		return false
	}
	if this.TSlotsDegreeOffset != that1.TSlotsDegreeOffset {
		return false
	}
	if this.DealingPhaseDurationBlocks != that1.DealingPhaseDurationBlocks {
		return false
	}
	if this.VerificationPhaseDurationBlocks != that1.VerificationPhaseDurationBlocks {
		return false
	}
	if this.SigningDeadlineBlocks != that1.SigningDeadlineBlocks {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SigningDeadlineBlocks != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.SigningDeadlineBlocks))
		i--
		dAtA[i] = 0x28
	}
	if m.VerificationPhaseDurationBlocks != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.VerificationPhaseDurationBlocks))
		i--
		dAtA[i] = 0x20
	}
	if m.DealingPhaseDurationBlocks != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.DealingPhaseDurationBlocks))
		i--
		dAtA[i] = 0x18
	}
	if m.TSlotsDegreeOffset != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.TSlotsDegreeOffset))
		i--
		dAtA[i] = 0x10
	}
	if m.ITotalSlots != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.ITotalSlots))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PartialSignature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartialSignature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartialSignature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintParams(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SlotIndices) > 0 {
		dAtA2 := make([]byte, len(m.SlotIndices)*10)
		var j1 int
		for _, num := range m.SlotIndices {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintParams(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ParticipantAddress) > 0 {
		i -= len(m.ParticipantAddress)
		copy(dAtA[i:], m.ParticipantAddress)
		i = encodeVarintParams(dAtA, i, uint64(len(m.ParticipantAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ITotalSlots != 0 {
		n += 1 + sovParams(uint64(m.ITotalSlots))
	}
	if m.TSlotsDegreeOffset != 0 {
		n += 1 + sovParams(uint64(m.TSlotsDegreeOffset))
	}
	if m.DealingPhaseDurationBlocks != 0 {
		n += 1 + sovParams(uint64(m.DealingPhaseDurationBlocks))
	}
	if m.VerificationPhaseDurationBlocks != 0 {
		n += 1 + sovParams(uint64(m.VerificationPhaseDurationBlocks))
	}
	if m.SigningDeadlineBlocks != 0 {
		n += 1 + sovParams(uint64(m.SigningDeadlineBlocks))
	}
	return n
}

func (m *PartialSignature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ParticipantAddress)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if len(m.SlotIndices) > 0 {
		l = 0
		for _, e := range m.SlotIndices {
			l += sovParams(uint64(e))
		}
		n += 1 + sovParams(uint64(l)) + l
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ITotalSlots", wireType)
			}
			m.ITotalSlots = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ITotalSlots |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TSlotsDegreeOffset", wireType)
			}
			m.TSlotsDegreeOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TSlotsDegreeOffset |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DealingPhaseDurationBlocks", wireType)
			}
			m.DealingPhaseDurationBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DealingPhaseDurationBlocks |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationPhaseDurationBlocks", wireType)
			}
			m.VerificationPhaseDurationBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VerificationPhaseDurationBlocks |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigningDeadlineBlocks", wireType)
			}
			m.SigningDeadlineBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SigningDeadlineBlocks |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartialSignature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartialSignature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartialSignature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParticipantAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowParams
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SlotIndices = append(m.SlotIndices, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowParams
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthParams
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthParams
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SlotIndices) == 0 {
					m.SlotIndices = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowParams
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SlotIndices = append(m.SlotIndices, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotIndices", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: inference/bls/group_validation.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GroupKeyValidationStatus defines the status of a group key validation process
type GroupKeyValidationStatus int32

const (
	// COLLECTING_SIGNATURES indicates validation is in progress, collecting partial signatures
	GroupKeyValidationStatus_GROUP_KEY_VALIDATION_STATUS_COLLECTING_SIGNATURES GroupKeyValidationStatus = 0
	// VALIDATED indicates validation completed successfully with sufficient signatures
	GroupKeyValidationStatus_GROUP_KEY_VALIDATION_STATUS_VALIDATED GroupKeyValidationStatus = 1
	// VALIDATION_FAILED indicates validation failed due to insufficient participation or invalid signatures
	GroupKeyValidationStatus_GROUP_KEY_VALIDATION_STATUS_VALIDATION_FAILED GroupKeyValidationStatus = 2
)

var GroupKeyValidationStatus_name = map[int32]string{
	0: "GROUP_KEY_VALIDATION_STATUS_COLLECTING_SIGNATURES",
	1: "GROUP_KEY_VALIDATION_STATUS_VALIDATED",
	2: "GROUP_KEY_VALIDATION_STATUS_VALIDATION_FAILED",
}

var GroupKeyValidationStatus_value = map[string]int32{
	"GROUP_KEY_VALIDATION_STATUS_COLLECTING_SIGNATURES": 0,
	"GROUP_KEY_VALIDATION_STATUS_VALIDATED":             1,
	"GROUP_KEY_VALIDATION_STATUS_VALIDATION_FAILED":     2,
}

func (x GroupKeyValidationStatus) String() string {
	return proto.EnumName(GroupKeyValidationStatus_name, int32(x))
}

func (GroupKeyValidationStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_eb7b6f0307462ce4, []int{0}
}

// GroupKeyValidationState contains the state of a group key validation process for a specific epoch
type GroupKeyValidationState struct {
	// new_epoch_index is the epoch index of the new epoch whose group public key is being validated
	NewEpochIndex uint64 `protobuf:"varint,1,opt,name=new_epoch_index,json=newEpochIndex,proto3" json:"new_epoch_index,omitempty"`
	// previous_epoch_index is the epoch index of the previous epoch whose validators are performing the validation
	PreviousEpochIndex uint64 `protobuf:"varint,2,opt,name=previous_epoch_index,json=previousEpochIndex,proto3" json:"previous_epoch_index,omitempty"`
	// status indicates the current status of the validation process
	Status GroupKeyValidationStatus `protobuf:"varint,3,opt,name=status,proto3,enum=inference.bls.GroupKeyValidationStatus" json:"status,omitempty"`
	// partial_signatures contains all partial signatures received from participants
	PartialSignatures []PartialSignature `protobuf:"bytes,4,rep,name=partial_signatures,json=partialSignatures,proto3" json:"partial_signatures"`
	// final_signature is the aggregated signature when validation completes successfully (G1 point, 48-byte compressed)
	FinalSignature []byte `protobuf:"bytes,5,opt,name=final_signature,json=finalSignature,proto3" json:"final_signature,omitempty"`
	// message_hash is the keccak256 hash of the encoded validation data that participants sign
	MessageHash []byte `protobuf:"bytes,6,opt,name=message_hash,json=messageHash,proto3" json:"message_hash,omitempty"`
	// slots_covered tracks the total number of slots covered by valid partial signatures received
	SlotsCovered uint32 `protobuf:"varint,7,opt,name=slots_covered,json=slotsCovered,proto3" json:"slots_covered,omitempty"`
}

func (m *GroupKeyValidationState) Reset()         { *m = GroupKeyValidationState{} }
func (m *GroupKeyValidationState) String() string { return proto.CompactTextString(m) }
func (*GroupKeyValidationState) ProtoMessage()    {}
func (*GroupKeyValidationState) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb7b6f0307462ce4, []int{0}
}
func (m *GroupKeyValidationState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupKeyValidationState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupKeyValidationState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupKeyValidationState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupKeyValidationState.Merge(m, src)
}
func (m *GroupKeyValidationState) XXX_Size() int {
	return m.Size()
}
func (m *GroupKeyValidationState) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupKeyValidationState.DiscardUnknown(m)
}

var xxx_messageInfo_GroupKeyValidationState proto.InternalMessageInfo

func (m *GroupKeyValidationState) GetNewEpochIndex() uint64 {
	if m != nil {
		return m.NewEpochIndex
	}
	return 0
}

func (m *GroupKeyValidationState) GetPreviousEpochIndex() uint64 {
	if m != nil {
		return m.PreviousEpochIndex
	}
	return 0
}

func (m *GroupKeyValidationState) GetStatus() GroupKeyValidationStatus {
	if m != nil {
		return m.Status
	}
	return GroupKeyValidationStatus_GROUP_KEY_VALIDATION_STATUS_COLLECTING_SIGNATURES
}

func (m *GroupKeyValidationState) GetPartialSignatures() []PartialSignature {
	if m != nil {
		return m.PartialSignatures
	}
	return nil
}

func (m *GroupKeyValidationState) GetFinalSignature() []byte {
	if m != nil {
		return m.FinalSignature
	}
	return nil
}

func (m *GroupKeyValidationState) GetMessageHash() []byte {
	if m != nil {
		return m.MessageHash
	}
	return nil
}

func (m *GroupKeyValidationState) GetSlotsCovered() uint32 {
	if m != nil {
		return m.SlotsCovered
	}
	return 0
}

func init() {
	proto.RegisterEnum("inference.bls.GroupKeyValidationStatus", GroupKeyValidationStatus_name, GroupKeyValidationStatus_value)
	proto.RegisterType((*GroupKeyValidationState)(nil), "inference.bls.GroupKeyValidationState")
}

func init() {
	proto.RegisterFile("inference/bls/group_validation.proto", fileDescriptor_eb7b6f0307462ce4)
}

var fileDescriptor_eb7b6f0307462ce4 = []byte{
	// 480 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xcf, 0x6a, 0xdb, 0x40,
	0x10, 0x87, 0xbd, 0x89, 0xeb, 0xc2, 0xc6, 0x4e, 0x9c, 0x25, 0x50, 0xe1, 0x83, 0xa2, 0xfe, 0x8d,
	0x5a, 0xa8, 0xd4, 0xa4, 0xf4, 0x5c, 0x14, 0x5b, 0x75, 0x45, 0x8c, 0x1d, 0x24, 0x39, 0xd0, 0x5e,
	0x96, 0xb5, 0xbc, 0x91, 0x16, 0x64, 0xad, 0xd0, 0xae, 0x9c, 0xe4, 0x2d, 0xfa, 0x26, 0x7d, 0x8d,
	0x1c, 0x73, 0xec, 0xa9, 0x14, 0xfb, 0x31, 0x7a, 0x29, 0x92, 0x1d, 0x37, 0x0e, 0x6d, 0xe9, 0x45,
	0x2c, 0xdf, 0x7c, 0x33, 0xa3, 0x81, 0x1f, 0x7c, 0xc6, 0x92, 0x73, 0x9a, 0xd1, 0x24, 0xa0, 0xe6,
	0x28, 0x16, 0x66, 0x98, 0xf1, 0x3c, 0xc5, 0x53, 0x12, 0xb3, 0x31, 0x91, 0x8c, 0x27, 0x46, 0x9a,
	0x71, 0xc9, 0x51, 0x63, 0x65, 0x19, 0xa3, 0x58, 0xb4, 0x76, 0xc9, 0x84, 0x25, 0xdc, 0x2c, 0xbf,
	0x0b, 0xa3, 0xb5, 0x17, 0xf2, 0x90, 0x97, 0x4f, 0xb3, 0x78, 0x2d, 0x69, 0x6b, 0x7d, 0x7a, 0x4a,
	0x32, 0x32, 0x11, 0x8b, 0xda, 0x93, 0x9f, 0x1b, 0xf0, 0x51, 0xb7, 0x58, 0x77, 0x42, 0xaf, 0xce,
	0x56, 0x0b, 0x3d, 0x49, 0x24, 0x45, 0x2f, 0xe0, 0x4e, 0x42, 0x2f, 0x30, 0x4d, 0x79, 0x10, 0x61,
	0x96, 0x8c, 0xe9, 0xa5, 0x02, 0x34, 0xa0, 0x57, 0xdd, 0x46, 0x42, 0x2f, 0xec, 0x82, 0x3a, 0x05,
	0x44, 0x6f, 0xe0, 0x5e, 0x9a, 0xd1, 0x29, 0xe3, 0xb9, 0x58, 0x93, 0x37, 0x4a, 0x19, 0xdd, 0xd6,
	0xee, 0x74, 0xbc, 0x87, 0x35, 0x21, 0x89, 0xcc, 0x85, 0xb2, 0xa9, 0x01, 0x7d, 0xfb, 0xe8, 0xc0,
	0x58, 0x3b, 0xcd, 0xf8, 0xf3, 0x1f, 0xe5, 0xc2, 0x5d, 0xb6, 0x21, 0x1f, 0xa2, 0x94, 0x64, 0x92,
	0x91, 0x18, 0x0b, 0x16, 0x26, 0x44, 0xe6, 0x19, 0x15, 0x4a, 0x55, 0xdb, 0xd4, 0xb7, 0x8e, 0xf6,
	0xef, 0x0d, 0x3b, 0x5d, 0x88, 0xde, 0xad, 0x77, 0x5c, 0xbd, 0xfe, 0xbe, 0x5f, 0x71, 0x77, 0xd3,
	0x7b, 0x5c, 0xa0, 0x03, 0xb8, 0x73, 0xce, 0x92, 0xbb, 0x33, 0x95, 0x07, 0x1a, 0xd0, 0xeb, 0xee,
	0x76, 0x89, 0x57, 0x26, 0x7a, 0x0c, 0xeb, 0x13, 0x2a, 0x04, 0x09, 0x29, 0x8e, 0x88, 0x88, 0x94,
	0x5a, 0x69, 0x6d, 0x2d, 0xd9, 0x47, 0x22, 0x22, 0xf4, 0x14, 0x36, 0x44, 0xcc, 0xa5, 0xc0, 0x01,
	0x9f, 0xd2, 0x8c, 0x8e, 0x95, 0x87, 0x1a, 0xd0, 0x1b, 0x6e, 0xbd, 0x84, 0xed, 0x05, 0x7b, 0xf5,
	0x15, 0x40, 0xe5, 0x6f, 0xb7, 0xa2, 0x77, 0xf0, 0xb0, 0xeb, 0x0e, 0x86, 0xa7, 0xf8, 0xc4, 0xfe,
	0x84, 0xcf, 0xac, 0x9e, 0xd3, 0xb1, 0x7c, 0x67, 0xd0, 0xc7, 0x9e, 0x6f, 0xf9, 0x43, 0x0f, 0xb7,
	0x07, 0xbd, 0x9e, 0xdd, 0xf6, 0x9d, 0x7e, 0x17, 0x7b, 0x4e, 0xb7, 0x6f, 0xf9, 0x43, 0xd7, 0xf6,
	0x9a, 0x15, 0xf4, 0x12, 0x3e, 0xff, 0x57, 0xdb, 0x92, 0xd8, 0x9d, 0x26, 0x40, 0x87, 0xf0, 0xf5,
	0x7f, 0xa8, 0x05, 0xf9, 0x60, 0x39, 0x3d, 0xbb, 0xd3, 0xdc, 0x38, 0x76, 0xae, 0x67, 0x2a, 0xb8,
	0x99, 0xa9, 0xe0, 0xc7, 0x4c, 0x05, 0x5f, 0xe6, 0x6a, 0xe5, 0x66, 0xae, 0x56, 0xbe, 0xcd, 0xd5,
	0xca, 0x67, 0x33, 0x64, 0x32, 0xca, 0x47, 0x46, 0xc0, 0x27, 0x66, 0x9a, 0xf1, 0x71, 0x1e, 0x48,
	0x11, 0xb0, 0x32, 0x75, 0xbf, 0xf3, 0x77, 0x59, 0x26, 0x50, 0x5e, 0xa5, 0x54, 0x8c, 0x6a, 0x65,
	0x02, 0xdf, 0xfe, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x6d, 0xd1, 0xb1, 0xcd, 0xfd, 0x02, 0x00, 0x00,
}

func (m *GroupKeyValidationState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupKeyValidationState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupKeyValidationState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SlotsCovered != 0 {
		i = encodeVarintGroupValidation(dAtA, i, uint64(m.SlotsCovered))
		i--
		dAtA[i] = 0x38
	}
	if len(m.MessageHash) > 0 {
		i -= len(m.MessageHash)
		copy(dAtA[i:], m.MessageHash)
		i = encodeVarintGroupValidation(dAtA, i, uint64(len(m.MessageHash)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.FinalSignature) > 0 {
		i -= len(m.FinalSignature)
		copy(dAtA[i:], m.FinalSignature)
		i = encodeVarintGroupValidation(dAtA, i, uint64(len(m.FinalSignature)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PartialSignatures) > 0 {
		for iNdEx := len(m.PartialSignatures) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PartialSignatures[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGroupValidation(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Status != 0 {
		i = encodeVarintGroupValidation(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.PreviousEpochIndex != 0 {
		i = encodeVarintGroupValidation(dAtA, i, uint64(m.PreviousEpochIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.NewEpochIndex != 0 {
		i = encodeVarintGroupValidation(dAtA, i, uint64(m.NewEpochIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGroupValidation(dAtA []byte, offset int, v uint64) int {
	offset -= sovGroupValidation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GroupKeyValidationState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NewEpochIndex != 0 {
		n += 1 + sovGroupValidation(uint64(m.NewEpochIndex))
	}
	if m.PreviousEpochIndex != 0 {
		n += 1 + sovGroupValidation(uint64(m.PreviousEpochIndex))
	}
	if m.Status != 0 {
		n += 1 + sovGroupValidation(uint64(m.Status))
	}
	if len(m.PartialSignatures) > 0 {
		for _, e := range m.PartialSignatures {
			l = e.Size()
			n += 1 + l + sovGroupValidation(uint64(l))
		}
	}
	l = len(m.FinalSignature)
	if l > 0 {
		n += 1 + l + sovGroupValidation(uint64(l))
	}
	l = len(m.MessageHash)
	if l > 0 {
		n += 1 + l + sovGroupValidation(uint64(l))
	}
	if m.SlotsCovered != 0 {
		n += 1 + sovGroupValidation(uint64(m.SlotsCovered))
	}
	return n
}

func sovGroupValidation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGroupValidation(x uint64) (n int) {
	return sovGroupValidation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GroupKeyValidationState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroupValidation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupKeyValidationState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupKeyValidationState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewEpochIndex", wireType)
			}
			m.NewEpochIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewEpochIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousEpochIndex", wireType)
			}
			m.PreviousEpochIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreviousEpochIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= GroupKeyValidationStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartialSignatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroupValidation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGroupValidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartialSignatures = append(m.PartialSignatures, PartialSignature{})
			if err := m.PartialSignatures[len(m.PartialSignatures)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGroupValidation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGroupValidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FinalSignature = append(m.FinalSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.FinalSignature == nil {
				m.FinalSignature = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGroupValidation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGroupValidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageHash = append(m.MessageHash[:0], dAtA[iNdEx:postIndex]...)
			if m.MessageHash == nil {
				m.MessageHash = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotsCovered", wireType)
			}
			m.SlotsCovered = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlotsCovered |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroupValidation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroupValidation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGroupValidation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGroupValidation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGroupValidation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGroupValidation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGroupValidation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGroupValidation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGroupValidation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGroupValidation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGroupValidation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGroupValidation = fmt.Errorf("proto: unexpected end of group")
)

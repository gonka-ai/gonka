// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: inference/bls/events.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EventKeyGenerationInitiated is emitted when DKG is initiated for an epoch
type EventKeyGenerationInitiated struct {
	// epoch_id uniquely identifies this DKG round
	EpochId uint64 `protobuf:"varint,1,opt,name=epoch_id,json=epochId,proto3" json:"epoch_id,omitempty"`
	// i_total_slots is the total number of slots in the DKG
	ITotalSlots uint32 `protobuf:"varint,2,opt,name=i_total_slots,json=iTotalSlots,proto3" json:"i_total_slots,omitempty"`
	// t_slots_degree is the polynomial degree t for the threshold scheme
	TSlotsDegree uint32 `protobuf:"varint,3,opt,name=t_slots_degree,json=tSlotsDegree,proto3" json:"t_slots_degree,omitempty"`
	// participants contains information about all participants in this DKG round
	Participants []BLSParticipantInfo `protobuf:"bytes,4,rep,name=participants,proto3" json:"participants"`
}

func (m *EventKeyGenerationInitiated) Reset()         { *m = EventKeyGenerationInitiated{} }
func (m *EventKeyGenerationInitiated) String() string { return proto.CompactTextString(m) }
func (*EventKeyGenerationInitiated) ProtoMessage()    {}
func (*EventKeyGenerationInitiated) Descriptor() ([]byte, []int) {
	return fileDescriptor_96b42c6054f2dc42, []int{0}
}
func (m *EventKeyGenerationInitiated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventKeyGenerationInitiated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventKeyGenerationInitiated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventKeyGenerationInitiated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventKeyGenerationInitiated.Merge(m, src)
}
func (m *EventKeyGenerationInitiated) XXX_Size() int {
	return m.Size()
}
func (m *EventKeyGenerationInitiated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventKeyGenerationInitiated.DiscardUnknown(m)
}

var xxx_messageInfo_EventKeyGenerationInitiated proto.InternalMessageInfo

func (m *EventKeyGenerationInitiated) GetEpochId() uint64 {
	if m != nil {
		return m.EpochId
	}
	return 0
}

func (m *EventKeyGenerationInitiated) GetITotalSlots() uint32 {
	if m != nil {
		return m.ITotalSlots
	}
	return 0
}

func (m *EventKeyGenerationInitiated) GetTSlotsDegree() uint32 {
	if m != nil {
		return m.TSlotsDegree
	}
	return 0
}

func (m *EventKeyGenerationInitiated) GetParticipants() []BLSParticipantInfo {
	if m != nil {
		return m.Participants
	}
	return nil
}

// EventDealerPartSubmitted is emitted when a participant submits their dealer part
type EventDealerPartSubmitted struct {
	// epoch_id identifies the DKG round this dealer part belongs to
	EpochId uint64 `protobuf:"varint,1,opt,name=epoch_id,json=epochId,proto3" json:"epoch_id,omitempty"`
	// dealer_address is the address of the dealer who submitted their part
	DealerAddress string `protobuf:"bytes,2,opt,name=dealer_address,json=dealerAddress,proto3" json:"dealer_address,omitempty"`
}

func (m *EventDealerPartSubmitted) Reset()         { *m = EventDealerPartSubmitted{} }
func (m *EventDealerPartSubmitted) String() string { return proto.CompactTextString(m) }
func (*EventDealerPartSubmitted) ProtoMessage()    {}
func (*EventDealerPartSubmitted) Descriptor() ([]byte, []int) {
	return fileDescriptor_96b42c6054f2dc42, []int{1}
}
func (m *EventDealerPartSubmitted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventDealerPartSubmitted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventDealerPartSubmitted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventDealerPartSubmitted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventDealerPartSubmitted.Merge(m, src)
}
func (m *EventDealerPartSubmitted) XXX_Size() int {
	return m.Size()
}
func (m *EventDealerPartSubmitted) XXX_DiscardUnknown() {
	xxx_messageInfo_EventDealerPartSubmitted.DiscardUnknown(m)
}

var xxx_messageInfo_EventDealerPartSubmitted proto.InternalMessageInfo

func (m *EventDealerPartSubmitted) GetEpochId() uint64 {
	if m != nil {
		return m.EpochId
	}
	return 0
}

func (m *EventDealerPartSubmitted) GetDealerAddress() string {
	if m != nil {
		return m.DealerAddress
	}
	return ""
}

// EventVerifyingPhaseStarted is emitted when the DKG transitions to the verification phase
type EventVerifyingPhaseStarted struct {
	// epoch_id identifies the DKG round entering verification phase
	EpochId uint64 `protobuf:"varint,1,opt,name=epoch_id,json=epochId,proto3" json:"epoch_id,omitempty"`
	// verifying_phase_deadline_block is the block height deadline for the verification phase
	VerifyingPhaseDeadlineBlock uint64 `protobuf:"varint,2,opt,name=verifying_phase_deadline_block,json=verifyingPhaseDeadlineBlock,proto3" json:"verifying_phase_deadline_block,omitempty"`
	// epoch_data contains the complete epoch BLS data at the time of transition
	EpochData EpochBLSData `protobuf:"bytes,3,opt,name=epoch_data,json=epochData,proto3" json:"epoch_data"`
}

func (m *EventVerifyingPhaseStarted) Reset()         { *m = EventVerifyingPhaseStarted{} }
func (m *EventVerifyingPhaseStarted) String() string { return proto.CompactTextString(m) }
func (*EventVerifyingPhaseStarted) ProtoMessage()    {}
func (*EventVerifyingPhaseStarted) Descriptor() ([]byte, []int) {
	return fileDescriptor_96b42c6054f2dc42, []int{2}
}
func (m *EventVerifyingPhaseStarted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventVerifyingPhaseStarted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventVerifyingPhaseStarted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventVerifyingPhaseStarted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventVerifyingPhaseStarted.Merge(m, src)
}
func (m *EventVerifyingPhaseStarted) XXX_Size() int {
	return m.Size()
}
func (m *EventVerifyingPhaseStarted) XXX_DiscardUnknown() {
	xxx_messageInfo_EventVerifyingPhaseStarted.DiscardUnknown(m)
}

var xxx_messageInfo_EventVerifyingPhaseStarted proto.InternalMessageInfo

func (m *EventVerifyingPhaseStarted) GetEpochId() uint64 {
	if m != nil {
		return m.EpochId
	}
	return 0
}

func (m *EventVerifyingPhaseStarted) GetVerifyingPhaseDeadlineBlock() uint64 {
	if m != nil {
		return m.VerifyingPhaseDeadlineBlock
	}
	return 0
}

func (m *EventVerifyingPhaseStarted) GetEpochData() EpochBLSData {
	if m != nil {
		return m.EpochData
	}
	return EpochBLSData{}
}

// EventDKGFailed is emitted when a DKG round fails
type EventDKGFailed struct {
	// epoch_id identifies the DKG round that failed
	EpochId uint64 `protobuf:"varint,1,opt,name=epoch_id,json=epochId,proto3" json:"epoch_id,omitempty"`
	// reason describes why the DKG failed
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	// epoch_data contains the complete epoch BLS data at the time of failure
	EpochData EpochBLSData `protobuf:"bytes,3,opt,name=epoch_data,json=epochData,proto3" json:"epoch_data"`
}

func (m *EventDKGFailed) Reset()         { *m = EventDKGFailed{} }
func (m *EventDKGFailed) String() string { return proto.CompactTextString(m) }
func (*EventDKGFailed) ProtoMessage()    {}
func (*EventDKGFailed) Descriptor() ([]byte, []int) {
	return fileDescriptor_96b42c6054f2dc42, []int{3}
}
func (m *EventDKGFailed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventDKGFailed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventDKGFailed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventDKGFailed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventDKGFailed.Merge(m, src)
}
func (m *EventDKGFailed) XXX_Size() int {
	return m.Size()
}
func (m *EventDKGFailed) XXX_DiscardUnknown() {
	xxx_messageInfo_EventDKGFailed.DiscardUnknown(m)
}

var xxx_messageInfo_EventDKGFailed proto.InternalMessageInfo

func (m *EventDKGFailed) GetEpochId() uint64 {
	if m != nil {
		return m.EpochId
	}
	return 0
}

func (m *EventDKGFailed) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *EventDKGFailed) GetEpochData() EpochBLSData {
	if m != nil {
		return m.EpochData
	}
	return EpochBLSData{}
}

// EventVerificationVectorSubmitted is emitted when a participant submits their verification vector
type EventVerificationVectorSubmitted struct {
	// epoch_id identifies the DKG round this verification submission belongs to
	EpochId uint64 `protobuf:"varint,1,opt,name=epoch_id,json=epochId,proto3" json:"epoch_id,omitempty"`
	// participant_address is the address of the participant who submitted verification
	ParticipantAddress string `protobuf:"bytes,2,opt,name=participant_address,json=participantAddress,proto3" json:"participant_address,omitempty"`
}

func (m *EventVerificationVectorSubmitted) Reset()         { *m = EventVerificationVectorSubmitted{} }
func (m *EventVerificationVectorSubmitted) String() string { return proto.CompactTextString(m) }
func (*EventVerificationVectorSubmitted) ProtoMessage()    {}
func (*EventVerificationVectorSubmitted) Descriptor() ([]byte, []int) {
	return fileDescriptor_96b42c6054f2dc42, []int{4}
}
func (m *EventVerificationVectorSubmitted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventVerificationVectorSubmitted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventVerificationVectorSubmitted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventVerificationVectorSubmitted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventVerificationVectorSubmitted.Merge(m, src)
}
func (m *EventVerificationVectorSubmitted) XXX_Size() int {
	return m.Size()
}
func (m *EventVerificationVectorSubmitted) XXX_DiscardUnknown() {
	xxx_messageInfo_EventVerificationVectorSubmitted.DiscardUnknown(m)
}

var xxx_messageInfo_EventVerificationVectorSubmitted proto.InternalMessageInfo

func (m *EventVerificationVectorSubmitted) GetEpochId() uint64 {
	if m != nil {
		return m.EpochId
	}
	return 0
}

func (m *EventVerificationVectorSubmitted) GetParticipantAddress() string {
	if m != nil {
		return m.ParticipantAddress
	}
	return ""
}

// EventGroupPublicKeyGenerated is emitted when the DKG completes successfully and group public key is computed
type EventGroupPublicKeyGenerated struct {
	// epoch_id uniquely identifies this DKG round
	EpochId uint64 `protobuf:"varint,1,opt,name=epoch_id,json=epochId,proto3" json:"epoch_id,omitempty"`
	// group_public_key is the final aggregated group public key (compressed G2 format, 96 bytes)
	GroupPublicKey []byte `protobuf:"bytes,2,opt,name=group_public_key,json=groupPublicKey,proto3" json:"group_public_key,omitempty"`
	// i_total_slots is the total number of slots in the DKG
	ITotalSlots uint32 `protobuf:"varint,3,opt,name=i_total_slots,json=iTotalSlots,proto3" json:"i_total_slots,omitempty"`
	// t_slots_degree is the polynomial degree t for the threshold scheme
	TSlotsDegree uint32 `protobuf:"varint,4,opt,name=t_slots_degree,json=tSlotsDegree,proto3" json:"t_slots_degree,omitempty"`
	// epoch_data contains the complete epoch BLS data at the time of completion
	EpochData EpochBLSData `protobuf:"bytes,5,opt,name=epoch_data,json=epochData,proto3" json:"epoch_data"`
	// chain_id is the chain ID for EIP-155 compatibility
	ChainId string `protobuf:"bytes,6,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *EventGroupPublicKeyGenerated) Reset()         { *m = EventGroupPublicKeyGenerated{} }
func (m *EventGroupPublicKeyGenerated) String() string { return proto.CompactTextString(m) }
func (*EventGroupPublicKeyGenerated) ProtoMessage()    {}
func (*EventGroupPublicKeyGenerated) Descriptor() ([]byte, []int) {
	return fileDescriptor_96b42c6054f2dc42, []int{5}
}
func (m *EventGroupPublicKeyGenerated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventGroupPublicKeyGenerated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventGroupPublicKeyGenerated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventGroupPublicKeyGenerated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventGroupPublicKeyGenerated.Merge(m, src)
}
func (m *EventGroupPublicKeyGenerated) XXX_Size() int {
	return m.Size()
}
func (m *EventGroupPublicKeyGenerated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventGroupPublicKeyGenerated.DiscardUnknown(m)
}

var xxx_messageInfo_EventGroupPublicKeyGenerated proto.InternalMessageInfo

func (m *EventGroupPublicKeyGenerated) GetEpochId() uint64 {
	if m != nil {
		return m.EpochId
	}
	return 0
}

func (m *EventGroupPublicKeyGenerated) GetGroupPublicKey() []byte {
	if m != nil {
		return m.GroupPublicKey
	}
	return nil
}

func (m *EventGroupPublicKeyGenerated) GetITotalSlots() uint32 {
	if m != nil {
		return m.ITotalSlots
	}
	return 0
}

func (m *EventGroupPublicKeyGenerated) GetTSlotsDegree() uint32 {
	if m != nil {
		return m.TSlotsDegree
	}
	return 0
}

func (m *EventGroupPublicKeyGenerated) GetEpochData() EpochBLSData {
	if m != nil {
		return m.EpochData
	}
	return EpochBLSData{}
}

func (m *EventGroupPublicKeyGenerated) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

// EventGroupKeyValidated is emitted when group key validation completes successfully
type EventGroupKeyValidated struct {
	// new_epoch_id identifies the epoch whose group public key was successfully validated
	NewEpochId uint64 `protobuf:"varint,1,opt,name=new_epoch_id,json=newEpochId,proto3" json:"new_epoch_id,omitempty"`
	// final_signature is the aggregated signature validating the new group public key (G1 point, 48-byte compressed)
	FinalSignature []byte `protobuf:"bytes,2,opt,name=final_signature,json=finalSignature,proto3" json:"final_signature,omitempty"`
}

func (m *EventGroupKeyValidated) Reset()         { *m = EventGroupKeyValidated{} }
func (m *EventGroupKeyValidated) String() string { return proto.CompactTextString(m) }
func (*EventGroupKeyValidated) ProtoMessage()    {}
func (*EventGroupKeyValidated) Descriptor() ([]byte, []int) {
	return fileDescriptor_96b42c6054f2dc42, []int{6}
}
func (m *EventGroupKeyValidated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventGroupKeyValidated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventGroupKeyValidated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventGroupKeyValidated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventGroupKeyValidated.Merge(m, src)
}
func (m *EventGroupKeyValidated) XXX_Size() int {
	return m.Size()
}
func (m *EventGroupKeyValidated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventGroupKeyValidated.DiscardUnknown(m)
}

var xxx_messageInfo_EventGroupKeyValidated proto.InternalMessageInfo

func (m *EventGroupKeyValidated) GetNewEpochId() uint64 {
	if m != nil {
		return m.NewEpochId
	}
	return 0
}

func (m *EventGroupKeyValidated) GetFinalSignature() []byte {
	if m != nil {
		return m.FinalSignature
	}
	return nil
}

// EventGroupKeyValidationFailed is emitted when group key validation fails
type EventGroupKeyValidationFailed struct {
	// new_epoch_id identifies the epoch whose group public key validation failed
	NewEpochId uint64 `protobuf:"varint,1,opt,name=new_epoch_id,json=newEpochId,proto3" json:"new_epoch_id,omitempty"`
	// reason describes why the validation failed
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *EventGroupKeyValidationFailed) Reset()         { *m = EventGroupKeyValidationFailed{} }
func (m *EventGroupKeyValidationFailed) String() string { return proto.CompactTextString(m) }
func (*EventGroupKeyValidationFailed) ProtoMessage()    {}
func (*EventGroupKeyValidationFailed) Descriptor() ([]byte, []int) {
	return fileDescriptor_96b42c6054f2dc42, []int{7}
}
func (m *EventGroupKeyValidationFailed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventGroupKeyValidationFailed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventGroupKeyValidationFailed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventGroupKeyValidationFailed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventGroupKeyValidationFailed.Merge(m, src)
}
func (m *EventGroupKeyValidationFailed) XXX_Size() int {
	return m.Size()
}
func (m *EventGroupKeyValidationFailed) XXX_DiscardUnknown() {
	xxx_messageInfo_EventGroupKeyValidationFailed.DiscardUnknown(m)
}

var xxx_messageInfo_EventGroupKeyValidationFailed proto.InternalMessageInfo

func (m *EventGroupKeyValidationFailed) GetNewEpochId() uint64 {
	if m != nil {
		return m.NewEpochId
	}
	return 0
}

func (m *EventGroupKeyValidationFailed) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

// EventThresholdSigningRequested is emitted when a new threshold signing request is created
type EventThresholdSigningRequested struct {
	// request_id uniquely identifies this threshold signing request
	RequestId []byte `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// current_epoch_id identifies the epoch being used for signing
	CurrentEpochId uint64 `protobuf:"varint,2,opt,name=current_epoch_id,json=currentEpochId,proto3" json:"current_epoch_id,omitempty"`
	// encoded_data is the Ethereum-compatible abi.encodePacked result that participants will sign
	EncodedData []byte `protobuf:"bytes,3,opt,name=encoded_data,json=encodedData,proto3" json:"encoded_data,omitempty"`
	// message_hash is the keccak256 hash of the encoded_data (pre-computed for participants)
	MessageHash []byte `protobuf:"bytes,4,opt,name=message_hash,json=messageHash,proto3" json:"message_hash,omitempty"`
	// deadline_block_height is the block height after which this request expires
	DeadlineBlockHeight int64 `protobuf:"varint,5,opt,name=deadline_block_height,json=deadlineBlockHeight,proto3" json:"deadline_block_height,omitempty"`
}

func (m *EventThresholdSigningRequested) Reset()         { *m = EventThresholdSigningRequested{} }
func (m *EventThresholdSigningRequested) String() string { return proto.CompactTextString(m) }
func (*EventThresholdSigningRequested) ProtoMessage()    {}
func (*EventThresholdSigningRequested) Descriptor() ([]byte, []int) {
	return fileDescriptor_96b42c6054f2dc42, []int{8}
}
func (m *EventThresholdSigningRequested) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventThresholdSigningRequested) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventThresholdSigningRequested.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventThresholdSigningRequested) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventThresholdSigningRequested.Merge(m, src)
}
func (m *EventThresholdSigningRequested) XXX_Size() int {
	return m.Size()
}
func (m *EventThresholdSigningRequested) XXX_DiscardUnknown() {
	xxx_messageInfo_EventThresholdSigningRequested.DiscardUnknown(m)
}

var xxx_messageInfo_EventThresholdSigningRequested proto.InternalMessageInfo

func (m *EventThresholdSigningRequested) GetRequestId() []byte {
	if m != nil {
		return m.RequestId
	}
	return nil
}

func (m *EventThresholdSigningRequested) GetCurrentEpochId() uint64 {
	if m != nil {
		return m.CurrentEpochId
	}
	return 0
}

func (m *EventThresholdSigningRequested) GetEncodedData() []byte {
	if m != nil {
		return m.EncodedData
	}
	return nil
}

func (m *EventThresholdSigningRequested) GetMessageHash() []byte {
	if m != nil {
		return m.MessageHash
	}
	return nil
}

func (m *EventThresholdSigningRequested) GetDeadlineBlockHeight() int64 {
	if m != nil {
		return m.DeadlineBlockHeight
	}
	return 0
}

// EventThresholdSigningCompleted is emitted when threshold signing completes successfully
type EventThresholdSigningCompleted struct {
	// request_id identifies the threshold signing request that completed
	RequestId []byte `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// current_epoch_id identifies the epoch used for signing
	CurrentEpochId uint64 `protobuf:"varint,2,opt,name=current_epoch_id,json=currentEpochId,proto3" json:"current_epoch_id,omitempty"`
	// final_signature is the aggregated BLS threshold signature (G1 point, 48-byte compressed)
	FinalSignature []byte `protobuf:"bytes,3,opt,name=final_signature,json=finalSignature,proto3" json:"final_signature,omitempty"`
	// participating_slots is the total number of slots that participated in the signing
	ParticipatingSlots uint32 `protobuf:"varint,4,opt,name=participating_slots,json=participatingSlots,proto3" json:"participating_slots,omitempty"`
}

func (m *EventThresholdSigningCompleted) Reset()         { *m = EventThresholdSigningCompleted{} }
func (m *EventThresholdSigningCompleted) String() string { return proto.CompactTextString(m) }
func (*EventThresholdSigningCompleted) ProtoMessage()    {}
func (*EventThresholdSigningCompleted) Descriptor() ([]byte, []int) {
	return fileDescriptor_96b42c6054f2dc42, []int{9}
}
func (m *EventThresholdSigningCompleted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventThresholdSigningCompleted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventThresholdSigningCompleted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventThresholdSigningCompleted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventThresholdSigningCompleted.Merge(m, src)
}
func (m *EventThresholdSigningCompleted) XXX_Size() int {
	return m.Size()
}
func (m *EventThresholdSigningCompleted) XXX_DiscardUnknown() {
	xxx_messageInfo_EventThresholdSigningCompleted.DiscardUnknown(m)
}

var xxx_messageInfo_EventThresholdSigningCompleted proto.InternalMessageInfo

func (m *EventThresholdSigningCompleted) GetRequestId() []byte {
	if m != nil {
		return m.RequestId
	}
	return nil
}

func (m *EventThresholdSigningCompleted) GetCurrentEpochId() uint64 {
	if m != nil {
		return m.CurrentEpochId
	}
	return 0
}

func (m *EventThresholdSigningCompleted) GetFinalSignature() []byte {
	if m != nil {
		return m.FinalSignature
	}
	return nil
}

func (m *EventThresholdSigningCompleted) GetParticipatingSlots() uint32 {
	if m != nil {
		return m.ParticipatingSlots
	}
	return 0
}

// EventThresholdSigningFailed is emitted when threshold signing fails or expires
type EventThresholdSigningFailed struct {
	// request_id identifies the threshold signing request that failed
	RequestId []byte `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// current_epoch_id identifies the epoch used for signing
	CurrentEpochId uint64 `protobuf:"varint,2,opt,name=current_epoch_id,json=currentEpochId,proto3" json:"current_epoch_id,omitempty"`
	// reason describes why the signing failed (e.g., "Deadline exceeded", "Insufficient participation")
	Reason string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *EventThresholdSigningFailed) Reset()         { *m = EventThresholdSigningFailed{} }
func (m *EventThresholdSigningFailed) String() string { return proto.CompactTextString(m) }
func (*EventThresholdSigningFailed) ProtoMessage()    {}
func (*EventThresholdSigningFailed) Descriptor() ([]byte, []int) {
	return fileDescriptor_96b42c6054f2dc42, []int{10}
}
func (m *EventThresholdSigningFailed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventThresholdSigningFailed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventThresholdSigningFailed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventThresholdSigningFailed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventThresholdSigningFailed.Merge(m, src)
}
func (m *EventThresholdSigningFailed) XXX_Size() int {
	return m.Size()
}
func (m *EventThresholdSigningFailed) XXX_DiscardUnknown() {
	xxx_messageInfo_EventThresholdSigningFailed.DiscardUnknown(m)
}

var xxx_messageInfo_EventThresholdSigningFailed proto.InternalMessageInfo

func (m *EventThresholdSigningFailed) GetRequestId() []byte {
	if m != nil {
		return m.RequestId
	}
	return nil
}

func (m *EventThresholdSigningFailed) GetCurrentEpochId() uint64 {
	if m != nil {
		return m.CurrentEpochId
	}
	return 0
}

func (m *EventThresholdSigningFailed) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func init() {
	proto.RegisterType((*EventKeyGenerationInitiated)(nil), "inference.bls.EventKeyGenerationInitiated")
	proto.RegisterType((*EventDealerPartSubmitted)(nil), "inference.bls.EventDealerPartSubmitted")
	proto.RegisterType((*EventVerifyingPhaseStarted)(nil), "inference.bls.EventVerifyingPhaseStarted")
	proto.RegisterType((*EventDKGFailed)(nil), "inference.bls.EventDKGFailed")
	proto.RegisterType((*EventVerificationVectorSubmitted)(nil), "inference.bls.EventVerificationVectorSubmitted")
	proto.RegisterType((*EventGroupPublicKeyGenerated)(nil), "inference.bls.EventGroupPublicKeyGenerated")
	proto.RegisterType((*EventGroupKeyValidated)(nil), "inference.bls.EventGroupKeyValidated")
	proto.RegisterType((*EventGroupKeyValidationFailed)(nil), "inference.bls.EventGroupKeyValidationFailed")
	proto.RegisterType((*EventThresholdSigningRequested)(nil), "inference.bls.EventThresholdSigningRequested")
	proto.RegisterType((*EventThresholdSigningCompleted)(nil), "inference.bls.EventThresholdSigningCompleted")
	proto.RegisterType((*EventThresholdSigningFailed)(nil), "inference.bls.EventThresholdSigningFailed")
}

func init() { proto.RegisterFile("inference/bls/events.proto", fileDescriptor_96b42c6054f2dc42) }

var fileDescriptor_96b42c6054f2dc42 = []byte{
	// 823 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x41, 0x8f, 0xdb, 0x44,
	0x14, 0x8e, 0x9b, 0xb0, 0x65, 0x27, 0x4e, 0x00, 0xb7, 0x54, 0x69, 0x96, 0x9a, 0xac, 0x85, 0x44,
	0x2e, 0x24, 0xd2, 0xf2, 0x03, 0x80, 0x34, 0xcb, 0x36, 0x4a, 0x0f, 0x2b, 0xa7, 0x5a, 0x09, 0x2e,
	0xd6, 0xc4, 0xf3, 0x62, 0x8f, 0xea, 0xcc, 0x98, 0x99, 0x71, 0x4a, 0x2e, 0xdc, 0x90, 0x10, 0x27,
	0x7e, 0x0c, 0x67, 0x2e, 0x5c, 0x7a, 0xa3, 0xe2, 0xc4, 0x09, 0xa1, 0xcd, 0x1f, 0x41, 0x33, 0x76,
	0x70, 0xbc, 0xa4, 0xdd, 0xad, 0xb4, 0x97, 0x28, 0xf3, 0xbd, 0xf7, 0xe6, 0xbd, 0xef, 0x7b, 0xef,
	0x79, 0x50, 0x97, 0xb2, 0x05, 0x08, 0x60, 0x21, 0x0c, 0xe7, 0x89, 0x1c, 0xc2, 0x0a, 0x98, 0x92,
	0x83, 0x54, 0x70, 0xc5, 0x9d, 0xd6, 0x7f, 0xb6, 0xc1, 0x3c, 0x91, 0xdd, 0x0f, 0xf0, 0x92, 0x32,
	0x3e, 0x34, 0xbf, 0xb9, 0x47, 0xf7, 0x61, 0xc8, 0xe5, 0x92, 0xcb, 0xc0, 0x9c, 0x86, 0xf9, 0xa1,
	0x30, 0xdd, 0x8f, 0x78, 0xc4, 0x73, 0x5c, 0xff, 0xdb, 0x06, 0x54, 0xd3, 0xa9, 0x75, 0x0a, 0x45,
	0x80, 0xf7, 0x87, 0x85, 0x8e, 0x4e, 0x75, 0xfa, 0x29, 0xac, 0xcf, 0x80, 0x81, 0xc0, 0x8a, 0x72,
	0x36, 0x61, 0x54, 0x51, 0xac, 0x80, 0x38, 0x0f, 0xd1, 0xbb, 0x90, 0xf2, 0x30, 0x0e, 0x28, 0xe9,
	0x58, 0x3d, 0xab, 0xdf, 0xf0, 0xef, 0x9a, 0xf3, 0x84, 0x38, 0x1e, 0x6a, 0xd1, 0x40, 0x71, 0x85,
	0x93, 0x40, 0x26, 0x5c, 0xc9, 0xce, 0x9d, 0x9e, 0xd5, 0x6f, 0xf9, 0x4d, 0xfa, 0x4c, 0x63, 0x33,
	0x0d, 0x39, 0x9f, 0xa0, 0xb6, 0xca, 0xad, 0x01, 0x81, 0x48, 0x00, 0x74, 0xea, 0xc6, 0xc9, 0x56,
	0xc6, 0x3e, 0x36, 0x98, 0x33, 0x45, 0x76, 0x8a, 0x85, 0xa2, 0x21, 0x4d, 0x31, 0x53, 0xb2, 0xd3,
	0xe8, 0xd5, 0xfb, 0xcd, 0x93, 0xe3, 0x41, 0x45, 0x89, 0xc1, 0xe8, 0xe9, 0xec, 0xbc, 0xf4, 0x9a,
	0xb0, 0x05, 0x1f, 0x35, 0x5e, 0xfe, 0xfd, 0x71, 0xcd, 0xaf, 0x04, 0x7b, 0x2b, 0xd4, 0x31, 0x84,
	0xc6, 0x80, 0x13, 0x10, 0x3a, 0x62, 0x96, 0xcd, 0x97, 0x54, 0x5d, 0xc3, 0xe6, 0x0b, 0xd4, 0x26,
	0x26, 0x22, 0xc0, 0x84, 0x08, 0x90, 0x39, 0x9d, 0xc3, 0x51, 0xe7, 0xcf, 0x5f, 0x3f, 0xbb, 0x5f,
	0x68, 0xfc, 0x55, 0x6e, 0x99, 0x29, 0x41, 0x59, 0xe4, 0xb7, 0x72, 0xff, 0x02, 0xf4, 0x7e, 0xb3,
	0x50, 0xd7, 0x24, 0xbe, 0x00, 0x41, 0x17, 0x6b, 0xca, 0xa2, 0xf3, 0x18, 0x4b, 0x98, 0x29, 0x2c,
	0xae, 0x49, 0xfd, 0x18, 0xb9, 0xab, 0x6d, 0x4c, 0x90, 0xea, 0xa0, 0x80, 0x00, 0x26, 0x09, 0x65,
	0x10, 0xcc, 0x13, 0x1e, 0x3e, 0x37, 0xa5, 0x34, 0xfc, 0xa3, 0x55, 0xe5, 0xe6, 0x71, 0xe1, 0x33,
	0xd2, 0x2e, 0xce, 0x97, 0x08, 0xe5, 0xf7, 0x13, 0xac, 0xb0, 0x51, 0xb9, 0x79, 0x72, 0x74, 0x45,
	0xc1, 0x53, 0xed, 0x30, 0x7a, 0x3a, 0x1b, 0x63, 0x85, 0x0b, 0xed, 0x0e, 0x4d, 0x90, 0x06, 0xbc,
	0x1f, 0x2d, 0xd4, 0xce, 0x95, 0x9b, 0x9e, 0x7d, 0x8d, 0x69, 0xf2, 0xe6, 0xa2, 0x1f, 0xa0, 0x03,
	0x01, 0x58, 0x72, 0x96, 0xeb, 0xe4, 0x17, 0xa7, 0x5b, 0xa8, 0xe3, 0x27, 0x0b, 0xf5, 0x4a, 0x21,
	0x69, 0x68, 0x26, 0xf2, 0x02, 0x42, 0xc5, 0xc5, 0x8d, 0x3a, 0x39, 0x41, 0xf7, 0x76, 0x06, 0xe2,
	0xc6, 0xed, 0x74, 0x76, 0x82, 0xb6, 0x3d, 0xfd, 0xf9, 0x0e, 0xfa, 0xc8, 0x94, 0x72, 0x26, 0x78,
	0x96, 0x9e, 0x67, 0xf3, 0x84, 0x86, 0xe5, 0xa2, 0xbc, 0xb9, 0x8c, 0x3e, 0x7a, 0x3f, 0xd2, 0x51,
	0x41, 0x6a, 0xc2, 0x82, 0xe7, 0xb0, 0x36, 0x35, 0xd8, 0x7e, 0x3b, 0xaa, 0xdc, 0xf6, 0xff, 0x45,
	0xaa, 0xdf, 0x64, 0x91, 0x1a, 0x7b, 0x16, 0xa9, 0x2a, 0xfe, 0x3b, 0x6f, 0x2f, 0xbe, 0x26, 0x14,
	0xc6, 0x98, 0x32, 0x4d, 0xe8, 0xc0, 0x34, 0xf6, 0xae, 0x39, 0x4f, 0x88, 0x17, 0xa2, 0x07, 0xa5,
	0x16, 0x53, 0x58, 0x5f, 0xe0, 0x84, 0x12, 0xa3, 0x42, 0x0f, 0xd9, 0x0c, 0x5e, 0x04, 0x57, 0x94,
	0x40, 0x0c, 0x5e, 0x9c, 0x16, 0x62, 0x7c, 0x8a, 0xde, 0x5b, 0x50, 0xa6, 0x09, 0xd2, 0x88, 0x61,
	0x95, 0x09, 0xd8, 0x6a, 0x61, 0xe0, 0xd9, 0x16, 0xf5, 0xbe, 0x41, 0x8f, 0xf6, 0x25, 0xa1, 0x9c,
	0x15, 0x23, 0x79, 0x7d, 0xae, 0xd7, 0x4c, 0xa6, 0xb7, 0xb1, 0x90, 0x6b, 0xee, 0x7e, 0x16, 0x0b,
	0x90, 0x31, 0x4f, 0x88, 0x4e, 0xab, 0x5b, 0x0f, 0xdf, 0x65, 0x20, 0x35, 0x91, 0x47, 0x08, 0x89,
	0xfc, 0xb0, 0xbd, 0xda, 0xf6, 0x0f, 0x0b, 0x24, 0x6f, 0x69, 0x98, 0x09, 0x01, 0x4c, 0x95, 0xf9,
	0xf3, 0xd5, 0x6c, 0x17, 0xf8, 0xb6, 0x86, 0x63, 0x64, 0x03, 0x0b, 0x39, 0x01, 0x52, 0xee, 0x81,
	0xed, 0x37, 0x0b, 0xcc, 0x28, 0x7d, 0x8c, 0xec, 0x25, 0x48, 0x89, 0x23, 0x08, 0x62, 0x2c, 0x63,
	0xd3, 0x4f, 0xdb, 0x6f, 0x16, 0xd8, 0x13, 0x2c, 0x63, 0xe7, 0x04, 0x7d, 0x58, 0xfd, 0x10, 0x04,
	0x31, 0xd0, 0x28, 0x56, 0xa6, 0xb3, 0x75, 0xff, 0x1e, 0xd9, 0xfd, 0x02, 0x3c, 0x31, 0x26, 0xef,
	0xf7, 0xd7, 0xb1, 0x7c, 0xcc, 0x97, 0x69, 0x02, 0xb7, 0xca, 0x72, 0x4f, 0x57, 0xeb, 0xfb, 0xba,
	0xea, 0x0c, 0x77, 0x56, 0x52, 0xe9, 0xaf, 0x5c, 0x3e, 0xe7, 0xf9, 0x08, 0x3b, 0x15, 0x93, 0x19,
	0x67, 0xef, 0x87, 0xe2, 0x55, 0xba, 0x4a, 0xa2, 0x18, 0x82, 0x5b, 0x63, 0x50, 0xce, 0x4a, 0x7d,
	0x77, 0x56, 0x46, 0x93, 0x97, 0x97, 0xae, 0xf5, 0xea, 0xd2, 0xb5, 0xfe, 0xb9, 0x74, 0xad, 0x5f,
	0x36, 0x6e, 0xed, 0xd5, 0xc6, 0xad, 0xfd, 0xb5, 0x71, 0x6b, 0xdf, 0x0e, 0x23, 0xaa, 0xe2, 0x6c,
	0x3e, 0x08, 0xf9, 0x72, 0x98, 0x0a, 0x4e, 0xb2, 0x50, 0xc9, 0x90, 0x9a, 0xb7, 0xb5, 0x7c, 0x65,
	0xbf, 0x2f, 0xdf, 0xd9, 0xf9, 0x81, 0x79, 0x68, 0x3f, 0xff, 0x37, 0x00, 0x00, 0xff, 0xff, 0xc8,
	0x35, 0xe0, 0x41, 0xf4, 0x07, 0x00, 0x00,
}

func (m *EventKeyGenerationInitiated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventKeyGenerationInitiated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventKeyGenerationInitiated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Participants) > 0 {
		for iNdEx := len(m.Participants) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Participants[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.TSlotsDegree != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.TSlotsDegree))
		i--
		dAtA[i] = 0x18
	}
	if m.ITotalSlots != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ITotalSlots))
		i--
		dAtA[i] = 0x10
	}
	if m.EpochId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EpochId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventDealerPartSubmitted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventDealerPartSubmitted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventDealerPartSubmitted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DealerAddress) > 0 {
		i -= len(m.DealerAddress)
		copy(dAtA[i:], m.DealerAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.DealerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.EpochId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EpochId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventVerifyingPhaseStarted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventVerifyingPhaseStarted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventVerifyingPhaseStarted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EpochData.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.VerifyingPhaseDeadlineBlock != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.VerifyingPhaseDeadlineBlock))
		i--
		dAtA[i] = 0x10
	}
	if m.EpochId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EpochId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventDKGFailed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventDKGFailed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventDKGFailed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EpochData.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x12
	}
	if m.EpochId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EpochId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventVerificationVectorSubmitted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventVerificationVectorSubmitted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventVerificationVectorSubmitted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ParticipantAddress) > 0 {
		i -= len(m.ParticipantAddress)
		copy(dAtA[i:], m.ParticipantAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ParticipantAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.EpochId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EpochId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventGroupPublicKeyGenerated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventGroupPublicKeyGenerated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventGroupPublicKeyGenerated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x32
	}
	{
		size, err := m.EpochData.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.TSlotsDegree != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.TSlotsDegree))
		i--
		dAtA[i] = 0x20
	}
	if m.ITotalSlots != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ITotalSlots))
		i--
		dAtA[i] = 0x18
	}
	if len(m.GroupPublicKey) > 0 {
		i -= len(m.GroupPublicKey)
		copy(dAtA[i:], m.GroupPublicKey)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.GroupPublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if m.EpochId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EpochId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventGroupKeyValidated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventGroupKeyValidated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventGroupKeyValidated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FinalSignature) > 0 {
		i -= len(m.FinalSignature)
		copy(dAtA[i:], m.FinalSignature)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.FinalSignature)))
		i--
		dAtA[i] = 0x12
	}
	if m.NewEpochId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.NewEpochId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventGroupKeyValidationFailed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventGroupKeyValidationFailed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventGroupKeyValidationFailed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x12
	}
	if m.NewEpochId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.NewEpochId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventThresholdSigningRequested) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventThresholdSigningRequested) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventThresholdSigningRequested) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeadlineBlockHeight != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.DeadlineBlockHeight))
		i--
		dAtA[i] = 0x28
	}
	if len(m.MessageHash) > 0 {
		i -= len(m.MessageHash)
		copy(dAtA[i:], m.MessageHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MessageHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EncodedData) > 0 {
		i -= len(m.EncodedData)
		copy(dAtA[i:], m.EncodedData)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.EncodedData)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CurrentEpochId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.CurrentEpochId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventThresholdSigningCompleted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventThresholdSigningCompleted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventThresholdSigningCompleted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ParticipatingSlots != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ParticipatingSlots))
		i--
		dAtA[i] = 0x20
	}
	if len(m.FinalSignature) > 0 {
		i -= len(m.FinalSignature)
		copy(dAtA[i:], m.FinalSignature)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.FinalSignature)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CurrentEpochId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.CurrentEpochId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventThresholdSigningFailed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventThresholdSigningFailed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventThresholdSigningFailed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CurrentEpochId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.CurrentEpochId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventKeyGenerationInitiated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochId != 0 {
		n += 1 + sovEvents(uint64(m.EpochId))
	}
	if m.ITotalSlots != 0 {
		n += 1 + sovEvents(uint64(m.ITotalSlots))
	}
	if m.TSlotsDegree != 0 {
		n += 1 + sovEvents(uint64(m.TSlotsDegree))
	}
	if len(m.Participants) > 0 {
		for _, e := range m.Participants {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *EventDealerPartSubmitted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochId != 0 {
		n += 1 + sovEvents(uint64(m.EpochId))
	}
	l = len(m.DealerAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventVerifyingPhaseStarted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochId != 0 {
		n += 1 + sovEvents(uint64(m.EpochId))
	}
	if m.VerifyingPhaseDeadlineBlock != 0 {
		n += 1 + sovEvents(uint64(m.VerifyingPhaseDeadlineBlock))
	}
	l = m.EpochData.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventDKGFailed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochId != 0 {
		n += 1 + sovEvents(uint64(m.EpochId))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.EpochData.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventVerificationVectorSubmitted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochId != 0 {
		n += 1 + sovEvents(uint64(m.EpochId))
	}
	l = len(m.ParticipantAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventGroupPublicKeyGenerated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochId != 0 {
		n += 1 + sovEvents(uint64(m.EpochId))
	}
	l = len(m.GroupPublicKey)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.ITotalSlots != 0 {
		n += 1 + sovEvents(uint64(m.ITotalSlots))
	}
	if m.TSlotsDegree != 0 {
		n += 1 + sovEvents(uint64(m.TSlotsDegree))
	}
	l = m.EpochData.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventGroupKeyValidated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NewEpochId != 0 {
		n += 1 + sovEvents(uint64(m.NewEpochId))
	}
	l = len(m.FinalSignature)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventGroupKeyValidationFailed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NewEpochId != 0 {
		n += 1 + sovEvents(uint64(m.NewEpochId))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventThresholdSigningRequested) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.CurrentEpochId != 0 {
		n += 1 + sovEvents(uint64(m.CurrentEpochId))
	}
	l = len(m.EncodedData)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.MessageHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.DeadlineBlockHeight != 0 {
		n += 1 + sovEvents(uint64(m.DeadlineBlockHeight))
	}
	return n
}

func (m *EventThresholdSigningCompleted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.CurrentEpochId != 0 {
		n += 1 + sovEvents(uint64(m.CurrentEpochId))
	}
	l = len(m.FinalSignature)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.ParticipatingSlots != 0 {
		n += 1 + sovEvents(uint64(m.ParticipatingSlots))
	}
	return n
}

func (m *EventThresholdSigningFailed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.CurrentEpochId != 0 {
		n += 1 + sovEvents(uint64(m.CurrentEpochId))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventKeyGenerationInitiated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventKeyGenerationInitiated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventKeyGenerationInitiated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochId", wireType)
			}
			m.EpochId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ITotalSlots", wireType)
			}
			m.ITotalSlots = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ITotalSlots |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TSlotsDegree", wireType)
			}
			m.TSlotsDegree = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TSlotsDegree |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participants = append(m.Participants, BLSParticipantInfo{})
			if err := m.Participants[len(m.Participants)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventDealerPartSubmitted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventDealerPartSubmitted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventDealerPartSubmitted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochId", wireType)
			}
			m.EpochId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DealerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DealerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventVerifyingPhaseStarted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventVerifyingPhaseStarted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventVerifyingPhaseStarted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochId", wireType)
			}
			m.EpochId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifyingPhaseDeadlineBlock", wireType)
			}
			m.VerifyingPhaseDeadlineBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VerifyingPhaseDeadlineBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EpochData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventDKGFailed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventDKGFailed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventDKGFailed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochId", wireType)
			}
			m.EpochId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EpochData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventVerificationVectorSubmitted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventVerificationVectorSubmitted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventVerificationVectorSubmitted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochId", wireType)
			}
			m.EpochId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParticipantAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventGroupPublicKeyGenerated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventGroupPublicKeyGenerated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventGroupPublicKeyGenerated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochId", wireType)
			}
			m.EpochId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupPublicKey = append(m.GroupPublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupPublicKey == nil {
				m.GroupPublicKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ITotalSlots", wireType)
			}
			m.ITotalSlots = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ITotalSlots |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TSlotsDegree", wireType)
			}
			m.TSlotsDegree = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TSlotsDegree |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EpochData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventGroupKeyValidated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventGroupKeyValidated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventGroupKeyValidated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewEpochId", wireType)
			}
			m.NewEpochId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewEpochId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FinalSignature = append(m.FinalSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.FinalSignature == nil {
				m.FinalSignature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventGroupKeyValidationFailed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventGroupKeyValidationFailed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventGroupKeyValidationFailed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewEpochId", wireType)
			}
			m.NewEpochId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewEpochId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventThresholdSigningRequested) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventThresholdSigningRequested: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventThresholdSigningRequested: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = append(m.RequestId[:0], dAtA[iNdEx:postIndex]...)
			if m.RequestId == nil {
				m.RequestId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentEpochId", wireType)
			}
			m.CurrentEpochId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentEpochId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncodedData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncodedData = append(m.EncodedData[:0], dAtA[iNdEx:postIndex]...)
			if m.EncodedData == nil {
				m.EncodedData = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageHash = append(m.MessageHash[:0], dAtA[iNdEx:postIndex]...)
			if m.MessageHash == nil {
				m.MessageHash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeadlineBlockHeight", wireType)
			}
			m.DeadlineBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeadlineBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventThresholdSigningCompleted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventThresholdSigningCompleted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventThresholdSigningCompleted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = append(m.RequestId[:0], dAtA[iNdEx:postIndex]...)
			if m.RequestId == nil {
				m.RequestId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentEpochId", wireType)
			}
			m.CurrentEpochId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentEpochId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FinalSignature = append(m.FinalSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.FinalSignature == nil {
				m.FinalSignature = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipatingSlots", wireType)
			}
			m.ParticipatingSlots = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParticipatingSlots |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventThresholdSigningFailed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventThresholdSigningFailed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventThresholdSigningFailed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = append(m.RequestId[:0], dAtA[iNdEx:postIndex]...)
			if m.RequestId == nil {
				m.RequestId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentEpochId", wireType)
			}
			m.CurrentEpochId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentEpochId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)

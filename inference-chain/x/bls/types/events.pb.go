// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: inference/bls/events.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EventKeyGenerationInitiated is emitted when DKG is initiated for an epoch
type EventKeyGenerationInitiated struct {
	// epoch_id uniquely identifies this DKG round
	EpochId uint64 `protobuf:"varint,1,opt,name=epoch_id,json=epochId,proto3" json:"epoch_id,omitempty"`
	// i_total_slots is the total number of slots in the DKG
	ITotalSlots uint32 `protobuf:"varint,2,opt,name=i_total_slots,json=iTotalSlots,proto3" json:"i_total_slots,omitempty"`
	// t_slots_degree is the polynomial degree t for the threshold scheme
	TSlotsDegree uint32 `protobuf:"varint,3,opt,name=t_slots_degree,json=tSlotsDegree,proto3" json:"t_slots_degree,omitempty"`
	// participants contains information about all participants in this DKG round
	Participants []BLSParticipantInfo `protobuf:"bytes,4,rep,name=participants,proto3" json:"participants"`
}

func (m *EventKeyGenerationInitiated) Reset()         { *m = EventKeyGenerationInitiated{} }
func (m *EventKeyGenerationInitiated) String() string { return proto.CompactTextString(m) }
func (*EventKeyGenerationInitiated) ProtoMessage()    {}
func (*EventKeyGenerationInitiated) Descriptor() ([]byte, []int) {
	return fileDescriptor_96b42c6054f2dc42, []int{0}
}
func (m *EventKeyGenerationInitiated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventKeyGenerationInitiated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventKeyGenerationInitiated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventKeyGenerationInitiated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventKeyGenerationInitiated.Merge(m, src)
}
func (m *EventKeyGenerationInitiated) XXX_Size() int {
	return m.Size()
}
func (m *EventKeyGenerationInitiated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventKeyGenerationInitiated.DiscardUnknown(m)
}

var xxx_messageInfo_EventKeyGenerationInitiated proto.InternalMessageInfo

func (m *EventKeyGenerationInitiated) GetEpochId() uint64 {
	if m != nil {
		return m.EpochId
	}
	return 0
}

func (m *EventKeyGenerationInitiated) GetITotalSlots() uint32 {
	if m != nil {
		return m.ITotalSlots
	}
	return 0
}

func (m *EventKeyGenerationInitiated) GetTSlotsDegree() uint32 {
	if m != nil {
		return m.TSlotsDegree
	}
	return 0
}

func (m *EventKeyGenerationInitiated) GetParticipants() []BLSParticipantInfo {
	if m != nil {
		return m.Participants
	}
	return nil
}

// EventDealerPartSubmitted is emitted when a participant submits their dealer part
type EventDealerPartSubmitted struct {
	// epoch_id identifies the DKG round this dealer part belongs to
	EpochId uint64 `protobuf:"varint,1,opt,name=epoch_id,json=epochId,proto3" json:"epoch_id,omitempty"`
	// dealer_address is the address of the dealer who submitted their part
	DealerAddress string `protobuf:"bytes,2,opt,name=dealer_address,json=dealerAddress,proto3" json:"dealer_address,omitempty"`
}

func (m *EventDealerPartSubmitted) Reset()         { *m = EventDealerPartSubmitted{} }
func (m *EventDealerPartSubmitted) String() string { return proto.CompactTextString(m) }
func (*EventDealerPartSubmitted) ProtoMessage()    {}
func (*EventDealerPartSubmitted) Descriptor() ([]byte, []int) {
	return fileDescriptor_96b42c6054f2dc42, []int{1}
}
func (m *EventDealerPartSubmitted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventDealerPartSubmitted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventDealerPartSubmitted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventDealerPartSubmitted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventDealerPartSubmitted.Merge(m, src)
}
func (m *EventDealerPartSubmitted) XXX_Size() int {
	return m.Size()
}
func (m *EventDealerPartSubmitted) XXX_DiscardUnknown() {
	xxx_messageInfo_EventDealerPartSubmitted.DiscardUnknown(m)
}

var xxx_messageInfo_EventDealerPartSubmitted proto.InternalMessageInfo

func (m *EventDealerPartSubmitted) GetEpochId() uint64 {
	if m != nil {
		return m.EpochId
	}
	return 0
}

func (m *EventDealerPartSubmitted) GetDealerAddress() string {
	if m != nil {
		return m.DealerAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*EventKeyGenerationInitiated)(nil), "inference.bls.EventKeyGenerationInitiated")
	proto.RegisterType((*EventDealerPartSubmitted)(nil), "inference.bls.EventDealerPartSubmitted")
}

func init() { proto.RegisterFile("inference/bls/events.proto", fileDescriptor_96b42c6054f2dc42) }

var fileDescriptor_96b42c6054f2dc42 = []byte{
	// 372 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x51, 0xcd, 0xca, 0xd3, 0x40,
	0x14, 0x4d, 0xfc, 0x8a, 0x3f, 0xd3, 0xa6, 0x60, 0xe8, 0x22, 0xad, 0x10, 0x6b, 0x71, 0xd1, 0x8d,
	0x09, 0xe8, 0x03, 0x88, 0xa1, 0x22, 0xa1, 0x2e, 0x24, 0x71, 0xe5, 0x26, 0x4c, 0x32, 0xb7, 0xe9,
	0x40, 0x32, 0x13, 0x66, 0x6e, 0x8b, 0x7d, 0x0b, 0x1f, 0xc6, 0x87, 0xe8, 0xce, 0xe2, 0xca, 0x95,
	0x48, 0xfb, 0x22, 0x92, 0x49, 0xb4, 0x74, 0xf5, 0x6d, 0x86, 0xb9, 0xe7, 0x87, 0xcb, 0xb9, 0x87,
	0xcc, 0xb8, 0xd8, 0x80, 0x02, 0x51, 0x40, 0x98, 0x57, 0x3a, 0x84, 0x3d, 0x08, 0xd4, 0x41, 0xa3,
	0x24, 0x4a, 0xd7, 0xf9, 0xcf, 0x05, 0x79, 0xa5, 0x67, 0x4f, 0x69, 0xcd, 0x85, 0x0c, 0xcd, 0xdb,
	0x29, 0x66, 0xd3, 0x42, 0xea, 0x5a, 0xea, 0xcc, 0x4c, 0x61, 0x37, 0xf4, 0xd4, 0xa4, 0x94, 0xa5,
	0xec, 0xf0, 0xf6, 0xf7, 0xcf, 0x70, 0xbb, 0x0e, 0x0f, 0x0d, 0xf4, 0x86, 0xc5, 0x0f, 0x9b, 0x3c,
	0x7b, 0xdf, 0xae, 0x5f, 0xc3, 0xe1, 0x03, 0x08, 0x50, 0x14, 0xb9, 0x14, 0xb1, 0xe0, 0xc8, 0x29,
	0x02, 0x73, 0xa7, 0xe4, 0x31, 0x34, 0xb2, 0xd8, 0x66, 0x9c, 0x79, 0xf6, 0xdc, 0x5e, 0x0e, 0x92,
	0x47, 0x66, 0x8e, 0x99, 0xbb, 0x20, 0x0e, 0xcf, 0x50, 0x22, 0xad, 0x32, 0x5d, 0x49, 0xd4, 0xde,
	0x83, 0xb9, 0xbd, 0x74, 0x92, 0x21, 0xff, 0xdc, 0x62, 0x69, 0x0b, 0xb9, 0x2f, 0xc9, 0x18, 0x3b,
	0x36, 0x63, 0x50, 0x2a, 0x00, 0xef, 0xce, 0x88, 0x46, 0x68, 0xf8, 0x95, 0xc1, 0xdc, 0x35, 0x19,
	0x35, 0x54, 0x21, 0x2f, 0x78, 0x43, 0x05, 0x6a, 0x6f, 0x30, 0xbf, 0x5b, 0x0e, 0x5f, 0xbf, 0x08,
	0x6e, 0x2e, 0x11, 0x44, 0x1f, 0xd3, 0x4f, 0x57, 0x55, 0x2c, 0x36, 0x32, 0x1a, 0x1c, 0x7f, 0x3f,
	0xb7, 0x92, 0x1b, 0xf3, 0x62, 0x4f, 0x3c, 0x13, 0x68, 0x05, 0xb4, 0x02, 0xd5, 0x3a, 0xd2, 0x5d,
	0x5e, 0x73, 0xbc, 0x27, 0xcd, 0x5b, 0x32, 0x66, 0xc6, 0x91, 0x51, 0xc6, 0x14, 0xe8, 0x2e, 0xce,
	0x93, 0xc8, 0xfb, 0xf9, 0xfd, 0xd5, 0xa4, 0xbf, 0xf1, 0xbb, 0x8e, 0x49, 0x51, 0x71, 0x51, 0x26,
	0x4e, 0xa7, 0xef, 0xc1, 0x28, 0x3e, 0x9e, 0x7d, 0xfb, 0x74, 0xf6, 0xed, 0x3f, 0x67, 0xdf, 0xfe,
	0x76, 0xf1, 0xad, 0xd3, 0xc5, 0xb7, 0x7e, 0x5d, 0x7c, 0xeb, 0x4b, 0x58, 0x72, 0xdc, 0xee, 0xf2,
	0xa0, 0x90, 0x75, 0xd8, 0x28, 0xc9, 0x76, 0x05, 0xea, 0x82, 0x9b, 0x3a, 0xae, 0xc5, 0x7c, 0xbd,
	0x56, 0x93, 0x3f, 0x34, 0xdd, 0xbc, 0xf9, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xff, 0xe7, 0xd1, 0xab,
	0x27, 0x02, 0x00, 0x00,
}

func (m *EventKeyGenerationInitiated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventKeyGenerationInitiated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventKeyGenerationInitiated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Participants) > 0 {
		for iNdEx := len(m.Participants) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Participants[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.TSlotsDegree != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.TSlotsDegree))
		i--
		dAtA[i] = 0x18
	}
	if m.ITotalSlots != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ITotalSlots))
		i--
		dAtA[i] = 0x10
	}
	if m.EpochId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EpochId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventDealerPartSubmitted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventDealerPartSubmitted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventDealerPartSubmitted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DealerAddress) > 0 {
		i -= len(m.DealerAddress)
		copy(dAtA[i:], m.DealerAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.DealerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.EpochId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EpochId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventKeyGenerationInitiated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochId != 0 {
		n += 1 + sovEvents(uint64(m.EpochId))
	}
	if m.ITotalSlots != 0 {
		n += 1 + sovEvents(uint64(m.ITotalSlots))
	}
	if m.TSlotsDegree != 0 {
		n += 1 + sovEvents(uint64(m.TSlotsDegree))
	}
	if len(m.Participants) > 0 {
		for _, e := range m.Participants {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *EventDealerPartSubmitted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochId != 0 {
		n += 1 + sovEvents(uint64(m.EpochId))
	}
	l = len(m.DealerAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventKeyGenerationInitiated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventKeyGenerationInitiated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventKeyGenerationInitiated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochId", wireType)
			}
			m.EpochId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ITotalSlots", wireType)
			}
			m.ITotalSlots = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ITotalSlots |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TSlotsDegree", wireType)
			}
			m.TSlotsDegree = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TSlotsDegree |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participants = append(m.Participants, BLSParticipantInfo{})
			if err := m.Participants[len(m.Participants)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventDealerPartSubmitted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventDealerPartSubmitted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventDealerPartSubmitted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochId", wireType)
			}
			m.EpochId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DealerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DealerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)

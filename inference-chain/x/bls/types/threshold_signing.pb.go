// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: inference/bls/threshold_signing.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ThresholdSigningStatus defines the different states of a threshold signing request
type ThresholdSigningStatus int32

const (
	// UNDEFINED represents an uninitialized or unknown status
	ThresholdSigningStatus_THRESHOLD_SIGNING_STATUS_UNDEFINED ThresholdSigningStatus = 0
	// PENDING_SIGNING represents the initial state when a signing request is created
	ThresholdSigningStatus_THRESHOLD_SIGNING_STATUS_PENDING_SIGNING ThresholdSigningStatus = 1
	// COLLECTING_SIGNATURES represents the state when collecting partial signatures from participants
	ThresholdSigningStatus_THRESHOLD_SIGNING_STATUS_COLLECTING_SIGNATURES ThresholdSigningStatus = 2
	// COMPLETED represents the state when the threshold signature has been successfully created
	ThresholdSigningStatus_THRESHOLD_SIGNING_STATUS_COMPLETED ThresholdSigningStatus = 3
	// FAILED represents the state when the threshold signing process has failed
	ThresholdSigningStatus_THRESHOLD_SIGNING_STATUS_FAILED ThresholdSigningStatus = 4
	// EXPIRED represents the state when the deadline has passed without sufficient signatures
	ThresholdSigningStatus_THRESHOLD_SIGNING_STATUS_EXPIRED ThresholdSigningStatus = 5
)

var ThresholdSigningStatus_name = map[int32]string{
	0: "THRESHOLD_SIGNING_STATUS_UNDEFINED",
	1: "THRESHOLD_SIGNING_STATUS_PENDING_SIGNING",
	2: "THRESHOLD_SIGNING_STATUS_COLLECTING_SIGNATURES",
	3: "THRESHOLD_SIGNING_STATUS_COMPLETED",
	4: "THRESHOLD_SIGNING_STATUS_FAILED",
	5: "THRESHOLD_SIGNING_STATUS_EXPIRED",
}

var ThresholdSigningStatus_value = map[string]int32{
	"THRESHOLD_SIGNING_STATUS_UNDEFINED":             0,
	"THRESHOLD_SIGNING_STATUS_PENDING_SIGNING":       1,
	"THRESHOLD_SIGNING_STATUS_COLLECTING_SIGNATURES": 2,
	"THRESHOLD_SIGNING_STATUS_COMPLETED":             3,
	"THRESHOLD_SIGNING_STATUS_FAILED":                4,
	"THRESHOLD_SIGNING_STATUS_EXPIRED":               5,
}

func (x ThresholdSigningStatus) String() string {
	return proto.EnumName(ThresholdSigningStatus_name, int32(x))
}

func (ThresholdSigningStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2963c7579e87ce33, []int{0}
}

// SigningData represents the data structure for requesting a threshold signature
// Used as input to the RequestThresholdSignature keeper method
type SigningData struct {
	// current_epoch_index is the epoch to use for signing (must have completed DKG)
	CurrentEpochIndex uint64 `protobuf:"varint,1,opt,name=current_epoch_index,json=currentEpochIndex,proto3" json:"current_epoch_index,omitempty"`
	// chain_id is the 32-byte chain identifier for cross-chain security
	ChainId []byte `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// request_id is the unique 32-byte identifier provided by the calling module (e.g., tx_hash)
	RequestId []byte `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// data is the array of 32-byte data chunks to be signed (Ethereum-compatible format)
	Data [][]byte `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (m *SigningData) Reset()         { *m = SigningData{} }
func (m *SigningData) String() string { return proto.CompactTextString(m) }
func (*SigningData) ProtoMessage()    {}
func (*SigningData) Descriptor() ([]byte, []int) {
	return fileDescriptor_2963c7579e87ce33, []int{0}
}
func (m *SigningData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SigningData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SigningData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SigningData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SigningData.Merge(m, src)
}
func (m *SigningData) XXX_Size() int {
	return m.Size()
}
func (m *SigningData) XXX_DiscardUnknown() {
	xxx_messageInfo_SigningData.DiscardUnknown(m)
}

var xxx_messageInfo_SigningData proto.InternalMessageInfo

func (m *SigningData) GetCurrentEpochIndex() uint64 {
	if m != nil {
		return m.CurrentEpochIndex
	}
	return 0
}

func (m *SigningData) GetChainId() []byte {
	if m != nil {
		return m.ChainId
	}
	return nil
}

func (m *SigningData) GetRequestId() []byte {
	if m != nil {
		return m.RequestId
	}
	return nil
}

func (m *SigningData) GetData() [][]byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// ThresholdSigningRequest represents a complete threshold signing request stored on-chain
type ThresholdSigningRequest struct {
	// request_id is the unique 32-byte identifier for this signing request
	RequestId []byte `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// current_epoch_index is the epoch being used for signing
	CurrentEpochIndex uint64 `protobuf:"varint,2,opt,name=current_epoch_index,json=currentEpochIndex,proto3" json:"current_epoch_index,omitempty"`
	// chain_id is the 32-byte chain identifier for cross-chain security
	ChainId []byte `protobuf:"bytes,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// data is the original array of 32-byte data chunks to be signed
	Data [][]byte `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
	// encoded_data is the Ethereum-compatible abi.encodePacked result
	EncodedData []byte `protobuf:"bytes,5,opt,name=encoded_data,json=encodedData,proto3" json:"encoded_data,omitempty"`
	// message_hash is the keccak256 hash of the encoded_data (32 bytes)
	MessageHash []byte `protobuf:"bytes,6,opt,name=message_hash,json=messageHash,proto3" json:"message_hash,omitempty"`
	// status is the current state of the signing request
	Status ThresholdSigningStatus `protobuf:"varint,7,opt,name=status,proto3,enum=inference.bls.ThresholdSigningStatus" json:"status,omitempty"`
	// partial_signatures contains all partial signatures submitted by participants
	PartialSignatures []PartialSignature `protobuf:"bytes,8,rep,name=partial_signatures,json=partialSignatures,proto3" json:"partial_signatures"`
	// final_signature is the aggregated BLS signature (G1 point, 48-byte compressed format)
	// Only set when status is COMPLETED
	FinalSignature []byte `protobuf:"bytes,9,opt,name=final_signature,json=finalSignature,proto3" json:"final_signature,omitempty"`
	// created_block_height is the block height when this request was created
	CreatedBlockHeight int64 `protobuf:"varint,10,opt,name=created_block_height,json=createdBlockHeight,proto3" json:"created_block_height,omitempty"`
	// deadline_block_height is the block height after which this request expires
	DeadlineBlockHeight int64 `protobuf:"varint,11,opt,name=deadline_block_height,json=deadlineBlockHeight,proto3" json:"deadline_block_height,omitempty"`
}

func (m *ThresholdSigningRequest) Reset()         { *m = ThresholdSigningRequest{} }
func (m *ThresholdSigningRequest) String() string { return proto.CompactTextString(m) }
func (*ThresholdSigningRequest) ProtoMessage()    {}
func (*ThresholdSigningRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2963c7579e87ce33, []int{1}
}
func (m *ThresholdSigningRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThresholdSigningRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ThresholdSigningRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ThresholdSigningRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThresholdSigningRequest.Merge(m, src)
}
func (m *ThresholdSigningRequest) XXX_Size() int {
	return m.Size()
}
func (m *ThresholdSigningRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ThresholdSigningRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ThresholdSigningRequest proto.InternalMessageInfo

func (m *ThresholdSigningRequest) GetRequestId() []byte {
	if m != nil {
		return m.RequestId
	}
	return nil
}

func (m *ThresholdSigningRequest) GetCurrentEpochIndex() uint64 {
	if m != nil {
		return m.CurrentEpochIndex
	}
	return 0
}

func (m *ThresholdSigningRequest) GetChainId() []byte {
	if m != nil {
		return m.ChainId
	}
	return nil
}

func (m *ThresholdSigningRequest) GetData() [][]byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ThresholdSigningRequest) GetEncodedData() []byte {
	if m != nil {
		return m.EncodedData
	}
	return nil
}

func (m *ThresholdSigningRequest) GetMessageHash() []byte {
	if m != nil {
		return m.MessageHash
	}
	return nil
}

func (m *ThresholdSigningRequest) GetStatus() ThresholdSigningStatus {
	if m != nil {
		return m.Status
	}
	return ThresholdSigningStatus_THRESHOLD_SIGNING_STATUS_UNDEFINED
}

func (m *ThresholdSigningRequest) GetPartialSignatures() []PartialSignature {
	if m != nil {
		return m.PartialSignatures
	}
	return nil
}

func (m *ThresholdSigningRequest) GetFinalSignature() []byte {
	if m != nil {
		return m.FinalSignature
	}
	return nil
}

func (m *ThresholdSigningRequest) GetCreatedBlockHeight() int64 {
	if m != nil {
		return m.CreatedBlockHeight
	}
	return 0
}

func (m *ThresholdSigningRequest) GetDeadlineBlockHeight() int64 {
	if m != nil {
		return m.DeadlineBlockHeight
	}
	return 0
}

func init() {
	proto.RegisterEnum("inference.bls.ThresholdSigningStatus", ThresholdSigningStatus_name, ThresholdSigningStatus_value)
	proto.RegisterType((*SigningData)(nil), "inference.bls.SigningData")
	proto.RegisterType((*ThresholdSigningRequest)(nil), "inference.bls.ThresholdSigningRequest")
}

func init() {
	proto.RegisterFile("inference/bls/threshold_signing.proto", fileDescriptor_2963c7579e87ce33)
}

var fileDescriptor_2963c7579e87ce33 = []byte{
	// 606 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xcf, 0x6f, 0xd3, 0x30,
	0x1c, 0xc5, 0x9b, 0xb6, 0xfb, 0xe5, 0x8e, 0xd1, 0x79, 0x03, 0xc2, 0x24, 0xba, 0x30, 0x18, 0x44,
	0x08, 0xa5, 0xa8, 0x9c, 0x39, 0x6c, 0x8b, 0xb7, 0x46, 0x2a, 0x5d, 0x95, 0x64, 0x12, 0xe2, 0x12,
	0xb9, 0xb1, 0x97, 0x58, 0xa4, 0x49, 0x88, 0x1d, 0x69, 0x1c, 0x39, 0x73, 0xe1, 0xc2, 0xff, 0xb4,
	0xe3, 0x8e, 0x9c, 0x10, 0x5a, 0xff, 0x11, 0x54, 0x27, 0x1d, 0x6b, 0xb5, 0x22, 0x2e, 0x95, 0xfd,
	0xde, 0xe7, 0x7d, 0xfb, 0xdc, 0xc6, 0x01, 0xfb, 0x2c, 0x3e, 0xa7, 0x19, 0x8d, 0x7d, 0xda, 0x1e,
	0x46, 0xbc, 0x2d, 0xc2, 0x8c, 0xf2, 0x30, 0x89, 0x88, 0xc7, 0x59, 0x10, 0xb3, 0x38, 0x30, 0xd2,
	0x2c, 0x11, 0x09, 0xbc, 0x77, 0x83, 0x19, 0xc3, 0x88, 0xef, 0x6c, 0xe2, 0x11, 0x8b, 0x93, 0xb6,
	0xfc, 0x2c, 0x88, 0x9d, 0xed, 0x20, 0x09, 0x12, 0xb9, 0x6c, 0x4f, 0x56, 0xa5, 0xba, 0x33, 0x3b,
	0x3e, 0xc5, 0x19, 0x1e, 0xf1, 0xc2, 0xdb, 0xfb, 0xa6, 0x80, 0x86, 0x53, 0x7c, 0x8b, 0x89, 0x05,
	0x86, 0x06, 0xd8, 0xf2, 0xf3, 0x2c, 0xa3, 0xb1, 0xf0, 0x68, 0x9a, 0xf8, 0xa1, 0xc7, 0x62, 0x42,
	0x2f, 0x54, 0x45, 0x53, 0xf4, 0xba, 0xbd, 0x59, 0x5a, 0x68, 0xe2, 0x58, 0x13, 0x03, 0x3e, 0x06,
	0xab, 0x7e, 0x88, 0x59, 0xec, 0x31, 0xa2, 0x56, 0x35, 0x45, 0x5f, 0xb7, 0x57, 0xe4, 0xde, 0x22,
	0xf0, 0x09, 0x00, 0x19, 0xfd, 0x9c, 0x53, 0x2e, 0x26, 0x66, 0x4d, 0x9a, 0x6b, 0xa5, 0x62, 0x11,
	0x08, 0x41, 0x9d, 0x60, 0x81, 0xd5, 0xba, 0x56, 0xd3, 0xd7, 0x6d, 0xb9, 0xde, 0xfb, 0x5a, 0x07,
	0x8f, 0xdc, 0xe9, 0xe9, 0xcb, 0x5a, 0x76, 0x91, 0x98, 0x1b, 0xa7, 0xcc, 0x8f, 0x5b, 0x50, 0xbc,
	0xfa, 0x3f, 0xc5, 0x6b, 0xb3, 0xc5, 0xef, 0x68, 0x06, 0x9f, 0x82, 0x75, 0x1a, 0xfb, 0x09, 0xa1,
	0xc4, 0x93, 0xde, 0x92, 0x8c, 0x34, 0x4a, 0xcd, 0x2c, 0x91, 0x11, 0xe5, 0x1c, 0x07, 0xd4, 0x0b,
	0x31, 0x0f, 0xd5, 0xe5, 0x02, 0x29, 0xb5, 0x2e, 0xe6, 0x21, 0x7c, 0x07, 0x96, 0xb9, 0xc0, 0x22,
	0xe7, 0xea, 0x8a, 0xa6, 0xe8, 0x1b, 0x9d, 0x7d, 0x63, 0xe6, 0x2f, 0x35, 0xe6, 0xcf, 0xee, 0x48,
	0xd8, 0x2e, 0x43, 0xd0, 0x05, 0x30, 0xc5, 0x99, 0x60, 0x38, 0x92, 0x4f, 0x06, 0x16, 0x79, 0x46,
	0xb9, 0xba, 0xaa, 0xd5, 0xf4, 0x46, 0x67, 0x77, 0x6e, 0xd4, 0xa0, 0x00, 0x9d, 0x29, 0x77, 0x58,
	0xbf, 0xfc, 0xb5, 0x5b, 0xb1, 0x37, 0xd3, 0x39, 0x9d, 0xc3, 0x97, 0xe0, 0xfe, 0x39, 0x8b, 0x6f,
	0xcf, 0x54, 0xd7, 0x64, 0xf5, 0x0d, 0x29, 0xdf, 0x90, 0xf0, 0x0d, 0xd8, 0xf6, 0x33, 0x8a, 0x05,
	0x25, 0xde, 0x30, 0x4a, 0xfc, 0x4f, 0x5e, 0x48, 0x59, 0x10, 0x0a, 0x15, 0x68, 0x8a, 0x5e, 0xb3,
	0x61, 0xe9, 0x1d, 0x4e, 0xac, 0xae, 0x74, 0x60, 0x07, 0x3c, 0x20, 0x14, 0x93, 0x88, 0xc5, 0x74,
	0x36, 0xd2, 0x90, 0x91, 0xad, 0xa9, 0x79, 0x2b, 0xf3, 0xea, 0x47, 0x15, 0x3c, 0xbc, 0xfb, 0x77,
	0x80, 0x2f, 0xc0, 0x9e, 0xdb, 0xb5, 0x91, 0xd3, 0x3d, 0xed, 0x99, 0x9e, 0x63, 0x9d, 0xf4, 0xad,
	0xfe, 0x89, 0xe7, 0xb8, 0x07, 0xee, 0x99, 0xe3, 0x9d, 0xf5, 0x4d, 0x74, 0x6c, 0xf5, 0x91, 0xd9,
	0xac, 0xc0, 0xd7, 0x40, 0x5f, 0xc8, 0x0d, 0x50, 0xdf, 0x94, 0xdb, 0x42, 0x6e, 0x2a, 0xb0, 0x03,
	0x8c, 0x85, 0xf4, 0xd1, 0x69, 0xaf, 0x87, 0x8e, 0xdc, 0x69, 0xe0, 0xc0, 0x3d, 0xb3, 0x91, 0xd3,
	0xac, 0xfe, 0xb3, 0xc9, 0xd1, 0xe9, 0xfb, 0x41, 0x0f, 0xb9, 0xc8, 0x6c, 0xd6, 0xe0, 0x33, 0xb0,
	0xbb, 0x90, 0x3b, 0x3e, 0xb0, 0x7a, 0xc8, 0x6c, 0xd6, 0xe1, 0x73, 0xa0, 0x2d, 0x84, 0xd0, 0x87,
	0x81, 0x65, 0x23, 0xb3, 0xb9, 0x74, 0x68, 0x5d, 0x5e, 0xb7, 0x94, 0xab, 0xeb, 0x96, 0xf2, 0xfb,
	0xba, 0xa5, 0x7c, 0x1f, 0xb7, 0x2a, 0x57, 0xe3, 0x56, 0xe5, 0xe7, 0xb8, 0x55, 0xf9, 0xd8, 0x0e,
	0x98, 0x08, 0xf3, 0xa1, 0xe1, 0x27, 0xa3, 0x76, 0x9a, 0x25, 0x24, 0xf7, 0x05, 0xf7, 0x99, 0xbc,
	0xef, 0x7f, 0x6f, 0xfe, 0x45, 0xf1, 0x6a, 0xf9, 0x92, 0x52, 0x3e, 0x5c, 0x96, 0x77, 0xff, 0xed,
	0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd7, 0x68, 0x35, 0xf9, 0x78, 0x04, 0x00, 0x00,
}

func (m *SigningData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SigningData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SigningData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Data[iNdEx])
			copy(dAtA[i:], m.Data[iNdEx])
			i = encodeVarintThresholdSigning(dAtA, i, uint64(len(m.Data[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintThresholdSigning(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintThresholdSigning(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if m.CurrentEpochIndex != 0 {
		i = encodeVarintThresholdSigning(dAtA, i, uint64(m.CurrentEpochIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ThresholdSigningRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThresholdSigningRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ThresholdSigningRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeadlineBlockHeight != 0 {
		i = encodeVarintThresholdSigning(dAtA, i, uint64(m.DeadlineBlockHeight))
		i--
		dAtA[i] = 0x58
	}
	if m.CreatedBlockHeight != 0 {
		i = encodeVarintThresholdSigning(dAtA, i, uint64(m.CreatedBlockHeight))
		i--
		dAtA[i] = 0x50
	}
	if len(m.FinalSignature) > 0 {
		i -= len(m.FinalSignature)
		copy(dAtA[i:], m.FinalSignature)
		i = encodeVarintThresholdSigning(dAtA, i, uint64(len(m.FinalSignature)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.PartialSignatures) > 0 {
		for iNdEx := len(m.PartialSignatures) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PartialSignatures[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintThresholdSigning(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.Status != 0 {
		i = encodeVarintThresholdSigning(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x38
	}
	if len(m.MessageHash) > 0 {
		i -= len(m.MessageHash)
		copy(dAtA[i:], m.MessageHash)
		i = encodeVarintThresholdSigning(dAtA, i, uint64(len(m.MessageHash)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.EncodedData) > 0 {
		i -= len(m.EncodedData)
		copy(dAtA[i:], m.EncodedData)
		i = encodeVarintThresholdSigning(dAtA, i, uint64(len(m.EncodedData)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Data[iNdEx])
			copy(dAtA[i:], m.Data[iNdEx])
			i = encodeVarintThresholdSigning(dAtA, i, uint64(len(m.Data[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintThresholdSigning(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CurrentEpochIndex != 0 {
		i = encodeVarintThresholdSigning(dAtA, i, uint64(m.CurrentEpochIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintThresholdSigning(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintThresholdSigning(dAtA []byte, offset int, v uint64) int {
	offset -= sovThresholdSigning(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SigningData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentEpochIndex != 0 {
		n += 1 + sovThresholdSigning(uint64(m.CurrentEpochIndex))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovThresholdSigning(uint64(l))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovThresholdSigning(uint64(l))
	}
	if len(m.Data) > 0 {
		for _, b := range m.Data {
			l = len(b)
			n += 1 + l + sovThresholdSigning(uint64(l))
		}
	}
	return n
}

func (m *ThresholdSigningRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovThresholdSigning(uint64(l))
	}
	if m.CurrentEpochIndex != 0 {
		n += 1 + sovThresholdSigning(uint64(m.CurrentEpochIndex))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovThresholdSigning(uint64(l))
	}
	if len(m.Data) > 0 {
		for _, b := range m.Data {
			l = len(b)
			n += 1 + l + sovThresholdSigning(uint64(l))
		}
	}
	l = len(m.EncodedData)
	if l > 0 {
		n += 1 + l + sovThresholdSigning(uint64(l))
	}
	l = len(m.MessageHash)
	if l > 0 {
		n += 1 + l + sovThresholdSigning(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovThresholdSigning(uint64(m.Status))
	}
	if len(m.PartialSignatures) > 0 {
		for _, e := range m.PartialSignatures {
			l = e.Size()
			n += 1 + l + sovThresholdSigning(uint64(l))
		}
	}
	l = len(m.FinalSignature)
	if l > 0 {
		n += 1 + l + sovThresholdSigning(uint64(l))
	}
	if m.CreatedBlockHeight != 0 {
		n += 1 + sovThresholdSigning(uint64(m.CreatedBlockHeight))
	}
	if m.DeadlineBlockHeight != 0 {
		n += 1 + sovThresholdSigning(uint64(m.DeadlineBlockHeight))
	}
	return n
}

func sovThresholdSigning(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozThresholdSigning(x uint64) (n int) {
	return sovThresholdSigning(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SigningData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThresholdSigning
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SigningData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SigningData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentEpochIndex", wireType)
			}
			m.CurrentEpochIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThresholdSigning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentEpochIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThresholdSigning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThresholdSigning
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThresholdSigning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = append(m.ChainId[:0], dAtA[iNdEx:postIndex]...)
			if m.ChainId == nil {
				m.ChainId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThresholdSigning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThresholdSigning
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThresholdSigning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = append(m.RequestId[:0], dAtA[iNdEx:postIndex]...)
			if m.RequestId == nil {
				m.RequestId = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThresholdSigning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThresholdSigning
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThresholdSigning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, make([]byte, postIndex-iNdEx))
			copy(m.Data[len(m.Data)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThresholdSigning(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthThresholdSigning
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThresholdSigningRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThresholdSigning
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThresholdSigningRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThresholdSigningRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThresholdSigning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThresholdSigning
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThresholdSigning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = append(m.RequestId[:0], dAtA[iNdEx:postIndex]...)
			if m.RequestId == nil {
				m.RequestId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentEpochIndex", wireType)
			}
			m.CurrentEpochIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThresholdSigning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentEpochIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThresholdSigning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThresholdSigning
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThresholdSigning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = append(m.ChainId[:0], dAtA[iNdEx:postIndex]...)
			if m.ChainId == nil {
				m.ChainId = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThresholdSigning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThresholdSigning
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThresholdSigning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, make([]byte, postIndex-iNdEx))
			copy(m.Data[len(m.Data)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncodedData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThresholdSigning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThresholdSigning
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThresholdSigning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncodedData = append(m.EncodedData[:0], dAtA[iNdEx:postIndex]...)
			if m.EncodedData == nil {
				m.EncodedData = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThresholdSigning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThresholdSigning
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThresholdSigning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageHash = append(m.MessageHash[:0], dAtA[iNdEx:postIndex]...)
			if m.MessageHash == nil {
				m.MessageHash = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThresholdSigning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ThresholdSigningStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartialSignatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThresholdSigning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThresholdSigning
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthThresholdSigning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartialSignatures = append(m.PartialSignatures, PartialSignature{})
			if err := m.PartialSignatures[len(m.PartialSignatures)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThresholdSigning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthThresholdSigning
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthThresholdSigning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FinalSignature = append(m.FinalSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.FinalSignature == nil {
				m.FinalSignature = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedBlockHeight", wireType)
			}
			m.CreatedBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThresholdSigning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeadlineBlockHeight", wireType)
			}
			m.DeadlineBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThresholdSigning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeadlineBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipThresholdSigning(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthThresholdSigning
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipThresholdSigning(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowThresholdSigning
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowThresholdSigning
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowThresholdSigning
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthThresholdSigning
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupThresholdSigning
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthThresholdSigning
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthThresholdSigning        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowThresholdSigning          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupThresholdSigning = fmt.Errorf("proto: unexpected end of group")
)

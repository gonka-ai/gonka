// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: inference/bls/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgUpdateParams is the Msg/UpdateParams request type.
type MsgUpdateParams struct {
	// authority is the address that controls the module (defaults to x/gov unless overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// params defines the module parameters to update.
	//
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_06b0e6f51d329716, []int{0}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_06b0e6f51d329716, []int{1}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

// MsgSubmitDealerPart is the message for submitting dealer parts during the dealing phase
type MsgSubmitDealerPart struct {
	// creator is the address of the dealer submitting their part
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	// epoch_index identifies the DKG round this dealer part belongs to
	EpochIndex uint64 `protobuf:"varint,2,opt,name=epoch_index,json=epochIndex,proto3" json:"epoch_index,omitempty"`
	// commitments are the G2 points C_kj = g * a_kj representing polynomial commitments
	Commitments [][]byte `protobuf:"bytes,3,rep,name=commitments,proto3" json:"commitments,omitempty"`
	// encrypted_shares_for_participants contains encrypted shares for all participants in order
	// Index i = shares for EpochBLSData.participants[i]
	EncryptedSharesForParticipants []EncryptedSharesForParticipant `protobuf:"bytes,4,rep,name=encrypted_shares_for_participants,json=encryptedSharesForParticipants,proto3" json:"encrypted_shares_for_participants"`
}

func (m *MsgSubmitDealerPart) Reset()         { *m = MsgSubmitDealerPart{} }
func (m *MsgSubmitDealerPart) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitDealerPart) ProtoMessage()    {}
func (*MsgSubmitDealerPart) Descriptor() ([]byte, []int) {
	return fileDescriptor_06b0e6f51d329716, []int{2}
}
func (m *MsgSubmitDealerPart) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitDealerPart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitDealerPart.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitDealerPart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitDealerPart.Merge(m, src)
}
func (m *MsgSubmitDealerPart) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitDealerPart) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitDealerPart.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitDealerPart proto.InternalMessageInfo

func (m *MsgSubmitDealerPart) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSubmitDealerPart) GetEpochIndex() uint64 {
	if m != nil {
		return m.EpochIndex
	}
	return 0
}

func (m *MsgSubmitDealerPart) GetCommitments() [][]byte {
	if m != nil {
		return m.Commitments
	}
	return nil
}

func (m *MsgSubmitDealerPart) GetEncryptedSharesForParticipants() []EncryptedSharesForParticipant {
	if m != nil {
		return m.EncryptedSharesForParticipants
	}
	return nil
}

// MsgSubmitDealerPartResponse defines the response structure for executing a
// MsgSubmitDealerPart message.
type MsgSubmitDealerPartResponse struct {
}

func (m *MsgSubmitDealerPartResponse) Reset()         { *m = MsgSubmitDealerPartResponse{} }
func (m *MsgSubmitDealerPartResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitDealerPartResponse) ProtoMessage()    {}
func (*MsgSubmitDealerPartResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_06b0e6f51d329716, []int{3}
}
func (m *MsgSubmitDealerPartResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitDealerPartResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitDealerPartResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitDealerPartResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitDealerPartResponse.Merge(m, src)
}
func (m *MsgSubmitDealerPartResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitDealerPartResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitDealerPartResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitDealerPartResponse proto.InternalMessageInfo

// MsgSubmitVerificationVector is the message for confirming verification completion during the verifying phase
type MsgSubmitVerificationVector struct {
	// creator is the address of the participant confirming verification completion
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	// epoch_index identifies the DKG round this verification confirmation belongs to
	EpochIndex uint64 `protobuf:"varint,2,opt,name=epoch_index,json=epochIndex,proto3" json:"epoch_index,omitempty"`
	// dealer_validity is a bitmap indicating which dealers provided valid shares
	// Index i corresponds to EpochBLSData.participants[i] as dealer
	// true = dealer's shares verified correctly against their commitments
	// false = dealer's shares failed verification or dealer didn't submit
	DealerValidity []bool `protobuf:"varint,3,rep,packed,name=dealer_validity,json=dealerValidity,proto3" json:"dealer_validity,omitempty"`
}

func (m *MsgSubmitVerificationVector) Reset()         { *m = MsgSubmitVerificationVector{} }
func (m *MsgSubmitVerificationVector) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitVerificationVector) ProtoMessage()    {}
func (*MsgSubmitVerificationVector) Descriptor() ([]byte, []int) {
	return fileDescriptor_06b0e6f51d329716, []int{4}
}
func (m *MsgSubmitVerificationVector) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitVerificationVector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitVerificationVector.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitVerificationVector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitVerificationVector.Merge(m, src)
}
func (m *MsgSubmitVerificationVector) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitVerificationVector) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitVerificationVector.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitVerificationVector proto.InternalMessageInfo

func (m *MsgSubmitVerificationVector) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSubmitVerificationVector) GetEpochIndex() uint64 {
	if m != nil {
		return m.EpochIndex
	}
	return 0
}

func (m *MsgSubmitVerificationVector) GetDealerValidity() []bool {
	if m != nil {
		return m.DealerValidity
	}
	return nil
}

// MsgSubmitVerificationVectorResponse defines the response structure for executing a
// MsgSubmitVerificationVector message.
type MsgSubmitVerificationVectorResponse struct {
}

func (m *MsgSubmitVerificationVectorResponse) Reset()         { *m = MsgSubmitVerificationVectorResponse{} }
func (m *MsgSubmitVerificationVectorResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitVerificationVectorResponse) ProtoMessage()    {}
func (*MsgSubmitVerificationVectorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_06b0e6f51d329716, []int{5}
}
func (m *MsgSubmitVerificationVectorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitVerificationVectorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitVerificationVectorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitVerificationVectorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitVerificationVectorResponse.Merge(m, src)
}
func (m *MsgSubmitVerificationVectorResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitVerificationVectorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitVerificationVectorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitVerificationVectorResponse proto.InternalMessageInfo

// MsgSubmitGroupKeyValidationSignature is the message for submitting partial signatures for group key validation
type MsgSubmitGroupKeyValidationSignature struct {
	// creator is the address of the participant submitting their partial signature
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	// new_epoch_index identifies the epoch whose group public key is being validated
	NewEpochIndex uint64 `protobuf:"varint,2,opt,name=new_epoch_index,json=newEpochIndex,proto3" json:"new_epoch_index,omitempty"`
	// slot_indices are the slot indices this participant is signing for (from their previous epoch assignment)
	SlotIndices []uint32 `protobuf:"varint,3,rep,packed,name=slot_indices,json=slotIndices,proto3" json:"slot_indices,omitempty"`
	// partial_signature is the BLS partial signature (G1 point, 48-byte compressed format)
	PartialSignature []byte `protobuf:"bytes,4,opt,name=partial_signature,json=partialSignature,proto3" json:"partial_signature,omitempty"`
}

func (m *MsgSubmitGroupKeyValidationSignature) Reset()         { *m = MsgSubmitGroupKeyValidationSignature{} }
func (m *MsgSubmitGroupKeyValidationSignature) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitGroupKeyValidationSignature) ProtoMessage()    {}
func (*MsgSubmitGroupKeyValidationSignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_06b0e6f51d329716, []int{6}
}
func (m *MsgSubmitGroupKeyValidationSignature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitGroupKeyValidationSignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitGroupKeyValidationSignature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitGroupKeyValidationSignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitGroupKeyValidationSignature.Merge(m, src)
}
func (m *MsgSubmitGroupKeyValidationSignature) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitGroupKeyValidationSignature) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitGroupKeyValidationSignature.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitGroupKeyValidationSignature proto.InternalMessageInfo

func (m *MsgSubmitGroupKeyValidationSignature) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSubmitGroupKeyValidationSignature) GetNewEpochIndex() uint64 {
	if m != nil {
		return m.NewEpochIndex
	}
	return 0
}

func (m *MsgSubmitGroupKeyValidationSignature) GetSlotIndices() []uint32 {
	if m != nil {
		return m.SlotIndices
	}
	return nil
}

func (m *MsgSubmitGroupKeyValidationSignature) GetPartialSignature() []byte {
	if m != nil {
		return m.PartialSignature
	}
	return nil
}

// MsgSubmitGroupKeyValidationSignatureResponse defines the response structure for executing a
// MsgSubmitGroupKeyValidationSignature message.
type MsgSubmitGroupKeyValidationSignatureResponse struct {
}

func (m *MsgSubmitGroupKeyValidationSignatureResponse) Reset() {
	*m = MsgSubmitGroupKeyValidationSignatureResponse{}
}
func (m *MsgSubmitGroupKeyValidationSignatureResponse) String() string {
	return proto.CompactTextString(m)
}
func (*MsgSubmitGroupKeyValidationSignatureResponse) ProtoMessage() {}
func (*MsgSubmitGroupKeyValidationSignatureResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_06b0e6f51d329716, []int{7}
}
func (m *MsgSubmitGroupKeyValidationSignatureResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitGroupKeyValidationSignatureResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitGroupKeyValidationSignatureResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitGroupKeyValidationSignatureResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitGroupKeyValidationSignatureResponse.Merge(m, src)
}
func (m *MsgSubmitGroupKeyValidationSignatureResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitGroupKeyValidationSignatureResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitGroupKeyValidationSignatureResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitGroupKeyValidationSignatureResponse proto.InternalMessageInfo

// MsgSubmitPartialSignature is the message for submitting partial signatures for threshold signing
type MsgSubmitPartialSignature struct {
	// creator is the address of the participant submitting their partial signature
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	// request_id identifies the threshold signing request this partial signature is for
	RequestId []byte `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// slot_indices are the slot indices this participant is signing for (from their current epoch assignment)
	SlotIndices []uint32 `protobuf:"varint,3,rep,packed,name=slot_indices,json=slotIndices,proto3" json:"slot_indices,omitempty"`
	// partial_signature is the aggregated BLS partial signature for all participant's slots (G1 point, 48-byte compressed format)
	PartialSignature []byte `protobuf:"bytes,4,opt,name=partial_signature,json=partialSignature,proto3" json:"partial_signature,omitempty"`
}

func (m *MsgSubmitPartialSignature) Reset()         { *m = MsgSubmitPartialSignature{} }
func (m *MsgSubmitPartialSignature) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitPartialSignature) ProtoMessage()    {}
func (*MsgSubmitPartialSignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_06b0e6f51d329716, []int{8}
}
func (m *MsgSubmitPartialSignature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitPartialSignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitPartialSignature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitPartialSignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitPartialSignature.Merge(m, src)
}
func (m *MsgSubmitPartialSignature) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitPartialSignature) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitPartialSignature.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitPartialSignature proto.InternalMessageInfo

func (m *MsgSubmitPartialSignature) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSubmitPartialSignature) GetRequestId() []byte {
	if m != nil {
		return m.RequestId
	}
	return nil
}

func (m *MsgSubmitPartialSignature) GetSlotIndices() []uint32 {
	if m != nil {
		return m.SlotIndices
	}
	return nil
}

func (m *MsgSubmitPartialSignature) GetPartialSignature() []byte {
	if m != nil {
		return m.PartialSignature
	}
	return nil
}

// MsgSubmitPartialSignatureResponse defines the response structure for executing a
// MsgSubmitPartialSignature message.
type MsgSubmitPartialSignatureResponse struct {
}

func (m *MsgSubmitPartialSignatureResponse) Reset()         { *m = MsgSubmitPartialSignatureResponse{} }
func (m *MsgSubmitPartialSignatureResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitPartialSignatureResponse) ProtoMessage()    {}
func (*MsgSubmitPartialSignatureResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_06b0e6f51d329716, []int{9}
}
func (m *MsgSubmitPartialSignatureResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitPartialSignatureResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitPartialSignatureResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitPartialSignatureResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitPartialSignatureResponse.Merge(m, src)
}
func (m *MsgSubmitPartialSignatureResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitPartialSignatureResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitPartialSignatureResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitPartialSignatureResponse proto.InternalMessageInfo

// MsgRequestThresholdSignature allows external users to request a threshold signature via transaction
type MsgRequestThresholdSignature struct {
	// creator is the address of the user requesting the threshold signature
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	// current_epoch_index identifies the epoch to use for signing
	CurrentEpochIndex uint64 `protobuf:"varint,2,opt,name=current_epoch_index,json=currentEpochIndex,proto3" json:"current_epoch_index,omitempty"`
	// chain_id is the chain ID for EIP-155 compatibility (32 bytes)
	ChainId []byte `protobuf:"bytes,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// request_id is the user-provided unique identifier for this request (32 bytes)
	RequestId []byte `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// data is the arbitrary data to be signed (array of 32-byte chunks)
	Data [][]byte `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
}

func (m *MsgRequestThresholdSignature) Reset()         { *m = MsgRequestThresholdSignature{} }
func (m *MsgRequestThresholdSignature) String() string { return proto.CompactTextString(m) }
func (*MsgRequestThresholdSignature) ProtoMessage()    {}
func (*MsgRequestThresholdSignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_06b0e6f51d329716, []int{10}
}
func (m *MsgRequestThresholdSignature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestThresholdSignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestThresholdSignature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestThresholdSignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestThresholdSignature.Merge(m, src)
}
func (m *MsgRequestThresholdSignature) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestThresholdSignature) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestThresholdSignature.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestThresholdSignature proto.InternalMessageInfo

func (m *MsgRequestThresholdSignature) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRequestThresholdSignature) GetCurrentEpochIndex() uint64 {
	if m != nil {
		return m.CurrentEpochIndex
	}
	return 0
}

func (m *MsgRequestThresholdSignature) GetChainId() []byte {
	if m != nil {
		return m.ChainId
	}
	return nil
}

func (m *MsgRequestThresholdSignature) GetRequestId() []byte {
	if m != nil {
		return m.RequestId
	}
	return nil
}

func (m *MsgRequestThresholdSignature) GetData() [][]byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// MsgRequestThresholdSignatureResponse defines the response structure for executing a
// MsgRequestThresholdSignature message.
type MsgRequestThresholdSignatureResponse struct {
}

func (m *MsgRequestThresholdSignatureResponse) Reset()         { *m = MsgRequestThresholdSignatureResponse{} }
func (m *MsgRequestThresholdSignatureResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRequestThresholdSignatureResponse) ProtoMessage()    {}
func (*MsgRequestThresholdSignatureResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_06b0e6f51d329716, []int{11}
}
func (m *MsgRequestThresholdSignatureResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestThresholdSignatureResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestThresholdSignatureResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestThresholdSignatureResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestThresholdSignatureResponse.Merge(m, src)
}
func (m *MsgRequestThresholdSignatureResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestThresholdSignatureResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestThresholdSignatureResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestThresholdSignatureResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgUpdateParams)(nil), "inference.bls.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "inference.bls.MsgUpdateParamsResponse")
	proto.RegisterType((*MsgSubmitDealerPart)(nil), "inference.bls.MsgSubmitDealerPart")
	proto.RegisterType((*MsgSubmitDealerPartResponse)(nil), "inference.bls.MsgSubmitDealerPartResponse")
	proto.RegisterType((*MsgSubmitVerificationVector)(nil), "inference.bls.MsgSubmitVerificationVector")
	proto.RegisterType((*MsgSubmitVerificationVectorResponse)(nil), "inference.bls.MsgSubmitVerificationVectorResponse")
	proto.RegisterType((*MsgSubmitGroupKeyValidationSignature)(nil), "inference.bls.MsgSubmitGroupKeyValidationSignature")
	proto.RegisterType((*MsgSubmitGroupKeyValidationSignatureResponse)(nil), "inference.bls.MsgSubmitGroupKeyValidationSignatureResponse")
	proto.RegisterType((*MsgSubmitPartialSignature)(nil), "inference.bls.MsgSubmitPartialSignature")
	proto.RegisterType((*MsgSubmitPartialSignatureResponse)(nil), "inference.bls.MsgSubmitPartialSignatureResponse")
	proto.RegisterType((*MsgRequestThresholdSignature)(nil), "inference.bls.MsgRequestThresholdSignature")
	proto.RegisterType((*MsgRequestThresholdSignatureResponse)(nil), "inference.bls.MsgRequestThresholdSignatureResponse")
}

func init() { proto.RegisterFile("inference/bls/tx.proto", fileDescriptor_06b0e6f51d329716) }

var fileDescriptor_06b0e6f51d329716 = []byte{
	// 909 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x96, 0xcf, 0x6f, 0xe3, 0x44,
	0x14, 0xc7, 0xeb, 0x26, 0xdd, 0xdd, 0xbe, 0xa4, 0x74, 0xeb, 0x5d, 0x76, 0x13, 0xc3, 0xa6, 0xa9,
	0x0b, 0x25, 0xb4, 0x25, 0x81, 0x74, 0x85, 0x50, 0x80, 0x03, 0x15, 0x05, 0x45, 0xa8, 0x52, 0xe5,
	0x42, 0x0f, 0x5c, 0xac, 0x89, 0x3d, 0x75, 0x46, 0x8a, 0x3d, 0x66, 0x66, 0xb2, 0xdb, 0x22, 0xad,
	0x84, 0x38, 0x72, 0x81, 0x0b, 0x07, 0xfe, 0x03, 0x8e, 0x3d, 0x20, 0x71, 0xe6, 0xb6, 0xc7, 0x85,
	0x13, 0x5c, 0x10, 0x6a, 0x0f, 0xfd, 0x1f, 0x38, 0x21, 0x8f, 0x7f, 0xb4, 0x9d, 0xc4, 0x69, 0x29,
	0xec, 0xa5, 0x8d, 0xdf, 0xfb, 0xbe, 0x37, 0xdf, 0xf7, 0xd1, 0xcc, 0xd8, 0x70, 0x8f, 0x04, 0xfb,
	0x98, 0xe1, 0xc0, 0xc1, 0xad, 0xde, 0x80, 0xb7, 0xc4, 0x41, 0x33, 0x64, 0x54, 0x50, 0x7d, 0x2e,
	0x8b, 0x37, 0x7b, 0x03, 0x6e, 0x2c, 0x20, 0x9f, 0x04, 0xb4, 0x25, 0xff, 0xc6, 0x0a, 0xe3, 0xbe,
	0x43, 0xb9, 0x4f, 0x79, 0xcb, 0xe7, 0x5e, 0xeb, 0xd1, 0x5b, 0xd1, 0xbf, 0x24, 0x51, 0x8d, 0x13,
	0xb6, 0x7c, 0x6a, 0xc5, 0x0f, 0x49, 0xea, 0xae, 0x47, 0x3d, 0x1a, 0xc7, 0xa3, 0x5f, 0x49, 0xd4,
	0xb8, 0xe8, 0x21, 0x44, 0x0c, 0xf9, 0x69, 0x45, 0x55, 0xf1, 0x77, 0x18, 0xe2, 0x24, 0x65, 0xfe,
	0xac, 0xc1, 0xfc, 0x36, 0xf7, 0x3e, 0x0b, 0x5d, 0x24, 0xf0, 0x8e, 0x2c, 0xd2, 0xdf, 0x86, 0x59,
	0x34, 0x14, 0x7d, 0xca, 0x88, 0x38, 0xac, 0x68, 0x75, 0xad, 0x31, 0xbb, 0x59, 0xf9, 0xed, 0xa7,
	0x37, 0xee, 0x26, 0x2e, 0x3e, 0x70, 0x5d, 0x86, 0x39, 0xdf, 0x15, 0x8c, 0x04, 0x9e, 0x75, 0x26,
	0xd5, 0xdf, 0x81, 0x1b, 0xf1, 0xb2, 0x95, 0xe9, 0xba, 0xd6, 0x28, 0xb5, 0x5f, 0x6c, 0x5e, 0x98,
	0xbf, 0x19, 0xb7, 0xdf, 0x9c, 0x7d, 0xfa, 0xe7, 0xe2, 0xd4, 0x8f, 0xa7, 0x47, 0xab, 0x9a, 0x95,
	0xe8, 0x3b, 0xed, 0xaf, 0x4f, 0x8f, 0x56, 0xcf, 0x3a, 0x7d, 0x73, 0x7a, 0xb4, 0xba, 0x78, 0xe6,
	0xf9, 0x40, 0xba, 0x56, 0x5c, 0x9a, 0x55, 0xb8, 0xaf, 0x84, 0x2c, 0xcc, 0x43, 0x1a, 0x70, 0x6c,
	0xfe, 0x32, 0x0d, 0x77, 0xb6, 0xb9, 0xb7, 0x3b, 0xec, 0xf9, 0x44, 0x7c, 0x88, 0xd1, 0x00, 0xb3,
	0x1d, 0xc4, 0x84, 0xde, 0x86, 0x9b, 0x0e, 0xc3, 0x48, 0x50, 0x76, 0xe9, 0x58, 0xa9, 0x50, 0x5f,
	0x84, 0x12, 0x0e, 0xa9, 0xd3, 0xb7, 0x49, 0xe0, 0xe2, 0x03, 0x39, 0x59, 0xd1, 0x02, 0x19, 0xea,
	0x46, 0x11, 0xbd, 0x0e, 0x25, 0x87, 0xfa, 0x3e, 0x11, 0x3e, 0x0e, 0x04, 0xaf, 0x14, 0xea, 0x85,
	0x46, 0xd9, 0x3a, 0x1f, 0xd2, 0x9f, 0xc0, 0x12, 0x0e, 0x1c, 0x76, 0x18, 0x0a, 0xec, 0xda, 0xbc,
	0x8f, 0x18, 0xe6, 0xf6, 0x3e, 0x65, 0x76, 0x88, 0x98, 0x20, 0x0e, 0x09, 0x51, 0x54, 0x57, 0xac,
	0x17, 0x1a, 0xa5, 0xf6, 0xba, 0x82, 0x6c, 0x2b, 0xad, 0xdb, 0x95, 0x65, 0x1f, 0x51, 0x39, 0x48,
	0x52, 0xb4, 0x59, 0x8c, 0x48, 0x5a, 0x35, 0x3c, 0x49, 0xc4, 0x3b, 0x0f, 0x23, 0xb8, 0xe9, 0x3c,
	0x11, 0xda, 0xe5, 0x31, 0x68, 0x55, 0x56, 0xe6, 0x03, 0x78, 0x69, 0x4c, 0x38, 0x43, 0xfc, 0x87,
	0x76, 0x2e, 0xbf, 0x87, 0x19, 0xd9, 0x27, 0x0e, 0x12, 0x84, 0x06, 0x7b, 0xd8, 0x89, 0xb0, 0x3d,
	0x17, 0xd4, 0xaf, 0xc1, 0xbc, 0x2b, 0xad, 0xd8, 0x8f, 0xd0, 0x80, 0xb8, 0xd1, 0xf6, 0x8c, 0x70,
	0xdf, 0xb2, 0x5e, 0x88, 0xc3, 0x7b, 0x49, 0xb4, 0xf3, 0x9e, 0x3a, 0xf2, 0x5a, 0xee, 0xc8, 0xa3,
	0xde, 0xcd, 0x57, 0x61, 0x79, 0x42, 0x3a, 0x43, 0xf0, 0xc3, 0x34, 0xbc, 0x92, 0xe9, 0x3e, 0x66,
	0x74, 0x18, 0x7e, 0x82, 0x0f, 0xa5, 0x05, 0xa9, 0xde, 0x25, 0x5e, 0x80, 0xc4, 0x90, 0xe1, 0x6b,
	0xb1, 0x58, 0x81, 0xf9, 0x00, 0x3f, 0xb6, 0x47, 0x79, 0xcc, 0x05, 0xf8, 0xf1, 0xd6, 0x19, 0x92,
	0x25, 0x28, 0xf3, 0x01, 0x15, 0x91, 0x84, 0x38, 0x38, 0xde, 0x7e, 0x73, 0x56, 0x29, 0x8a, 0x75,
	0xe3, 0x90, 0xbe, 0x06, 0x0b, 0x72, 0xa7, 0xa1, 0x81, 0xcd, 0x53, 0x4f, 0x95, 0x62, 0x5d, 0x6b,
	0x94, 0xad, 0xdb, 0x49, 0x22, 0xf3, 0xda, 0xd9, 0x52, 0xc9, 0x3d, 0xcc, 0x25, 0x37, 0x61, 0x64,
	0xb3, 0x09, 0xeb, 0x57, 0xd1, 0x65, 0x2c, 0xff, 0xd6, 0xa0, 0x9a, 0x15, 0xec, 0x28, 0xa6, 0xae,
	0x05, 0xf0, 0x01, 0x00, 0xc3, 0x5f, 0x0c, 0x31, 0x17, 0x36, 0x71, 0x25, 0xbb, 0xb2, 0x35, 0x9b,
	0x44, 0xba, 0xee, 0xff, 0xce, 0xad, 0xa3, 0x72, 0x7b, 0x3d, 0x97, 0x9b, 0x3a, 0x9e, 0xb9, 0x0c,
	0x4b, 0xb9, 0xc9, 0x8c, 0xd0, 0xb7, 0xd3, 0xf0, 0xf2, 0x36, 0xf7, 0xac, 0x78, 0x82, 0x4f, 0xfb,
	0x0c, 0xf3, 0x3e, 0x1d, 0xb8, 0xff, 0x0d, 0x52, 0x13, 0xee, 0x38, 0x43, 0xc6, 0x70, 0x20, 0xc6,
	0xec, 0xb4, 0x85, 0x24, 0x75, 0x6e, 0xb7, 0x55, 0xe1, 0x96, 0xd3, 0x47, 0x24, 0x88, 0x90, 0x16,
	0x24, 0x89, 0x9b, 0xf2, 0xb9, 0xeb, 0x2a, 0xbc, 0x8b, 0x2a, 0x6f, 0x1d, 0x8a, 0x2e, 0x12, 0xa8,
	0x32, 0x23, 0xaf, 0x47, 0xf9, 0xbb, 0xf3, 0xbe, 0xca, 0x6c, 0x7d, 0x0c, 0xb3, 0xdc, 0x81, 0xcd,
	0x15, 0x79, 0xfc, 0x72, 0xf3, 0x29, 0xb9, 0xf6, 0xaf, 0x33, 0x50, 0xd8, 0xe6, 0x9e, 0xbe, 0x07,
	0xe5, 0x0b, 0xaf, 0xb9, 0x9a, 0x72, 0xd7, 0x2a, 0x6f, 0x13, 0x63, 0x65, 0x72, 0x3e, 0xed, 0xaf,
	0xf7, 0xe0, 0xf6, 0xc8, 0x9b, 0xc6, 0x1c, 0xad, 0x55, 0x35, 0xc6, 0xea, 0xe5, 0x9a, 0x6c, 0x8d,
	0x2f, 0xa1, 0x92, 0x7b, 0xd5, 0xe6, 0xf6, 0x19, 0xd5, 0x1a, 0xed, 0xab, 0x6b, 0xb3, 0xb5, 0xbf,
	0xd7, 0x60, 0xe9, 0xf2, 0x4b, 0x6e, 0x23, 0xaf, 0xf3, 0x84, 0x22, 0xe3, 0xdd, 0x6b, 0x14, 0x65,
	0xbe, 0x04, 0xdc, 0xcb, 0xb9, 0x2f, 0x1a, 0x79, 0x6d, 0x55, 0xa5, 0xf1, 0xe6, 0x55, 0x95, 0xd9,
	0xaa, 0x4f, 0xa0, 0x9a, 0x7f, 0x06, 0xd7, 0x46, 0xdb, 0xe5, 0x8a, 0x8d, 0x8d, 0x7f, 0x21, 0x4e,
	0x97, 0x37, 0x66, 0xbe, 0x8a, 0x3e, 0x9c, 0x36, 0xbb, 0x4f, 0x8f, 0x6b, 0xda, 0xb3, 0xe3, 0x9a,
	0xf6, 0xd7, 0x71, 0x4d, 0xfb, 0xee, 0xa4, 0x36, 0xf5, 0xec, 0xa4, 0x36, 0xf5, 0xfb, 0x49, 0x6d,
	0xea, 0xf3, 0x96, 0x47, 0x44, 0x7f, 0xd8, 0x6b, 0x3a, 0xd4, 0x6f, 0x85, 0x8c, 0xba, 0x43, 0x47,
	0x70, 0x87, 0xc8, 0x33, 0xa5, 0x9e, 0x2e, 0xf9, 0x1d, 0xd8, 0xbb, 0x21, 0x3f, 0x04, 0x37, 0xfe,
	0x09, 0x00, 0x00, 0xff, 0xff, 0x93, 0x14, 0x04, 0x81, 0xc5, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	// SubmitDealerPart allows a participant to submit their dealer part during the dealing phase
	SubmitDealerPart(ctx context.Context, in *MsgSubmitDealerPart, opts ...grpc.CallOption) (*MsgSubmitDealerPartResponse, error)
	// SubmitVerificationVector allows a participant to confirm they completed verification during the verifying phase
	SubmitVerificationVector(ctx context.Context, in *MsgSubmitVerificationVector, opts ...grpc.CallOption) (*MsgSubmitVerificationVectorResponse, error)
	// SubmitGroupKeyValidationSignature allows a participant to submit their partial signature for group key validation
	SubmitGroupKeyValidationSignature(ctx context.Context, in *MsgSubmitGroupKeyValidationSignature, opts ...grpc.CallOption) (*MsgSubmitGroupKeyValidationSignatureResponse, error)
	// SubmitPartialSignature allows a participant to submit their partial signature for threshold signing
	SubmitPartialSignature(ctx context.Context, in *MsgSubmitPartialSignature, opts ...grpc.CallOption) (*MsgSubmitPartialSignatureResponse, error)
	// RequestThresholdSignature allows external users to request a threshold signature
	RequestThresholdSignature(ctx context.Context, in *MsgRequestThresholdSignature, opts ...grpc.CallOption) (*MsgRequestThresholdSignatureResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/inference.bls.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitDealerPart(ctx context.Context, in *MsgSubmitDealerPart, opts ...grpc.CallOption) (*MsgSubmitDealerPartResponse, error) {
	out := new(MsgSubmitDealerPartResponse)
	err := c.cc.Invoke(ctx, "/inference.bls.Msg/SubmitDealerPart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitVerificationVector(ctx context.Context, in *MsgSubmitVerificationVector, opts ...grpc.CallOption) (*MsgSubmitVerificationVectorResponse, error) {
	out := new(MsgSubmitVerificationVectorResponse)
	err := c.cc.Invoke(ctx, "/inference.bls.Msg/SubmitVerificationVector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitGroupKeyValidationSignature(ctx context.Context, in *MsgSubmitGroupKeyValidationSignature, opts ...grpc.CallOption) (*MsgSubmitGroupKeyValidationSignatureResponse, error) {
	out := new(MsgSubmitGroupKeyValidationSignatureResponse)
	err := c.cc.Invoke(ctx, "/inference.bls.Msg/SubmitGroupKeyValidationSignature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitPartialSignature(ctx context.Context, in *MsgSubmitPartialSignature, opts ...grpc.CallOption) (*MsgSubmitPartialSignatureResponse, error) {
	out := new(MsgSubmitPartialSignatureResponse)
	err := c.cc.Invoke(ctx, "/inference.bls.Msg/SubmitPartialSignature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RequestThresholdSignature(ctx context.Context, in *MsgRequestThresholdSignature, opts ...grpc.CallOption) (*MsgRequestThresholdSignatureResponse, error) {
	out := new(MsgRequestThresholdSignatureResponse)
	err := c.cc.Invoke(ctx, "/inference.bls.Msg/RequestThresholdSignature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	// SubmitDealerPart allows a participant to submit their dealer part during the dealing phase
	SubmitDealerPart(context.Context, *MsgSubmitDealerPart) (*MsgSubmitDealerPartResponse, error)
	// SubmitVerificationVector allows a participant to confirm they completed verification during the verifying phase
	SubmitVerificationVector(context.Context, *MsgSubmitVerificationVector) (*MsgSubmitVerificationVectorResponse, error)
	// SubmitGroupKeyValidationSignature allows a participant to submit their partial signature for group key validation
	SubmitGroupKeyValidationSignature(context.Context, *MsgSubmitGroupKeyValidationSignature) (*MsgSubmitGroupKeyValidationSignatureResponse, error)
	// SubmitPartialSignature allows a participant to submit their partial signature for threshold signing
	SubmitPartialSignature(context.Context, *MsgSubmitPartialSignature) (*MsgSubmitPartialSignatureResponse, error)
	// RequestThresholdSignature allows external users to request a threshold signature
	RequestThresholdSignature(context.Context, *MsgRequestThresholdSignature) (*MsgRequestThresholdSignatureResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (*UnimplementedMsgServer) SubmitDealerPart(ctx context.Context, req *MsgSubmitDealerPart) (*MsgSubmitDealerPartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitDealerPart not implemented")
}
func (*UnimplementedMsgServer) SubmitVerificationVector(ctx context.Context, req *MsgSubmitVerificationVector) (*MsgSubmitVerificationVectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitVerificationVector not implemented")
}
func (*UnimplementedMsgServer) SubmitGroupKeyValidationSignature(ctx context.Context, req *MsgSubmitGroupKeyValidationSignature) (*MsgSubmitGroupKeyValidationSignatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitGroupKeyValidationSignature not implemented")
}
func (*UnimplementedMsgServer) SubmitPartialSignature(ctx context.Context, req *MsgSubmitPartialSignature) (*MsgSubmitPartialSignatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitPartialSignature not implemented")
}
func (*UnimplementedMsgServer) RequestThresholdSignature(ctx context.Context, req *MsgRequestThresholdSignature) (*MsgRequestThresholdSignatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestThresholdSignature not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.bls.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitDealerPart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitDealerPart)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitDealerPart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.bls.Msg/SubmitDealerPart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitDealerPart(ctx, req.(*MsgSubmitDealerPart))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitVerificationVector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitVerificationVector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitVerificationVector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.bls.Msg/SubmitVerificationVector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitVerificationVector(ctx, req.(*MsgSubmitVerificationVector))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitGroupKeyValidationSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitGroupKeyValidationSignature)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitGroupKeyValidationSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.bls.Msg/SubmitGroupKeyValidationSignature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitGroupKeyValidationSignature(ctx, req.(*MsgSubmitGroupKeyValidationSignature))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitPartialSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitPartialSignature)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitPartialSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.bls.Msg/SubmitPartialSignature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitPartialSignature(ctx, req.(*MsgSubmitPartialSignature))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RequestThresholdSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRequestThresholdSignature)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RequestThresholdSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.bls.Msg/RequestThresholdSignature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RequestThresholdSignature(ctx, req.(*MsgRequestThresholdSignature))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "inference.bls.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "SubmitDealerPart",
			Handler:    _Msg_SubmitDealerPart_Handler,
		},
		{
			MethodName: "SubmitVerificationVector",
			Handler:    _Msg_SubmitVerificationVector_Handler,
		},
		{
			MethodName: "SubmitGroupKeyValidationSignature",
			Handler:    _Msg_SubmitGroupKeyValidationSignature_Handler,
		},
		{
			MethodName: "SubmitPartialSignature",
			Handler:    _Msg_SubmitPartialSignature_Handler,
		},
		{
			MethodName: "RequestThresholdSignature",
			Handler:    _Msg_RequestThresholdSignature_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inference/bls/tx.proto",
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitDealerPart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitDealerPart) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitDealerPart) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EncryptedSharesForParticipants) > 0 {
		for iNdEx := len(m.EncryptedSharesForParticipants) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EncryptedSharesForParticipants[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Commitments) > 0 {
		for iNdEx := len(m.Commitments) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Commitments[iNdEx])
			copy(dAtA[i:], m.Commitments[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Commitments[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.EpochIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.EpochIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitDealerPartResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitDealerPartResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitDealerPartResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitVerificationVector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitVerificationVector) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitVerificationVector) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DealerValidity) > 0 {
		for iNdEx := len(m.DealerValidity) - 1; iNdEx >= 0; iNdEx-- {
			i--
			if m.DealerValidity[iNdEx] {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
		}
		i = encodeVarintTx(dAtA, i, uint64(len(m.DealerValidity)))
		i--
		dAtA[i] = 0x1a
	}
	if m.EpochIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.EpochIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitVerificationVectorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitVerificationVectorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitVerificationVectorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitGroupKeyValidationSignature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitGroupKeyValidationSignature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitGroupKeyValidationSignature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PartialSignature) > 0 {
		i -= len(m.PartialSignature)
		copy(dAtA[i:], m.PartialSignature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PartialSignature)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SlotIndices) > 0 {
		dAtA3 := make([]byte, len(m.SlotIndices)*10)
		var j2 int
		for _, num := range m.SlotIndices {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintTx(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x1a
	}
	if m.NewEpochIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.NewEpochIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitGroupKeyValidationSignatureResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitGroupKeyValidationSignatureResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitGroupKeyValidationSignatureResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitPartialSignature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitPartialSignature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitPartialSignature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PartialSignature) > 0 {
		i -= len(m.PartialSignature)
		copy(dAtA[i:], m.PartialSignature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PartialSignature)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SlotIndices) > 0 {
		dAtA5 := make([]byte, len(m.SlotIndices)*10)
		var j4 int
		for _, num := range m.SlotIndices {
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintTx(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitPartialSignatureResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitPartialSignatureResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitPartialSignatureResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRequestThresholdSignature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestThresholdSignature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestThresholdSignature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Data[iNdEx])
			copy(dAtA[i:], m.Data[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Data[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CurrentEpochIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CurrentEpochIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRequestThresholdSignatureResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestThresholdSignatureResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestThresholdSignatureResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitDealerPart) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.EpochIndex != 0 {
		n += 1 + sovTx(uint64(m.EpochIndex))
	}
	if len(m.Commitments) > 0 {
		for _, b := range m.Commitments {
			l = len(b)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.EncryptedSharesForParticipants) > 0 {
		for _, e := range m.EncryptedSharesForParticipants {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgSubmitDealerPartResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitVerificationVector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.EpochIndex != 0 {
		n += 1 + sovTx(uint64(m.EpochIndex))
	}
	if len(m.DealerValidity) > 0 {
		n += 1 + sovTx(uint64(len(m.DealerValidity))) + len(m.DealerValidity)*1
	}
	return n
}

func (m *MsgSubmitVerificationVectorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitGroupKeyValidationSignature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.NewEpochIndex != 0 {
		n += 1 + sovTx(uint64(m.NewEpochIndex))
	}
	if len(m.SlotIndices) > 0 {
		l = 0
		for _, e := range m.SlotIndices {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	l = len(m.PartialSignature)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSubmitGroupKeyValidationSignatureResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitPartialSignature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.SlotIndices) > 0 {
		l = 0
		for _, e := range m.SlotIndices {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	l = len(m.PartialSignature)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSubmitPartialSignatureResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRequestThresholdSignature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CurrentEpochIndex != 0 {
		n += 1 + sovTx(uint64(m.CurrentEpochIndex))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Data) > 0 {
		for _, b := range m.Data {
			l = len(b)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgRequestThresholdSignatureResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitDealerPart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitDealerPart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitDealerPart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochIndex", wireType)
			}
			m.EpochIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commitments", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commitments = append(m.Commitments, make([]byte, postIndex-iNdEx))
			copy(m.Commitments[len(m.Commitments)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedSharesForParticipants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedSharesForParticipants = append(m.EncryptedSharesForParticipants, EncryptedSharesForParticipant{})
			if err := m.EncryptedSharesForParticipants[len(m.EncryptedSharesForParticipants)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitDealerPartResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitDealerPartResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitDealerPartResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitVerificationVector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitVerificationVector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitVerificationVector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochIndex", wireType)
			}
			m.EpochIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DealerValidity = append(m.DealerValidity, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen
				if elementCount != 0 && len(m.DealerValidity) == 0 {
					m.DealerValidity = make([]bool, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DealerValidity = append(m.DealerValidity, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DealerValidity", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitVerificationVectorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitVerificationVectorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitVerificationVectorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitGroupKeyValidationSignature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitGroupKeyValidationSignature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitGroupKeyValidationSignature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewEpochIndex", wireType)
			}
			m.NewEpochIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewEpochIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SlotIndices = append(m.SlotIndices, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SlotIndices) == 0 {
					m.SlotIndices = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SlotIndices = append(m.SlotIndices, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotIndices", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartialSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartialSignature = append(m.PartialSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.PartialSignature == nil {
				m.PartialSignature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitGroupKeyValidationSignatureResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitGroupKeyValidationSignatureResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitGroupKeyValidationSignatureResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitPartialSignature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitPartialSignature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitPartialSignature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = append(m.RequestId[:0], dAtA[iNdEx:postIndex]...)
			if m.RequestId == nil {
				m.RequestId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SlotIndices = append(m.SlotIndices, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SlotIndices) == 0 {
					m.SlotIndices = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SlotIndices = append(m.SlotIndices, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotIndices", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartialSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartialSignature = append(m.PartialSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.PartialSignature == nil {
				m.PartialSignature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitPartialSignatureResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitPartialSignatureResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitPartialSignatureResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequestThresholdSignature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestThresholdSignature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestThresholdSignature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentEpochIndex", wireType)
			}
			m.CurrentEpochIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentEpochIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = append(m.ChainId[:0], dAtA[iNdEx:postIndex]...)
			if m.ChainId == nil {
				m.ChainId = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = append(m.RequestId[:0], dAtA[iNdEx:postIndex]...)
			if m.RequestId == nil {
				m.RequestId = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, make([]byte, postIndex-iNdEx))
			copy(m.Data[len(m.Data)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequestThresholdSignatureResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestThresholdSignatureResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestThresholdSignatureResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)

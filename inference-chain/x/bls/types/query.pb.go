// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: inference/bls/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b19bd0a6a108cf6a, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b19bd0a6a108cf6a, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryEpochBLSDataRequest is request type for the Query/EpochBLSData RPC method.
type QueryEpochBLSDataRequest struct {
	// epoch_index identifies the DKG round to query complete data for
	EpochIndex uint64 `protobuf:"varint,1,opt,name=epoch_index,json=epochIndex,proto3" json:"epoch_index,omitempty"`
}

func (m *QueryEpochBLSDataRequest) Reset()         { *m = QueryEpochBLSDataRequest{} }
func (m *QueryEpochBLSDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEpochBLSDataRequest) ProtoMessage()    {}
func (*QueryEpochBLSDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b19bd0a6a108cf6a, []int{2}
}
func (m *QueryEpochBLSDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEpochBLSDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEpochBLSDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEpochBLSDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEpochBLSDataRequest.Merge(m, src)
}
func (m *QueryEpochBLSDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEpochBLSDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEpochBLSDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEpochBLSDataRequest proto.InternalMessageInfo

func (m *QueryEpochBLSDataRequest) GetEpochIndex() uint64 {
	if m != nil {
		return m.EpochIndex
	}
	return 0
}

// QueryEpochBLSDataResponse is response type for the Query/EpochBLSData RPC method.
type QueryEpochBLSDataResponse struct {
	// epoch_data contains complete BLS data for the specified epoch
	EpochData EpochBLSData `protobuf:"bytes,1,opt,name=epoch_data,json=epochData,proto3" json:"epoch_data"`
}

func (m *QueryEpochBLSDataResponse) Reset()         { *m = QueryEpochBLSDataResponse{} }
func (m *QueryEpochBLSDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEpochBLSDataResponse) ProtoMessage()    {}
func (*QueryEpochBLSDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b19bd0a6a108cf6a, []int{3}
}
func (m *QueryEpochBLSDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEpochBLSDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEpochBLSDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEpochBLSDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEpochBLSDataResponse.Merge(m, src)
}
func (m *QueryEpochBLSDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEpochBLSDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEpochBLSDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEpochBLSDataResponse proto.InternalMessageInfo

func (m *QueryEpochBLSDataResponse) GetEpochData() EpochBLSData {
	if m != nil {
		return m.EpochData
	}
	return EpochBLSData{}
}

// QuerySigningStatusRequest is request type for the Query/SigningStatus RPC method.
type QuerySigningStatusRequest struct {
	// request_id uniquely identifies the threshold signing request (32 bytes)
	RequestId []byte `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (m *QuerySigningStatusRequest) Reset()         { *m = QuerySigningStatusRequest{} }
func (m *QuerySigningStatusRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySigningStatusRequest) ProtoMessage()    {}
func (*QuerySigningStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b19bd0a6a108cf6a, []int{4}
}
func (m *QuerySigningStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySigningStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySigningStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySigningStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySigningStatusRequest.Merge(m, src)
}
func (m *QuerySigningStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySigningStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySigningStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySigningStatusRequest proto.InternalMessageInfo

func (m *QuerySigningStatusRequest) GetRequestId() []byte {
	if m != nil {
		return m.RequestId
	}
	return nil
}

// QuerySigningStatusResponse is response type for the Query/SigningStatus RPC method.
type QuerySigningStatusResponse struct {
	// signing_request contains the complete threshold signing request data
	SigningRequest ThresholdSigningRequest `protobuf:"bytes,1,opt,name=signing_request,json=signingRequest,proto3" json:"signing_request"`
}

func (m *QuerySigningStatusResponse) Reset()         { *m = QuerySigningStatusResponse{} }
func (m *QuerySigningStatusResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySigningStatusResponse) ProtoMessage()    {}
func (*QuerySigningStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b19bd0a6a108cf6a, []int{5}
}
func (m *QuerySigningStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySigningStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySigningStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySigningStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySigningStatusResponse.Merge(m, src)
}
func (m *QuerySigningStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySigningStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySigningStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySigningStatusResponse proto.InternalMessageInfo

func (m *QuerySigningStatusResponse) GetSigningRequest() ThresholdSigningRequest {
	if m != nil {
		return m.SigningRequest
	}
	return ThresholdSigningRequest{}
}

// QuerySigningHistoryRequest is request type for the Query/SigningHistory RPC method.
type QuerySigningHistoryRequest struct {
	// current_epoch_index filters requests by epoch (optional, 0 means all epochs)
	CurrentEpochIndex uint64 `protobuf:"varint,1,opt,name=current_epoch_index,json=currentEpochIndex,proto3" json:"current_epoch_index,omitempty"`
	// status_filter filters requests by status (optional, UNDEFINED means all statuses)
	StatusFilter ThresholdSigningStatus `protobuf:"varint,2,opt,name=status_filter,json=statusFilter,proto3,enum=inference.bls.ThresholdSigningStatus" json:"status_filter,omitempty"`
	// pagination defines an optional pagination for the request
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QuerySigningHistoryRequest) Reset()         { *m = QuerySigningHistoryRequest{} }
func (m *QuerySigningHistoryRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySigningHistoryRequest) ProtoMessage()    {}
func (*QuerySigningHistoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b19bd0a6a108cf6a, []int{6}
}
func (m *QuerySigningHistoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySigningHistoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySigningHistoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySigningHistoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySigningHistoryRequest.Merge(m, src)
}
func (m *QuerySigningHistoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySigningHistoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySigningHistoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySigningHistoryRequest proto.InternalMessageInfo

func (m *QuerySigningHistoryRequest) GetCurrentEpochIndex() uint64 {
	if m != nil {
		return m.CurrentEpochIndex
	}
	return 0
}

func (m *QuerySigningHistoryRequest) GetStatusFilter() ThresholdSigningStatus {
	if m != nil {
		return m.StatusFilter
	}
	return ThresholdSigningStatus_THRESHOLD_SIGNING_STATUS_UNDEFINED
}

func (m *QuerySigningHistoryRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QuerySigningHistoryResponse is response type for the Query/SigningHistory RPC method.
type QuerySigningHistoryResponse struct {
	// signing_requests contains the filtered threshold signing requests
	SigningRequests []ThresholdSigningRequest `protobuf:"bytes,1,rep,name=signing_requests,json=signingRequests,proto3" json:"signing_requests"`
	// pagination defines the pagination in the response
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QuerySigningHistoryResponse) Reset()         { *m = QuerySigningHistoryResponse{} }
func (m *QuerySigningHistoryResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySigningHistoryResponse) ProtoMessage()    {}
func (*QuerySigningHistoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b19bd0a6a108cf6a, []int{7}
}
func (m *QuerySigningHistoryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySigningHistoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySigningHistoryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySigningHistoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySigningHistoryResponse.Merge(m, src)
}
func (m *QuerySigningHistoryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySigningHistoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySigningHistoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySigningHistoryResponse proto.InternalMessageInfo

func (m *QuerySigningHistoryResponse) GetSigningRequests() []ThresholdSigningRequest {
	if m != nil {
		return m.SigningRequests
	}
	return nil
}

func (m *QuerySigningHistoryResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "inference.bls.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "inference.bls.QueryParamsResponse")
	proto.RegisterType((*QueryEpochBLSDataRequest)(nil), "inference.bls.QueryEpochBLSDataRequest")
	proto.RegisterType((*QueryEpochBLSDataResponse)(nil), "inference.bls.QueryEpochBLSDataResponse")
	proto.RegisterType((*QuerySigningStatusRequest)(nil), "inference.bls.QuerySigningStatusRequest")
	proto.RegisterType((*QuerySigningStatusResponse)(nil), "inference.bls.QuerySigningStatusResponse")
	proto.RegisterType((*QuerySigningHistoryRequest)(nil), "inference.bls.QuerySigningHistoryRequest")
	proto.RegisterType((*QuerySigningHistoryResponse)(nil), "inference.bls.QuerySigningHistoryResponse")
}

func init() { proto.RegisterFile("inference/bls/query.proto", fileDescriptor_b19bd0a6a108cf6a) }

var fileDescriptor_b19bd0a6a108cf6a = []byte{
	// 718 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x95, 0x4d, 0x6b, 0x14, 0x4d,
	0x10, 0xc7, 0x77, 0x92, 0x3c, 0x81, 0x74, 0xde, 0x9e, 0x74, 0x22, 0x6c, 0x26, 0xba, 0x89, 0x83,
	0x79, 0x31, 0xe8, 0x34, 0x89, 0x28, 0xd1, 0x80, 0xe8, 0x62, 0xa2, 0x11, 0xc1, 0xb8, 0x51, 0x04,
	0x41, 0x96, 0xde, 0xd9, 0xce, 0x6c, 0xc3, 0xee, 0xf4, 0x64, 0xba, 0x57, 0x12, 0x42, 0x2e, 0x7e,
	0x02, 0xc1, 0xbb, 0xe0, 0x49, 0x8f, 0x7e, 0x03, 0xaf, 0x39, 0x06, 0xbc, 0x78, 0x92, 0x90, 0x08,
	0x7e, 0x02, 0xef, 0x32, 0xdd, 0xb5, 0xd9, 0x9d, 0xcd, 0xb8, 0x89, 0x97, 0x65, 0xa8, 0xfa, 0x57,
	0xd5, 0xaf, 0x6a, 0xab, 0x66, 0xd0, 0x38, 0x0f, 0x36, 0x59, 0xc4, 0x02, 0x8f, 0x91, 0x52, 0x55,
	0x92, 0xad, 0x3a, 0x8b, 0x76, 0xdc, 0x30, 0x12, 0x4a, 0xe0, 0xc1, 0x13, 0x97, 0x5b, 0xaa, 0x4a,
	0x7b, 0x84, 0xd6, 0x78, 0x20, 0x88, 0xfe, 0x35, 0x0a, 0x7b, 0xcc, 0x17, 0xbe, 0xd0, 0x8f, 0x24,
	0x7e, 0x02, 0xeb, 0x45, 0x5f, 0x08, 0xbf, 0xca, 0x08, 0x0d, 0x39, 0xa1, 0x41, 0x20, 0x14, 0x55,
	0x5c, 0x04, 0x12, 0xbc, 0xf3, 0x9e, 0x90, 0x35, 0x21, 0x49, 0x89, 0x4a, 0x66, 0xca, 0x91, 0x37,
	0x0b, 0x25, 0xa6, 0xe8, 0x02, 0x09, 0xa9, 0xcf, 0x03, 0x2d, 0x06, 0xad, 0x9d, 0x84, 0x0b, 0x69,
	0x44, 0x6b, 0x8d, 0x3c, 0x6d, 0xe0, 0x6a, 0x27, 0x64, 0x0d, 0xd7, 0x74, 0x9b, 0xab, 0x12, 0x31,
	0x59, 0x11, 0xd5, 0x72, 0x51, 0x72, 0x3f, 0xe0, 0x81, 0x6f, 0x64, 0xce, 0x18, 0xc2, 0xcf, 0xe2,
	0xfa, 0xeb, 0x3a, 0x6d, 0x81, 0x6d, 0xd5, 0x99, 0x54, 0xce, 0x53, 0x34, 0x9a, 0xb0, 0xca, 0x50,
	0x04, 0x92, 0xe1, 0x25, 0xd4, 0x6b, 0xca, 0x67, 0xad, 0x29, 0x6b, 0xae, 0x7f, 0xf1, 0x82, 0x9b,
	0x98, 0x8e, 0x6b, 0xe4, 0xf9, 0xbe, 0xfd, 0x1f, 0x93, 0x99, 0xcf, 0xbf, 0xbe, 0xcc, 0x5b, 0x05,
	0xd0, 0x3b, 0xcb, 0x28, 0xab, 0x13, 0xae, 0x84, 0xc2, 0xab, 0xe4, 0x9f, 0x6c, 0x3c, 0xa0, 0x8a,
	0x42, 0x31, 0x3c, 0x89, 0xfa, 0x59, 0x6c, 0x2e, 0xf2, 0xa0, 0xcc, 0xb6, 0x75, 0xea, 0x9e, 0x02,
	0xd2, 0xa6, 0xb5, 0xd8, 0xe2, 0xbc, 0x46, 0xe3, 0x29, 0xc1, 0xc0, 0x74, 0x0f, 0x19, 0x69, 0xb1,
	0x4c, 0x15, 0x05, 0xae, 0x89, 0x36, 0xae, 0xd6, 0xc0, 0x7c, 0x4f, 0x4c, 0x57, 0xe8, 0xd3, 0x41,
	0xb1, 0xc1, 0xb9, 0x03, 0xe9, 0x37, 0xcc, 0x60, 0x36, 0x14, 0x55, 0xf5, 0xc6, 0x24, 0xf0, 0x25,
	0x84, 0x22, 0xf3, 0x58, 0xe4, 0x65, 0x9d, 0x7e, 0xa0, 0xd0, 0x07, 0x96, 0xb5, 0xb2, 0x23, 0x91,
	0x9d, 0x16, 0x0b, 0x6c, 0x2f, 0xd0, 0x30, 0x4c, 0xbb, 0x08, 0x21, 0x00, 0x38, 0xd3, 0x06, 0xf8,
	0xbc, 0xf1, 0xef, 0x40, 0x1e, 0xa8, 0x0e, 0xac, 0x43, 0x32, 0x61, 0x75, 0x0e, 0xad, 0x64, 0xd5,
	0x47, 0x5c, 0x2a, 0x11, 0xed, 0x34, 0x90, 0x5d, 0x34, 0xea, 0xd5, 0xa3, 0x88, 0x05, 0xaa, 0x78,
	0x7a, 0xae, 0x23, 0xe0, 0x5a, 0x39, 0x19, 0x2f, 0x7e, 0x8c, 0x06, 0xa5, 0xe6, 0x2e, 0x6e, 0xf2,
	0xaa, 0x62, 0x51, 0xb6, 0x6b, 0xca, 0x9a, 0x1b, 0x5a, 0x9c, 0x3e, 0x83, 0x11, 0x7a, 0x1d, 0x30,
	0xb1, 0xab, 0x3a, 0x14, 0xaf, 0x22, 0xd4, 0x5c, 0xe0, 0x6c, 0x37, 0x34, 0x6b, 0xb6, 0xdd, 0x8d,
	0xb7, 0xdd, 0x35, 0xc7, 0x05, 0xdb, 0xee, 0xae, 0x53, 0x9f, 0x01, 0x77, 0xa1, 0x25, 0xd2, 0xf9,
	0x6a, 0xa1, 0x89, 0xd4, 0x16, 0x61, 0xb2, 0x2f, 0xd1, 0xff, 0x6d, 0x93, 0x8d, 0x77, 0xb2, 0xfb,
	0x9f, 0x47, 0x3b, 0x9c, 0x1c, 0xad, 0xc4, 0x0f, 0x13, 0x0d, 0x74, 0xe9, 0x06, 0x66, 0xcf, 0x6c,
	0xc0, 0x50, 0xb5, 0x76, 0xb0, 0xf8, 0xbb, 0x07, 0xfd, 0xa7, 0x3b, 0xc0, 0x7b, 0xa8, 0xd7, 0x1c,
	0x06, 0xbe, 0xdc, 0xc6, 0x76, 0xfa, 0xf2, 0x6c, 0xa7, 0x93, 0xc4, 0x94, 0x71, 0xae, 0xbd, 0xfd,
	0xf6, 0xf3, 0x7d, 0xd7, 0x0c, 0xbe, 0x42, 0xc2, 0x48, 0x94, 0xeb, 0x9e, 0x92, 0x1e, 0xd7, 0x87,
	0x9e, 0xf6, 0xa6, 0xc0, 0x1f, 0x2d, 0x34, 0xd0, 0x7a, 0x00, 0x78, 0x36, 0xad, 0x44, 0xca, 0x61,
	0xda, 0x73, 0x67, 0x0b, 0x81, 0xe8, 0xae, 0x26, 0x5a, 0xc2, 0xb7, 0x3a, 0x13, 0x35, 0x0f, 0x95,
	0xec, 0xb6, 0xac, 0xe6, 0x1e, 0xfe, 0x64, 0xa1, 0xc1, 0xc4, 0x5a, 0xe1, 0xd4, 0xda, 0x69, 0x17,
	0x6a, 0x5f, 0x3d, 0x87, 0x12, 0x30, 0xef, 0x6b, 0xcc, 0x65, 0x7c, 0xbb, 0x33, 0x66, 0x63, 0xb3,
	0xcc, 0x66, 0x93, 0xdd, 0xe6, 0x0b, 0x60, 0x0f, 0x7f, 0xb0, 0xd0, 0x50, 0x72, 0x27, 0x71, 0x27,
	0x80, 0xe4, 0x69, 0xda, 0xf3, 0xe7, 0x91, 0x02, 0xec, 0x4d, 0x0d, 0x4b, 0xf0, 0xf5, 0xf3, 0xc1,
	0x56, 0x4c, 0x78, 0x7e, 0x6d, 0xff, 0x28, 0x67, 0x1d, 0x1c, 0xe5, 0xac, 0xc3, 0xa3, 0x9c, 0xf5,
	0xee, 0x38, 0x97, 0x39, 0x38, 0xce, 0x65, 0xbe, 0x1f, 0xe7, 0x32, 0xaf, 0x88, 0xcf, 0x55, 0xa5,
	0x5e, 0x72, 0x3d, 0x51, 0xfb, 0x7b, 0xca, 0xed, 0xe6, 0x87, 0xa4, 0xd4, 0xab, 0x3f, 0x11, 0x37,
	0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0xe8, 0x63, 0x19, 0x4b, 0x1f, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// EpochBLSData queries complete BLS data for a specific epoch
	EpochBLSData(ctx context.Context, in *QueryEpochBLSDataRequest, opts ...grpc.CallOption) (*QueryEpochBLSDataResponse, error)
	// SigningStatus queries the status of a specific threshold signing request
	SigningStatus(ctx context.Context, in *QuerySigningStatusRequest, opts ...grpc.CallOption) (*QuerySigningStatusResponse, error)
	// SigningHistory queries threshold signing requests with filtering and pagination
	SigningHistory(ctx context.Context, in *QuerySigningHistoryRequest, opts ...grpc.CallOption) (*QuerySigningHistoryResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/inference.bls.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EpochBLSData(ctx context.Context, in *QueryEpochBLSDataRequest, opts ...grpc.CallOption) (*QueryEpochBLSDataResponse, error) {
	out := new(QueryEpochBLSDataResponse)
	err := c.cc.Invoke(ctx, "/inference.bls.Query/EpochBLSData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SigningStatus(ctx context.Context, in *QuerySigningStatusRequest, opts ...grpc.CallOption) (*QuerySigningStatusResponse, error) {
	out := new(QuerySigningStatusResponse)
	err := c.cc.Invoke(ctx, "/inference.bls.Query/SigningStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SigningHistory(ctx context.Context, in *QuerySigningHistoryRequest, opts ...grpc.CallOption) (*QuerySigningHistoryResponse, error) {
	out := new(QuerySigningHistoryResponse)
	err := c.cc.Invoke(ctx, "/inference.bls.Query/SigningHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// EpochBLSData queries complete BLS data for a specific epoch
	EpochBLSData(context.Context, *QueryEpochBLSDataRequest) (*QueryEpochBLSDataResponse, error)
	// SigningStatus queries the status of a specific threshold signing request
	SigningStatus(context.Context, *QuerySigningStatusRequest) (*QuerySigningStatusResponse, error)
	// SigningHistory queries threshold signing requests with filtering and pagination
	SigningHistory(context.Context, *QuerySigningHistoryRequest) (*QuerySigningHistoryResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) EpochBLSData(ctx context.Context, req *QueryEpochBLSDataRequest) (*QueryEpochBLSDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EpochBLSData not implemented")
}
func (*UnimplementedQueryServer) SigningStatus(ctx context.Context, req *QuerySigningStatusRequest) (*QuerySigningStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SigningStatus not implemented")
}
func (*UnimplementedQueryServer) SigningHistory(ctx context.Context, req *QuerySigningHistoryRequest) (*QuerySigningHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SigningHistory not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.bls.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EpochBLSData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEpochBLSDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EpochBLSData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.bls.Query/EpochBLSData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EpochBLSData(ctx, req.(*QueryEpochBLSDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SigningStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySigningStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SigningStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.bls.Query/SigningStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SigningStatus(ctx, req.(*QuerySigningStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SigningHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySigningHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SigningHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.bls.Query/SigningHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SigningHistory(ctx, req.(*QuerySigningHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "inference.bls.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "EpochBLSData",
			Handler:    _Query_EpochBLSData_Handler,
		},
		{
			MethodName: "SigningStatus",
			Handler:    _Query_SigningStatus_Handler,
		},
		{
			MethodName: "SigningHistory",
			Handler:    _Query_SigningHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inference/bls/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryEpochBLSDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEpochBLSDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEpochBLSDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EpochIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EpochIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryEpochBLSDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEpochBLSDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEpochBLSDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EpochData.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QuerySigningStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySigningStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySigningStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySigningStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySigningStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySigningStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SigningRequest.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QuerySigningHistoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySigningHistoryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySigningHistoryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.StatusFilter != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.StatusFilter))
		i--
		dAtA[i] = 0x10
	}
	if m.CurrentEpochIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CurrentEpochIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QuerySigningHistoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySigningHistoryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySigningHistoryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SigningRequests) > 0 {
		for iNdEx := len(m.SigningRequests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SigningRequests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryEpochBLSDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochIndex != 0 {
		n += 1 + sovQuery(uint64(m.EpochIndex))
	}
	return n
}

func (m *QueryEpochBLSDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EpochData.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QuerySigningStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySigningStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SigningRequest.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QuerySigningHistoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentEpochIndex != 0 {
		n += 1 + sovQuery(uint64(m.CurrentEpochIndex))
	}
	if m.StatusFilter != 0 {
		n += 1 + sovQuery(uint64(m.StatusFilter))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySigningHistoryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SigningRequests) > 0 {
		for _, e := range m.SigningRequests {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEpochBLSDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEpochBLSDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEpochBLSDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochIndex", wireType)
			}
			m.EpochIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEpochBLSDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEpochBLSDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEpochBLSDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EpochData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySigningStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySigningStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySigningStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = append(m.RequestId[:0], dAtA[iNdEx:postIndex]...)
			if m.RequestId == nil {
				m.RequestId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySigningStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySigningStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySigningStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigningRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SigningRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySigningHistoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySigningHistoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySigningHistoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentEpochIndex", wireType)
			}
			m.CurrentEpochIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentEpochIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusFilter", wireType)
			}
			m.StatusFilter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatusFilter |= ThresholdSigningStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySigningHistoryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySigningHistoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySigningHistoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigningRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SigningRequests = append(m.SigningRequests, ThresholdSigningRequest{})
			if err := m.SigningRequests[len(m.SigningRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)

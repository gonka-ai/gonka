// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: inference/inference/hardware_node.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type HardwareNodeStatus int32

const (
	HardwareNodeStatus_UNKNOWN   HardwareNodeStatus = 0
	HardwareNodeStatus_INFERENCE HardwareNodeStatus = 1
	HardwareNodeStatus_POC       HardwareNodeStatus = 2
	HardwareNodeStatus_TRAINING  HardwareNodeStatus = 3
)

var HardwareNodeStatus_name = map[int32]string{
	0: "UNKNOWN",
	1: "INFERENCE",
	2: "POC",
	3: "TRAINING",
}

var HardwareNodeStatus_value = map[string]int32{
	"UNKNOWN":   0,
	"INFERENCE": 1,
	"POC":       2,
	"TRAINING":  3,
}

func (x HardwareNodeStatus) String() string {
	return proto.EnumName(HardwareNodeStatus_name, int32(x))
}

func (HardwareNodeStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5946db202bdc935b, []int{0}
}

// IF YOU CHANGE ANY OF THESE STRUCTURES BE SURE TO CHANGE InferenceNode struct in decentralized-api!!!
type HardwareNodes struct {
	Participant   string          `protobuf:"bytes,1,opt,name=participant,proto3" json:"participant,omitempty"`
	HardwareNodes []*HardwareNode `protobuf:"bytes,2,rep,name=hardware_nodes,json=hardwareNodes,proto3" json:"hardware_nodes,omitempty"`
}

func (m *HardwareNodes) Reset()         { *m = HardwareNodes{} }
func (m *HardwareNodes) String() string { return proto.CompactTextString(m) }
func (*HardwareNodes) ProtoMessage()    {}
func (*HardwareNodes) Descriptor() ([]byte, []int) {
	return fileDescriptor_5946db202bdc935b, []int{0}
}
func (m *HardwareNodes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HardwareNodes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HardwareNodes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HardwareNodes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HardwareNodes.Merge(m, src)
}
func (m *HardwareNodes) XXX_Size() int {
	return m.Size()
}
func (m *HardwareNodes) XXX_DiscardUnknown() {
	xxx_messageInfo_HardwareNodes.DiscardUnknown(m)
}

var xxx_messageInfo_HardwareNodes proto.InternalMessageInfo

func (m *HardwareNodes) GetParticipant() string {
	if m != nil {
		return m.Participant
	}
	return ""
}

func (m *HardwareNodes) GetHardwareNodes() []*HardwareNode {
	if m != nil {
		return m.HardwareNodes
	}
	return nil
}

type HardwareNode struct {
	LocalId  string             `protobuf:"bytes,1,opt,name=local_id,json=localId,proto3" json:"local_id,omitempty"`
	Status   HardwareNodeStatus `protobuf:"varint,2,opt,name=status,proto3,enum=inference.inference.HardwareNodeStatus" json:"status,omitempty"`
	Hardware []*Hardware        `protobuf:"bytes,3,rep,name=hardware,proto3" json:"hardware,omitempty"`
}

func (m *HardwareNode) Reset()         { *m = HardwareNode{} }
func (m *HardwareNode) String() string { return proto.CompactTextString(m) }
func (*HardwareNode) ProtoMessage()    {}
func (*HardwareNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_5946db202bdc935b, []int{1}
}
func (m *HardwareNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HardwareNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HardwareNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HardwareNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HardwareNode.Merge(m, src)
}
func (m *HardwareNode) XXX_Size() int {
	return m.Size()
}
func (m *HardwareNode) XXX_DiscardUnknown() {
	xxx_messageInfo_HardwareNode.DiscardUnknown(m)
}

var xxx_messageInfo_HardwareNode proto.InternalMessageInfo

func (m *HardwareNode) GetLocalId() string {
	if m != nil {
		return m.LocalId
	}
	return ""
}

func (m *HardwareNode) GetStatus() HardwareNodeStatus {
	if m != nil {
		return m.Status
	}
	return HardwareNodeStatus_UNKNOWN
}

func (m *HardwareNode) GetHardware() []*Hardware {
	if m != nil {
		return m.Hardware
	}
	return nil
}

type Hardware struct {
	Type  string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Count uint32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *Hardware) Reset()         { *m = Hardware{} }
func (m *Hardware) String() string { return proto.CompactTextString(m) }
func (*Hardware) ProtoMessage()    {}
func (*Hardware) Descriptor() ([]byte, []int) {
	return fileDescriptor_5946db202bdc935b, []int{2}
}
func (m *Hardware) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Hardware) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Hardware.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Hardware) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hardware.Merge(m, src)
}
func (m *Hardware) XXX_Size() int {
	return m.Size()
}
func (m *Hardware) XXX_DiscardUnknown() {
	xxx_messageInfo_Hardware.DiscardUnknown(m)
}

var xxx_messageInfo_Hardware proto.InternalMessageInfo

func (m *Hardware) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Hardware) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterEnum("inference.inference.HardwareNodeStatus", HardwareNodeStatus_name, HardwareNodeStatus_value)
	proto.RegisterType((*HardwareNodes)(nil), "inference.inference.HardwareNodes")
	proto.RegisterType((*HardwareNode)(nil), "inference.inference.HardwareNode")
	proto.RegisterType((*Hardware)(nil), "inference.inference.Hardware")
}

func init() {
	proto.RegisterFile("inference/inference/hardware_node.proto", fileDescriptor_5946db202bdc935b)
}

var fileDescriptor_5946db202bdc935b = []byte{
	// 349 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0xcf, 0xcc, 0x4b, 0x4b,
	0x2d, 0x4a, 0xcd, 0x4b, 0x4e, 0xd5, 0x47, 0xb0, 0x32, 0x12, 0x8b, 0x52, 0xca, 0x13, 0x8b, 0x52,
	0xe3, 0xf3, 0xf2, 0x53, 0x52, 0xf5, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x84, 0xe1, 0xd2, 0x7a,
	0x70, 0x96, 0x52, 0x35, 0x17, 0xaf, 0x07, 0x54, 0xad, 0x5f, 0x7e, 0x4a, 0x6a, 0xb1, 0x90, 0x02,
	0x17, 0x77, 0x41, 0x62, 0x51, 0x49, 0x66, 0x72, 0x66, 0x41, 0x62, 0x5e, 0x89, 0x04, 0xa3, 0x02,
	0xa3, 0x06, 0x67, 0x10, 0xb2, 0x90, 0x90, 0x07, 0x17, 0x1f, 0x8a, 0xf1, 0xc5, 0x12, 0x4c, 0x0a,
	0xcc, 0x1a, 0xdc, 0x46, 0x8a, 0x7a, 0x58, 0x2c, 0xd0, 0x43, 0x36, 0x3d, 0x88, 0x37, 0x03, 0xd9,
	0x2e, 0xa5, 0xa5, 0x8c, 0x5c, 0x3c, 0xc8, 0xf2, 0x42, 0x92, 0x5c, 0x1c, 0x39, 0xf9, 0xc9, 0x89,
	0x39, 0xf1, 0x99, 0x29, 0x50, 0x9b, 0xd9, 0xc1, 0x7c, 0xcf, 0x14, 0x21, 0x7b, 0x2e, 0xb6, 0xe2,
	0x92, 0xc4, 0x92, 0x52, 0x90, 0x6d, 0x8c, 0x1a, 0x7c, 0x46, 0xea, 0x04, 0x6d, 0x0b, 0x06, 0x2b,
	0x0f, 0x82, 0x6a, 0x13, 0xb2, 0xe4, 0xe2, 0x80, 0xd9, 0x2e, 0xc1, 0x0c, 0x76, 0xb0, 0x2c, 0x5e,
	0x23, 0x82, 0xe0, 0xca, 0x95, 0x4c, 0xb8, 0x38, 0x60, 0xa2, 0x42, 0x42, 0x5c, 0x2c, 0x25, 0x95,
	0x05, 0xa9, 0x50, 0xe7, 0x81, 0xd9, 0x42, 0x22, 0x5c, 0xac, 0xc9, 0xf9, 0xa5, 0x79, 0x25, 0x60,
	0xa7, 0xf1, 0x06, 0x41, 0x38, 0x5a, 0xee, 0x5c, 0x42, 0x98, 0xce, 0x11, 0xe2, 0xe6, 0x62, 0x0f,
	0xf5, 0xf3, 0xf6, 0xf3, 0x0f, 0xf7, 0x13, 0x60, 0x10, 0xe2, 0xe5, 0xe2, 0xf4, 0xf4, 0x73, 0x73,
	0x0d, 0x72, 0xf5, 0x73, 0x76, 0x15, 0x60, 0x14, 0x62, 0xe7, 0x62, 0x0e, 0xf0, 0x77, 0x16, 0x60,
	0x12, 0xe2, 0xe1, 0xe2, 0x08, 0x09, 0x72, 0xf4, 0xf4, 0xf3, 0xf4, 0x73, 0x17, 0x60, 0x76, 0xf2,
	0x3f, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x27, 0x3c, 0x96,
	0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x86, 0x28, 0xd3, 0xf4, 0xcc, 0x92, 0x8c,
	0xd2, 0x24, 0xbd, 0xe4, 0xfc, 0x5c, 0xfd, 0x82, 0xa2, 0xfc, 0x94, 0xd2, 0xe4, 0x92, 0xe2, 0xe4,
	0x4c, 0xb4, 0xb4, 0x50, 0x81, 0xc4, 0x06, 0x39, 0xb7, 0x38, 0x89, 0x0d, 0x9c, 0x20, 0x8c, 0x01,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x49, 0x9b, 0x1e, 0x7f, 0x3b, 0x02, 0x00, 0x00,
}

func (m *HardwareNodes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HardwareNodes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HardwareNodes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HardwareNodes) > 0 {
		for iNdEx := len(m.HardwareNodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HardwareNodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHardwareNode(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Participant) > 0 {
		i -= len(m.Participant)
		copy(dAtA[i:], m.Participant)
		i = encodeVarintHardwareNode(dAtA, i, uint64(len(m.Participant)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HardwareNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HardwareNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HardwareNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hardware) > 0 {
		for iNdEx := len(m.Hardware) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Hardware[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHardwareNode(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Status != 0 {
		i = encodeVarintHardwareNode(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.LocalId) > 0 {
		i -= len(m.LocalId)
		copy(dAtA[i:], m.LocalId)
		i = encodeVarintHardwareNode(dAtA, i, uint64(len(m.LocalId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Hardware) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Hardware) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Hardware) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintHardwareNode(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintHardwareNode(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintHardwareNode(dAtA []byte, offset int, v uint64) int {
	offset -= sovHardwareNode(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HardwareNodes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Participant)
	if l > 0 {
		n += 1 + l + sovHardwareNode(uint64(l))
	}
	if len(m.HardwareNodes) > 0 {
		for _, e := range m.HardwareNodes {
			l = e.Size()
			n += 1 + l + sovHardwareNode(uint64(l))
		}
	}
	return n
}

func (m *HardwareNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LocalId)
	if l > 0 {
		n += 1 + l + sovHardwareNode(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovHardwareNode(uint64(m.Status))
	}
	if len(m.Hardware) > 0 {
		for _, e := range m.Hardware {
			l = e.Size()
			n += 1 + l + sovHardwareNode(uint64(l))
		}
	}
	return n
}

func (m *Hardware) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovHardwareNode(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovHardwareNode(uint64(m.Count))
	}
	return n
}

func sovHardwareNode(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHardwareNode(x uint64) (n int) {
	return sovHardwareNode(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HardwareNodes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHardwareNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HardwareNodes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HardwareNodes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHardwareNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHardwareNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHardwareNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardwareNodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHardwareNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHardwareNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHardwareNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HardwareNodes = append(m.HardwareNodes, &HardwareNode{})
			if err := m.HardwareNodes[len(m.HardwareNodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHardwareNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHardwareNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HardwareNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHardwareNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HardwareNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HardwareNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHardwareNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHardwareNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHardwareNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHardwareNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= HardwareNodeStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hardware", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHardwareNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHardwareNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHardwareNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hardware = append(m.Hardware, &Hardware{})
			if err := m.Hardware[len(m.Hardware)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHardwareNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHardwareNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Hardware) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHardwareNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Hardware: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Hardware: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHardwareNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHardwareNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHardwareNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHardwareNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHardwareNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHardwareNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHardwareNode(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHardwareNode
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHardwareNode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHardwareNode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHardwareNode
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHardwareNode
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHardwareNode
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHardwareNode        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHardwareNode          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHardwareNode = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: inference/inference/block_proof.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CommitInfo struct {
	ValidatorAddress string `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	ValidatorPubKey  string `protobuf:"bytes,2,opt,name=validator_pub_key,json=validatorPubKey,proto3" json:"validator_pub_key,omitempty"`
	OperatorAddress  string `protobuf:"bytes,3,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
	VotingPower      int64  `protobuf:"varint,4,opt,name=voting_power,json=votingPower,proto3" json:"voting_power,omitempty"`
}

func (m *CommitInfo) Reset()         { *m = CommitInfo{} }
func (m *CommitInfo) String() string { return proto.CompactTextString(m) }
func (*CommitInfo) ProtoMessage()    {}
func (*CommitInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_75928057596d2483, []int{0}
}
func (m *CommitInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommitInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommitInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommitInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitInfo.Merge(m, src)
}
func (m *CommitInfo) XXX_Size() int {
	return m.Size()
}
func (m *CommitInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CommitInfo proto.InternalMessageInfo

func (m *CommitInfo) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *CommitInfo) GetValidatorPubKey() string {
	if m != nil {
		return m.ValidatorPubKey
	}
	return ""
}

func (m *CommitInfo) GetOperatorAddress() string {
	if m != nil {
		return m.OperatorAddress
	}
	return ""
}

func (m *CommitInfo) GetVotingPower() int64 {
	if m != nil {
		return m.VotingPower
	}
	return 0
}

type BlockProof struct {
	CreatedAtBlockHeight int64         `protobuf:"varint,1,opt,name=created_at_block_height,json=createdAtBlockHeight,proto3" json:"created_at_block_height,omitempty"`
	AppHashHex           string        `protobuf:"bytes,2,opt,name=app_hash_hex,json=appHashHex,proto3" json:"app_hash_hex,omitempty"`
	TotalVotingPower     int64         `protobuf:"varint,3,opt,name=total_voting_power,json=totalVotingPower,proto3" json:"total_voting_power,omitempty"`
	SignedVotingPower    int64         `protobuf:"varint,4,opt,name=signed_voting_power,json=signedVotingPower,proto3" json:"signed_voting_power,omitempty"`
	Commits              []*CommitInfo `protobuf:"bytes,5,rep,name=commits,proto3" json:"commits,omitempty"`
}

func (m *BlockProof) Reset()         { *m = BlockProof{} }
func (m *BlockProof) String() string { return proto.CompactTextString(m) }
func (*BlockProof) ProtoMessage()    {}
func (*BlockProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_75928057596d2483, []int{1}
}
func (m *BlockProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockProof.Merge(m, src)
}
func (m *BlockProof) XXX_Size() int {
	return m.Size()
}
func (m *BlockProof) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockProof.DiscardUnknown(m)
}

var xxx_messageInfo_BlockProof proto.InternalMessageInfo

func (m *BlockProof) GetCreatedAtBlockHeight() int64 {
	if m != nil {
		return m.CreatedAtBlockHeight
	}
	return 0
}

func (m *BlockProof) GetAppHashHex() string {
	if m != nil {
		return m.AppHashHex
	}
	return ""
}

func (m *BlockProof) GetTotalVotingPower() int64 {
	if m != nil {
		return m.TotalVotingPower
	}
	return 0
}

func (m *BlockProof) GetSignedVotingPower() int64 {
	if m != nil {
		return m.SignedVotingPower
	}
	return 0
}

func (m *BlockProof) GetCommits() []*CommitInfo {
	if m != nil {
		return m.Commits
	}
	return nil
}

func init() {
	proto.RegisterType((*CommitInfo)(nil), "inference.inference.CommitInfo")
	proto.RegisterType((*BlockProof)(nil), "inference.inference.BlockProof")
}

func init() {
	proto.RegisterFile("inference/inference/block_proof.proto", fileDescriptor_75928057596d2483)
}

var fileDescriptor_75928057596d2483 = []byte{
	// 376 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xbf, 0x6e, 0xea, 0x30,
	0x14, 0xc6, 0xf1, 0xcd, 0xfd, 0xa3, 0x6b, 0x90, 0x2e, 0x98, 0x2b, 0x35, 0x53, 0x9a, 0x22, 0x55,
	0xa2, 0x7f, 0x14, 0xa4, 0x56, 0x0c, 0x1d, 0xa1, 0x0b, 0x55, 0x87, 0xa2, 0x0c, 0x1d, 0xba, 0x58,
	0x4e, 0x62, 0x12, 0x0b, 0x88, 0x2d, 0xdb, 0xa1, 0xf0, 0x16, 0x7d, 0x97, 0xbe, 0x44, 0x47, 0xc6,
	0x8e, 0x15, 0xbc, 0x47, 0x55, 0xe1, 0x40, 0x80, 0x8a, 0xed, 0xe8, 0xfb, 0x7d, 0x3e, 0xfa, 0x8e,
	0xcf, 0x81, 0xa7, 0x2c, 0x1d, 0x50, 0x49, 0xd3, 0x90, 0xb6, 0xb6, 0x55, 0x30, 0xe2, 0xe1, 0x10,
	0x0b, 0xc9, 0xf9, 0xc0, 0x13, 0x92, 0x6b, 0x8e, 0xea, 0x05, 0xf4, 0x8a, 0xaa, 0xf1, 0x0a, 0x20,
	0xbc, 0xe5, 0xe3, 0x31, 0xd3, 0x77, 0xe9, 0x80, 0xa3, 0x0b, 0x58, 0x9b, 0x90, 0x11, 0x8b, 0x88,
	0xe6, 0x12, 0x93, 0x28, 0x92, 0x54, 0x29, 0x1b, 0xb8, 0xa0, 0xf9, 0xd7, 0xaf, 0x16, 0xa0, 0x93,
	0xeb, 0xe8, 0x7c, 0xd7, 0x2c, 0xb2, 0x00, 0x0f, 0xe9, 0xcc, 0xfe, 0x61, 0xcc, 0xff, 0x0a, 0xd0,
	0xcf, 0x82, 0x7b, 0x3a, 0x43, 0x67, 0xb0, 0xca, 0x05, 0x95, 0x7b, 0x7d, 0xad, 0xdc, 0xba, 0xd1,
	0x37, 0x6d, 0x4f, 0x60, 0x65, 0xc2, 0x35, 0x4b, 0x63, 0x2c, 0xf8, 0x33, 0x95, 0xf6, 0x4f, 0x17,
	0x34, 0x2d, 0xbf, 0x9c, 0x6b, 0xfd, 0x95, 0xd4, 0xf8, 0x04, 0x10, 0x76, 0x57, 0x03, 0xf6, 0x57,
	0xf3, 0xa1, 0x36, 0x3c, 0x0a, 0x25, 0x25, 0x9a, 0x46, 0x98, 0x68, 0x9c, 0x4f, 0x9e, 0x50, 0x16,
	0x27, 0xda, 0x64, 0xb7, 0xfc, 0xff, 0x6b, 0xdc, 0xd1, 0xe6, 0x55, 0xcf, 0x30, 0xe4, 0xc2, 0x0a,
	0x11, 0x02, 0x27, 0x44, 0x25, 0x38, 0xa1, 0xd3, 0x75, 0x74, 0x48, 0x84, 0xe8, 0x11, 0x95, 0xf4,
	0xe8, 0x14, 0x5d, 0x42, 0xa4, 0xb9, 0x26, 0x23, 0xbc, 0x17, 0xc8, 0x32, 0x3d, 0xab, 0x86, 0x3c,
	0x6e, 0x53, 0x21, 0x0f, 0xd6, 0x15, 0x8b, 0x53, 0x1a, 0xe1, 0x03, 0xf9, 0x6b, 0x39, 0xda, 0xf5,
	0xdf, 0xc0, 0x3f, 0xa1, 0xf9, 0x7a, 0x65, 0xff, 0x72, 0xad, 0x66, 0xf9, 0xea, 0xd8, 0x3b, 0xb0,
	0x22, 0x6f, 0xbb, 0x1e, 0x7f, 0xe3, 0xef, 0x3e, 0xbc, 0x2d, 0x1c, 0x30, 0x5f, 0x38, 0xe0, 0x63,
	0xe1, 0x80, 0x97, 0xa5, 0x53, 0x9a, 0x2f, 0x9d, 0xd2, 0xfb, 0xd2, 0x29, 0x3d, 0xb5, 0x63, 0xa6,
	0x93, 0x2c, 0xf0, 0x42, 0x3e, 0x6e, 0x09, 0xc9, 0xa3, 0x2c, 0xd4, 0x2a, 0x64, 0xdf, 0x8e, 0x63,
	0xba, 0x53, 0xeb, 0x99, 0xa0, 0x2a, 0xf8, 0x6d, 0x6e, 0xe4, 0xfa, 0x2b, 0x00, 0x00, 0xff, 0xff,
	0xd1, 0x27, 0x31, 0x71, 0x4c, 0x02, 0x00, 0x00,
}

func (m *CommitInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommitInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommitInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VotingPower != 0 {
		i = encodeVarintBlockProof(dAtA, i, uint64(m.VotingPower))
		i--
		dAtA[i] = 0x20
	}
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintBlockProof(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ValidatorPubKey) > 0 {
		i -= len(m.ValidatorPubKey)
		copy(dAtA[i:], m.ValidatorPubKey)
		i = encodeVarintBlockProof(dAtA, i, uint64(len(m.ValidatorPubKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintBlockProof(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlockProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Commits) > 0 {
		for iNdEx := len(m.Commits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Commits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBlockProof(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.SignedVotingPower != 0 {
		i = encodeVarintBlockProof(dAtA, i, uint64(m.SignedVotingPower))
		i--
		dAtA[i] = 0x20
	}
	if m.TotalVotingPower != 0 {
		i = encodeVarintBlockProof(dAtA, i, uint64(m.TotalVotingPower))
		i--
		dAtA[i] = 0x18
	}
	if len(m.AppHashHex) > 0 {
		i -= len(m.AppHashHex)
		copy(dAtA[i:], m.AppHashHex)
		i = encodeVarintBlockProof(dAtA, i, uint64(len(m.AppHashHex)))
		i--
		dAtA[i] = 0x12
	}
	if m.CreatedAtBlockHeight != 0 {
		i = encodeVarintBlockProof(dAtA, i, uint64(m.CreatedAtBlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBlockProof(dAtA []byte, offset int, v uint64) int {
	offset -= sovBlockProof(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CommitInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovBlockProof(uint64(l))
	}
	l = len(m.ValidatorPubKey)
	if l > 0 {
		n += 1 + l + sovBlockProof(uint64(l))
	}
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovBlockProof(uint64(l))
	}
	if m.VotingPower != 0 {
		n += 1 + sovBlockProof(uint64(m.VotingPower))
	}
	return n
}

func (m *BlockProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreatedAtBlockHeight != 0 {
		n += 1 + sovBlockProof(uint64(m.CreatedAtBlockHeight))
	}
	l = len(m.AppHashHex)
	if l > 0 {
		n += 1 + l + sovBlockProof(uint64(l))
	}
	if m.TotalVotingPower != 0 {
		n += 1 + sovBlockProof(uint64(m.TotalVotingPower))
	}
	if m.SignedVotingPower != 0 {
		n += 1 + sovBlockProof(uint64(m.SignedVotingPower))
	}
	if len(m.Commits) > 0 {
		for _, e := range m.Commits {
			l = e.Size()
			n += 1 + l + sovBlockProof(uint64(l))
		}
	}
	return n
}

func sovBlockProof(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBlockProof(x uint64) (n int) {
	return sovBlockProof(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CommitInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlockProof
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommitInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommitInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlockProof
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBlockProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorPubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlockProof
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBlockProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorPubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlockProof
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBlockProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingPower", wireType)
			}
			m.VotingPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotingPower |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBlockProof(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBlockProof
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlockProof
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAtBlockHeight", wireType)
			}
			m.CreatedAtBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAtBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppHashHex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlockProof
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBlockProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppHashHex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalVotingPower", wireType)
			}
			m.TotalVotingPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalVotingPower |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedVotingPower", wireType)
			}
			m.SignedVotingPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignedVotingPower |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlockProof
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBlockProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commits = append(m.Commits, &CommitInfo{})
			if err := m.Commits[len(m.Commits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlockProof(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBlockProof
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBlockProof(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBlockProof
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlockProof
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlockProof
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBlockProof
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBlockProof
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBlockProof
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBlockProof        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBlockProof          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBlockProof = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: inference/inference/v1/epoch_group_datav1.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/cosmos/gogoproto/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EpochGroupDataV1 struct {
	PocStartBlockHeight   uint64              `protobuf:"varint,1,opt,name=poc_start_block_height,json=pocStartBlockHeight,proto3" json:"poc_start_block_height,omitempty"`
	EpochGroupId          uint64              `protobuf:"varint,2,opt,name=epoch_group_id,json=epochGroupId,proto3" json:"epoch_group_id,omitempty"`
	EpochPolicy           string              `protobuf:"bytes,3,opt,name=epoch_policy,json=epochPolicy,proto3" json:"epoch_policy,omitempty"`
	EffectiveBlockHeight  uint64              `protobuf:"varint,4,opt,name=effective_block_height,json=effectiveBlockHeight,proto3" json:"effective_block_height,omitempty"`
	LastBlockHeight       uint64              `protobuf:"varint,5,opt,name=last_block_height,json=lastBlockHeight,proto3" json:"last_block_height,omitempty"`
	MemberSeedSignatures  []*SeedSignature    `protobuf:"bytes,6,rep,name=member_seed_signatures,json=memberSeedSignatures,proto3" json:"member_seed_signatures,omitempty"`
	ValidationWeights     []*ValidationWeight `protobuf:"bytes,8,rep,name=validation_weights,json=validationWeights,proto3" json:"validation_weights,omitempty"`
	UnitOfComputePrice    uint64              `protobuf:"varint,9,opt,name=unit_of_compute_price,json=unitOfComputePrice,proto3" json:"unit_of_compute_price,omitempty"`
	NumberOfRequests      uint64              `protobuf:"varint,10,opt,name=number_of_requests,json=numberOfRequests,proto3" json:"number_of_requests,omitempty"`
	PreviousEpochRequests uint64              `protobuf:"varint,11,opt,name=previous_epoch_requests,json=previousEpochRequests,proto3" json:"previous_epoch_requests,omitempty"`
	ValidationParams      *ValidationParamsV1 `protobuf:"bytes,12,opt,name=validation_params,json=validationParams,proto3" json:"validation_params,omitempty"`
	TotalWeight           uint64              `protobuf:"varint,13,opt,name=total_weight,json=totalWeight,proto3" json:"total_weight,omitempty"`
}

func (m *EpochGroupDataV1) Reset()         { *m = EpochGroupDataV1{} }
func (m *EpochGroupDataV1) String() string { return proto.CompactTextString(m) }
func (*EpochGroupDataV1) ProtoMessage()    {}
func (*EpochGroupDataV1) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2cecb0c769381fd, []int{0}
}
func (m *EpochGroupDataV1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EpochGroupDataV1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EpochGroupDataV1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EpochGroupDataV1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochGroupDataV1.Merge(m, src)
}
func (m *EpochGroupDataV1) XXX_Size() int {
	return m.Size()
}
func (m *EpochGroupDataV1) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochGroupDataV1.DiscardUnknown(m)
}

var xxx_messageInfo_EpochGroupDataV1 proto.InternalMessageInfo

func (m *EpochGroupDataV1) GetPocStartBlockHeight() uint64 {
	if m != nil {
		return m.PocStartBlockHeight
	}
	return 0
}

func (m *EpochGroupDataV1) GetEpochGroupId() uint64 {
	if m != nil {
		return m.EpochGroupId
	}
	return 0
}

func (m *EpochGroupDataV1) GetEpochPolicy() string {
	if m != nil {
		return m.EpochPolicy
	}
	return ""
}

func (m *EpochGroupDataV1) GetEffectiveBlockHeight() uint64 {
	if m != nil {
		return m.EffectiveBlockHeight
	}
	return 0
}

func (m *EpochGroupDataV1) GetLastBlockHeight() uint64 {
	if m != nil {
		return m.LastBlockHeight
	}
	return 0
}

func (m *EpochGroupDataV1) GetMemberSeedSignatures() []*SeedSignature {
	if m != nil {
		return m.MemberSeedSignatures
	}
	return nil
}

func (m *EpochGroupDataV1) GetValidationWeights() []*ValidationWeight {
	if m != nil {
		return m.ValidationWeights
	}
	return nil
}

func (m *EpochGroupDataV1) GetUnitOfComputePrice() uint64 {
	if m != nil {
		return m.UnitOfComputePrice
	}
	return 0
}

func (m *EpochGroupDataV1) GetNumberOfRequests() uint64 {
	if m != nil {
		return m.NumberOfRequests
	}
	return 0
}

func (m *EpochGroupDataV1) GetPreviousEpochRequests() uint64 {
	if m != nil {
		return m.PreviousEpochRequests
	}
	return 0
}

func (m *EpochGroupDataV1) GetValidationParams() *ValidationParamsV1 {
	if m != nil {
		return m.ValidationParams
	}
	return nil
}

func (m *EpochGroupDataV1) GetTotalWeight() uint64 {
	if m != nil {
		return m.TotalWeight
	}
	return 0
}

func init() {
	proto.RegisterType((*EpochGroupDataV1)(nil), "inference.inference.EpochGroupDataV1")
}

func init() {
	proto.RegisterFile("inference/inference/v1/epoch_group_datav1.proto", fileDescriptor_f2cecb0c769381fd)
}

var fileDescriptor_f2cecb0c769381fd = []byte{
	// 513 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xdf, 0x6e, 0xd3, 0x30,
	0x14, 0xc6, 0x1b, 0xf6, 0x47, 0xcc, 0x1d, 0xd0, 0x79, 0x5b, 0x89, 0x7a, 0x11, 0x95, 0x89, 0x89,
	0x0a, 0x41, 0xab, 0x6c, 0xc0, 0x03, 0x0c, 0x10, 0x70, 0xd5, 0x2a, 0x9d, 0x0a, 0xe2, 0xc6, 0x72,
	0x9d, 0x93, 0xd6, 0x22, 0x89, 0x8d, 0xed, 0x04, 0xf6, 0x16, 0x3c, 0x0c, 0x0f, 0xc1, 0xe5, 0x2e,
	0xb9, 0x44, 0xed, 0x8b, 0xa0, 0x38, 0x6b, 0x94, 0x55, 0x9b, 0xe0, 0xce, 0xf9, 0x7e, 0xdf, 0xf9,
	0xce, 0x71, 0x6c, 0xa3, 0x01, 0x4f, 0x23, 0x50, 0x90, 0x32, 0xa8, 0xad, 0x72, 0x7f, 0x00, 0x52,
	0xb0, 0x39, 0x99, 0x29, 0x91, 0x49, 0x12, 0x52, 0x43, 0x73, 0xbf, 0x2f, 0x95, 0x30, 0x02, 0xef,
	0x57, 0xb6, 0x7e, 0xb5, 0xea, 0xf4, 0x6e, 0x49, 0x91, 0x54, 0x19, 0xce, 0xb8, 0xa4, 0xa9, 0x29,
	0xcb, 0x3b, 0xc7, 0xb7, 0x3b, 0x69, 0xa2, 0x57, 0x5d, 0x3a, 0xcf, 0xff, 0x73, 0xac, 0xd2, 0x7e,
	0xf4, 0x73, 0x0b, 0xb5, 0xde, 0x16, 0xe8, 0x5d, 0x41, 0xde, 0x50, 0x43, 0x27, 0x3e, 0x3e, 0x45,
	0x6d, 0x29, 0x18, 0xd1, 0x86, 0x2a, 0x43, 0xa6, 0xb1, 0x60, 0x5f, 0xc8, 0x1c, 0xf8, 0x6c, 0x6e,
	0x5c, 0xa7, 0xeb, 0xf4, 0x36, 0x83, 0x7d, 0x29, 0xd8, 0xb8, 0x80, 0x67, 0x05, 0x7b, 0x6f, 0x11,
	0x7e, 0x8c, 0xee, 0xd7, 0x7b, 0xf0, 0xd0, 0xbd, 0x63, 0xcd, 0xbb, 0x50, 0xc5, 0x7f, 0x08, 0xf1,
	0x23, 0x54, 0x7e, 0x13, 0x29, 0x62, 0xce, 0x2e, 0xdc, 0x8d, 0xae, 0xd3, 0xdb, 0x09, 0x9a, 0x56,
	0x1b, 0x59, 0x09, 0xbf, 0x40, 0x6d, 0x88, 0x22, 0x60, 0x86, 0xe7, 0x70, 0xbd, 0xfb, 0xa6, 0x0d,
	0x3c, 0xa8, 0x68, 0xbd, 0xfd, 0x53, 0xb4, 0x17, 0x53, 0xbd, 0x36, 0xee, 0x96, 0x2d, 0x78, 0x50,
	0x80, 0xba, 0xf7, 0x13, 0x6a, 0x27, 0x90, 0x4c, 0x41, 0x11, 0x0d, 0x10, 0x12, 0xcd, 0x67, 0x29,
	0x35, 0x99, 0x02, 0xed, 0x6e, 0x77, 0x37, 0x7a, 0xcd, 0x93, 0xa3, 0xfe, 0x0d, 0x47, 0xd5, 0x1f,
	0x03, 0x84, 0xe3, 0x95, 0x35, 0x38, 0x28, 0x13, 0xae, 0x89, 0x1a, 0x9f, 0x23, 0x9c, 0xd3, 0x98,
	0x87, 0xd4, 0x70, 0x91, 0x92, 0x6f, 0xb6, 0x9d, 0x76, 0xef, 0xda, 0xd4, 0xe3, 0x1b, 0x53, 0x27,
	0x95, 0xfd, 0xa3, 0x75, 0x07, 0x7b, 0xf9, 0x9a, 0xa2, 0xb1, 0x8f, 0x0e, 0xb3, 0x94, 0x1b, 0x22,
	0x22, 0xc2, 0x44, 0x22, 0x33, 0x03, 0x44, 0x2a, 0xce, 0xc0, 0xdd, 0xb1, 0xfb, 0xc3, 0x05, 0x1c,
	0x46, 0xaf, 0x4b, 0x34, 0x2a, 0x08, 0x7e, 0x86, 0x70, 0x9a, 0xd9, 0x2d, 0x8a, 0x88, 0x28, 0xf8,
	0x9a, 0x81, 0x36, 0xda, 0x45, 0xd6, 0xdf, 0x2a, 0xc9, 0x30, 0x0a, 0xae, 0x74, 0xfc, 0x0a, 0x3d,
	0x94, 0x0a, 0x72, 0x2e, 0x32, 0x4d, 0xca, 0xe3, 0xa9, 0x4a, 0x9a, 0xb6, 0xe4, 0x70, 0x85, 0xed,
	0x5d, 0xa9, 0xea, 0xce, 0x51, 0x6d, 0x5a, 0x52, 0xde, 0x44, 0x77, 0xb7, 0xeb, 0xf4, 0x9a, 0x27,
	0x4f, 0xfe, 0xb1, 0xdb, 0x91, 0x35, 0x4f, 0xfc, 0xa0, 0x95, 0xaf, 0x69, 0xc5, 0x1d, 0x31, 0xc2,
	0xd0, 0xf8, 0xea, 0xff, 0xb9, 0xf7, 0xec, 0x08, 0x4d, 0xab, 0x95, 0xbf, 0xe4, 0x6c, 0xf8, 0x6b,
	0xe1, 0x39, 0x97, 0x0b, 0xcf, 0xf9, 0xb3, 0xf0, 0x9c, 0x1f, 0x4b, 0xaf, 0x71, 0xb9, 0xf4, 0x1a,
	0xbf, 0x97, 0x5e, 0xe3, 0xf3, 0xcb, 0x19, 0x37, 0xf3, 0x6c, 0xda, 0x67, 0x22, 0x19, 0x48, 0x25,
	0xc2, 0x8c, 0x19, 0xcd, 0xf8, 0xda, 0x7b, 0xf8, 0x5e, 0x5b, 0x9b, 0x0b, 0x09, 0x7a, 0xba, 0x6d,
	0x9f, 0xc3, 0xe9, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6e, 0x44, 0xf4, 0x61, 0xd6, 0x03, 0x00,
	0x00,
}

func (m *EpochGroupDataV1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EpochGroupDataV1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EpochGroupDataV1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalWeight != 0 {
		i = encodeVarintEpochGroupDatav1(dAtA, i, uint64(m.TotalWeight))
		i--
		dAtA[i] = 0x68
	}
	if m.ValidationParams != nil {
		{
			size, err := m.ValidationParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEpochGroupDatav1(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.PreviousEpochRequests != 0 {
		i = encodeVarintEpochGroupDatav1(dAtA, i, uint64(m.PreviousEpochRequests))
		i--
		dAtA[i] = 0x58
	}
	if m.NumberOfRequests != 0 {
		i = encodeVarintEpochGroupDatav1(dAtA, i, uint64(m.NumberOfRequests))
		i--
		dAtA[i] = 0x50
	}
	if m.UnitOfComputePrice != 0 {
		i = encodeVarintEpochGroupDatav1(dAtA, i, uint64(m.UnitOfComputePrice))
		i--
		dAtA[i] = 0x48
	}
	if len(m.ValidationWeights) > 0 {
		for iNdEx := len(m.ValidationWeights) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValidationWeights[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEpochGroupDatav1(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.MemberSeedSignatures) > 0 {
		for iNdEx := len(m.MemberSeedSignatures) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MemberSeedSignatures[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEpochGroupDatav1(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.LastBlockHeight != 0 {
		i = encodeVarintEpochGroupDatav1(dAtA, i, uint64(m.LastBlockHeight))
		i--
		dAtA[i] = 0x28
	}
	if m.EffectiveBlockHeight != 0 {
		i = encodeVarintEpochGroupDatav1(dAtA, i, uint64(m.EffectiveBlockHeight))
		i--
		dAtA[i] = 0x20
	}
	if len(m.EpochPolicy) > 0 {
		i -= len(m.EpochPolicy)
		copy(dAtA[i:], m.EpochPolicy)
		i = encodeVarintEpochGroupDatav1(dAtA, i, uint64(len(m.EpochPolicy)))
		i--
		dAtA[i] = 0x1a
	}
	if m.EpochGroupId != 0 {
		i = encodeVarintEpochGroupDatav1(dAtA, i, uint64(m.EpochGroupId))
		i--
		dAtA[i] = 0x10
	}
	if m.PocStartBlockHeight != 0 {
		i = encodeVarintEpochGroupDatav1(dAtA, i, uint64(m.PocStartBlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEpochGroupDatav1(dAtA []byte, offset int, v uint64) int {
	offset -= sovEpochGroupDatav1(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EpochGroupDataV1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PocStartBlockHeight != 0 {
		n += 1 + sovEpochGroupDatav1(uint64(m.PocStartBlockHeight))
	}
	if m.EpochGroupId != 0 {
		n += 1 + sovEpochGroupDatav1(uint64(m.EpochGroupId))
	}
	l = len(m.EpochPolicy)
	if l > 0 {
		n += 1 + l + sovEpochGroupDatav1(uint64(l))
	}
	if m.EffectiveBlockHeight != 0 {
		n += 1 + sovEpochGroupDatav1(uint64(m.EffectiveBlockHeight))
	}
	if m.LastBlockHeight != 0 {
		n += 1 + sovEpochGroupDatav1(uint64(m.LastBlockHeight))
	}
	if len(m.MemberSeedSignatures) > 0 {
		for _, e := range m.MemberSeedSignatures {
			l = e.Size()
			n += 1 + l + sovEpochGroupDatav1(uint64(l))
		}
	}
	if len(m.ValidationWeights) > 0 {
		for _, e := range m.ValidationWeights {
			l = e.Size()
			n += 1 + l + sovEpochGroupDatav1(uint64(l))
		}
	}
	if m.UnitOfComputePrice != 0 {
		n += 1 + sovEpochGroupDatav1(uint64(m.UnitOfComputePrice))
	}
	if m.NumberOfRequests != 0 {
		n += 1 + sovEpochGroupDatav1(uint64(m.NumberOfRequests))
	}
	if m.PreviousEpochRequests != 0 {
		n += 1 + sovEpochGroupDatav1(uint64(m.PreviousEpochRequests))
	}
	if m.ValidationParams != nil {
		l = m.ValidationParams.Size()
		n += 1 + l + sovEpochGroupDatav1(uint64(l))
	}
	if m.TotalWeight != 0 {
		n += 1 + sovEpochGroupDatav1(uint64(m.TotalWeight))
	}
	return n
}

func sovEpochGroupDatav1(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEpochGroupDatav1(x uint64) (n int) {
	return sovEpochGroupDatav1(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EpochGroupDataV1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEpochGroupDatav1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EpochGroupDataV1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EpochGroupDataV1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PocStartBlockHeight", wireType)
			}
			m.PocStartBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochGroupDatav1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PocStartBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochGroupId", wireType)
			}
			m.EpochGroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochGroupDatav1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochGroupId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochGroupDatav1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEpochGroupDatav1
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEpochGroupDatav1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochPolicy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveBlockHeight", wireType)
			}
			m.EffectiveBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochGroupDatav1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EffectiveBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastBlockHeight", wireType)
			}
			m.LastBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochGroupDatav1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberSeedSignatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochGroupDatav1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEpochGroupDatav1
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEpochGroupDatav1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberSeedSignatures = append(m.MemberSeedSignatures, &SeedSignature{})
			if err := m.MemberSeedSignatures[len(m.MemberSeedSignatures)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationWeights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochGroupDatav1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEpochGroupDatav1
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEpochGroupDatav1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidationWeights = append(m.ValidationWeights, &ValidationWeight{})
			if err := m.ValidationWeights[len(m.ValidationWeights)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitOfComputePrice", wireType)
			}
			m.UnitOfComputePrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochGroupDatav1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnitOfComputePrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfRequests", wireType)
			}
			m.NumberOfRequests = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochGroupDatav1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberOfRequests |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousEpochRequests", wireType)
			}
			m.PreviousEpochRequests = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochGroupDatav1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreviousEpochRequests |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochGroupDatav1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEpochGroupDatav1
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEpochGroupDatav1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ValidationParams == nil {
				m.ValidationParams = &ValidationParamsV1{}
			}
			if err := m.ValidationParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalWeight", wireType)
			}
			m.TotalWeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochGroupDatav1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalWeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEpochGroupDatav1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEpochGroupDatav1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEpochGroupDatav1(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEpochGroupDatav1
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEpochGroupDatav1
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEpochGroupDatav1
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEpochGroupDatav1
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEpochGroupDatav1
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEpochGroupDatav1
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEpochGroupDatav1        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEpochGroupDatav1          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEpochGroupDatav1 = fmt.Errorf("proto: unexpected end of group")
)

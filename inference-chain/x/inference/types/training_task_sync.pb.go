// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: inference/inference/training_task_sync.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TrainingTaskKVRecord struct {
	TaskId      uint64 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Participant string `protobuf:"bytes,2,opt,name=participant,proto3" json:"participant,omitempty"`
	Key         string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Value       string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *TrainingTaskKVRecord) Reset()         { *m = TrainingTaskKVRecord{} }
func (m *TrainingTaskKVRecord) String() string { return proto.CompactTextString(m) }
func (*TrainingTaskKVRecord) ProtoMessage()    {}
func (*TrainingTaskKVRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f5f05a6f52459f1, []int{0}
}
func (m *TrainingTaskKVRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrainingTaskKVRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrainingTaskKVRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrainingTaskKVRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrainingTaskKVRecord.Merge(m, src)
}
func (m *TrainingTaskKVRecord) XXX_Size() int {
	return m.Size()
}
func (m *TrainingTaskKVRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_TrainingTaskKVRecord.DiscardUnknown(m)
}

var xxx_messageInfo_TrainingTaskKVRecord proto.InternalMessageInfo

func (m *TrainingTaskKVRecord) GetTaskId() uint64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *TrainingTaskKVRecord) GetParticipant() string {
	if m != nil {
		return m.Participant
	}
	return ""
}

func (m *TrainingTaskKVRecord) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *TrainingTaskKVRecord) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type TrainingTaskNodeEpochActivity struct {
	TaskId      uint64                 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Participant string                 `protobuf:"bytes,2,opt,name=participant,proto3" json:"participant,omitempty"`
	NodeId      string                 `protobuf:"bytes,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Rank        int32                  `protobuf:"varint,4,opt,name=rank,proto3" json:"rank,omitempty"`
	Heartbeat   *TrainingTaskHeartbeat `protobuf:"bytes,5,opt,name=heartbeat,proto3" json:"heartbeat,omitempty"`
}

func (m *TrainingTaskNodeEpochActivity) Reset()         { *m = TrainingTaskNodeEpochActivity{} }
func (m *TrainingTaskNodeEpochActivity) String() string { return proto.CompactTextString(m) }
func (*TrainingTaskNodeEpochActivity) ProtoMessage()    {}
func (*TrainingTaskNodeEpochActivity) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f5f05a6f52459f1, []int{1}
}
func (m *TrainingTaskNodeEpochActivity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrainingTaskNodeEpochActivity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrainingTaskNodeEpochActivity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrainingTaskNodeEpochActivity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrainingTaskNodeEpochActivity.Merge(m, src)
}
func (m *TrainingTaskNodeEpochActivity) XXX_Size() int {
	return m.Size()
}
func (m *TrainingTaskNodeEpochActivity) XXX_DiscardUnknown() {
	xxx_messageInfo_TrainingTaskNodeEpochActivity.DiscardUnknown(m)
}

var xxx_messageInfo_TrainingTaskNodeEpochActivity proto.InternalMessageInfo

func (m *TrainingTaskNodeEpochActivity) GetTaskId() uint64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *TrainingTaskNodeEpochActivity) GetParticipant() string {
	if m != nil {
		return m.Participant
	}
	return ""
}

func (m *TrainingTaskNodeEpochActivity) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *TrainingTaskNodeEpochActivity) GetRank() int32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *TrainingTaskNodeEpochActivity) GetHeartbeat() *TrainingTaskHeartbeat {
	if m != nil {
		return m.Heartbeat
	}
	return nil
}

type TrainingTaskHeartbeat struct {
	InnerStep   int32 `protobuf:"varint,1,opt,name=inner_step,json=innerStep,proto3" json:"inner_step,omitempty"`
	OuterStep   int32 `protobuf:"varint,2,opt,name=outer_step,json=outerStep,proto3" json:"outer_step,omitempty"`
	Epoch       int32 `protobuf:"varint,3,opt,name=epoch,proto3" json:"epoch,omitempty"`
	BlockHeight int64 `protobuf:"varint,4,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	BlockTime   int64 `protobuf:"varint,5,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`
}

func (m *TrainingTaskHeartbeat) Reset()         { *m = TrainingTaskHeartbeat{} }
func (m *TrainingTaskHeartbeat) String() string { return proto.CompactTextString(m) }
func (*TrainingTaskHeartbeat) ProtoMessage()    {}
func (*TrainingTaskHeartbeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f5f05a6f52459f1, []int{2}
}
func (m *TrainingTaskHeartbeat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrainingTaskHeartbeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrainingTaskHeartbeat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrainingTaskHeartbeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrainingTaskHeartbeat.Merge(m, src)
}
func (m *TrainingTaskHeartbeat) XXX_Size() int {
	return m.Size()
}
func (m *TrainingTaskHeartbeat) XXX_DiscardUnknown() {
	xxx_messageInfo_TrainingTaskHeartbeat.DiscardUnknown(m)
}

var xxx_messageInfo_TrainingTaskHeartbeat proto.InternalMessageInfo

func (m *TrainingTaskHeartbeat) GetInnerStep() int32 {
	if m != nil {
		return m.InnerStep
	}
	return 0
}

func (m *TrainingTaskHeartbeat) GetOuterStep() int32 {
	if m != nil {
		return m.OuterStep
	}
	return 0
}

func (m *TrainingTaskHeartbeat) GetEpoch() int32 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *TrainingTaskHeartbeat) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *TrainingTaskHeartbeat) GetBlockTime() int64 {
	if m != nil {
		return m.BlockTime
	}
	return 0
}

type TrainingTaskBarrier struct {
	BarrierId   string `protobuf:"bytes,1,opt,name=barrier_id,json=barrierId,proto3" json:"barrier_id,omitempty"`
	TaskId      uint64 `protobuf:"varint,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Participant string `protobuf:"bytes,3,opt,name=participant,proto3" json:"participant,omitempty"`
	NodeId      string `protobuf:"bytes,4,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Epoch       int32  `protobuf:"varint,5,opt,name=epoch,proto3" json:"epoch,omitempty"`
	BlockHeight int64  `protobuf:"varint,6,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	BlockTime   int64  `protobuf:"varint,7,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`
}

func (m *TrainingTaskBarrier) Reset()         { *m = TrainingTaskBarrier{} }
func (m *TrainingTaskBarrier) String() string { return proto.CompactTextString(m) }
func (*TrainingTaskBarrier) ProtoMessage()    {}
func (*TrainingTaskBarrier) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f5f05a6f52459f1, []int{3}
}
func (m *TrainingTaskBarrier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrainingTaskBarrier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrainingTaskBarrier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrainingTaskBarrier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrainingTaskBarrier.Merge(m, src)
}
func (m *TrainingTaskBarrier) XXX_Size() int {
	return m.Size()
}
func (m *TrainingTaskBarrier) XXX_DiscardUnknown() {
	xxx_messageInfo_TrainingTaskBarrier.DiscardUnknown(m)
}

var xxx_messageInfo_TrainingTaskBarrier proto.InternalMessageInfo

func (m *TrainingTaskBarrier) GetBarrierId() string {
	if m != nil {
		return m.BarrierId
	}
	return ""
}

func (m *TrainingTaskBarrier) GetTaskId() uint64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *TrainingTaskBarrier) GetParticipant() string {
	if m != nil {
		return m.Participant
	}
	return ""
}

func (m *TrainingTaskBarrier) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *TrainingTaskBarrier) GetEpoch() int32 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *TrainingTaskBarrier) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *TrainingTaskBarrier) GetBlockTime() int64 {
	if m != nil {
		return m.BlockTime
	}
	return 0
}

func init() {
	proto.RegisterType((*TrainingTaskKVRecord)(nil), "inference.inference.TrainingTaskKVRecord")
	proto.RegisterType((*TrainingTaskNodeEpochActivity)(nil), "inference.inference.TrainingTaskNodeEpochActivity")
	proto.RegisterType((*TrainingTaskHeartbeat)(nil), "inference.inference.TrainingTaskHeartbeat")
	proto.RegisterType((*TrainingTaskBarrier)(nil), "inference.inference.TrainingTaskBarrier")
}

func init() {
	proto.RegisterFile("inference/inference/training_task_sync.proto", fileDescriptor_0f5f05a6f52459f1)
}

var fileDescriptor_0f5f05a6f52459f1 = []byte{
	// 446 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0xc1, 0x6a, 0xdb, 0x40,
	0x10, 0xf5, 0x5a, 0x96, 0x8d, 0xd6, 0x3d, 0x94, 0x8d, 0x4b, 0x74, 0x89, 0x70, 0x7d, 0x32, 0xa5,
	0x28, 0xd0, 0xd2, 0x0f, 0x68, 0xa0, 0x60, 0x53, 0x68, 0x61, 0x6b, 0x7a, 0xe8, 0xc5, 0xac, 0x57,
	0x53, 0x6b, 0x51, 0xbc, 0x2b, 0x56, 0xab, 0x50, 0xfd, 0x45, 0x7f, 0xa4, 0xff, 0xd1, 0x63, 0x7a,
	0xeb, 0x31, 0xd8, 0x3f, 0x52, 0x34, 0x8a, 0x1d, 0x25, 0x04, 0xf7, 0x90, 0xdb, 0xcc, 0x9b, 0x79,
	0xd2, 0x7b, 0x33, 0x3b, 0xf4, 0xb5, 0xd2, 0xdf, 0xc1, 0x82, 0x96, 0x70, 0x7e, 0x17, 0x39, 0x2b,
	0x94, 0x56, 0x7a, 0xbd, 0x74, 0xa2, 0xc8, 0x96, 0x45, 0xa5, 0x65, 0x9c, 0x5b, 0xe3, 0x0c, 0x3b,
	0x39, 0xf4, 0xc4, 0x87, 0x68, 0x52, 0xd1, 0xd1, 0xe2, 0x96, 0xb0, 0x10, 0x45, 0xf6, 0xf1, 0x2b,
	0x07, 0x69, 0x6c, 0xc2, 0x4e, 0xe9, 0x00, 0xf9, 0x2a, 0x09, 0xc9, 0x98, 0x4c, 0x7b, 0xbc, 0x5f,
	0xa7, 0xf3, 0x84, 0x8d, 0xe9, 0x30, 0x17, 0xd6, 0x29, 0xa9, 0x72, 0xa1, 0x5d, 0xd8, 0x1d, 0x93,
	0x69, 0xc0, 0xdb, 0x10, 0x7b, 0x4e, 0xbd, 0x0c, 0xaa, 0xd0, 0xc3, 0x4a, 0x1d, 0xb2, 0x11, 0xf5,
	0xaf, 0xc4, 0x65, 0x09, 0x61, 0x0f, 0xb1, 0x26, 0x99, 0xfc, 0x21, 0xf4, 0xac, 0xfd, 0xef, 0x4f,
	0x26, 0x81, 0x0f, 0xb9, 0x91, 0xe9, 0x7b, 0xe9, 0xd4, 0x95, 0x72, 0xd5, 0x53, 0x44, 0x9c, 0xd2,
	0x81, 0x36, 0x09, 0xd4, 0xd4, 0x46, 0x48, 0xbf, 0x4e, 0xe7, 0x09, 0x63, 0xb4, 0x67, 0x85, 0xce,
	0x50, 0x8a, 0xcf, 0x31, 0x66, 0x33, 0x1a, 0xa4, 0x20, 0xac, 0x5b, 0x81, 0x70, 0xa1, 0x3f, 0x26,
	0xd3, 0xe1, 0x9b, 0x57, 0xf1, 0x23, 0xd3, 0x8a, 0xdb, 0x72, 0x67, 0x7b, 0x06, 0xbf, 0x23, 0x4f,
	0x7e, 0x11, 0xfa, 0xe2, 0xd1, 0x26, 0x76, 0x46, 0xa9, 0xd2, 0x1a, 0xec, 0xb2, 0x70, 0x90, 0xa3,
	0x1d, 0x9f, 0x07, 0x88, 0x7c, 0x71, 0x90, 0xd7, 0x65, 0x53, 0xba, 0x7d, 0xb9, 0xdb, 0x94, 0x11,
	0xc1, 0xf2, 0x88, 0xfa, 0x50, 0x8f, 0x06, 0xcd, 0xf8, 0xbc, 0x49, 0xd8, 0x4b, 0xfa, 0x6c, 0x75,
	0x69, 0x64, 0xb6, 0x4c, 0x41, 0xad, 0x53, 0x87, 0x9e, 0x3c, 0x3e, 0x44, 0x6c, 0x86, 0x50, 0xfd,
	0xdd, 0xa6, 0xc5, 0xa9, 0x0d, 0xa0, 0x37, 0x8f, 0x07, 0x88, 0x2c, 0xd4, 0x06, 0x26, 0x37, 0x84,
	0x9e, 0xb4, 0xf5, 0x5e, 0x08, 0x6b, 0x15, 0x58, 0xa4, 0x35, 0xe1, 0x7e, 0xf8, 0x01, 0x0f, 0x6e,
	0x91, 0xf9, 0xbd, 0xd7, 0xd1, 0x3d, 0xb6, 0x18, 0xef, 0xe8, 0x62, 0x7a, 0xf7, 0x16, 0x73, 0xb0,
	0xe8, 0x1f, 0xb3, 0xd8, 0xff, 0x9f, 0xc5, 0xc1, 0x03, 0x8b, 0x17, 0x9f, 0x7f, 0x6f, 0x23, 0x72,
	0xbd, 0x8d, 0xc8, 0xcd, 0x36, 0x22, 0x3f, 0x77, 0x51, 0xe7, 0x7a, 0x17, 0x75, 0xfe, 0xee, 0xa2,
	0xce, 0xb7, 0x77, 0x6b, 0xe5, 0xd2, 0x72, 0x15, 0x4b, 0xb3, 0x39, 0xcf, 0xad, 0x49, 0x4a, 0xe9,
	0x0a, 0xa9, 0x1e, 0x9c, 0xd3, 0x8f, 0xf6, 0x69, 0x55, 0x39, 0x14, 0xab, 0x3e, 0x9e, 0xd3, 0xdb,
	0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x08, 0xc9, 0x67, 0xe8, 0x7e, 0x03, 0x00, 0x00,
}

func (m *TrainingTaskKVRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrainingTaskKVRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrainingTaskKVRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintTrainingTaskSync(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintTrainingTaskSync(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Participant) > 0 {
		i -= len(m.Participant)
		copy(dAtA[i:], m.Participant)
		i = encodeVarintTrainingTaskSync(dAtA, i, uint64(len(m.Participant)))
		i--
		dAtA[i] = 0x12
	}
	if m.TaskId != 0 {
		i = encodeVarintTrainingTaskSync(dAtA, i, uint64(m.TaskId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TrainingTaskNodeEpochActivity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrainingTaskNodeEpochActivity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrainingTaskNodeEpochActivity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Heartbeat != nil {
		{
			size, err := m.Heartbeat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTrainingTaskSync(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Rank != 0 {
		i = encodeVarintTrainingTaskSync(dAtA, i, uint64(m.Rank))
		i--
		dAtA[i] = 0x20
	}
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintTrainingTaskSync(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Participant) > 0 {
		i -= len(m.Participant)
		copy(dAtA[i:], m.Participant)
		i = encodeVarintTrainingTaskSync(dAtA, i, uint64(len(m.Participant)))
		i--
		dAtA[i] = 0x12
	}
	if m.TaskId != 0 {
		i = encodeVarintTrainingTaskSync(dAtA, i, uint64(m.TaskId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TrainingTaskHeartbeat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrainingTaskHeartbeat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrainingTaskHeartbeat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockTime != 0 {
		i = encodeVarintTrainingTaskSync(dAtA, i, uint64(m.BlockTime))
		i--
		dAtA[i] = 0x28
	}
	if m.BlockHeight != 0 {
		i = encodeVarintTrainingTaskSync(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x20
	}
	if m.Epoch != 0 {
		i = encodeVarintTrainingTaskSync(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x18
	}
	if m.OuterStep != 0 {
		i = encodeVarintTrainingTaskSync(dAtA, i, uint64(m.OuterStep))
		i--
		dAtA[i] = 0x10
	}
	if m.InnerStep != 0 {
		i = encodeVarintTrainingTaskSync(dAtA, i, uint64(m.InnerStep))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TrainingTaskBarrier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrainingTaskBarrier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrainingTaskBarrier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockTime != 0 {
		i = encodeVarintTrainingTaskSync(dAtA, i, uint64(m.BlockTime))
		i--
		dAtA[i] = 0x38
	}
	if m.BlockHeight != 0 {
		i = encodeVarintTrainingTaskSync(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x30
	}
	if m.Epoch != 0 {
		i = encodeVarintTrainingTaskSync(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x28
	}
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintTrainingTaskSync(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Participant) > 0 {
		i -= len(m.Participant)
		copy(dAtA[i:], m.Participant)
		i = encodeVarintTrainingTaskSync(dAtA, i, uint64(len(m.Participant)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TaskId != 0 {
		i = encodeVarintTrainingTaskSync(dAtA, i, uint64(m.TaskId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.BarrierId) > 0 {
		i -= len(m.BarrierId)
		copy(dAtA[i:], m.BarrierId)
		i = encodeVarintTrainingTaskSync(dAtA, i, uint64(len(m.BarrierId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTrainingTaskSync(dAtA []byte, offset int, v uint64) int {
	offset -= sovTrainingTaskSync(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TrainingTaskKVRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskId != 0 {
		n += 1 + sovTrainingTaskSync(uint64(m.TaskId))
	}
	l = len(m.Participant)
	if l > 0 {
		n += 1 + l + sovTrainingTaskSync(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovTrainingTaskSync(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTrainingTaskSync(uint64(l))
	}
	return n
}

func (m *TrainingTaskNodeEpochActivity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskId != 0 {
		n += 1 + sovTrainingTaskSync(uint64(m.TaskId))
	}
	l = len(m.Participant)
	if l > 0 {
		n += 1 + l + sovTrainingTaskSync(uint64(l))
	}
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovTrainingTaskSync(uint64(l))
	}
	if m.Rank != 0 {
		n += 1 + sovTrainingTaskSync(uint64(m.Rank))
	}
	if m.Heartbeat != nil {
		l = m.Heartbeat.Size()
		n += 1 + l + sovTrainingTaskSync(uint64(l))
	}
	return n
}

func (m *TrainingTaskHeartbeat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InnerStep != 0 {
		n += 1 + sovTrainingTaskSync(uint64(m.InnerStep))
	}
	if m.OuterStep != 0 {
		n += 1 + sovTrainingTaskSync(uint64(m.OuterStep))
	}
	if m.Epoch != 0 {
		n += 1 + sovTrainingTaskSync(uint64(m.Epoch))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovTrainingTaskSync(uint64(m.BlockHeight))
	}
	if m.BlockTime != 0 {
		n += 1 + sovTrainingTaskSync(uint64(m.BlockTime))
	}
	return n
}

func (m *TrainingTaskBarrier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BarrierId)
	if l > 0 {
		n += 1 + l + sovTrainingTaskSync(uint64(l))
	}
	if m.TaskId != 0 {
		n += 1 + sovTrainingTaskSync(uint64(m.TaskId))
	}
	l = len(m.Participant)
	if l > 0 {
		n += 1 + l + sovTrainingTaskSync(uint64(l))
	}
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovTrainingTaskSync(uint64(l))
	}
	if m.Epoch != 0 {
		n += 1 + sovTrainingTaskSync(uint64(m.Epoch))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovTrainingTaskSync(uint64(m.BlockHeight))
	}
	if m.BlockTime != 0 {
		n += 1 + sovTrainingTaskSync(uint64(m.BlockTime))
	}
	return n
}

func sovTrainingTaskSync(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTrainingTaskSync(x uint64) (n int) {
	return sovTrainingTaskSync(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TrainingTaskKVRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrainingTaskSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrainingTaskKVRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrainingTaskKVRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrainingTaskSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrainingTaskSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrainingTaskSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrainingTaskSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrainingTaskSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrainingTaskSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrainingTaskSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrainingTaskSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrainingTaskSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrainingTaskSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrainingTaskSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrainingTaskSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrainingTaskNodeEpochActivity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrainingTaskSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrainingTaskNodeEpochActivity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrainingTaskNodeEpochActivity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrainingTaskSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrainingTaskSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrainingTaskSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrainingTaskSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrainingTaskSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrainingTaskSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrainingTaskSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrainingTaskSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Heartbeat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrainingTaskSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrainingTaskSync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrainingTaskSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Heartbeat == nil {
				m.Heartbeat = &TrainingTaskHeartbeat{}
			}
			if err := m.Heartbeat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrainingTaskSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrainingTaskSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrainingTaskHeartbeat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrainingTaskSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrainingTaskHeartbeat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrainingTaskHeartbeat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InnerStep", wireType)
			}
			m.InnerStep = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrainingTaskSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InnerStep |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OuterStep", wireType)
			}
			m.OuterStep = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrainingTaskSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OuterStep |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrainingTaskSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrainingTaskSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockTime", wireType)
			}
			m.BlockTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrainingTaskSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTrainingTaskSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrainingTaskSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrainingTaskBarrier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrainingTaskSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrainingTaskBarrier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrainingTaskBarrier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BarrierId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrainingTaskSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrainingTaskSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrainingTaskSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BarrierId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrainingTaskSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrainingTaskSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrainingTaskSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrainingTaskSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrainingTaskSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrainingTaskSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrainingTaskSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrainingTaskSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrainingTaskSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockTime", wireType)
			}
			m.BlockTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrainingTaskSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTrainingTaskSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrainingTaskSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTrainingTaskSync(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTrainingTaskSync
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrainingTaskSync
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrainingTaskSync
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTrainingTaskSync
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTrainingTaskSync
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTrainingTaskSync
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTrainingTaskSync        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTrainingTaskSync          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTrainingTaskSync = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: inference/inference/training_task.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TrainingTask struct {
	Id                          uint64                       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RequestedBy                 string                       `protobuf:"bytes,2,opt,name=requested_by,json=requestedBy,proto3" json:"requested_by,omitempty"`
	CreatedAtBlockHeight        uint64                       `protobuf:"varint,3,opt,name=created_at_block_height,json=createdAtBlockHeight,proto3" json:"created_at_block_height,omitempty"`
	Assigner                    string                       `protobuf:"bytes,4,opt,name=assigner,proto3" json:"assigner,omitempty"`
	AssignerLockedAtBlockHeight uint64                       `protobuf:"varint,5,opt,name=assigner_locked_at_block_height,json=assignerLockedAtBlockHeight,proto3" json:"assigner_locked_at_block_height,omitempty"`
	AssignedAtBlockHeight       uint64                       `protobuf:"varint,6,opt,name=assigned_at_block_height,json=assignedAtBlockHeight,proto3" json:"assigned_at_block_height,omitempty"`
	FinishedAtBlockHeight       uint64                       `protobuf:"varint,7,opt,name=finished_at_block_height,json=finishedAtBlockHeight,proto3" json:"finished_at_block_height,omitempty"`
	HardwareResources           []*TrainingHardwareResources `protobuf:"bytes,8,rep,name=hardware_resources,json=hardwareResources,proto3" json:"hardware_resources,omitempty"`
	Config                      *TrainingConfig              `protobuf:"bytes,9,opt,name=config,proto3" json:"config,omitempty"`
}

func (m *TrainingTask) Reset()         { *m = TrainingTask{} }
func (m *TrainingTask) String() string { return proto.CompactTextString(m) }
func (*TrainingTask) ProtoMessage()    {}
func (*TrainingTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a3d50542a135bda, []int{0}
}
func (m *TrainingTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrainingTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrainingTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrainingTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrainingTask.Merge(m, src)
}
func (m *TrainingTask) XXX_Size() int {
	return m.Size()
}
func (m *TrainingTask) XXX_DiscardUnknown() {
	xxx_messageInfo_TrainingTask.DiscardUnknown(m)
}

var xxx_messageInfo_TrainingTask proto.InternalMessageInfo

func (m *TrainingTask) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TrainingTask) GetRequestedBy() string {
	if m != nil {
		return m.RequestedBy
	}
	return ""
}

func (m *TrainingTask) GetCreatedAtBlockHeight() uint64 {
	if m != nil {
		return m.CreatedAtBlockHeight
	}
	return 0
}

func (m *TrainingTask) GetAssigner() string {
	if m != nil {
		return m.Assigner
	}
	return ""
}

func (m *TrainingTask) GetAssignerLockedAtBlockHeight() uint64 {
	if m != nil {
		return m.AssignerLockedAtBlockHeight
	}
	return 0
}

func (m *TrainingTask) GetAssignedAtBlockHeight() uint64 {
	if m != nil {
		return m.AssignedAtBlockHeight
	}
	return 0
}

func (m *TrainingTask) GetFinishedAtBlockHeight() uint64 {
	if m != nil {
		return m.FinishedAtBlockHeight
	}
	return 0
}

func (m *TrainingTask) GetHardwareResources() []*TrainingHardwareResources {
	if m != nil {
		return m.HardwareResources
	}
	return nil
}

func (m *TrainingTask) GetConfig() *TrainingConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

type TrainingHardwareResources struct {
	Type  string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Count uint32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *TrainingHardwareResources) Reset()         { *m = TrainingHardwareResources{} }
func (m *TrainingHardwareResources) String() string { return proto.CompactTextString(m) }
func (*TrainingHardwareResources) ProtoMessage()    {}
func (*TrainingHardwareResources) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a3d50542a135bda, []int{1}
}
func (m *TrainingHardwareResources) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrainingHardwareResources) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrainingHardwareResources.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrainingHardwareResources) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrainingHardwareResources.Merge(m, src)
}
func (m *TrainingHardwareResources) XXX_Size() int {
	return m.Size()
}
func (m *TrainingHardwareResources) XXX_DiscardUnknown() {
	xxx_messageInfo_TrainingHardwareResources.DiscardUnknown(m)
}

var xxx_messageInfo_TrainingHardwareResources proto.InternalMessageInfo

func (m *TrainingHardwareResources) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *TrainingHardwareResources) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type TrainingConfig struct {
	Datasets              *TrainingDatasets `protobuf:"bytes,1,opt,name=datasets,proto3" json:"datasets,omitempty"`
	NumUocEstimationSteps uint32            `protobuf:"varint,2,opt,name=num_uoc_estimation_steps,json=numUocEstimationSteps,proto3" json:"num_uoc_estimation_steps,omitempty"`
}

func (m *TrainingConfig) Reset()         { *m = TrainingConfig{} }
func (m *TrainingConfig) String() string { return proto.CompactTextString(m) }
func (*TrainingConfig) ProtoMessage()    {}
func (*TrainingConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a3d50542a135bda, []int{2}
}
func (m *TrainingConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrainingConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrainingConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrainingConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrainingConfig.Merge(m, src)
}
func (m *TrainingConfig) XXX_Size() int {
	return m.Size()
}
func (m *TrainingConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TrainingConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TrainingConfig proto.InternalMessageInfo

func (m *TrainingConfig) GetDatasets() *TrainingDatasets {
	if m != nil {
		return m.Datasets
	}
	return nil
}

func (m *TrainingConfig) GetNumUocEstimationSteps() uint32 {
	if m != nil {
		return m.NumUocEstimationSteps
	}
	return 0
}

type TrainingDatasets struct {
	Train string `protobuf:"bytes,1,opt,name=train,proto3" json:"train,omitempty"`
	Test  string `protobuf:"bytes,2,opt,name=test,proto3" json:"test,omitempty"`
}

func (m *TrainingDatasets) Reset()         { *m = TrainingDatasets{} }
func (m *TrainingDatasets) String() string { return proto.CompactTextString(m) }
func (*TrainingDatasets) ProtoMessage()    {}
func (*TrainingDatasets) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a3d50542a135bda, []int{3}
}
func (m *TrainingDatasets) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrainingDatasets) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrainingDatasets.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrainingDatasets) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrainingDatasets.Merge(m, src)
}
func (m *TrainingDatasets) XXX_Size() int {
	return m.Size()
}
func (m *TrainingDatasets) XXX_DiscardUnknown() {
	xxx_messageInfo_TrainingDatasets.DiscardUnknown(m)
}

var xxx_messageInfo_TrainingDatasets proto.InternalMessageInfo

func (m *TrainingDatasets) GetTrain() string {
	if m != nil {
		return m.Train
	}
	return ""
}

func (m *TrainingDatasets) GetTest() string {
	if m != nil {
		return m.Test
	}
	return ""
}

func init() {
	proto.RegisterType((*TrainingTask)(nil), "inference.inference.TrainingTask")
	proto.RegisterType((*TrainingHardwareResources)(nil), "inference.inference.TrainingHardwareResources")
	proto.RegisterType((*TrainingConfig)(nil), "inference.inference.TrainingConfig")
	proto.RegisterType((*TrainingDatasets)(nil), "inference.inference.TrainingDatasets")
}

func init() {
	proto.RegisterFile("inference/inference/training_task.proto", fileDescriptor_8a3d50542a135bda)
}

var fileDescriptor_8a3d50542a135bda = []byte{
	// 477 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0x9b, 0xb6, 0x2b, 0xad, 0x3b, 0x26, 0x30, 0x9b, 0x08, 0x20, 0x85, 0x52, 0x84, 0xe8,
	0x29, 0x93, 0x8a, 0x26, 0x0e, 0x70, 0x59, 0xd9, 0xa4, 0x1d, 0x90, 0x90, 0xc2, 0xb8, 0x20, 0x21,
	0xcb, 0x75, 0xde, 0x26, 0x56, 0xa9, 0x1d, 0x6c, 0x47, 0xd0, 0xef, 0xc0, 0x81, 0x8f, 0xc5, 0x71,
	0x47, 0x8e, 0xa8, 0xbd, 0xf0, 0x31, 0x50, 0x5c, 0x27, 0xd0, 0xae, 0xeb, 0xed, 0x75, 0x9e, 0xe7,
	0xf7, 0xbc, 0xfe, 0x93, 0x17, 0x3d, 0xe7, 0x62, 0x02, 0x0a, 0x04, 0x83, 0xe3, 0x7f, 0x95, 0x51,
	0x94, 0x0b, 0x2e, 0x12, 0x62, 0xa8, 0x9e, 0x86, 0x99, 0x92, 0x46, 0xe2, 0x7b, 0x95, 0x1c, 0x56,
	0x55, 0xff, 0x4f, 0x03, 0xed, 0x5f, 0x3a, 0xf3, 0x25, 0xd5, 0x53, 0x7c, 0x80, 0xea, 0x3c, 0xf6,
	0xbd, 0x9e, 0x37, 0x68, 0x46, 0x75, 0x1e, 0xe3, 0x27, 0x68, 0x5f, 0xc1, 0x97, 0x1c, 0xb4, 0x81,
	0x98, 0x8c, 0xe7, 0x7e, 0xbd, 0xe7, 0x0d, 0x3a, 0x51, 0xb7, 0xfa, 0x36, 0x9a, 0xe3, 0x13, 0x74,
	0x9f, 0x29, 0xa0, 0x85, 0x81, 0x1a, 0x32, 0xfe, 0x2c, 0xd9, 0x94, 0xa4, 0xc0, 0x93, 0xd4, 0xf8,
	0x0d, 0x9b, 0x73, 0xe8, 0xe4, 0x53, 0x33, 0x2a, 0xc4, 0x0b, 0xab, 0xe1, 0x87, 0xa8, 0x4d, 0xb5,
	0xe6, 0x89, 0x00, 0xe5, 0x37, 0x6d, 0x6a, 0xb5, 0xc6, 0x67, 0xe8, 0x71, 0x59, 0x93, 0x02, 0xd9,
	0x12, 0xbd, 0x67, 0xa3, 0x1f, 0x95, 0xb6, 0xb7, 0xd6, 0xb5, 0xde, 0xe1, 0x25, 0xf2, 0x9d, 0x7c,
	0x1d, 0x6f, 0x59, 0xfc, 0xa8, 0xd4, 0xaf, 0x81, 0x13, 0x2e, 0xb8, 0x4e, 0xb7, 0x80, 0xb7, 0x56,
	0x60, 0xa9, 0xaf, 0x83, 0x9f, 0x10, 0x4e, 0xa9, 0x8a, 0xbf, 0x52, 0x05, 0x44, 0x81, 0x96, 0xb9,
	0x62, 0xa0, 0xfd, 0x76, 0xaf, 0x31, 0xe8, 0x0e, 0xc3, 0x70, 0xcb, 0x03, 0x84, 0xe5, 0xe5, 0x5f,
	0x38, 0x2c, 0x2a, 0xa9, 0xe8, 0x6e, 0xba, 0xf9, 0x09, 0xbf, 0x42, 0x2d, 0x26, 0xc5, 0x84, 0x27,
	0x7e, 0xa7, 0xe7, 0x0d, 0xba, 0xc3, 0xa7, 0x3b, 0x23, 0xdf, 0x58, 0x6b, 0xe4, 0x90, 0xfe, 0x39,
	0x7a, 0x70, 0x63, 0x33, 0x8c, 0x51, 0xd3, 0xcc, 0x33, 0xb0, 0x0f, 0xdf, 0x89, 0x6c, 0x8d, 0x0f,
	0xd1, 0x1e, 0x93, 0xb9, 0x30, 0xf6, 0xcd, 0x6f, 0x47, 0xab, 0x45, 0xff, 0xbb, 0x87, 0x0e, 0xd6,
	0x3b, 0xe0, 0x53, 0xd4, 0x8e, 0xa9, 0xa1, 0x1a, 0x8c, 0xb6, 0x01, 0xdd, 0xe1, 0xb3, 0x9d, 0x1b,
	0x3b, 0x73, 0xe6, 0xa8, 0xc2, 0x8a, 0x1b, 0x17, 0xf9, 0x8c, 0xe4, 0x92, 0x11, 0xd0, 0x86, 0xcf,
	0xa8, 0xe1, 0x52, 0x10, 0x6d, 0x20, 0xd3, 0xae, 0xfd, 0x91, 0xc8, 0x67, 0x1f, 0x24, 0x3b, 0xaf,
	0xd4, 0xf7, 0x85, 0xd8, 0x7f, 0x8d, 0xee, 0x6c, 0xc6, 0x16, 0x1b, 0xb7, 0x03, 0xe0, 0x4e, 0xb3,
	0x5a, 0xd8, 0x23, 0x82, 0x36, 0xee, 0x0f, 0xb6, 0xf5, 0xe8, 0xdd, 0xcf, 0x45, 0xe0, 0x5d, 0x2d,
	0x02, 0xef, 0xf7, 0x22, 0xf0, 0x7e, 0x2c, 0x83, 0xda, 0xd5, 0x32, 0xa8, 0xfd, 0x5a, 0x06, 0xb5,
	0x8f, 0x27, 0x09, 0x37, 0x69, 0x3e, 0x0e, 0x99, 0x9c, 0x1d, 0x67, 0x4a, 0xc6, 0x39, 0x33, 0x9a,
	0xf1, 0x8d, 0x31, 0xfb, 0xf6, 0xff, 0xc8, 0xcd, 0x33, 0xd0, 0xe3, 0x96, 0x9d, 0xb5, 0x17, 0x7f,
	0x03, 0x00, 0x00, 0xff, 0xff, 0x91, 0x41, 0x80, 0x17, 0x96, 0x03, 0x00, 0x00,
}

func (m *TrainingTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrainingTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrainingTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTrainingTask(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.HardwareResources) > 0 {
		for iNdEx := len(m.HardwareResources) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HardwareResources[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTrainingTask(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.FinishedAtBlockHeight != 0 {
		i = encodeVarintTrainingTask(dAtA, i, uint64(m.FinishedAtBlockHeight))
		i--
		dAtA[i] = 0x38
	}
	if m.AssignedAtBlockHeight != 0 {
		i = encodeVarintTrainingTask(dAtA, i, uint64(m.AssignedAtBlockHeight))
		i--
		dAtA[i] = 0x30
	}
	if m.AssignerLockedAtBlockHeight != 0 {
		i = encodeVarintTrainingTask(dAtA, i, uint64(m.AssignerLockedAtBlockHeight))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Assigner) > 0 {
		i -= len(m.Assigner)
		copy(dAtA[i:], m.Assigner)
		i = encodeVarintTrainingTask(dAtA, i, uint64(len(m.Assigner)))
		i--
		dAtA[i] = 0x22
	}
	if m.CreatedAtBlockHeight != 0 {
		i = encodeVarintTrainingTask(dAtA, i, uint64(m.CreatedAtBlockHeight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.RequestedBy) > 0 {
		i -= len(m.RequestedBy)
		copy(dAtA[i:], m.RequestedBy)
		i = encodeVarintTrainingTask(dAtA, i, uint64(len(m.RequestedBy)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintTrainingTask(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TrainingHardwareResources) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrainingHardwareResources) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrainingHardwareResources) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintTrainingTask(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintTrainingTask(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TrainingConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrainingConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrainingConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumUocEstimationSteps != 0 {
		i = encodeVarintTrainingTask(dAtA, i, uint64(m.NumUocEstimationSteps))
		i--
		dAtA[i] = 0x10
	}
	if m.Datasets != nil {
		{
			size, err := m.Datasets.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTrainingTask(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TrainingDatasets) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrainingDatasets) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrainingDatasets) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Test) > 0 {
		i -= len(m.Test)
		copy(dAtA[i:], m.Test)
		i = encodeVarintTrainingTask(dAtA, i, uint64(len(m.Test)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Train) > 0 {
		i -= len(m.Train)
		copy(dAtA[i:], m.Train)
		i = encodeVarintTrainingTask(dAtA, i, uint64(len(m.Train)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTrainingTask(dAtA []byte, offset int, v uint64) int {
	offset -= sovTrainingTask(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TrainingTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTrainingTask(uint64(m.Id))
	}
	l = len(m.RequestedBy)
	if l > 0 {
		n += 1 + l + sovTrainingTask(uint64(l))
	}
	if m.CreatedAtBlockHeight != 0 {
		n += 1 + sovTrainingTask(uint64(m.CreatedAtBlockHeight))
	}
	l = len(m.Assigner)
	if l > 0 {
		n += 1 + l + sovTrainingTask(uint64(l))
	}
	if m.AssignerLockedAtBlockHeight != 0 {
		n += 1 + sovTrainingTask(uint64(m.AssignerLockedAtBlockHeight))
	}
	if m.AssignedAtBlockHeight != 0 {
		n += 1 + sovTrainingTask(uint64(m.AssignedAtBlockHeight))
	}
	if m.FinishedAtBlockHeight != 0 {
		n += 1 + sovTrainingTask(uint64(m.FinishedAtBlockHeight))
	}
	if len(m.HardwareResources) > 0 {
		for _, e := range m.HardwareResources {
			l = e.Size()
			n += 1 + l + sovTrainingTask(uint64(l))
		}
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovTrainingTask(uint64(l))
	}
	return n
}

func (m *TrainingHardwareResources) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovTrainingTask(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovTrainingTask(uint64(m.Count))
	}
	return n
}

func (m *TrainingConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Datasets != nil {
		l = m.Datasets.Size()
		n += 1 + l + sovTrainingTask(uint64(l))
	}
	if m.NumUocEstimationSteps != 0 {
		n += 1 + sovTrainingTask(uint64(m.NumUocEstimationSteps))
	}
	return n
}

func (m *TrainingDatasets) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Train)
	if l > 0 {
		n += 1 + l + sovTrainingTask(uint64(l))
	}
	l = len(m.Test)
	if l > 0 {
		n += 1 + l + sovTrainingTask(uint64(l))
	}
	return n
}

func sovTrainingTask(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTrainingTask(x uint64) (n int) {
	return sovTrainingTask(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TrainingTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrainingTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrainingTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrainingTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrainingTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrainingTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrainingTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrainingTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAtBlockHeight", wireType)
			}
			m.CreatedAtBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrainingTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAtBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assigner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrainingTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrainingTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrainingTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assigner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssignerLockedAtBlockHeight", wireType)
			}
			m.AssignerLockedAtBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrainingTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssignerLockedAtBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssignedAtBlockHeight", wireType)
			}
			m.AssignedAtBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrainingTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssignedAtBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishedAtBlockHeight", wireType)
			}
			m.FinishedAtBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrainingTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinishedAtBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardwareResources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrainingTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrainingTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrainingTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HardwareResources = append(m.HardwareResources, &TrainingHardwareResources{})
			if err := m.HardwareResources[len(m.HardwareResources)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrainingTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrainingTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrainingTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &TrainingConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrainingTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrainingTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrainingHardwareResources) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrainingTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrainingHardwareResources: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrainingHardwareResources: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrainingTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrainingTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrainingTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrainingTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTrainingTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrainingTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrainingConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrainingTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrainingConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrainingConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datasets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrainingTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrainingTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrainingTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Datasets == nil {
				m.Datasets = &TrainingDatasets{}
			}
			if err := m.Datasets.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumUocEstimationSteps", wireType)
			}
			m.NumUocEstimationSteps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrainingTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumUocEstimationSteps |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTrainingTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrainingTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrainingDatasets) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrainingTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrainingDatasets: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrainingDatasets: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Train", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrainingTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrainingTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrainingTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Train = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Test", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrainingTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrainingTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrainingTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Test = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrainingTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrainingTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTrainingTask(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTrainingTask
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrainingTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrainingTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTrainingTask
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTrainingTask
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTrainingTask
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTrainingTask        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTrainingTask          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTrainingTask = fmt.Errorf("proto: unexpected end of group")
)

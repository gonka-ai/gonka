// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: inference/inference/v1/paramsv1.proto

package types

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the module.
type ParamsV1 struct {
	EpochParams      *EpochParamsV1      `protobuf:"bytes,1,opt,name=epoch_params,json=epochParams,proto3" json:"epoch_params,omitempty"`
	ValidationParams *ValidationParamsV1 `protobuf:"bytes,2,opt,name=validation_params,json=validationParams,proto3" json:"validation_params,omitempty"`
	PocParams        *PocParamsV1        `protobuf:"bytes,3,opt,name=poc_params,json=pocParams,proto3" json:"poc_params,omitempty"`
	TokenomicsParams *TokenomicsParamsV1 `protobuf:"bytes,4,opt,name=tokenomics_params,json=tokenomicsParams,proto3" json:"tokenomics_params,omitempty"`
}

func (m *ParamsV1) Reset()         { *m = ParamsV1{} }
func (m *ParamsV1) String() string { return proto.CompactTextString(m) }
func (*ParamsV1) ProtoMessage()    {}
func (*ParamsV1) Descriptor() ([]byte, []int) {
	return fileDescriptor_6145aaa1db470e22, []int{0}
}
func (m *ParamsV1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParamsV1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParamsV1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParamsV1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParamsV1.Merge(m, src)
}
func (m *ParamsV1) XXX_Size() int {
	return m.Size()
}
func (m *ParamsV1) XXX_DiscardUnknown() {
	xxx_messageInfo_ParamsV1.DiscardUnknown(m)
}

var xxx_messageInfo_ParamsV1 proto.InternalMessageInfo

func (m *ParamsV1) GetEpochParams() *EpochParamsV1 {
	if m != nil {
		return m.EpochParams
	}
	return nil
}

func (m *ParamsV1) GetValidationParams() *ValidationParamsV1 {
	if m != nil {
		return m.ValidationParams
	}
	return nil
}

func (m *ParamsV1) GetPocParams() *PocParamsV1 {
	if m != nil {
		return m.PocParams
	}
	return nil
}

func (m *ParamsV1) GetTokenomicsParams() *TokenomicsParamsV1 {
	if m != nil {
		return m.TokenomicsParams
	}
	return nil
}

type TokenomicsParamsV1 struct {
	SubsidyReductionInterval float64 `protobuf:"fixed64,1,opt,name=subsidy_reduction_interval,json=subsidyReductionInterval,proto3" json:"subsidy_reduction_interval,omitempty"`
	SubsidyReductionAmount   float32 `protobuf:"fixed32,2,opt,name=subsidy_reduction_amount,json=subsidyReductionAmount,proto3" json:"subsidy_reduction_amount,omitempty"`
	CurrentSubsidyPercentage float32 `protobuf:"fixed32,3,opt,name=current_subsidy_percentage,json=currentSubsidyPercentage,proto3" json:"current_subsidy_percentage,omitempty"`
	TopRewardAllowedFailure  float32 `protobuf:"fixed32,4,opt,name=top_reward_allowed_failure,json=topRewardAllowedFailure,proto3" json:"top_reward_allowed_failure,omitempty"`
	TopMinerPocQualification int64   `protobuf:"varint,5,opt,name=top_miner_poc_qualification,json=topMinerPocQualification,proto3" json:"top_miner_poc_qualification,omitempty"`
}

func (m *TokenomicsParamsV1) Reset()         { *m = TokenomicsParamsV1{} }
func (m *TokenomicsParamsV1) String() string { return proto.CompactTextString(m) }
func (*TokenomicsParamsV1) ProtoMessage()    {}
func (*TokenomicsParamsV1) Descriptor() ([]byte, []int) {
	return fileDescriptor_6145aaa1db470e22, []int{1}
}
func (m *TokenomicsParamsV1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenomicsParamsV1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenomicsParamsV1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenomicsParamsV1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenomicsParamsV1.Merge(m, src)
}
func (m *TokenomicsParamsV1) XXX_Size() int {
	return m.Size()
}
func (m *TokenomicsParamsV1) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenomicsParamsV1.DiscardUnknown(m)
}

var xxx_messageInfo_TokenomicsParamsV1 proto.InternalMessageInfo

func (m *TokenomicsParamsV1) GetSubsidyReductionInterval() float64 {
	if m != nil {
		return m.SubsidyReductionInterval
	}
	return 0
}

func (m *TokenomicsParamsV1) GetSubsidyReductionAmount() float32 {
	if m != nil {
		return m.SubsidyReductionAmount
	}
	return 0
}

func (m *TokenomicsParamsV1) GetCurrentSubsidyPercentage() float32 {
	if m != nil {
		return m.CurrentSubsidyPercentage
	}
	return 0
}

func (m *TokenomicsParamsV1) GetTopRewardAllowedFailure() float32 {
	if m != nil {
		return m.TopRewardAllowedFailure
	}
	return 0
}

func (m *TokenomicsParamsV1) GetTopMinerPocQualification() int64 {
	if m != nil {
		return m.TopMinerPocQualification
	}
	return 0
}

type EpochParamsV1 struct {
	EpochLength               int64  `protobuf:"varint,1,opt,name=epoch_length,json=epochLength,proto3" json:"epoch_length,omitempty"`
	EpochMultiplier           int64  `protobuf:"varint,2,opt,name=epoch_multiplier,json=epochMultiplier,proto3" json:"epoch_multiplier,omitempty"`
	EpochShift                int64  `protobuf:"varint,3,opt,name=epoch_shift,json=epochShift,proto3" json:"epoch_shift,omitempty"`
	DefaultUnitOfComputePrice uint64 `protobuf:"varint,4,opt,name=default_unit_of_compute_price,json=defaultUnitOfComputePrice,proto3" json:"default_unit_of_compute_price,omitempty"`
	PocStageDuration          int64  `protobuf:"varint,5,opt,name=poc_stage_duration,json=pocStageDuration,proto3" json:"poc_stage_duration,omitempty"`
	PocExchangeDuration       int64  `protobuf:"varint,6,opt,name=poc_exchange_duration,json=pocExchangeDuration,proto3" json:"poc_exchange_duration,omitempty"`
	PocValidationDelay        int64  `protobuf:"varint,7,opt,name=poc_validation_delay,json=pocValidationDelay,proto3" json:"poc_validation_delay,omitempty"`
	PocValidationDuration     int64  `protobuf:"varint,8,opt,name=poc_validation_duration,json=pocValidationDuration,proto3" json:"poc_validation_duration,omitempty"`
}

func (m *EpochParamsV1) Reset()         { *m = EpochParamsV1{} }
func (m *EpochParamsV1) String() string { return proto.CompactTextString(m) }
func (*EpochParamsV1) ProtoMessage()    {}
func (*EpochParamsV1) Descriptor() ([]byte, []int) {
	return fileDescriptor_6145aaa1db470e22, []int{2}
}
func (m *EpochParamsV1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EpochParamsV1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EpochParamsV1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EpochParamsV1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochParamsV1.Merge(m, src)
}
func (m *EpochParamsV1) XXX_Size() int {
	return m.Size()
}
func (m *EpochParamsV1) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochParamsV1.DiscardUnknown(m)
}

var xxx_messageInfo_EpochParamsV1 proto.InternalMessageInfo

func (m *EpochParamsV1) GetEpochLength() int64 {
	if m != nil {
		return m.EpochLength
	}
	return 0
}

func (m *EpochParamsV1) GetEpochMultiplier() int64 {
	if m != nil {
		return m.EpochMultiplier
	}
	return 0
}

func (m *EpochParamsV1) GetEpochShift() int64 {
	if m != nil {
		return m.EpochShift
	}
	return 0
}

func (m *EpochParamsV1) GetDefaultUnitOfComputePrice() uint64 {
	if m != nil {
		return m.DefaultUnitOfComputePrice
	}
	return 0
}

func (m *EpochParamsV1) GetPocStageDuration() int64 {
	if m != nil {
		return m.PocStageDuration
	}
	return 0
}

func (m *EpochParamsV1) GetPocExchangeDuration() int64 {
	if m != nil {
		return m.PocExchangeDuration
	}
	return 0
}

func (m *EpochParamsV1) GetPocValidationDelay() int64 {
	if m != nil {
		return m.PocValidationDelay
	}
	return 0
}

func (m *EpochParamsV1) GetPocValidationDuration() int64 {
	if m != nil {
		return m.PocValidationDuration
	}
	return 0
}

type ValidationParamsV1 struct {
	FalsePositiveRate           float64 `protobuf:"fixed64,1,opt,name=false_positive_rate,json=falsePositiveRate,proto3" json:"false_positive_rate,omitempty"`
	MinRampUpMeasurements       uint32  `protobuf:"varint,2,opt,name=min_ramp_up_measurements,json=minRampUpMeasurements,proto3" json:"min_ramp_up_measurements,omitempty"`
	PassValue                   float64 `protobuf:"fixed64,3,opt,name=pass_value,json=passValue,proto3" json:"pass_value,omitempty"`
	MinValidationAverage        float64 `protobuf:"fixed64,4,opt,name=min_validation_average,json=minValidationAverage,proto3" json:"min_validation_average,omitempty"`
	MaxValidationAverage        float64 `protobuf:"fixed64,5,opt,name=max_validation_average,json=maxValidationAverage,proto3" json:"max_validation_average,omitempty"`
	ExpirationBlocks            int64   `protobuf:"varint,6,opt,name=expiration_blocks,json=expirationBlocks,proto3" json:"expiration_blocks,omitempty"`
	EpochsToMax                 int64   `protobuf:"varint,7,opt,name=epochs_to_max,json=epochsToMax,proto3" json:"epochs_to_max,omitempty"`
	FullValidationTrafficCutoff int64   `protobuf:"varint,8,opt,name=full_validation_traffic_cutoff,json=fullValidationTrafficCutoff,proto3" json:"full_validation_traffic_cutoff,omitempty"`
	MinValidationHalfway        float64 `protobuf:"fixed64,9,opt,name=min_validation_halfway,json=minValidationHalfway,proto3" json:"min_validation_halfway,omitempty"`
	MinValidationTrafficCutoff  int64   `protobuf:"varint,10,opt,name=min_validation_traffic_cutoff,json=minValidationTrafficCutoff,proto3" json:"min_validation_traffic_cutoff,omitempty"`
	MissPercentageCutoff        float64 `protobuf:"fixed64,11,opt,name=miss_percentage_cutoff,json=missPercentageCutoff,proto3" json:"miss_percentage_cutoff,omitempty"`
	MissRequestsPenalty         float64 `protobuf:"fixed64,12,opt,name=miss_requests_penalty,json=missRequestsPenalty,proto3" json:"miss_requests_penalty,omitempty"`
}

func (m *ValidationParamsV1) Reset()         { *m = ValidationParamsV1{} }
func (m *ValidationParamsV1) String() string { return proto.CompactTextString(m) }
func (*ValidationParamsV1) ProtoMessage()    {}
func (*ValidationParamsV1) Descriptor() ([]byte, []int) {
	return fileDescriptor_6145aaa1db470e22, []int{3}
}
func (m *ValidationParamsV1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidationParamsV1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidationParamsV1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidationParamsV1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidationParamsV1.Merge(m, src)
}
func (m *ValidationParamsV1) XXX_Size() int {
	return m.Size()
}
func (m *ValidationParamsV1) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidationParamsV1.DiscardUnknown(m)
}

var xxx_messageInfo_ValidationParamsV1 proto.InternalMessageInfo

func (m *ValidationParamsV1) GetFalsePositiveRate() float64 {
	if m != nil {
		return m.FalsePositiveRate
	}
	return 0
}

func (m *ValidationParamsV1) GetMinRampUpMeasurements() uint32 {
	if m != nil {
		return m.MinRampUpMeasurements
	}
	return 0
}

func (m *ValidationParamsV1) GetPassValue() float64 {
	if m != nil {
		return m.PassValue
	}
	return 0
}

func (m *ValidationParamsV1) GetMinValidationAverage() float64 {
	if m != nil {
		return m.MinValidationAverage
	}
	return 0
}

func (m *ValidationParamsV1) GetMaxValidationAverage() float64 {
	if m != nil {
		return m.MaxValidationAverage
	}
	return 0
}

func (m *ValidationParamsV1) GetExpirationBlocks() int64 {
	if m != nil {
		return m.ExpirationBlocks
	}
	return 0
}

func (m *ValidationParamsV1) GetEpochsToMax() int64 {
	if m != nil {
		return m.EpochsToMax
	}
	return 0
}

func (m *ValidationParamsV1) GetFullValidationTrafficCutoff() int64 {
	if m != nil {
		return m.FullValidationTrafficCutoff
	}
	return 0
}

func (m *ValidationParamsV1) GetMinValidationHalfway() float64 {
	if m != nil {
		return m.MinValidationHalfway
	}
	return 0
}

func (m *ValidationParamsV1) GetMinValidationTrafficCutoff() int64 {
	if m != nil {
		return m.MinValidationTrafficCutoff
	}
	return 0
}

func (m *ValidationParamsV1) GetMissPercentageCutoff() float64 {
	if m != nil {
		return m.MissPercentageCutoff
	}
	return 0
}

func (m *ValidationParamsV1) GetMissRequestsPenalty() float64 {
	if m != nil {
		return m.MissRequestsPenalty
	}
	return 0
}

type PocParamsV1 struct {
	DefaultDifficulty uint32 `protobuf:"varint,1,opt,name=default_difficulty,json=defaultDifficulty,proto3" json:"default_difficulty,omitempty"`
}

func (m *PocParamsV1) Reset()         { *m = PocParamsV1{} }
func (m *PocParamsV1) String() string { return proto.CompactTextString(m) }
func (*PocParamsV1) ProtoMessage()    {}
func (*PocParamsV1) Descriptor() ([]byte, []int) {
	return fileDescriptor_6145aaa1db470e22, []int{4}
}
func (m *PocParamsV1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PocParamsV1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PocParamsV1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PocParamsV1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PocParamsV1.Merge(m, src)
}
func (m *PocParamsV1) XXX_Size() int {
	return m.Size()
}
func (m *PocParamsV1) XXX_DiscardUnknown() {
	xxx_messageInfo_PocParamsV1.DiscardUnknown(m)
}

var xxx_messageInfo_PocParamsV1 proto.InternalMessageInfo

func (m *PocParamsV1) GetDefaultDifficulty() uint32 {
	if m != nil {
		return m.DefaultDifficulty
	}
	return 0
}

func init() {
	proto.RegisterType((*ParamsV1)(nil), "inference.inference.ParamsV1")
	proto.RegisterType((*TokenomicsParamsV1)(nil), "inference.inference.TokenomicsParamsV1")
	proto.RegisterType((*EpochParamsV1)(nil), "inference.inference.EpochParamsV1")
	proto.RegisterType((*ValidationParamsV1)(nil), "inference.inference.ValidationParamsV1")
	proto.RegisterType((*PocParamsV1)(nil), "inference.inference.PocParamsV1")
}

func init() {
	proto.RegisterFile("inference/inference/v1/paramsv1.proto", fileDescriptor_6145aaa1db470e22)
}

var fileDescriptor_6145aaa1db470e22 = []byte{
	// 966 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x55, 0xdd, 0x6e, 0x23, 0x35,
	0x14, 0xee, 0x24, 0xed, 0xb2, 0x75, 0xb7, 0xa2, 0x71, 0xdb, 0xdd, 0xd9, 0x2c, 0xcd, 0x96, 0x48,
	0x2b, 0x96, 0xbf, 0x84, 0x96, 0x5f, 0x2d, 0x20, 0xe8, 0x1f, 0x02, 0x89, 0x6a, 0xc3, 0xb4, 0xdb,
	0x0b, 0x6e, 0x2c, 0xd7, 0xf1, 0x24, 0xd6, 0xce, 0x8c, 0xbd, 0xb6, 0x27, 0x4d, 0x9e, 0x00, 0x89,
	0x2b, 0xc4, 0x13, 0xf0, 0x08, 0x3c, 0x06, 0x17, 0x5c, 0xec, 0x25, 0x97, 0xa8, 0x15, 0x82, 0xc7,
	0x40, 0xfe, 0x99, 0xc9, 0x34, 0x8d, 0xf6, 0x66, 0xe4, 0x39, 0xdf, 0xf7, 0x9d, 0x73, 0x7c, 0xce,
	0xb1, 0x0d, 0x1e, 0xb1, 0x2c, 0xa6, 0x92, 0x66, 0x84, 0x76, 0xa7, 0xab, 0xd1, 0x4e, 0x57, 0x60,
	0x89, 0x53, 0x35, 0xda, 0xe9, 0x08, 0xc9, 0x35, 0x87, 0xeb, 0x25, 0xd8, 0x29, 0x57, 0xcd, 0x06,
	0x4e, 0x59, 0xc6, 0xbb, 0xf6, 0xeb, 0x78, 0xcd, 0x8d, 0x01, 0x1f, 0x70, 0xbb, 0xec, 0x9a, 0x95,
	0xb7, 0xde, 0x27, 0x5c, 0xa5, 0x5c, 0x21, 0x07, 0xb8, 0x1f, 0x07, 0xb5, 0xff, 0xa9, 0x81, 0xdb,
	0x3d, 0x1b, 0xeb, 0x6c, 0x07, 0x1e, 0x81, 0x3b, 0x54, 0x70, 0x32, 0x44, 0x2e, 0x7a, 0x18, 0x6c,
	0x07, 0x8f, 0x57, 0x76, 0xdb, 0x9d, 0x39, 0xc1, 0x3b, 0x47, 0x86, 0x58, 0x28, 0xa3, 0x15, 0x3a,
	0xfd, 0x85, 0xa7, 0xa0, 0x31, 0xc2, 0x09, 0xeb, 0x63, 0xcd, 0x78, 0x56, 0xf8, 0xaa, 0x59, 0x5f,
	0x6f, 0xcd, 0xf5, 0x75, 0x56, 0xb2, 0x4b, 0x87, 0x6b, 0xa3, 0x19, 0x1b, 0xfc, 0x0a, 0x00, 0xc1,
	0x49, 0xe1, 0xae, 0x6e, 0xdd, 0x6d, 0xcf, 0x75, 0xd7, 0xe3, 0xa4, 0xf4, 0xb3, 0x2c, 0x8a, 0x1f,
	0x93, 0x96, 0xe6, 0xcf, 0x69, 0xc6, 0x53, 0x46, 0x54, 0xe1, 0x67, 0xf1, 0x15, 0x69, 0x9d, 0x96,
	0xec, 0x69, 0x5a, 0x7a, 0xc6, 0xf6, 0xe4, 0xd1, 0x7f, 0xbf, 0x3d, 0x0c, 0x7e, 0xfe, 0xf7, 0xf7,
	0x77, 0xde, 0x98, 0xf6, 0x6f, 0x5c, 0xe9, 0xa5, 0xa3, 0xb5, 0xff, 0xac, 0x01, 0x78, 0xd3, 0x1f,
	0xfc, 0x02, 0x34, 0x55, 0x7e, 0xae, 0x58, 0x7f, 0x82, 0x24, 0xed, 0xe7, 0xc4, 0x56, 0x8c, 0x65,
	0x9a, 0xca, 0x11, 0x4e, 0x6c, 0xfd, 0x83, 0x28, 0xf4, 0x8c, 0xa8, 0x20, 0x7c, 0xe7, 0x71, 0xf8,
	0x19, 0x08, 0x6f, 0xaa, 0x71, 0xca, 0xf3, 0x4c, 0xdb, 0x7a, 0xd7, 0xa2, 0xbb, 0xb3, 0xda, 0x3d,
	0x8b, 0x9a, 0xb8, 0x24, 0x97, 0x92, 0x66, 0x1a, 0x15, 0x1e, 0x04, 0x95, 0x84, 0x66, 0x1a, 0x0f,
	0xa8, 0x2d, 0x6e, 0x2d, 0x0a, 0x3d, 0xe3, 0xc4, 0x11, 0x7a, 0x25, 0x0e, 0x3f, 0x07, 0x4d, 0xcd,
	0x05, 0x92, 0xf4, 0x02, 0xcb, 0x3e, 0xc2, 0x49, 0xc2, 0x2f, 0x68, 0x1f, 0xc5, 0x98, 0x25, 0xb9,
	0xa4, 0xb6, 0xa4, 0xb5, 0xe8, 0x9e, 0xe6, 0x22, 0xb2, 0x84, 0x3d, 0x87, 0x7f, 0xe3, 0x60, 0xf8,
	0x25, 0x78, 0x60, 0xc4, 0x29, 0xcb, 0xa8, 0x44, 0xa6, 0xa3, 0x2f, 0x72, 0x9c, 0xb0, 0x98, 0x11,
	0xdb, 0xec, 0x70, 0x69, 0x3b, 0x78, 0x5c, 0x8f, 0x42, 0xcd, 0xc5, 0xb1, 0x61, 0xf4, 0x38, 0xf9,
	0xa1, 0x8a, 0x3f, 0x59, 0x34, 0xf5, 0x6e, 0xff, 0x5a, 0x07, 0xab, 0xd7, 0x26, 0x10, 0xbe, 0x59,
	0xcc, 0x6e, 0x42, 0xb3, 0x81, 0x1e, 0xda, 0xda, 0xd5, 0xfd, 0x5c, 0x7e, 0x6f, 0x4d, 0xf0, 0x6d,
	0xb0, 0xe6, 0x28, 0x69, 0x9e, 0x68, 0x26, 0x12, 0x46, 0xa5, 0x2d, 0x53, 0x3d, 0x7a, 0xdd, 0xda,
	0x8f, 0x4b, 0x33, 0x7c, 0x08, 0x9c, 0x12, 0xa9, 0x21, 0x8b, 0xb5, 0x2d, 0x48, 0x3d, 0x02, 0xd6,
	0x74, 0x62, 0x2c, 0xf0, 0x6b, 0xb0, 0xd5, 0xa7, 0x31, 0xce, 0x13, 0x8d, 0xf2, 0x8c, 0x69, 0xc4,
	0x63, 0x44, 0x78, 0x2a, 0x72, 0x4d, 0x91, 0x90, 0x8c, 0xb8, 0x2a, 0x2c, 0x46, 0xf7, 0x3d, 0xe9,
	0x59, 0xc6, 0xf4, 0xd3, 0xf8, 0xc0, 0x31, 0x7a, 0x86, 0x00, 0xdf, 0x03, 0xd0, 0xec, 0x5e, 0x99,
	0x8a, 0xa2, 0x7e, 0x2e, 0xab, 0xdb, 0x5f, 0x13, 0x9c, 0x9c, 0x18, 0xe0, 0xd0, 0xdb, 0xe1, 0x2e,
	0xd8, 0x34, 0x6c, 0x3a, 0x26, 0x43, 0x9c, 0x55, 0x05, 0xb7, 0xac, 0x60, 0x5d, 0x70, 0x72, 0xe4,
	0xb1, 0x52, 0xf3, 0x01, 0xd8, 0x30, 0x9a, 0xca, 0x59, 0xec, 0xd3, 0x04, 0x4f, 0xc2, 0xd7, 0xac,
	0xc4, 0x44, 0x9f, 0x1e, 0xbc, 0x43, 0x83, 0xc0, 0x4f, 0xc0, 0xbd, 0x59, 0x45, 0x11, 0xe7, 0xb6,
	0x15, 0x6d, 0x5e, 0x17, 0x79, 0xd0, 0x37, 0xe5, 0xa7, 0x25, 0x00, 0x6f, 0x1e, 0x65, 0xd8, 0x01,
	0xeb, 0x31, 0x4e, 0x14, 0x45, 0x82, 0x2b, 0xa6, 0xd9, 0x88, 0x22, 0x89, 0x35, 0xf5, 0xc3, 0xdd,
	0xb0, 0x50, 0xcf, 0x23, 0x11, 0xd6, 0x14, 0x7e, 0x0a, 0xc2, 0x94, 0x65, 0x48, 0xe2, 0x54, 0xa0,
	0x5c, 0xa0, 0x94, 0x62, 0x95, 0x4b, 0x9a, 0xd2, 0x4c, 0xbb, 0x5b, 0x64, 0x35, 0xda, 0x4c, 0x59,
	0x16, 0xe1, 0x54, 0x3c, 0x13, 0xc7, 0x15, 0x10, 0x6e, 0x01, 0x20, 0xb0, 0x52, 0x26, 0xfd, 0xdc,
	0x0d, 0x71, 0x10, 0x2d, 0x1b, 0xcb, 0x99, 0x31, 0xc0, 0x8f, 0xc0, 0x5d, 0xe3, 0xb7, 0xb2, 0x39,
	0x3c, 0xa2, 0xd2, 0xcc, 0xfb, 0xa2, 0xa5, 0x6e, 0xa4, 0x2c, 0x9b, 0xa6, 0xbf, 0xe7, 0x30, 0xab,
	0xc2, 0xe3, 0x79, 0xaa, 0x25, 0xaf, 0xc2, 0xe3, 0x9b, 0xaa, 0x77, 0x41, 0x83, 0x8e, 0x05, 0x73,
	0xe5, 0x41, 0xe7, 0x09, 0x27, 0xcf, 0x95, 0x6f, 0xd5, 0xda, 0x14, 0xd8, 0xb7, 0x76, 0xd8, 0x06,
	0xab, 0x76, 0xb2, 0x14, 0xd2, 0x1c, 0xa5, 0x78, 0xec, 0x1b, 0xe4, 0x26, 0x50, 0x9d, 0xf2, 0x63,
	0x3c, 0x86, 0x07, 0xa0, 0x15, 0xe7, 0x49, 0x52, 0xcd, 0x43, 0x4b, 0x1c, 0xc7, 0x8c, 0x20, 0x92,
	0x6b, 0x1e, 0xc7, 0xbe, 0x41, 0x0f, 0x0c, 0x6b, 0x9a, 0xcf, 0xa9, 0xe3, 0x1c, 0x58, 0xca, 0x9c,
	0x0a, 0x0c, 0x71, 0x12, 0x5f, 0xe0, 0x49, 0xb8, 0x3c, 0xa7, 0x02, 0xdf, 0x3a, 0x0c, 0xee, 0x81,
	0xad, 0x19, 0xd5, 0x4c, 0x64, 0x60, 0x23, 0x37, 0xaf, 0x89, 0xe7, 0x04, 0x56, 0xaa, 0x72, 0xc7,
	0x14, 0xda, 0x95, 0x22, 0xb0, 0x52, 0xd3, 0x0b, 0xc6, 0xab, 0x76, 0xc1, 0xa6, 0x55, 0x49, 0xfa,
	0x22, 0xa7, 0x4a, 0x1b, 0x79, 0x86, 0x13, 0x3d, 0x09, 0xef, 0x58, 0xd1, 0xba, 0x01, 0x23, 0x8f,
	0xf5, 0x1c, 0xe4, 0x27, 0x71, 0x1f, 0xac, 0x54, 0x1e, 0x01, 0xf8, 0x3e, 0x80, 0xc5, 0x61, 0xed,
	0x33, 0x93, 0x56, 0x6e, 0xbc, 0x04, 0x76, 0x96, 0x1a, 0x1e, 0x39, 0x2c, 0x01, 0xe7, 0x63, 0xff,
	0xe9, 0x1f, 0x97, 0xad, 0xe0, 0xe5, 0x65, 0x2b, 0xf8, 0xfb, 0xb2, 0x15, 0xfc, 0x72, 0xd5, 0x5a,
	0x78, 0x79, 0xd5, 0x5a, 0xf8, 0xeb, 0xaa, 0xb5, 0xf0, 0xe3, 0xc7, 0x03, 0xa6, 0x87, 0xf9, 0x79,
	0x87, 0xf0, 0xb4, 0x2b, 0x24, 0x37, 0x37, 0xab, 0x22, 0x6c, 0xe6, 0x0d, 0xaf, 0xbe, 0x01, 0x7a,
	0x22, 0xa8, 0x3a, 0xbf, 0x65, 0x5f, 0xdc, 0x0f, 0xff, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x3c, 0x51,
	0x0e, 0x9c, 0xf3, 0x07, 0x00, 0x00,
}

func (this *ParamsV1) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ParamsV1)
	if !ok {
		that2, ok := that.(ParamsV1)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EpochParams.Equal(that1.EpochParams) {
		return false
	}
	if !this.ValidationParams.Equal(that1.ValidationParams) {
		return false
	}
	if !this.PocParams.Equal(that1.PocParams) {
		return false
	}
	if !this.TokenomicsParams.Equal(that1.TokenomicsParams) {
		return false
	}
	return true
}
func (this *TokenomicsParamsV1) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TokenomicsParamsV1)
	if !ok {
		that2, ok := that.(TokenomicsParamsV1)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SubsidyReductionInterval != that1.SubsidyReductionInterval {
		return false
	}
	if this.SubsidyReductionAmount != that1.SubsidyReductionAmount {
		return false
	}
	if this.CurrentSubsidyPercentage != that1.CurrentSubsidyPercentage {
		return false
	}
	if this.TopRewardAllowedFailure != that1.TopRewardAllowedFailure {
		return false
	}
	if this.TopMinerPocQualification != that1.TopMinerPocQualification {
		return false
	}
	return true
}
func (this *EpochParamsV1) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EpochParamsV1)
	if !ok {
		that2, ok := that.(EpochParamsV1)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.EpochLength != that1.EpochLength {
		return false
	}
	if this.EpochMultiplier != that1.EpochMultiplier {
		return false
	}
	if this.EpochShift != that1.EpochShift {
		return false
	}
	if this.DefaultUnitOfComputePrice != that1.DefaultUnitOfComputePrice {
		return false
	}
	if this.PocStageDuration != that1.PocStageDuration {
		return false
	}
	if this.PocExchangeDuration != that1.PocExchangeDuration {
		return false
	}
	if this.PocValidationDelay != that1.PocValidationDelay {
		return false
	}
	if this.PocValidationDuration != that1.PocValidationDuration {
		return false
	}
	return true
}
func (this *ValidationParamsV1) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValidationParamsV1)
	if !ok {
		that2, ok := that.(ValidationParamsV1)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FalsePositiveRate != that1.FalsePositiveRate {
		return false
	}
	if this.MinRampUpMeasurements != that1.MinRampUpMeasurements {
		return false
	}
	if this.PassValue != that1.PassValue {
		return false
	}
	if this.MinValidationAverage != that1.MinValidationAverage {
		return false
	}
	if this.MaxValidationAverage != that1.MaxValidationAverage {
		return false
	}
	if this.ExpirationBlocks != that1.ExpirationBlocks {
		return false
	}
	if this.EpochsToMax != that1.EpochsToMax {
		return false
	}
	if this.FullValidationTrafficCutoff != that1.FullValidationTrafficCutoff {
		return false
	}
	if this.MinValidationHalfway != that1.MinValidationHalfway {
		return false
	}
	if this.MinValidationTrafficCutoff != that1.MinValidationTrafficCutoff {
		return false
	}
	if this.MissPercentageCutoff != that1.MissPercentageCutoff {
		return false
	}
	if this.MissRequestsPenalty != that1.MissRequestsPenalty {
		return false
	}
	return true
}
func (this *PocParamsV1) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PocParamsV1)
	if !ok {
		that2, ok := that.(PocParamsV1)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DefaultDifficulty != that1.DefaultDifficulty {
		return false
	}
	return true
}
func (m *ParamsV1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParamsV1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParamsV1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TokenomicsParams != nil {
		{
			size, err := m.TokenomicsParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintParamsv1(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.PocParams != nil {
		{
			size, err := m.PocParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintParamsv1(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ValidationParams != nil {
		{
			size, err := m.ValidationParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintParamsv1(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.EpochParams != nil {
		{
			size, err := m.EpochParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintParamsv1(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TokenomicsParamsV1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenomicsParamsV1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenomicsParamsV1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopMinerPocQualification != 0 {
		i = encodeVarintParamsv1(dAtA, i, uint64(m.TopMinerPocQualification))
		i--
		dAtA[i] = 0x28
	}
	if m.TopRewardAllowedFailure != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.TopRewardAllowedFailure))))
		i--
		dAtA[i] = 0x25
	}
	if m.CurrentSubsidyPercentage != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.CurrentSubsidyPercentage))))
		i--
		dAtA[i] = 0x1d
	}
	if m.SubsidyReductionAmount != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.SubsidyReductionAmount))))
		i--
		dAtA[i] = 0x15
	}
	if m.SubsidyReductionInterval != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.SubsidyReductionInterval))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *EpochParamsV1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EpochParamsV1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EpochParamsV1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PocValidationDuration != 0 {
		i = encodeVarintParamsv1(dAtA, i, uint64(m.PocValidationDuration))
		i--
		dAtA[i] = 0x40
	}
	if m.PocValidationDelay != 0 {
		i = encodeVarintParamsv1(dAtA, i, uint64(m.PocValidationDelay))
		i--
		dAtA[i] = 0x38
	}
	if m.PocExchangeDuration != 0 {
		i = encodeVarintParamsv1(dAtA, i, uint64(m.PocExchangeDuration))
		i--
		dAtA[i] = 0x30
	}
	if m.PocStageDuration != 0 {
		i = encodeVarintParamsv1(dAtA, i, uint64(m.PocStageDuration))
		i--
		dAtA[i] = 0x28
	}
	if m.DefaultUnitOfComputePrice != 0 {
		i = encodeVarintParamsv1(dAtA, i, uint64(m.DefaultUnitOfComputePrice))
		i--
		dAtA[i] = 0x20
	}
	if m.EpochShift != 0 {
		i = encodeVarintParamsv1(dAtA, i, uint64(m.EpochShift))
		i--
		dAtA[i] = 0x18
	}
	if m.EpochMultiplier != 0 {
		i = encodeVarintParamsv1(dAtA, i, uint64(m.EpochMultiplier))
		i--
		dAtA[i] = 0x10
	}
	if m.EpochLength != 0 {
		i = encodeVarintParamsv1(dAtA, i, uint64(m.EpochLength))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ValidationParamsV1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidationParamsV1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidationParamsV1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MissRequestsPenalty != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MissRequestsPenalty))))
		i--
		dAtA[i] = 0x61
	}
	if m.MissPercentageCutoff != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MissPercentageCutoff))))
		i--
		dAtA[i] = 0x59
	}
	if m.MinValidationTrafficCutoff != 0 {
		i = encodeVarintParamsv1(dAtA, i, uint64(m.MinValidationTrafficCutoff))
		i--
		dAtA[i] = 0x50
	}
	if m.MinValidationHalfway != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MinValidationHalfway))))
		i--
		dAtA[i] = 0x49
	}
	if m.FullValidationTrafficCutoff != 0 {
		i = encodeVarintParamsv1(dAtA, i, uint64(m.FullValidationTrafficCutoff))
		i--
		dAtA[i] = 0x40
	}
	if m.EpochsToMax != 0 {
		i = encodeVarintParamsv1(dAtA, i, uint64(m.EpochsToMax))
		i--
		dAtA[i] = 0x38
	}
	if m.ExpirationBlocks != 0 {
		i = encodeVarintParamsv1(dAtA, i, uint64(m.ExpirationBlocks))
		i--
		dAtA[i] = 0x30
	}
	if m.MaxValidationAverage != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MaxValidationAverage))))
		i--
		dAtA[i] = 0x29
	}
	if m.MinValidationAverage != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MinValidationAverage))))
		i--
		dAtA[i] = 0x21
	}
	if m.PassValue != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.PassValue))))
		i--
		dAtA[i] = 0x19
	}
	if m.MinRampUpMeasurements != 0 {
		i = encodeVarintParamsv1(dAtA, i, uint64(m.MinRampUpMeasurements))
		i--
		dAtA[i] = 0x10
	}
	if m.FalsePositiveRate != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.FalsePositiveRate))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *PocParamsV1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PocParamsV1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PocParamsV1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DefaultDifficulty != 0 {
		i = encodeVarintParamsv1(dAtA, i, uint64(m.DefaultDifficulty))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintParamsv1(dAtA []byte, offset int, v uint64) int {
	offset -= sovParamsv1(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ParamsV1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochParams != nil {
		l = m.EpochParams.Size()
		n += 1 + l + sovParamsv1(uint64(l))
	}
	if m.ValidationParams != nil {
		l = m.ValidationParams.Size()
		n += 1 + l + sovParamsv1(uint64(l))
	}
	if m.PocParams != nil {
		l = m.PocParams.Size()
		n += 1 + l + sovParamsv1(uint64(l))
	}
	if m.TokenomicsParams != nil {
		l = m.TokenomicsParams.Size()
		n += 1 + l + sovParamsv1(uint64(l))
	}
	return n
}

func (m *TokenomicsParamsV1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SubsidyReductionInterval != 0 {
		n += 9
	}
	if m.SubsidyReductionAmount != 0 {
		n += 5
	}
	if m.CurrentSubsidyPercentage != 0 {
		n += 5
	}
	if m.TopRewardAllowedFailure != 0 {
		n += 5
	}
	if m.TopMinerPocQualification != 0 {
		n += 1 + sovParamsv1(uint64(m.TopMinerPocQualification))
	}
	return n
}

func (m *EpochParamsV1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochLength != 0 {
		n += 1 + sovParamsv1(uint64(m.EpochLength))
	}
	if m.EpochMultiplier != 0 {
		n += 1 + sovParamsv1(uint64(m.EpochMultiplier))
	}
	if m.EpochShift != 0 {
		n += 1 + sovParamsv1(uint64(m.EpochShift))
	}
	if m.DefaultUnitOfComputePrice != 0 {
		n += 1 + sovParamsv1(uint64(m.DefaultUnitOfComputePrice))
	}
	if m.PocStageDuration != 0 {
		n += 1 + sovParamsv1(uint64(m.PocStageDuration))
	}
	if m.PocExchangeDuration != 0 {
		n += 1 + sovParamsv1(uint64(m.PocExchangeDuration))
	}
	if m.PocValidationDelay != 0 {
		n += 1 + sovParamsv1(uint64(m.PocValidationDelay))
	}
	if m.PocValidationDuration != 0 {
		n += 1 + sovParamsv1(uint64(m.PocValidationDuration))
	}
	return n
}

func (m *ValidationParamsV1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FalsePositiveRate != 0 {
		n += 9
	}
	if m.MinRampUpMeasurements != 0 {
		n += 1 + sovParamsv1(uint64(m.MinRampUpMeasurements))
	}
	if m.PassValue != 0 {
		n += 9
	}
	if m.MinValidationAverage != 0 {
		n += 9
	}
	if m.MaxValidationAverage != 0 {
		n += 9
	}
	if m.ExpirationBlocks != 0 {
		n += 1 + sovParamsv1(uint64(m.ExpirationBlocks))
	}
	if m.EpochsToMax != 0 {
		n += 1 + sovParamsv1(uint64(m.EpochsToMax))
	}
	if m.FullValidationTrafficCutoff != 0 {
		n += 1 + sovParamsv1(uint64(m.FullValidationTrafficCutoff))
	}
	if m.MinValidationHalfway != 0 {
		n += 9
	}
	if m.MinValidationTrafficCutoff != 0 {
		n += 1 + sovParamsv1(uint64(m.MinValidationTrafficCutoff))
	}
	if m.MissPercentageCutoff != 0 {
		n += 9
	}
	if m.MissRequestsPenalty != 0 {
		n += 9
	}
	return n
}

func (m *PocParamsV1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultDifficulty != 0 {
		n += 1 + sovParamsv1(uint64(m.DefaultDifficulty))
	}
	return n
}

func sovParamsv1(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParamsv1(x uint64) (n int) {
	return sovParamsv1(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ParamsV1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParamsv1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParamsV1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParamsV1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParamsv1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParamsv1
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParamsv1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EpochParams == nil {
				m.EpochParams = &EpochParamsV1{}
			}
			if err := m.EpochParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParamsv1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParamsv1
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParamsv1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ValidationParams == nil {
				m.ValidationParams = &ValidationParamsV1{}
			}
			if err := m.ValidationParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PocParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParamsv1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParamsv1
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParamsv1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PocParams == nil {
				m.PocParams = &PocParamsV1{}
			}
			if err := m.PocParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenomicsParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParamsv1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParamsv1
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParamsv1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TokenomicsParams == nil {
				m.TokenomicsParams = &TokenomicsParamsV1{}
			}
			if err := m.TokenomicsParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParamsv1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParamsv1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenomicsParamsV1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParamsv1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenomicsParamsV1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenomicsParamsV1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubsidyReductionInterval", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.SubsidyReductionInterval = float64(math.Float64frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubsidyReductionAmount", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.SubsidyReductionAmount = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentSubsidyPercentage", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.CurrentSubsidyPercentage = float32(math.Float32frombits(v))
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopRewardAllowedFailure", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.TopRewardAllowedFailure = float32(math.Float32frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopMinerPocQualification", wireType)
			}
			m.TopMinerPocQualification = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParamsv1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopMinerPocQualification |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParamsv1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParamsv1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EpochParamsV1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParamsv1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EpochParamsV1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EpochParamsV1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochLength", wireType)
			}
			m.EpochLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParamsv1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochLength |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochMultiplier", wireType)
			}
			m.EpochMultiplier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParamsv1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochMultiplier |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochShift", wireType)
			}
			m.EpochShift = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParamsv1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochShift |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultUnitOfComputePrice", wireType)
			}
			m.DefaultUnitOfComputePrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParamsv1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefaultUnitOfComputePrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PocStageDuration", wireType)
			}
			m.PocStageDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParamsv1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PocStageDuration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PocExchangeDuration", wireType)
			}
			m.PocExchangeDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParamsv1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PocExchangeDuration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PocValidationDelay", wireType)
			}
			m.PocValidationDelay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParamsv1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PocValidationDelay |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PocValidationDuration", wireType)
			}
			m.PocValidationDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParamsv1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PocValidationDuration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParamsv1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParamsv1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidationParamsV1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParamsv1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidationParamsV1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidationParamsV1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FalsePositiveRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.FalsePositiveRate = float64(math.Float64frombits(v))
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinRampUpMeasurements", wireType)
			}
			m.MinRampUpMeasurements = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParamsv1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinRampUpMeasurements |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassValue", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.PassValue = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinValidationAverage", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MinValidationAverage = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxValidationAverage", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MaxValidationAverage = float64(math.Float64frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationBlocks", wireType)
			}
			m.ExpirationBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParamsv1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationBlocks |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochsToMax", wireType)
			}
			m.EpochsToMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParamsv1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochsToMax |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullValidationTrafficCutoff", wireType)
			}
			m.FullValidationTrafficCutoff = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParamsv1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FullValidationTrafficCutoff |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinValidationHalfway", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MinValidationHalfway = float64(math.Float64frombits(v))
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinValidationTrafficCutoff", wireType)
			}
			m.MinValidationTrafficCutoff = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParamsv1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinValidationTrafficCutoff |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissPercentageCutoff", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MissPercentageCutoff = float64(math.Float64frombits(v))
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissRequestsPenalty", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MissRequestsPenalty = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipParamsv1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParamsv1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PocParamsV1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParamsv1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PocParamsV1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PocParamsV1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultDifficulty", wireType)
			}
			m.DefaultDifficulty = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParamsv1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefaultDifficulty |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParamsv1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParamsv1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParamsv1(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParamsv1
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParamsv1
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParamsv1
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParamsv1
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParamsv1
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParamsv1
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParamsv1        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParamsv1          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParamsv1 = fmt.Errorf("proto: unexpected end of group")
)

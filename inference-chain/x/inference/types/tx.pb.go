// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: inference/inference/tx.proto

package types

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgUpdateParams is the Msg/UpdateParams request type.
type MsgUpdateParams struct {
	// authority is the address that controls the module (defaults to x/gov unless overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{0}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{1}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

type MsgStartInference struct {
	Creator           string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	InferenceId       string `protobuf:"bytes,2,opt,name=inference_id,json=inferenceId,proto3" json:"inference_id,omitempty"`
	PromptHash        string `protobuf:"bytes,3,opt,name=prompt_hash,json=promptHash,proto3" json:"prompt_hash,omitempty"`
	PromptPayload     string `protobuf:"bytes,4,opt,name=prompt_payload,json=promptPayload,proto3" json:"prompt_payload,omitempty"`
	Model             string `protobuf:"bytes,6,opt,name=model,proto3" json:"model,omitempty"`
	RequestedBy       string `protobuf:"bytes,7,opt,name=requested_by,json=requestedBy,proto3" json:"requested_by,omitempty"`
	AssignedTo        string `protobuf:"bytes,8,opt,name=assigned_to,json=assignedTo,proto3" json:"assigned_to,omitempty"`
	NodeVersion       string `protobuf:"bytes,9,opt,name=node_version,json=nodeVersion,proto3" json:"node_version,omitempty"`
	MaxTokens         uint64 `protobuf:"varint,10,opt,name=max_tokens,json=maxTokens,proto3" json:"max_tokens,omitempty"`
	PromptTokenCount  uint64 `protobuf:"varint,11,opt,name=prompt_token_count,json=promptTokenCount,proto3" json:"prompt_token_count,omitempty"`
	RequestTimestamp  int64  `protobuf:"varint,12,opt,name=request_timestamp,json=requestTimestamp,proto3" json:"request_timestamp,omitempty"`
	TransferSignature string `protobuf:"bytes,14,opt,name=transfer_signature,json=transferSignature,proto3" json:"transfer_signature,omitempty"`
	OriginalPrompt    string `protobuf:"bytes,15,opt,name=original_prompt,json=originalPrompt,proto3" json:"original_prompt,omitempty"`
}

func (m *MsgStartInference) Reset()         { *m = MsgStartInference{} }
func (m *MsgStartInference) String() string { return proto.CompactTextString(m) }
func (*MsgStartInference) ProtoMessage()    {}
func (*MsgStartInference) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{2}
}
func (m *MsgStartInference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStartInference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStartInference.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStartInference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStartInference.Merge(m, src)
}
func (m *MsgStartInference) XXX_Size() int {
	return m.Size()
}
func (m *MsgStartInference) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStartInference.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStartInference proto.InternalMessageInfo

func (m *MsgStartInference) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgStartInference) GetInferenceId() string {
	if m != nil {
		return m.InferenceId
	}
	return ""
}

func (m *MsgStartInference) GetPromptHash() string {
	if m != nil {
		return m.PromptHash
	}
	return ""
}

func (m *MsgStartInference) GetPromptPayload() string {
	if m != nil {
		return m.PromptPayload
	}
	return ""
}

func (m *MsgStartInference) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *MsgStartInference) GetRequestedBy() string {
	if m != nil {
		return m.RequestedBy
	}
	return ""
}

func (m *MsgStartInference) GetAssignedTo() string {
	if m != nil {
		return m.AssignedTo
	}
	return ""
}

func (m *MsgStartInference) GetNodeVersion() string {
	if m != nil {
		return m.NodeVersion
	}
	return ""
}

func (m *MsgStartInference) GetMaxTokens() uint64 {
	if m != nil {
		return m.MaxTokens
	}
	return 0
}

func (m *MsgStartInference) GetPromptTokenCount() uint64 {
	if m != nil {
		return m.PromptTokenCount
	}
	return 0
}

func (m *MsgStartInference) GetRequestTimestamp() int64 {
	if m != nil {
		return m.RequestTimestamp
	}
	return 0
}

func (m *MsgStartInference) GetTransferSignature() string {
	if m != nil {
		return m.TransferSignature
	}
	return ""
}

func (m *MsgStartInference) GetOriginalPrompt() string {
	if m != nil {
		return m.OriginalPrompt
	}
	return ""
}

type MsgStartInferenceResponse struct {
	InferenceIndex string `protobuf:"bytes,1,opt,name=inference_index,json=inferenceIndex,proto3" json:"inference_index,omitempty"`
}

func (m *MsgStartInferenceResponse) Reset()         { *m = MsgStartInferenceResponse{} }
func (m *MsgStartInferenceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgStartInferenceResponse) ProtoMessage()    {}
func (*MsgStartInferenceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{3}
}
func (m *MsgStartInferenceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStartInferenceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStartInferenceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStartInferenceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStartInferenceResponse.Merge(m, src)
}
func (m *MsgStartInferenceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgStartInferenceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStartInferenceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStartInferenceResponse proto.InternalMessageInfo

func (m *MsgStartInferenceResponse) GetInferenceIndex() string {
	if m != nil {
		return m.InferenceIndex
	}
	return ""
}

type MsgFinishInference struct {
	Creator              string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	InferenceId          string `protobuf:"bytes,2,opt,name=inference_id,json=inferenceId,proto3" json:"inference_id,omitempty"`
	ResponseHash         string `protobuf:"bytes,3,opt,name=response_hash,json=responseHash,proto3" json:"response_hash,omitempty"`
	ResponsePayload      string `protobuf:"bytes,4,opt,name=response_payload,json=responsePayload,proto3" json:"response_payload,omitempty"`
	PromptTokenCount     uint64 `protobuf:"varint,5,opt,name=prompt_token_count,json=promptTokenCount,proto3" json:"prompt_token_count,omitempty"`
	CompletionTokenCount uint64 `protobuf:"varint,6,opt,name=completion_token_count,json=completionTokenCount,proto3" json:"completion_token_count,omitempty"`
	ExecutedBy           string `protobuf:"bytes,7,opt,name=executed_by,json=executedBy,proto3" json:"executed_by,omitempty"`
	TransferredBy        string `protobuf:"bytes,8,opt,name=transferred_by,json=transferredBy,proto3" json:"transferred_by,omitempty"`
	RequestTimestamp     int64  `protobuf:"varint,9,opt,name=request_timestamp,json=requestTimestamp,proto3" json:"request_timestamp,omitempty"`
	TransferSignature    string `protobuf:"bytes,10,opt,name=transfer_signature,json=transferSignature,proto3" json:"transfer_signature,omitempty"`
	ExecutorSignature    string `protobuf:"bytes,11,opt,name=executor_signature,json=executorSignature,proto3" json:"executor_signature,omitempty"`
	RequestedBy          string `protobuf:"bytes,12,opt,name=requested_by,json=requestedBy,proto3" json:"requested_by,omitempty"`
	OriginalPrompt       string `protobuf:"bytes,13,opt,name=original_prompt,json=originalPrompt,proto3" json:"original_prompt,omitempty"`
	Model                string `protobuf:"bytes,14,opt,name=model,proto3" json:"model,omitempty"`
}

func (m *MsgFinishInference) Reset()         { *m = MsgFinishInference{} }
func (m *MsgFinishInference) String() string { return proto.CompactTextString(m) }
func (*MsgFinishInference) ProtoMessage()    {}
func (*MsgFinishInference) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{4}
}
func (m *MsgFinishInference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFinishInference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFinishInference.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFinishInference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFinishInference.Merge(m, src)
}
func (m *MsgFinishInference) XXX_Size() int {
	return m.Size()
}
func (m *MsgFinishInference) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFinishInference.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFinishInference proto.InternalMessageInfo

func (m *MsgFinishInference) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgFinishInference) GetInferenceId() string {
	if m != nil {
		return m.InferenceId
	}
	return ""
}

func (m *MsgFinishInference) GetResponseHash() string {
	if m != nil {
		return m.ResponseHash
	}
	return ""
}

func (m *MsgFinishInference) GetResponsePayload() string {
	if m != nil {
		return m.ResponsePayload
	}
	return ""
}

func (m *MsgFinishInference) GetPromptTokenCount() uint64 {
	if m != nil {
		return m.PromptTokenCount
	}
	return 0
}

func (m *MsgFinishInference) GetCompletionTokenCount() uint64 {
	if m != nil {
		return m.CompletionTokenCount
	}
	return 0
}

func (m *MsgFinishInference) GetExecutedBy() string {
	if m != nil {
		return m.ExecutedBy
	}
	return ""
}

func (m *MsgFinishInference) GetTransferredBy() string {
	if m != nil {
		return m.TransferredBy
	}
	return ""
}

func (m *MsgFinishInference) GetRequestTimestamp() int64 {
	if m != nil {
		return m.RequestTimestamp
	}
	return 0
}

func (m *MsgFinishInference) GetTransferSignature() string {
	if m != nil {
		return m.TransferSignature
	}
	return ""
}

func (m *MsgFinishInference) GetExecutorSignature() string {
	if m != nil {
		return m.ExecutorSignature
	}
	return ""
}

func (m *MsgFinishInference) GetRequestedBy() string {
	if m != nil {
		return m.RequestedBy
	}
	return ""
}

func (m *MsgFinishInference) GetOriginalPrompt() string {
	if m != nil {
		return m.OriginalPrompt
	}
	return ""
}

func (m *MsgFinishInference) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

type MsgFinishInferenceResponse struct {
	InferenceIndex string `protobuf:"bytes,1,opt,name=inference_index,json=inferenceIndex,proto3" json:"inference_index,omitempty"`
}

func (m *MsgFinishInferenceResponse) Reset()         { *m = MsgFinishInferenceResponse{} }
func (m *MsgFinishInferenceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgFinishInferenceResponse) ProtoMessage()    {}
func (*MsgFinishInferenceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{5}
}
func (m *MsgFinishInferenceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFinishInferenceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFinishInferenceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFinishInferenceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFinishInferenceResponse.Merge(m, src)
}
func (m *MsgFinishInferenceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgFinishInferenceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFinishInferenceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFinishInferenceResponse proto.InternalMessageInfo

func (m *MsgFinishInferenceResponse) GetInferenceIndex() string {
	if m != nil {
		return m.InferenceIndex
	}
	return ""
}

type MsgSubmitNewParticipant struct {
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Url          string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	ValidatorKey string `protobuf:"bytes,3,opt,name=validator_key,json=validatorKey,proto3" json:"validator_key,omitempty"`
	WorkerKey    string `protobuf:"bytes,4,opt,name=worker_key,json=workerKey,proto3" json:"worker_key,omitempty"`
}

func (m *MsgSubmitNewParticipant) Reset()         { *m = MsgSubmitNewParticipant{} }
func (m *MsgSubmitNewParticipant) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitNewParticipant) ProtoMessage()    {}
func (*MsgSubmitNewParticipant) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{6}
}
func (m *MsgSubmitNewParticipant) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitNewParticipant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitNewParticipant.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitNewParticipant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitNewParticipant.Merge(m, src)
}
func (m *MsgSubmitNewParticipant) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitNewParticipant) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitNewParticipant.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitNewParticipant proto.InternalMessageInfo

func (m *MsgSubmitNewParticipant) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSubmitNewParticipant) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *MsgSubmitNewParticipant) GetValidatorKey() string {
	if m != nil {
		return m.ValidatorKey
	}
	return ""
}

func (m *MsgSubmitNewParticipant) GetWorkerKey() string {
	if m != nil {
		return m.WorkerKey
	}
	return ""
}

type MsgSubmitNewParticipantResponse struct {
	ParticipantIndex string `protobuf:"bytes,1,opt,name=participant_index,json=participantIndex,proto3" json:"participant_index,omitempty"`
	Status           string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *MsgSubmitNewParticipantResponse) Reset()         { *m = MsgSubmitNewParticipantResponse{} }
func (m *MsgSubmitNewParticipantResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitNewParticipantResponse) ProtoMessage()    {}
func (*MsgSubmitNewParticipantResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{7}
}
func (m *MsgSubmitNewParticipantResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitNewParticipantResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitNewParticipantResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitNewParticipantResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitNewParticipantResponse.Merge(m, src)
}
func (m *MsgSubmitNewParticipantResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitNewParticipantResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitNewParticipantResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitNewParticipantResponse proto.InternalMessageInfo

func (m *MsgSubmitNewParticipantResponse) GetParticipantIndex() string {
	if m != nil {
		return m.ParticipantIndex
	}
	return ""
}

func (m *MsgSubmitNewParticipantResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type MsgValidation struct {
	Creator         string  `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id              string  `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	InferenceId     string  `protobuf:"bytes,3,opt,name=inference_id,json=inferenceId,proto3" json:"inference_id,omitempty"`
	ResponsePayload string  `protobuf:"bytes,4,opt,name=response_payload,json=responsePayload,proto3" json:"response_payload,omitempty"`
	ResponseHash    string  `protobuf:"bytes,5,opt,name=response_hash,json=responseHash,proto3" json:"response_hash,omitempty"`
	Value           float64 `protobuf:"fixed64,6,opt,name=value,proto3" json:"value,omitempty"`
	Revalidation    bool    `protobuf:"varint,7,opt,name=revalidation,proto3" json:"revalidation,omitempty"`
}

func (m *MsgValidation) Reset()         { *m = MsgValidation{} }
func (m *MsgValidation) String() string { return proto.CompactTextString(m) }
func (*MsgValidation) ProtoMessage()    {}
func (*MsgValidation) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{8}
}
func (m *MsgValidation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgValidation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgValidation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgValidation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgValidation.Merge(m, src)
}
func (m *MsgValidation) XXX_Size() int {
	return m.Size()
}
func (m *MsgValidation) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgValidation.DiscardUnknown(m)
}

var xxx_messageInfo_MsgValidation proto.InternalMessageInfo

func (m *MsgValidation) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgValidation) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MsgValidation) GetInferenceId() string {
	if m != nil {
		return m.InferenceId
	}
	return ""
}

func (m *MsgValidation) GetResponsePayload() string {
	if m != nil {
		return m.ResponsePayload
	}
	return ""
}

func (m *MsgValidation) GetResponseHash() string {
	if m != nil {
		return m.ResponseHash
	}
	return ""
}

func (m *MsgValidation) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *MsgValidation) GetRevalidation() bool {
	if m != nil {
		return m.Revalidation
	}
	return false
}

type MsgValidationResponse struct {
}

func (m *MsgValidationResponse) Reset()         { *m = MsgValidationResponse{} }
func (m *MsgValidationResponse) String() string { return proto.CompactTextString(m) }
func (*MsgValidationResponse) ProtoMessage()    {}
func (*MsgValidationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{9}
}
func (m *MsgValidationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgValidationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgValidationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgValidationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgValidationResponse.Merge(m, src)
}
func (m *MsgValidationResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgValidationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgValidationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgValidationResponse proto.InternalMessageInfo

type MsgSubmitNewUnfundedParticipant struct {
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Address      string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Url          string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	PubKey       string `protobuf:"bytes,4,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	ValidatorKey string `protobuf:"bytes,5,opt,name=validator_key,json=validatorKey,proto3" json:"validator_key,omitempty"`
	WorkerKey    string `protobuf:"bytes,6,opt,name=worker_key,json=workerKey,proto3" json:"worker_key,omitempty"`
}

func (m *MsgSubmitNewUnfundedParticipant) Reset()         { *m = MsgSubmitNewUnfundedParticipant{} }
func (m *MsgSubmitNewUnfundedParticipant) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitNewUnfundedParticipant) ProtoMessage()    {}
func (*MsgSubmitNewUnfundedParticipant) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{10}
}
func (m *MsgSubmitNewUnfundedParticipant) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitNewUnfundedParticipant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitNewUnfundedParticipant.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitNewUnfundedParticipant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitNewUnfundedParticipant.Merge(m, src)
}
func (m *MsgSubmitNewUnfundedParticipant) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitNewUnfundedParticipant) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitNewUnfundedParticipant.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitNewUnfundedParticipant proto.InternalMessageInfo

func (m *MsgSubmitNewUnfundedParticipant) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSubmitNewUnfundedParticipant) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *MsgSubmitNewUnfundedParticipant) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *MsgSubmitNewUnfundedParticipant) GetPubKey() string {
	if m != nil {
		return m.PubKey
	}
	return ""
}

func (m *MsgSubmitNewUnfundedParticipant) GetValidatorKey() string {
	if m != nil {
		return m.ValidatorKey
	}
	return ""
}

func (m *MsgSubmitNewUnfundedParticipant) GetWorkerKey() string {
	if m != nil {
		return m.WorkerKey
	}
	return ""
}

type MsgSubmitNewUnfundedParticipantResponse struct {
}

func (m *MsgSubmitNewUnfundedParticipantResponse) Reset() {
	*m = MsgSubmitNewUnfundedParticipantResponse{}
}
func (m *MsgSubmitNewUnfundedParticipantResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitNewUnfundedParticipantResponse) ProtoMessage()    {}
func (*MsgSubmitNewUnfundedParticipantResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{11}
}
func (m *MsgSubmitNewUnfundedParticipantResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitNewUnfundedParticipantResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitNewUnfundedParticipantResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitNewUnfundedParticipantResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitNewUnfundedParticipantResponse.Merge(m, src)
}
func (m *MsgSubmitNewUnfundedParticipantResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitNewUnfundedParticipantResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitNewUnfundedParticipantResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitNewUnfundedParticipantResponse proto.InternalMessageInfo

type MsgInvalidateInference struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	InferenceId string `protobuf:"bytes,2,opt,name=inference_id,json=inferenceId,proto3" json:"inference_id,omitempty"`
}

func (m *MsgInvalidateInference) Reset()         { *m = MsgInvalidateInference{} }
func (m *MsgInvalidateInference) String() string { return proto.CompactTextString(m) }
func (*MsgInvalidateInference) ProtoMessage()    {}
func (*MsgInvalidateInference) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{12}
}
func (m *MsgInvalidateInference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInvalidateInference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInvalidateInference.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInvalidateInference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInvalidateInference.Merge(m, src)
}
func (m *MsgInvalidateInference) XXX_Size() int {
	return m.Size()
}
func (m *MsgInvalidateInference) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInvalidateInference.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInvalidateInference proto.InternalMessageInfo

func (m *MsgInvalidateInference) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgInvalidateInference) GetInferenceId() string {
	if m != nil {
		return m.InferenceId
	}
	return ""
}

type MsgInvalidateInferenceResponse struct {
}

func (m *MsgInvalidateInferenceResponse) Reset()         { *m = MsgInvalidateInferenceResponse{} }
func (m *MsgInvalidateInferenceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgInvalidateInferenceResponse) ProtoMessage()    {}
func (*MsgInvalidateInferenceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{13}
}
func (m *MsgInvalidateInferenceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInvalidateInferenceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInvalidateInferenceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInvalidateInferenceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInvalidateInferenceResponse.Merge(m, src)
}
func (m *MsgInvalidateInferenceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgInvalidateInferenceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInvalidateInferenceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInvalidateInferenceResponse proto.InternalMessageInfo

type MsgRevalidateInference struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	InferenceId string `protobuf:"bytes,2,opt,name=inference_id,json=inferenceId,proto3" json:"inference_id,omitempty"`
}

func (m *MsgRevalidateInference) Reset()         { *m = MsgRevalidateInference{} }
func (m *MsgRevalidateInference) String() string { return proto.CompactTextString(m) }
func (*MsgRevalidateInference) ProtoMessage()    {}
func (*MsgRevalidateInference) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{14}
}
func (m *MsgRevalidateInference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRevalidateInference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRevalidateInference.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRevalidateInference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRevalidateInference.Merge(m, src)
}
func (m *MsgRevalidateInference) XXX_Size() int {
	return m.Size()
}
func (m *MsgRevalidateInference) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRevalidateInference.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRevalidateInference proto.InternalMessageInfo

func (m *MsgRevalidateInference) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRevalidateInference) GetInferenceId() string {
	if m != nil {
		return m.InferenceId
	}
	return ""
}

type MsgRevalidateInferenceResponse struct {
}

func (m *MsgRevalidateInferenceResponse) Reset()         { *m = MsgRevalidateInferenceResponse{} }
func (m *MsgRevalidateInferenceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRevalidateInferenceResponse) ProtoMessage()    {}
func (*MsgRevalidateInferenceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{15}
}
func (m *MsgRevalidateInferenceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRevalidateInferenceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRevalidateInferenceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRevalidateInferenceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRevalidateInferenceResponse.Merge(m, src)
}
func (m *MsgRevalidateInferenceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRevalidateInferenceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRevalidateInferenceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRevalidateInferenceResponse proto.InternalMessageInfo

type MsgClaimRewards struct {
	Creator        string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Seed           int64  `protobuf:"varint,2,opt,name=seed,proto3" json:"seed,omitempty"`
	PocStartHeight uint64 `protobuf:"varint,3,opt,name=poc_start_height,json=pocStartHeight,proto3" json:"poc_start_height,omitempty"`
}

func (m *MsgClaimRewards) Reset()         { *m = MsgClaimRewards{} }
func (m *MsgClaimRewards) String() string { return proto.CompactTextString(m) }
func (*MsgClaimRewards) ProtoMessage()    {}
func (*MsgClaimRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{16}
}
func (m *MsgClaimRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimRewards.Merge(m, src)
}
func (m *MsgClaimRewards) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimRewards.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimRewards proto.InternalMessageInfo

func (m *MsgClaimRewards) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgClaimRewards) GetSeed() int64 {
	if m != nil {
		return m.Seed
	}
	return 0
}

func (m *MsgClaimRewards) GetPocStartHeight() uint64 {
	if m != nil {
		return m.PocStartHeight
	}
	return 0
}

type MsgClaimRewardsResponse struct {
	Amount uint64 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Result string `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *MsgClaimRewardsResponse) Reset()         { *m = MsgClaimRewardsResponse{} }
func (m *MsgClaimRewardsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClaimRewardsResponse) ProtoMessage()    {}
func (*MsgClaimRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{17}
}
func (m *MsgClaimRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimRewardsResponse.Merge(m, src)
}
func (m *MsgClaimRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimRewardsResponse proto.InternalMessageInfo

func (m *MsgClaimRewardsResponse) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *MsgClaimRewardsResponse) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

type MsgSubmitPocBatch struct {
	Creator                  string    `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	PocStageStartBlockHeight int64     `protobuf:"varint,2,opt,name=poc_stage_start_block_height,json=pocStageStartBlockHeight,proto3" json:"poc_stage_start_block_height,omitempty"`
	BatchId                  string    `protobuf:"bytes,3,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	Nonces                   []int64   `protobuf:"varint,4,rep,packed,name=nonces,proto3" json:"nonces,omitempty"`
	Dist                     []float64 `protobuf:"fixed64,5,rep,packed,name=dist,proto3" json:"dist,omitempty"`
	NodeId                   string    `protobuf:"bytes,6,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (m *MsgSubmitPocBatch) Reset()         { *m = MsgSubmitPocBatch{} }
func (m *MsgSubmitPocBatch) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitPocBatch) ProtoMessage()    {}
func (*MsgSubmitPocBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{18}
}
func (m *MsgSubmitPocBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitPocBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitPocBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitPocBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitPocBatch.Merge(m, src)
}
func (m *MsgSubmitPocBatch) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitPocBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitPocBatch.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitPocBatch proto.InternalMessageInfo

func (m *MsgSubmitPocBatch) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSubmitPocBatch) GetPocStageStartBlockHeight() int64 {
	if m != nil {
		return m.PocStageStartBlockHeight
	}
	return 0
}

func (m *MsgSubmitPocBatch) GetBatchId() string {
	if m != nil {
		return m.BatchId
	}
	return ""
}

func (m *MsgSubmitPocBatch) GetNonces() []int64 {
	if m != nil {
		return m.Nonces
	}
	return nil
}

func (m *MsgSubmitPocBatch) GetDist() []float64 {
	if m != nil {
		return m.Dist
	}
	return nil
}

func (m *MsgSubmitPocBatch) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

type MsgSubmitPocBatchResponse struct {
}

func (m *MsgSubmitPocBatchResponse) Reset()         { *m = MsgSubmitPocBatchResponse{} }
func (m *MsgSubmitPocBatchResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitPocBatchResponse) ProtoMessage()    {}
func (*MsgSubmitPocBatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{19}
}
func (m *MsgSubmitPocBatchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitPocBatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitPocBatchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitPocBatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitPocBatchResponse.Merge(m, src)
}
func (m *MsgSubmitPocBatchResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitPocBatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitPocBatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitPocBatchResponse proto.InternalMessageInfo

type MsgSubmitPocValidation struct {
	Creator                  string    `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ParticipantAddress       string    `protobuf:"bytes,2,opt,name=participant_address,json=participantAddress,proto3" json:"participant_address,omitempty"`
	PocStageStartBlockHeight int64     `protobuf:"varint,3,opt,name=poc_stage_start_block_height,json=pocStageStartBlockHeight,proto3" json:"poc_stage_start_block_height,omitempty"`
	Nonces                   []int64   `protobuf:"varint,4,rep,packed,name=nonces,proto3" json:"nonces,omitempty"`
	Dist                     []float64 `protobuf:"fixed64,5,rep,packed,name=dist,proto3" json:"dist,omitempty"`
	ReceivedDist             []float64 `protobuf:"fixed64,6,rep,packed,name=received_dist,json=receivedDist,proto3" json:"received_dist,omitempty"`
	RTarget                  float64   `protobuf:"fixed64,7,opt,name=r_target,json=rTarget,proto3" json:"r_target,omitempty"`
	FraudThreshold           float64   `protobuf:"fixed64,8,opt,name=fraud_threshold,json=fraudThreshold,proto3" json:"fraud_threshold,omitempty"`
	NInvalid                 int64     `protobuf:"varint,9,opt,name=n_invalid,json=nInvalid,proto3" json:"n_invalid,omitempty"`
	ProbabilityHonest        float64   `protobuf:"fixed64,10,opt,name=probability_honest,json=probabilityHonest,proto3" json:"probability_honest,omitempty"`
	FraudDetected            bool      `protobuf:"varint,11,opt,name=fraud_detected,json=fraudDetected,proto3" json:"fraud_detected,omitempty"`
}

func (m *MsgSubmitPocValidation) Reset()         { *m = MsgSubmitPocValidation{} }
func (m *MsgSubmitPocValidation) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitPocValidation) ProtoMessage()    {}
func (*MsgSubmitPocValidation) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{20}
}
func (m *MsgSubmitPocValidation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitPocValidation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitPocValidation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitPocValidation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitPocValidation.Merge(m, src)
}
func (m *MsgSubmitPocValidation) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitPocValidation) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitPocValidation.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitPocValidation proto.InternalMessageInfo

func (m *MsgSubmitPocValidation) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSubmitPocValidation) GetParticipantAddress() string {
	if m != nil {
		return m.ParticipantAddress
	}
	return ""
}

func (m *MsgSubmitPocValidation) GetPocStageStartBlockHeight() int64 {
	if m != nil {
		return m.PocStageStartBlockHeight
	}
	return 0
}

func (m *MsgSubmitPocValidation) GetNonces() []int64 {
	if m != nil {
		return m.Nonces
	}
	return nil
}

func (m *MsgSubmitPocValidation) GetDist() []float64 {
	if m != nil {
		return m.Dist
	}
	return nil
}

func (m *MsgSubmitPocValidation) GetReceivedDist() []float64 {
	if m != nil {
		return m.ReceivedDist
	}
	return nil
}

func (m *MsgSubmitPocValidation) GetRTarget() float64 {
	if m != nil {
		return m.RTarget
	}
	return 0
}

func (m *MsgSubmitPocValidation) GetFraudThreshold() float64 {
	if m != nil {
		return m.FraudThreshold
	}
	return 0
}

func (m *MsgSubmitPocValidation) GetNInvalid() int64 {
	if m != nil {
		return m.NInvalid
	}
	return 0
}

func (m *MsgSubmitPocValidation) GetProbabilityHonest() float64 {
	if m != nil {
		return m.ProbabilityHonest
	}
	return 0
}

func (m *MsgSubmitPocValidation) GetFraudDetected() bool {
	if m != nil {
		return m.FraudDetected
	}
	return false
}

type MsgSubmitPocValidationResponse struct {
}

func (m *MsgSubmitPocValidationResponse) Reset()         { *m = MsgSubmitPocValidationResponse{} }
func (m *MsgSubmitPocValidationResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitPocValidationResponse) ProtoMessage()    {}
func (*MsgSubmitPocValidationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{21}
}
func (m *MsgSubmitPocValidationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitPocValidationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitPocValidationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitPocValidationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitPocValidationResponse.Merge(m, src)
}
func (m *MsgSubmitPocValidationResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitPocValidationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitPocValidationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitPocValidationResponse proto.InternalMessageInfo

type MsgSubmitSeed struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	BlockHeight int64  `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	Signature   string `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *MsgSubmitSeed) Reset()         { *m = MsgSubmitSeed{} }
func (m *MsgSubmitSeed) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitSeed) ProtoMessage()    {}
func (*MsgSubmitSeed) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{22}
}
func (m *MsgSubmitSeed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitSeed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitSeed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitSeed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitSeed.Merge(m, src)
}
func (m *MsgSubmitSeed) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitSeed) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitSeed.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitSeed proto.InternalMessageInfo

func (m *MsgSubmitSeed) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSubmitSeed) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *MsgSubmitSeed) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

type MsgSubmitSeedResponse struct {
}

func (m *MsgSubmitSeedResponse) Reset()         { *m = MsgSubmitSeedResponse{} }
func (m *MsgSubmitSeedResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitSeedResponse) ProtoMessage()    {}
func (*MsgSubmitSeedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{23}
}
func (m *MsgSubmitSeedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitSeedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitSeedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitSeedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitSeedResponse.Merge(m, src)
}
func (m *MsgSubmitSeedResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitSeedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitSeedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitSeedResponse proto.InternalMessageInfo

type MsgSubmitUnitOfComputePriceProposal struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Price   uint64 `protobuf:"varint,2,opt,name=price,proto3" json:"price,omitempty"`
}

func (m *MsgSubmitUnitOfComputePriceProposal) Reset()         { *m = MsgSubmitUnitOfComputePriceProposal{} }
func (m *MsgSubmitUnitOfComputePriceProposal) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitUnitOfComputePriceProposal) ProtoMessage()    {}
func (*MsgSubmitUnitOfComputePriceProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{24}
}
func (m *MsgSubmitUnitOfComputePriceProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitUnitOfComputePriceProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitUnitOfComputePriceProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitUnitOfComputePriceProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitUnitOfComputePriceProposal.Merge(m, src)
}
func (m *MsgSubmitUnitOfComputePriceProposal) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitUnitOfComputePriceProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitUnitOfComputePriceProposal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitUnitOfComputePriceProposal proto.InternalMessageInfo

func (m *MsgSubmitUnitOfComputePriceProposal) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSubmitUnitOfComputePriceProposal) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

type MsgSubmitUnitOfComputePriceProposalResponse struct {
}

func (m *MsgSubmitUnitOfComputePriceProposalResponse) Reset() {
	*m = MsgSubmitUnitOfComputePriceProposalResponse{}
}
func (m *MsgSubmitUnitOfComputePriceProposalResponse) String() string {
	return proto.CompactTextString(m)
}
func (*MsgSubmitUnitOfComputePriceProposalResponse) ProtoMessage() {}
func (*MsgSubmitUnitOfComputePriceProposalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{25}
}
func (m *MsgSubmitUnitOfComputePriceProposalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitUnitOfComputePriceProposalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitUnitOfComputePriceProposalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitUnitOfComputePriceProposalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitUnitOfComputePriceProposalResponse.Merge(m, src)
}
func (m *MsgSubmitUnitOfComputePriceProposalResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitUnitOfComputePriceProposalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitUnitOfComputePriceProposalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitUnitOfComputePriceProposalResponse proto.InternalMessageInfo

type MsgRegisterModel struct {
	Authority              string   `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	ProposedBy             string   `protobuf:"bytes,2,opt,name=proposed_by,json=proposedBy,proto3" json:"proposed_by,omitempty"`
	Id                     string   `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	UnitsOfComputePerToken uint64   `protobuf:"varint,4,opt,name=units_of_compute_per_token,json=unitsOfComputePerToken,proto3" json:"units_of_compute_per_token,omitempty"`
	HfRepo                 string   `protobuf:"bytes,5,opt,name=hf_repo,json=hfRepo,proto3" json:"hf_repo,omitempty"`
	HfCommit               string   `protobuf:"bytes,6,opt,name=hf_commit,json=hfCommit,proto3" json:"hf_commit,omitempty"`
	ModelArgs              []string `protobuf:"bytes,7,rep,name=model_args,json=modelArgs,proto3" json:"model_args,omitempty"`
	VRam                   uint64   `protobuf:"varint,8,opt,name=v_ram,json=vRam,proto3" json:"v_ram,omitempty"`
	ThroughputPerNonce     uint64   `protobuf:"varint,9,opt,name=throughput_per_nonce,json=throughputPerNonce,proto3" json:"throughput_per_nonce,omitempty"`
	ValidationThreshold    *Decimal `protobuf:"bytes,10,opt,name=validation_threshold,json=validationThreshold,proto3" json:"validation_threshold,omitempty"`
}

func (m *MsgRegisterModel) Reset()         { *m = MsgRegisterModel{} }
func (m *MsgRegisterModel) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterModel) ProtoMessage()    {}
func (*MsgRegisterModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{26}
}
func (m *MsgRegisterModel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterModel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterModel.Merge(m, src)
}
func (m *MsgRegisterModel) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterModel) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterModel.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterModel proto.InternalMessageInfo

func (m *MsgRegisterModel) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgRegisterModel) GetProposedBy() string {
	if m != nil {
		return m.ProposedBy
	}
	return ""
}

func (m *MsgRegisterModel) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MsgRegisterModel) GetUnitsOfComputePerToken() uint64 {
	if m != nil {
		return m.UnitsOfComputePerToken
	}
	return 0
}

func (m *MsgRegisterModel) GetHfRepo() string {
	if m != nil {
		return m.HfRepo
	}
	return ""
}

func (m *MsgRegisterModel) GetHfCommit() string {
	if m != nil {
		return m.HfCommit
	}
	return ""
}

func (m *MsgRegisterModel) GetModelArgs() []string {
	if m != nil {
		return m.ModelArgs
	}
	return nil
}

func (m *MsgRegisterModel) GetVRam() uint64 {
	if m != nil {
		return m.VRam
	}
	return 0
}

func (m *MsgRegisterModel) GetThroughputPerNonce() uint64 {
	if m != nil {
		return m.ThroughputPerNonce
	}
	return 0
}

func (m *MsgRegisterModel) GetValidationThreshold() *Decimal {
	if m != nil {
		return m.ValidationThreshold
	}
	return nil
}

type MsgRegisterModelResponse struct {
}

func (m *MsgRegisterModelResponse) Reset()         { *m = MsgRegisterModelResponse{} }
func (m *MsgRegisterModelResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterModelResponse) ProtoMessage()    {}
func (*MsgRegisterModelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{27}
}
func (m *MsgRegisterModelResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterModelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterModelResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterModelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterModelResponse.Merge(m, src)
}
func (m *MsgRegisterModelResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterModelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterModelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterModelResponse proto.InternalMessageInfo

type MsgCreateTrainingTask struct {
	Creator           string                       `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	HardwareResources []*TrainingHardwareResources `protobuf:"bytes,2,rep,name=hardware_resources,json=hardwareResources,proto3" json:"hardware_resources,omitempty"`
	Config            *TrainingConfig              `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
}

func (m *MsgCreateTrainingTask) Reset()         { *m = MsgCreateTrainingTask{} }
func (m *MsgCreateTrainingTask) String() string { return proto.CompactTextString(m) }
func (*MsgCreateTrainingTask) ProtoMessage()    {}
func (*MsgCreateTrainingTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{28}
}
func (m *MsgCreateTrainingTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateTrainingTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateTrainingTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateTrainingTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateTrainingTask.Merge(m, src)
}
func (m *MsgCreateTrainingTask) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateTrainingTask) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateTrainingTask.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateTrainingTask proto.InternalMessageInfo

func (m *MsgCreateTrainingTask) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateTrainingTask) GetHardwareResources() []*TrainingHardwareResources {
	if m != nil {
		return m.HardwareResources
	}
	return nil
}

func (m *MsgCreateTrainingTask) GetConfig() *TrainingConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

type MsgCreateTrainingTaskResponse struct {
	Task *TrainingTask `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
}

func (m *MsgCreateTrainingTaskResponse) Reset()         { *m = MsgCreateTrainingTaskResponse{} }
func (m *MsgCreateTrainingTaskResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateTrainingTaskResponse) ProtoMessage()    {}
func (*MsgCreateTrainingTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{29}
}
func (m *MsgCreateTrainingTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateTrainingTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateTrainingTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateTrainingTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateTrainingTaskResponse.Merge(m, src)
}
func (m *MsgCreateTrainingTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateTrainingTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateTrainingTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateTrainingTaskResponse proto.InternalMessageInfo

func (m *MsgCreateTrainingTaskResponse) GetTask() *TrainingTask {
	if m != nil {
		return m.Task
	}
	return nil
}

type MsgSubmitHardwareDiff struct {
	Creator       string          `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	NewOrModified []*HardwareNode `protobuf:"bytes,2,rep,name=newOrModified,proto3" json:"newOrModified,omitempty"`
	Removed       []*HardwareNode `protobuf:"bytes,3,rep,name=removed,proto3" json:"removed,omitempty"`
}

func (m *MsgSubmitHardwareDiff) Reset()         { *m = MsgSubmitHardwareDiff{} }
func (m *MsgSubmitHardwareDiff) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitHardwareDiff) ProtoMessage()    {}
func (*MsgSubmitHardwareDiff) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{30}
}
func (m *MsgSubmitHardwareDiff) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitHardwareDiff) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitHardwareDiff.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitHardwareDiff) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitHardwareDiff.Merge(m, src)
}
func (m *MsgSubmitHardwareDiff) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitHardwareDiff) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitHardwareDiff.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitHardwareDiff proto.InternalMessageInfo

func (m *MsgSubmitHardwareDiff) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSubmitHardwareDiff) GetNewOrModified() []*HardwareNode {
	if m != nil {
		return m.NewOrModified
	}
	return nil
}

func (m *MsgSubmitHardwareDiff) GetRemoved() []*HardwareNode {
	if m != nil {
		return m.Removed
	}
	return nil
}

type MsgSubmitHardwareDiffResponse struct {
}

func (m *MsgSubmitHardwareDiffResponse) Reset()         { *m = MsgSubmitHardwareDiffResponse{} }
func (m *MsgSubmitHardwareDiffResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitHardwareDiffResponse) ProtoMessage()    {}
func (*MsgSubmitHardwareDiffResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{31}
}
func (m *MsgSubmitHardwareDiffResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitHardwareDiffResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitHardwareDiffResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitHardwareDiffResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitHardwareDiffResponse.Merge(m, src)
}
func (m *MsgSubmitHardwareDiffResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitHardwareDiffResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitHardwareDiffResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitHardwareDiffResponse proto.InternalMessageInfo

type MsgClaimTrainingTaskForAssignment struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	TaskId  uint64 `protobuf:"varint,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (m *MsgClaimTrainingTaskForAssignment) Reset()         { *m = MsgClaimTrainingTaskForAssignment{} }
func (m *MsgClaimTrainingTaskForAssignment) String() string { return proto.CompactTextString(m) }
func (*MsgClaimTrainingTaskForAssignment) ProtoMessage()    {}
func (*MsgClaimTrainingTaskForAssignment) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{32}
}
func (m *MsgClaimTrainingTaskForAssignment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimTrainingTaskForAssignment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimTrainingTaskForAssignment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimTrainingTaskForAssignment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimTrainingTaskForAssignment.Merge(m, src)
}
func (m *MsgClaimTrainingTaskForAssignment) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimTrainingTaskForAssignment) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimTrainingTaskForAssignment.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimTrainingTaskForAssignment proto.InternalMessageInfo

func (m *MsgClaimTrainingTaskForAssignment) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgClaimTrainingTaskForAssignment) GetTaskId() uint64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

type MsgClaimTrainingTaskForAssignmentResponse struct {
}

func (m *MsgClaimTrainingTaskForAssignmentResponse) Reset() {
	*m = MsgClaimTrainingTaskForAssignmentResponse{}
}
func (m *MsgClaimTrainingTaskForAssignmentResponse) String() string {
	return proto.CompactTextString(m)
}
func (*MsgClaimTrainingTaskForAssignmentResponse) ProtoMessage() {}
func (*MsgClaimTrainingTaskForAssignmentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{33}
}
func (m *MsgClaimTrainingTaskForAssignmentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimTrainingTaskForAssignmentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimTrainingTaskForAssignmentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimTrainingTaskForAssignmentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimTrainingTaskForAssignmentResponse.Merge(m, src)
}
func (m *MsgClaimTrainingTaskForAssignmentResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimTrainingTaskForAssignmentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimTrainingTaskForAssignmentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimTrainingTaskForAssignmentResponse proto.InternalMessageInfo

type MsgAssignTrainingTask struct {
	Creator   string                  `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	TaskId    uint64                  `protobuf:"varint,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Assignees []*TrainingTaskAssignee `protobuf:"bytes,3,rep,name=assignees,proto3" json:"assignees,omitempty"`
}

func (m *MsgAssignTrainingTask) Reset()         { *m = MsgAssignTrainingTask{} }
func (m *MsgAssignTrainingTask) String() string { return proto.CompactTextString(m) }
func (*MsgAssignTrainingTask) ProtoMessage()    {}
func (*MsgAssignTrainingTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{34}
}
func (m *MsgAssignTrainingTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAssignTrainingTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAssignTrainingTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAssignTrainingTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAssignTrainingTask.Merge(m, src)
}
func (m *MsgAssignTrainingTask) XXX_Size() int {
	return m.Size()
}
func (m *MsgAssignTrainingTask) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAssignTrainingTask.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAssignTrainingTask proto.InternalMessageInfo

func (m *MsgAssignTrainingTask) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAssignTrainingTask) GetTaskId() uint64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *MsgAssignTrainingTask) GetAssignees() []*TrainingTaskAssignee {
	if m != nil {
		return m.Assignees
	}
	return nil
}

type MsgAssignTrainingTaskResponse struct {
}

func (m *MsgAssignTrainingTaskResponse) Reset()         { *m = MsgAssignTrainingTaskResponse{} }
func (m *MsgAssignTrainingTaskResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAssignTrainingTaskResponse) ProtoMessage()    {}
func (*MsgAssignTrainingTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{35}
}
func (m *MsgAssignTrainingTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAssignTrainingTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAssignTrainingTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAssignTrainingTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAssignTrainingTaskResponse.Merge(m, src)
}
func (m *MsgAssignTrainingTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAssignTrainingTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAssignTrainingTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAssignTrainingTaskResponse proto.InternalMessageInfo

type MsgCreatePartialUpgrade struct {
	Authority       string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	Height          uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	NodeVersion     string `protobuf:"bytes,3,opt,name=nodeVersion,proto3" json:"nodeVersion,omitempty"`
	ApiBinariesJson string `protobuf:"bytes,4,opt,name=apiBinariesJson,proto3" json:"apiBinariesJson,omitempty"`
}

func (m *MsgCreatePartialUpgrade) Reset()         { *m = MsgCreatePartialUpgrade{} }
func (m *MsgCreatePartialUpgrade) String() string { return proto.CompactTextString(m) }
func (*MsgCreatePartialUpgrade) ProtoMessage()    {}
func (*MsgCreatePartialUpgrade) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{36}
}
func (m *MsgCreatePartialUpgrade) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreatePartialUpgrade) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreatePartialUpgrade.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreatePartialUpgrade) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreatePartialUpgrade.Merge(m, src)
}
func (m *MsgCreatePartialUpgrade) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreatePartialUpgrade) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreatePartialUpgrade.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreatePartialUpgrade proto.InternalMessageInfo

func (m *MsgCreatePartialUpgrade) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgCreatePartialUpgrade) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *MsgCreatePartialUpgrade) GetNodeVersion() string {
	if m != nil {
		return m.NodeVersion
	}
	return ""
}

func (m *MsgCreatePartialUpgrade) GetApiBinariesJson() string {
	if m != nil {
		return m.ApiBinariesJson
	}
	return ""
}

type MsgCreatePartialUpgradeResponse struct {
}

func (m *MsgCreatePartialUpgradeResponse) Reset()         { *m = MsgCreatePartialUpgradeResponse{} }
func (m *MsgCreatePartialUpgradeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreatePartialUpgradeResponse) ProtoMessage()    {}
func (*MsgCreatePartialUpgradeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{37}
}
func (m *MsgCreatePartialUpgradeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreatePartialUpgradeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreatePartialUpgradeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreatePartialUpgradeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreatePartialUpgradeResponse.Merge(m, src)
}
func (m *MsgCreatePartialUpgradeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreatePartialUpgradeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreatePartialUpgradeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreatePartialUpgradeResponse proto.InternalMessageInfo

type MsgSubmitTrainingKvRecord struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	TaskId      uint64 `protobuf:"varint,2,opt,name=taskId,proto3" json:"taskId,omitempty"`
	Participant string `protobuf:"bytes,3,opt,name=participant,proto3" json:"participant,omitempty"`
	Key         string `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	Value       string `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *MsgSubmitTrainingKvRecord) Reset()         { *m = MsgSubmitTrainingKvRecord{} }
func (m *MsgSubmitTrainingKvRecord) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitTrainingKvRecord) ProtoMessage()    {}
func (*MsgSubmitTrainingKvRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{38}
}
func (m *MsgSubmitTrainingKvRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitTrainingKvRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitTrainingKvRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitTrainingKvRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitTrainingKvRecord.Merge(m, src)
}
func (m *MsgSubmitTrainingKvRecord) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitTrainingKvRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitTrainingKvRecord.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitTrainingKvRecord proto.InternalMessageInfo

func (m *MsgSubmitTrainingKvRecord) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSubmitTrainingKvRecord) GetTaskId() uint64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *MsgSubmitTrainingKvRecord) GetParticipant() string {
	if m != nil {
		return m.Participant
	}
	return ""
}

func (m *MsgSubmitTrainingKvRecord) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *MsgSubmitTrainingKvRecord) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type MsgSubmitTrainingKvRecordResponse struct {
}

func (m *MsgSubmitTrainingKvRecordResponse) Reset()         { *m = MsgSubmitTrainingKvRecordResponse{} }
func (m *MsgSubmitTrainingKvRecordResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitTrainingKvRecordResponse) ProtoMessage()    {}
func (*MsgSubmitTrainingKvRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{39}
}
func (m *MsgSubmitTrainingKvRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitTrainingKvRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitTrainingKvRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitTrainingKvRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitTrainingKvRecordResponse.Merge(m, src)
}
func (m *MsgSubmitTrainingKvRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitTrainingKvRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitTrainingKvRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitTrainingKvRecordResponse proto.InternalMessageInfo

type MsgJoinTraining struct {
	Creator string               `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Req     *JoinTrainingRequest `protobuf:"bytes,2,opt,name=req,proto3" json:"req,omitempty"`
}

func (m *MsgJoinTraining) Reset()         { *m = MsgJoinTraining{} }
func (m *MsgJoinTraining) String() string { return proto.CompactTextString(m) }
func (*MsgJoinTraining) ProtoMessage()    {}
func (*MsgJoinTraining) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{40}
}
func (m *MsgJoinTraining) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgJoinTraining) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgJoinTraining.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgJoinTraining) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgJoinTraining.Merge(m, src)
}
func (m *MsgJoinTraining) XXX_Size() int {
	return m.Size()
}
func (m *MsgJoinTraining) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgJoinTraining.DiscardUnknown(m)
}

var xxx_messageInfo_MsgJoinTraining proto.InternalMessageInfo

func (m *MsgJoinTraining) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgJoinTraining) GetReq() *JoinTrainingRequest {
	if m != nil {
		return m.Req
	}
	return nil
}

type MsgJoinTrainingResponse struct {
	Status *MLNodeTrainStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *MsgJoinTrainingResponse) Reset()         { *m = MsgJoinTrainingResponse{} }
func (m *MsgJoinTrainingResponse) String() string { return proto.CompactTextString(m) }
func (*MsgJoinTrainingResponse) ProtoMessage()    {}
func (*MsgJoinTrainingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{41}
}
func (m *MsgJoinTrainingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgJoinTrainingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgJoinTrainingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgJoinTrainingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgJoinTrainingResponse.Merge(m, src)
}
func (m *MsgJoinTrainingResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgJoinTrainingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgJoinTrainingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgJoinTrainingResponse proto.InternalMessageInfo

func (m *MsgJoinTrainingResponse) GetStatus() *MLNodeTrainStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type MsgTrainingHeartbeat struct {
	Creator string            `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Req     *HeartbeatRequest `protobuf:"bytes,2,opt,name=req,proto3" json:"req,omitempty"`
}

func (m *MsgTrainingHeartbeat) Reset()         { *m = MsgTrainingHeartbeat{} }
func (m *MsgTrainingHeartbeat) String() string { return proto.CompactTextString(m) }
func (*MsgTrainingHeartbeat) ProtoMessage()    {}
func (*MsgTrainingHeartbeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{42}
}
func (m *MsgTrainingHeartbeat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTrainingHeartbeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTrainingHeartbeat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTrainingHeartbeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTrainingHeartbeat.Merge(m, src)
}
func (m *MsgTrainingHeartbeat) XXX_Size() int {
	return m.Size()
}
func (m *MsgTrainingHeartbeat) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTrainingHeartbeat.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTrainingHeartbeat proto.InternalMessageInfo

func (m *MsgTrainingHeartbeat) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgTrainingHeartbeat) GetReq() *HeartbeatRequest {
	if m != nil {
		return m.Req
	}
	return nil
}

type MsgTrainingHeartbeatResponse struct {
	Resp *HeartbeatResponse `protobuf:"bytes,1,opt,name=resp,proto3" json:"resp,omitempty"`
}

func (m *MsgTrainingHeartbeatResponse) Reset()         { *m = MsgTrainingHeartbeatResponse{} }
func (m *MsgTrainingHeartbeatResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTrainingHeartbeatResponse) ProtoMessage()    {}
func (*MsgTrainingHeartbeatResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{43}
}
func (m *MsgTrainingHeartbeatResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTrainingHeartbeatResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTrainingHeartbeatResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTrainingHeartbeatResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTrainingHeartbeatResponse.Merge(m, src)
}
func (m *MsgTrainingHeartbeatResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTrainingHeartbeatResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTrainingHeartbeatResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTrainingHeartbeatResponse proto.InternalMessageInfo

func (m *MsgTrainingHeartbeatResponse) GetResp() *HeartbeatResponse {
	if m != nil {
		return m.Resp
	}
	return nil
}

type MsgSetBarrier struct {
	Creator string             `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Req     *SetBarrierRequest `protobuf:"bytes,2,opt,name=req,proto3" json:"req,omitempty"`
}

func (m *MsgSetBarrier) Reset()         { *m = MsgSetBarrier{} }
func (m *MsgSetBarrier) String() string { return proto.CompactTextString(m) }
func (*MsgSetBarrier) ProtoMessage()    {}
func (*MsgSetBarrier) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{44}
}
func (m *MsgSetBarrier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetBarrier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetBarrier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetBarrier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetBarrier.Merge(m, src)
}
func (m *MsgSetBarrier) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetBarrier) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetBarrier.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetBarrier proto.InternalMessageInfo

func (m *MsgSetBarrier) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSetBarrier) GetReq() *SetBarrierRequest {
	if m != nil {
		return m.Req
	}
	return nil
}

type MsgSetBarrierResponse struct {
	Resp *SetBarrierResponse `protobuf:"bytes,1,opt,name=resp,proto3" json:"resp,omitempty"`
}

func (m *MsgSetBarrierResponse) Reset()         { *m = MsgSetBarrierResponse{} }
func (m *MsgSetBarrierResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetBarrierResponse) ProtoMessage()    {}
func (*MsgSetBarrierResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{45}
}
func (m *MsgSetBarrierResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetBarrierResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetBarrierResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetBarrierResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetBarrierResponse.Merge(m, src)
}
func (m *MsgSetBarrierResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetBarrierResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetBarrierResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetBarrierResponse proto.InternalMessageInfo

func (m *MsgSetBarrierResponse) GetResp() *SetBarrierResponse {
	if m != nil {
		return m.Resp
	}
	return nil
}

type MsgJoinTrainingStatus struct {
	Creator string               `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Req     *JoinTrainingRequest `protobuf:"bytes,2,opt,name=req,proto3" json:"req,omitempty"`
}

func (m *MsgJoinTrainingStatus) Reset()         { *m = MsgJoinTrainingStatus{} }
func (m *MsgJoinTrainingStatus) String() string { return proto.CompactTextString(m) }
func (*MsgJoinTrainingStatus) ProtoMessage()    {}
func (*MsgJoinTrainingStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{46}
}
func (m *MsgJoinTrainingStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgJoinTrainingStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgJoinTrainingStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgJoinTrainingStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgJoinTrainingStatus.Merge(m, src)
}
func (m *MsgJoinTrainingStatus) XXX_Size() int {
	return m.Size()
}
func (m *MsgJoinTrainingStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgJoinTrainingStatus.DiscardUnknown(m)
}

var xxx_messageInfo_MsgJoinTrainingStatus proto.InternalMessageInfo

func (m *MsgJoinTrainingStatus) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgJoinTrainingStatus) GetReq() *JoinTrainingRequest {
	if m != nil {
		return m.Req
	}
	return nil
}

type MsgJoinTrainingStatusResponse struct {
	Status *MLNodeTrainStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *MsgJoinTrainingStatusResponse) Reset()         { *m = MsgJoinTrainingStatusResponse{} }
func (m *MsgJoinTrainingStatusResponse) String() string { return proto.CompactTextString(m) }
func (*MsgJoinTrainingStatusResponse) ProtoMessage()    {}
func (*MsgJoinTrainingStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{47}
}
func (m *MsgJoinTrainingStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgJoinTrainingStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgJoinTrainingStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgJoinTrainingStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgJoinTrainingStatusResponse.Merge(m, src)
}
func (m *MsgJoinTrainingStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgJoinTrainingStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgJoinTrainingStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgJoinTrainingStatusResponse proto.InternalMessageInfo

func (m *MsgJoinTrainingStatusResponse) GetStatus() *MLNodeTrainStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type MsgCreateDummyTrainingTask struct {
	Creator string        `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Task    *TrainingTask `protobuf:"bytes,2,opt,name=task,proto3" json:"task,omitempty"`
}

func (m *MsgCreateDummyTrainingTask) Reset()         { *m = MsgCreateDummyTrainingTask{} }
func (m *MsgCreateDummyTrainingTask) String() string { return proto.CompactTextString(m) }
func (*MsgCreateDummyTrainingTask) ProtoMessage()    {}
func (*MsgCreateDummyTrainingTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{48}
}
func (m *MsgCreateDummyTrainingTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateDummyTrainingTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateDummyTrainingTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateDummyTrainingTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateDummyTrainingTask.Merge(m, src)
}
func (m *MsgCreateDummyTrainingTask) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateDummyTrainingTask) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateDummyTrainingTask.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateDummyTrainingTask proto.InternalMessageInfo

func (m *MsgCreateDummyTrainingTask) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateDummyTrainingTask) GetTask() *TrainingTask {
	if m != nil {
		return m.Task
	}
	return nil
}

type MsgCreateDummyTrainingTaskResponse struct {
	Task *TrainingTask `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
}

func (m *MsgCreateDummyTrainingTaskResponse) Reset()         { *m = MsgCreateDummyTrainingTaskResponse{} }
func (m *MsgCreateDummyTrainingTaskResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateDummyTrainingTaskResponse) ProtoMessage()    {}
func (*MsgCreateDummyTrainingTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{49}
}
func (m *MsgCreateDummyTrainingTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateDummyTrainingTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateDummyTrainingTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateDummyTrainingTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateDummyTrainingTaskResponse.Merge(m, src)
}
func (m *MsgCreateDummyTrainingTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateDummyTrainingTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateDummyTrainingTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateDummyTrainingTaskResponse proto.InternalMessageInfo

func (m *MsgCreateDummyTrainingTaskResponse) GetTask() *TrainingTask {
	if m != nil {
		return m.Task
	}
	return nil
}

type MsgBridgeExchange struct {
	Validator       string `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
	OriginChain     string `protobuf:"bytes,2,opt,name=originChain,proto3" json:"originChain,omitempty"`
	ContractAddress string `protobuf:"bytes,3,opt,name=contractAddress,proto3" json:"contractAddress,omitempty"`
	OwnerAddress    string `protobuf:"bytes,4,opt,name=ownerAddress,proto3" json:"ownerAddress,omitempty"`
	OwnerPubKey     string `protobuf:"bytes,5,opt,name=ownerPubKey,proto3" json:"ownerPubKey,omitempty"`
	Amount          string `protobuf:"bytes,6,opt,name=amount,proto3" json:"amount,omitempty"`
	BlockNumber     string `protobuf:"bytes,7,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
	ReceiptIndex    string `protobuf:"bytes,8,opt,name=receiptIndex,proto3" json:"receiptIndex,omitempty"`
	ReceiptsRoot    string `protobuf:"bytes,9,opt,name=receiptsRoot,proto3" json:"receiptsRoot,omitempty"`
}

func (m *MsgBridgeExchange) Reset()         { *m = MsgBridgeExchange{} }
func (m *MsgBridgeExchange) String() string { return proto.CompactTextString(m) }
func (*MsgBridgeExchange) ProtoMessage()    {}
func (*MsgBridgeExchange) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{50}
}
func (m *MsgBridgeExchange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBridgeExchange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBridgeExchange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBridgeExchange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBridgeExchange.Merge(m, src)
}
func (m *MsgBridgeExchange) XXX_Size() int {
	return m.Size()
}
func (m *MsgBridgeExchange) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBridgeExchange.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBridgeExchange proto.InternalMessageInfo

func (m *MsgBridgeExchange) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *MsgBridgeExchange) GetOriginChain() string {
	if m != nil {
		return m.OriginChain
	}
	return ""
}

func (m *MsgBridgeExchange) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *MsgBridgeExchange) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func (m *MsgBridgeExchange) GetOwnerPubKey() string {
	if m != nil {
		return m.OwnerPubKey
	}
	return ""
}

func (m *MsgBridgeExchange) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *MsgBridgeExchange) GetBlockNumber() string {
	if m != nil {
		return m.BlockNumber
	}
	return ""
}

func (m *MsgBridgeExchange) GetReceiptIndex() string {
	if m != nil {
		return m.ReceiptIndex
	}
	return ""
}

func (m *MsgBridgeExchange) GetReceiptsRoot() string {
	if m != nil {
		return m.ReceiptsRoot
	}
	return ""
}

type MsgBridgeExchangeResponse struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgBridgeExchangeResponse) Reset()         { *m = MsgBridgeExchangeResponse{} }
func (m *MsgBridgeExchangeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBridgeExchangeResponse) ProtoMessage()    {}
func (*MsgBridgeExchangeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{51}
}
func (m *MsgBridgeExchangeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBridgeExchangeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBridgeExchangeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBridgeExchangeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBridgeExchangeResponse.Merge(m, src)
}
func (m *MsgBridgeExchangeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBridgeExchangeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBridgeExchangeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBridgeExchangeResponse proto.InternalMessageInfo

func (m *MsgBridgeExchangeResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type MsgRegisterBridgeAddresses struct {
	Authority string   `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	ChainName string   `protobuf:"bytes,2,opt,name=chainName,proto3" json:"chainName,omitempty"`
	Addresses []string `protobuf:"bytes,3,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (m *MsgRegisterBridgeAddresses) Reset()         { *m = MsgRegisterBridgeAddresses{} }
func (m *MsgRegisterBridgeAddresses) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterBridgeAddresses) ProtoMessage()    {}
func (*MsgRegisterBridgeAddresses) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{52}
}
func (m *MsgRegisterBridgeAddresses) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterBridgeAddresses) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterBridgeAddresses.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterBridgeAddresses) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterBridgeAddresses.Merge(m, src)
}
func (m *MsgRegisterBridgeAddresses) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterBridgeAddresses) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterBridgeAddresses.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterBridgeAddresses proto.InternalMessageInfo

func (m *MsgRegisterBridgeAddresses) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgRegisterBridgeAddresses) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

func (m *MsgRegisterBridgeAddresses) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type MsgRegisterBridgeAddressesResponse struct {
}

func (m *MsgRegisterBridgeAddressesResponse) Reset()         { *m = MsgRegisterBridgeAddressesResponse{} }
func (m *MsgRegisterBridgeAddressesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterBridgeAddressesResponse) ProtoMessage()    {}
func (*MsgRegisterBridgeAddressesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{53}
}
func (m *MsgRegisterBridgeAddressesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterBridgeAddressesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterBridgeAddressesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterBridgeAddressesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterBridgeAddressesResponse.Merge(m, src)
}
func (m *MsgRegisterBridgeAddressesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterBridgeAddressesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterBridgeAddressesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterBridgeAddressesResponse proto.InternalMessageInfo

type MsgRegisterTokenMetadata struct {
	Authority       string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	ChainId         string `protobuf:"bytes,2,opt,name=chainId,proto3" json:"chainId,omitempty"`
	ContractAddress string `protobuf:"bytes,3,opt,name=contractAddress,proto3" json:"contractAddress,omitempty"`
	Name            string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Symbol          string `protobuf:"bytes,5,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Decimals        uint32 `protobuf:"varint,6,opt,name=decimals,proto3" json:"decimals,omitempty"`
	Overwrite       bool   `protobuf:"varint,7,opt,name=overwrite,proto3" json:"overwrite,omitempty"`
}

func (m *MsgRegisterTokenMetadata) Reset()         { *m = MsgRegisterTokenMetadata{} }
func (m *MsgRegisterTokenMetadata) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterTokenMetadata) ProtoMessage()    {}
func (*MsgRegisterTokenMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{54}
}
func (m *MsgRegisterTokenMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterTokenMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterTokenMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterTokenMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterTokenMetadata.Merge(m, src)
}
func (m *MsgRegisterTokenMetadata) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterTokenMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterTokenMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterTokenMetadata proto.InternalMessageInfo

func (m *MsgRegisterTokenMetadata) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgRegisterTokenMetadata) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *MsgRegisterTokenMetadata) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *MsgRegisterTokenMetadata) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgRegisterTokenMetadata) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *MsgRegisterTokenMetadata) GetDecimals() uint32 {
	if m != nil {
		return m.Decimals
	}
	return 0
}

func (m *MsgRegisterTokenMetadata) GetOverwrite() bool {
	if m != nil {
		return m.Overwrite
	}
	return false
}

type MsgRegisterTokenMetadataResponse struct {
}

func (m *MsgRegisterTokenMetadataResponse) Reset()         { *m = MsgRegisterTokenMetadataResponse{} }
func (m *MsgRegisterTokenMetadataResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterTokenMetadataResponse) ProtoMessage()    {}
func (*MsgRegisterTokenMetadataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{55}
}
func (m *MsgRegisterTokenMetadataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterTokenMetadataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterTokenMetadataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterTokenMetadataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterTokenMetadataResponse.Merge(m, src)
}
func (m *MsgRegisterTokenMetadataResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterTokenMetadataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterTokenMetadataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterTokenMetadataResponse proto.InternalMessageInfo

type MsgApproveBridgeTokenForTrading struct {
	Authority       string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	ChainId         string `protobuf:"bytes,2,opt,name=chainId,proto3" json:"chainId,omitempty"`
	ContractAddress string `protobuf:"bytes,3,opt,name=contractAddress,proto3" json:"contractAddress,omitempty"`
}

func (m *MsgApproveBridgeTokenForTrading) Reset()         { *m = MsgApproveBridgeTokenForTrading{} }
func (m *MsgApproveBridgeTokenForTrading) String() string { return proto.CompactTextString(m) }
func (*MsgApproveBridgeTokenForTrading) ProtoMessage()    {}
func (*MsgApproveBridgeTokenForTrading) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{56}
}
func (m *MsgApproveBridgeTokenForTrading) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgApproveBridgeTokenForTrading) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgApproveBridgeTokenForTrading.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgApproveBridgeTokenForTrading) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgApproveBridgeTokenForTrading.Merge(m, src)
}
func (m *MsgApproveBridgeTokenForTrading) XXX_Size() int {
	return m.Size()
}
func (m *MsgApproveBridgeTokenForTrading) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgApproveBridgeTokenForTrading.DiscardUnknown(m)
}

var xxx_messageInfo_MsgApproveBridgeTokenForTrading proto.InternalMessageInfo

func (m *MsgApproveBridgeTokenForTrading) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgApproveBridgeTokenForTrading) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *MsgApproveBridgeTokenForTrading) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

type MsgApproveBridgeTokenForTradingResponse struct {
}

func (m *MsgApproveBridgeTokenForTradingResponse) Reset() {
	*m = MsgApproveBridgeTokenForTradingResponse{}
}
func (m *MsgApproveBridgeTokenForTradingResponse) String() string { return proto.CompactTextString(m) }
func (*MsgApproveBridgeTokenForTradingResponse) ProtoMessage()    {}
func (*MsgApproveBridgeTokenForTradingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{57}
}
func (m *MsgApproveBridgeTokenForTradingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgApproveBridgeTokenForTradingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgApproveBridgeTokenForTradingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgApproveBridgeTokenForTradingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgApproveBridgeTokenForTradingResponse.Merge(m, src)
}
func (m *MsgApproveBridgeTokenForTradingResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgApproveBridgeTokenForTradingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgApproveBridgeTokenForTradingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgApproveBridgeTokenForTradingResponse proto.InternalMessageInfo

type MsgRegisterLiquidityPool struct {
	Authority      string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	CodeId         string `protobuf:"bytes,2,opt,name=code_id,json=codeId,proto3" json:"code_id,omitempty"`
	Label          string `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	InstantiateMsg string `protobuf:"bytes,4,opt,name=instantiate_msg,json=instantiateMsg,proto3" json:"instantiate_msg,omitempty"`
}

func (m *MsgRegisterLiquidityPool) Reset()         { *m = MsgRegisterLiquidityPool{} }
func (m *MsgRegisterLiquidityPool) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterLiquidityPool) ProtoMessage()    {}
func (*MsgRegisterLiquidityPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{58}
}
func (m *MsgRegisterLiquidityPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterLiquidityPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterLiquidityPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterLiquidityPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterLiquidityPool.Merge(m, src)
}
func (m *MsgRegisterLiquidityPool) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterLiquidityPool) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterLiquidityPool.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterLiquidityPool proto.InternalMessageInfo

func (m *MsgRegisterLiquidityPool) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgRegisterLiquidityPool) GetCodeId() string {
	if m != nil {
		return m.CodeId
	}
	return ""
}

func (m *MsgRegisterLiquidityPool) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *MsgRegisterLiquidityPool) GetInstantiateMsg() string {
	if m != nil {
		return m.InstantiateMsg
	}
	return ""
}

type MsgRegisterLiquidityPoolResponse struct {
}

func (m *MsgRegisterLiquidityPoolResponse) Reset()         { *m = MsgRegisterLiquidityPoolResponse{} }
func (m *MsgRegisterLiquidityPoolResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterLiquidityPoolResponse) ProtoMessage()    {}
func (*MsgRegisterLiquidityPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{59}
}
func (m *MsgRegisterLiquidityPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterLiquidityPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterLiquidityPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterLiquidityPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterLiquidityPoolResponse.Merge(m, src)
}
func (m *MsgRegisterLiquidityPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterLiquidityPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterLiquidityPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterLiquidityPoolResponse proto.InternalMessageInfo

type MsgRequestBridgeWithdrawal struct {
	Creator                string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	WrappedContractAddress string `protobuf:"bytes,2,opt,name=wrapped_contract_address,json=wrappedContractAddress,proto3" json:"wrapped_contract_address,omitempty"`
	Amount                 string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	DestinationAddress     string `protobuf:"bytes,4,opt,name=destination_address,json=destinationAddress,proto3" json:"destination_address,omitempty"`
}

func (m *MsgRequestBridgeWithdrawal) Reset()         { *m = MsgRequestBridgeWithdrawal{} }
func (m *MsgRequestBridgeWithdrawal) String() string { return proto.CompactTextString(m) }
func (*MsgRequestBridgeWithdrawal) ProtoMessage()    {}
func (*MsgRequestBridgeWithdrawal) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{60}
}
func (m *MsgRequestBridgeWithdrawal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestBridgeWithdrawal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestBridgeWithdrawal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestBridgeWithdrawal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestBridgeWithdrawal.Merge(m, src)
}
func (m *MsgRequestBridgeWithdrawal) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestBridgeWithdrawal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestBridgeWithdrawal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestBridgeWithdrawal proto.InternalMessageInfo

func (m *MsgRequestBridgeWithdrawal) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRequestBridgeWithdrawal) GetWrappedContractAddress() string {
	if m != nil {
		return m.WrappedContractAddress
	}
	return ""
}

func (m *MsgRequestBridgeWithdrawal) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *MsgRequestBridgeWithdrawal) GetDestinationAddress() string {
	if m != nil {
		return m.DestinationAddress
	}
	return ""
}

type MsgRequestBridgeWithdrawalResponse struct {
	RequestId    string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	EpochId      uint64 `protobuf:"varint,2,opt,name=epoch_id,json=epochId,proto3" json:"epoch_id,omitempty"`
	BlsRequestId string `protobuf:"bytes,3,opt,name=bls_request_id,json=blsRequestId,proto3" json:"bls_request_id,omitempty"`
}

func (m *MsgRequestBridgeWithdrawalResponse) Reset()         { *m = MsgRequestBridgeWithdrawalResponse{} }
func (m *MsgRequestBridgeWithdrawalResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRequestBridgeWithdrawalResponse) ProtoMessage()    {}
func (*MsgRequestBridgeWithdrawalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b36d0241b9acd5, []int{61}
}
func (m *MsgRequestBridgeWithdrawalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestBridgeWithdrawalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestBridgeWithdrawalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestBridgeWithdrawalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestBridgeWithdrawalResponse.Merge(m, src)
}
func (m *MsgRequestBridgeWithdrawalResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestBridgeWithdrawalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestBridgeWithdrawalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestBridgeWithdrawalResponse proto.InternalMessageInfo

func (m *MsgRequestBridgeWithdrawalResponse) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *MsgRequestBridgeWithdrawalResponse) GetEpochId() uint64 {
	if m != nil {
		return m.EpochId
	}
	return 0
}

func (m *MsgRequestBridgeWithdrawalResponse) GetBlsRequestId() string {
	if m != nil {
		return m.BlsRequestId
	}
	return ""
}

func init() {
	proto.RegisterType((*MsgUpdateParams)(nil), "inference.inference.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "inference.inference.MsgUpdateParamsResponse")
	proto.RegisterType((*MsgStartInference)(nil), "inference.inference.MsgStartInference")
	proto.RegisterType((*MsgStartInferenceResponse)(nil), "inference.inference.MsgStartInferenceResponse")
	proto.RegisterType((*MsgFinishInference)(nil), "inference.inference.MsgFinishInference")
	proto.RegisterType((*MsgFinishInferenceResponse)(nil), "inference.inference.MsgFinishInferenceResponse")
	proto.RegisterType((*MsgSubmitNewParticipant)(nil), "inference.inference.MsgSubmitNewParticipant")
	proto.RegisterType((*MsgSubmitNewParticipantResponse)(nil), "inference.inference.MsgSubmitNewParticipantResponse")
	proto.RegisterType((*MsgValidation)(nil), "inference.inference.MsgValidation")
	proto.RegisterType((*MsgValidationResponse)(nil), "inference.inference.MsgValidationResponse")
	proto.RegisterType((*MsgSubmitNewUnfundedParticipant)(nil), "inference.inference.MsgSubmitNewUnfundedParticipant")
	proto.RegisterType((*MsgSubmitNewUnfundedParticipantResponse)(nil), "inference.inference.MsgSubmitNewUnfundedParticipantResponse")
	proto.RegisterType((*MsgInvalidateInference)(nil), "inference.inference.MsgInvalidateInference")
	proto.RegisterType((*MsgInvalidateInferenceResponse)(nil), "inference.inference.MsgInvalidateInferenceResponse")
	proto.RegisterType((*MsgRevalidateInference)(nil), "inference.inference.MsgRevalidateInference")
	proto.RegisterType((*MsgRevalidateInferenceResponse)(nil), "inference.inference.MsgRevalidateInferenceResponse")
	proto.RegisterType((*MsgClaimRewards)(nil), "inference.inference.MsgClaimRewards")
	proto.RegisterType((*MsgClaimRewardsResponse)(nil), "inference.inference.MsgClaimRewardsResponse")
	proto.RegisterType((*MsgSubmitPocBatch)(nil), "inference.inference.MsgSubmitPocBatch")
	proto.RegisterType((*MsgSubmitPocBatchResponse)(nil), "inference.inference.MsgSubmitPocBatchResponse")
	proto.RegisterType((*MsgSubmitPocValidation)(nil), "inference.inference.MsgSubmitPocValidation")
	proto.RegisterType((*MsgSubmitPocValidationResponse)(nil), "inference.inference.MsgSubmitPocValidationResponse")
	proto.RegisterType((*MsgSubmitSeed)(nil), "inference.inference.MsgSubmitSeed")
	proto.RegisterType((*MsgSubmitSeedResponse)(nil), "inference.inference.MsgSubmitSeedResponse")
	proto.RegisterType((*MsgSubmitUnitOfComputePriceProposal)(nil), "inference.inference.MsgSubmitUnitOfComputePriceProposal")
	proto.RegisterType((*MsgSubmitUnitOfComputePriceProposalResponse)(nil), "inference.inference.MsgSubmitUnitOfComputePriceProposalResponse")
	proto.RegisterType((*MsgRegisterModel)(nil), "inference.inference.MsgRegisterModel")
	proto.RegisterType((*MsgRegisterModelResponse)(nil), "inference.inference.MsgRegisterModelResponse")
	proto.RegisterType((*MsgCreateTrainingTask)(nil), "inference.inference.MsgCreateTrainingTask")
	proto.RegisterType((*MsgCreateTrainingTaskResponse)(nil), "inference.inference.MsgCreateTrainingTaskResponse")
	proto.RegisterType((*MsgSubmitHardwareDiff)(nil), "inference.inference.MsgSubmitHardwareDiff")
	proto.RegisterType((*MsgSubmitHardwareDiffResponse)(nil), "inference.inference.MsgSubmitHardwareDiffResponse")
	proto.RegisterType((*MsgClaimTrainingTaskForAssignment)(nil), "inference.inference.MsgClaimTrainingTaskForAssignment")
	proto.RegisterType((*MsgClaimTrainingTaskForAssignmentResponse)(nil), "inference.inference.MsgClaimTrainingTaskForAssignmentResponse")
	proto.RegisterType((*MsgAssignTrainingTask)(nil), "inference.inference.MsgAssignTrainingTask")
	proto.RegisterType((*MsgAssignTrainingTaskResponse)(nil), "inference.inference.MsgAssignTrainingTaskResponse")
	proto.RegisterType((*MsgCreatePartialUpgrade)(nil), "inference.inference.MsgCreatePartialUpgrade")
	proto.RegisterType((*MsgCreatePartialUpgradeResponse)(nil), "inference.inference.MsgCreatePartialUpgradeResponse")
	proto.RegisterType((*MsgSubmitTrainingKvRecord)(nil), "inference.inference.MsgSubmitTrainingKvRecord")
	proto.RegisterType((*MsgSubmitTrainingKvRecordResponse)(nil), "inference.inference.MsgSubmitTrainingKvRecordResponse")
	proto.RegisterType((*MsgJoinTraining)(nil), "inference.inference.MsgJoinTraining")
	proto.RegisterType((*MsgJoinTrainingResponse)(nil), "inference.inference.MsgJoinTrainingResponse")
	proto.RegisterType((*MsgTrainingHeartbeat)(nil), "inference.inference.MsgTrainingHeartbeat")
	proto.RegisterType((*MsgTrainingHeartbeatResponse)(nil), "inference.inference.MsgTrainingHeartbeatResponse")
	proto.RegisterType((*MsgSetBarrier)(nil), "inference.inference.MsgSetBarrier")
	proto.RegisterType((*MsgSetBarrierResponse)(nil), "inference.inference.MsgSetBarrierResponse")
	proto.RegisterType((*MsgJoinTrainingStatus)(nil), "inference.inference.MsgJoinTrainingStatus")
	proto.RegisterType((*MsgJoinTrainingStatusResponse)(nil), "inference.inference.MsgJoinTrainingStatusResponse")
	proto.RegisterType((*MsgCreateDummyTrainingTask)(nil), "inference.inference.MsgCreateDummyTrainingTask")
	proto.RegisterType((*MsgCreateDummyTrainingTaskResponse)(nil), "inference.inference.MsgCreateDummyTrainingTaskResponse")
	proto.RegisterType((*MsgBridgeExchange)(nil), "inference.inference.MsgBridgeExchange")
	proto.RegisterType((*MsgBridgeExchangeResponse)(nil), "inference.inference.MsgBridgeExchangeResponse")
	proto.RegisterType((*MsgRegisterBridgeAddresses)(nil), "inference.inference.MsgRegisterBridgeAddresses")
	proto.RegisterType((*MsgRegisterBridgeAddressesResponse)(nil), "inference.inference.MsgRegisterBridgeAddressesResponse")
	proto.RegisterType((*MsgRegisterTokenMetadata)(nil), "inference.inference.MsgRegisterTokenMetadata")
	proto.RegisterType((*MsgRegisterTokenMetadataResponse)(nil), "inference.inference.MsgRegisterTokenMetadataResponse")
	proto.RegisterType((*MsgApproveBridgeTokenForTrading)(nil), "inference.inference.MsgApproveBridgeTokenForTrading")
	proto.RegisterType((*MsgApproveBridgeTokenForTradingResponse)(nil), "inference.inference.MsgApproveBridgeTokenForTradingResponse")
	proto.RegisterType((*MsgRegisterLiquidityPool)(nil), "inference.inference.MsgRegisterLiquidityPool")
	proto.RegisterType((*MsgRegisterLiquidityPoolResponse)(nil), "inference.inference.MsgRegisterLiquidityPoolResponse")
	proto.RegisterType((*MsgRequestBridgeWithdrawal)(nil), "inference.inference.MsgRequestBridgeWithdrawal")
	proto.RegisterType((*MsgRequestBridgeWithdrawalResponse)(nil), "inference.inference.MsgRequestBridgeWithdrawalResponse")
}

func init() { proto.RegisterFile("inference/inference/tx.proto", fileDescriptor_09b36d0241b9acd5) }

var fileDescriptor_09b36d0241b9acd5 = []byte{
	// 3264 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x3a, 0x4b, 0x6c, 0x1c, 0xc7,
	0xb1, 0x1a, 0xed, 0xf2, 0xd7, 0xfc, 0x48, 0x1c, 0xd1, 0xd4, 0x6a, 0x4d, 0x51, 0xab, 0x95, 0x25,
	0x51, 0x92, 0x25, 0x3e, 0xcb, 0x3f, 0x41, 0x7e, 0x10, 0x9e, 0x48, 0xd9, 0x16, 0x6d, 0x53, 0x22,
	0x46, 0x94, 0x1f, 0x9e, 0x5f, 0x82, 0x41, 0xef, 0x4c, 0xef, 0xec, 0x80, 0x3b, 0xd3, 0xa3, 0xee,
	0x5e, 0x92, 0x1b, 0x23, 0x80, 0x91, 0x04, 0x39, 0x24, 0x97, 0x20, 0x39, 0x24, 0xc8, 0x21, 0x48,
	0x0e, 0x01, 0x02, 0xe4, 0xa2, 0x43, 0x2e, 0x39, 0x07, 0x41, 0x7c, 0x34, 0x0c, 0x04, 0x08, 0x60,
	0x20, 0x08, 0xec, 0x83, 0xee, 0x41, 0x72, 0x0f, 0xfa, 0x37, 0x3b, 0x33, 0x3b, 0x33, 0xbb, 0x74,
	0x1c, 0x5f, 0xa4, 0xed, 0xea, 0xaa, 0xae, 0xaa, 0xae, 0x4f, 0x57, 0xd5, 0x10, 0xac, 0xf8, 0x61,
	0x1b, 0x11, 0x14, 0x3a, 0x68, 0x7d, 0xf0, 0x8b, 0x1d, 0xde, 0x88, 0x08, 0x66, 0xd8, 0x3c, 0x15,
	0xc3, 0x6e, 0xc4, 0xbf, 0xea, 0x8b, 0x30, 0xf0, 0x43, 0xbc, 0x2e, 0xfe, 0x95, 0x78, 0xf5, 0xd3,
	0x0e, 0xa6, 0x01, 0xa6, 0xeb, 0x01, 0xf5, 0xd6, 0xf7, 0x5f, 0xe2, 0xff, 0xa9, 0x8d, 0x33, 0x72,
	0xc3, 0x16, 0xab, 0x75, 0xb9, 0x50, 0x5b, 0x4b, 0x1e, 0xf6, 0xb0, 0x84, 0xf3, 0x5f, 0x9a, 0xc0,
	0xc3, 0xd8, 0xeb, 0xa2, 0x75, 0xb1, 0x6a, 0xf5, 0xda, 0xeb, 0x30, 0xec, 0xab, 0xad, 0x46, 0x9e,
	0xa8, 0x11, 0x24, 0x30, 0xd0, 0x47, 0x5e, 0xce, 0x55, 0x86, 0x40, 0x3f, 0xf4, 0x43, 0xcf, 0x66,
	0x90, 0xee, 0x95, 0x21, 0x76, 0x20, 0x71, 0x0f, 0x20, 0x41, 0x76, 0x88, 0x5d, 0xa4, 0x10, 0x2f,
	0xe5, 0x21, 0x86, 0x88, 0x1d, 0x60, 0xb2, 0x97, 0xc4, 0xcb, 0x95, 0xad, 0x45, 0x7c, 0xd7, 0x53,
	0x18, 0xcd, 0x3f, 0x18, 0xe0, 0xc4, 0x36, 0xf5, 0x1e, 0x47, 0x2e, 0x64, 0x68, 0x47, 0x48, 0x6d,
	0xbe, 0x06, 0x66, 0x60, 0x8f, 0x75, 0x30, 0xf1, 0x59, 0xbf, 0x66, 0x34, 0x8c, 0xb5, 0x99, 0x8d,
	0xda, 0xa7, 0xbf, 0xbb, 0xbe, 0xa4, 0xee, 0xe9, 0xae, 0xeb, 0x12, 0x44, 0xe9, 0x23, 0x46, 0xfc,
	0xd0, 0xb3, 0x06, 0xa8, 0xe6, 0x1d, 0x30, 0x29, 0xf5, 0xae, 0x1d, 0x6f, 0x18, 0x6b, 0xb3, 0x37,
	0x9f, 0xbf, 0x91, 0x63, 0xa7, 0x1b, 0x92, 0xc9, 0xc6, 0xcc, 0xc7, 0x7f, 0x3d, 0x77, 0xec, 0x37,
	0xcf, 0x9e, 0x5e, 0x35, 0x2c, 0x45, 0x75, 0xfb, 0xd6, 0x77, 0x9e, 0x3d, 0xbd, 0x3a, 0x38, 0xef,
	0x07, 0xcf, 0x9e, 0x5e, 0xbd, 0x38, 0x10, 0xfb, 0x30, 0xa1, 0x42, 0x46, 0xe2, 0xe6, 0x19, 0x70,
	0x3a, 0x03, 0xb2, 0x10, 0x8d, 0x70, 0x48, 0x51, 0xf3, 0x9f, 0x15, 0xb0, 0xb8, 0x4d, 0xbd, 0x47,
	0x0c, 0x12, 0xb6, 0xa5, 0x0f, 0x30, 0x6b, 0x60, 0xca, 0x21, 0x08, 0x32, 0x4c, 0xa4, 0x82, 0x96,
	0x5e, 0x9a, 0xe7, 0xc1, 0x5c, 0xcc, 0xc7, 0xf6, 0x5d, 0xa1, 0xca, 0x8c, 0x35, 0x1b, 0xc3, 0xb6,
	0x5c, 0xf3, 0x1c, 0x98, 0x8d, 0x08, 0x0e, 0x22, 0x66, 0x77, 0x20, 0xed, 0xd4, 0x2a, 0x02, 0x03,
	0x48, 0xd0, 0x7d, 0x48, 0x3b, 0xe6, 0x45, 0xb0, 0xa0, 0x10, 0x22, 0xd8, 0xef, 0x62, 0xe8, 0xd6,
	0xaa, 0x02, 0x67, 0x5e, 0x42, 0x77, 0x24, 0xd0, 0x5c, 0x02, 0x13, 0x01, 0x76, 0x51, 0xb7, 0x36,
	0x29, 0x76, 0xe5, 0x82, 0x0b, 0x40, 0xd0, 0x93, 0x1e, 0xa2, 0x0c, 0xb9, 0x76, 0xab, 0x5f, 0x9b,
	0x92, 0x02, 0xc4, 0xb0, 0x8d, 0x3e, 0x17, 0x00, 0x52, 0xea, 0x7b, 0x21, 0x72, 0x6d, 0x86, 0x6b,
	0xd3, 0x52, 0x00, 0x0d, 0xda, 0xc5, 0xfc, 0x0c, 0xee, 0x05, 0xf6, 0x3e, 0x22, 0xd4, 0xc7, 0x61,
	0x6d, 0x46, 0x9e, 0xc1, 0x61, 0xef, 0x4b, 0x90, 0x79, 0x16, 0x80, 0x00, 0x1e, 0xda, 0x0c, 0xef,
	0xa1, 0x90, 0xd6, 0x40, 0xc3, 0x58, 0xab, 0x5a, 0x33, 0x01, 0x3c, 0xdc, 0x15, 0x00, 0xf3, 0x45,
	0x60, 0x2a, 0x15, 0x04, 0x86, 0xed, 0xe0, 0x5e, 0xc8, 0x6a, 0xb3, 0x02, 0xed, 0xa4, 0xdc, 0x11,
	0x98, 0x9b, 0x1c, 0x6e, 0x5e, 0x03, 0x8b, 0x4a, 0x3e, 0x9b, 0xf9, 0x01, 0xa2, 0x0c, 0x06, 0x51,
	0x6d, 0xae, 0x61, 0xac, 0x55, 0xac, 0x93, 0x6a, 0x63, 0x57, 0xc3, 0xcd, 0xeb, 0xc0, 0x64, 0x04,
	0x86, 0xb4, 0x8d, 0x88, 0xcd, 0x25, 0x86, 0xac, 0x47, 0x50, 0x6d, 0x41, 0x88, 0xb8, 0xa8, 0x77,
	0x1e, 0xe9, 0x0d, 0xf3, 0x32, 0x38, 0x81, 0x89, 0xef, 0xf9, 0x21, 0xec, 0xda, 0x92, 0x71, 0xed,
	0x84, 0xc0, 0x5d, 0xd0, 0xe0, 0x1d, 0x01, 0xbd, 0x3d, 0xc7, 0xdd, 0x47, 0xdb, 0xb1, 0x79, 0x0f,
	0x9c, 0x19, 0x32, 0xbb, 0x76, 0x0a, 0x7e, 0x66, 0xc2, 0xc8, 0xa1, 0x8b, 0x0e, 0x95, 0x1b, 0x2c,
	0x0c, 0xec, 0xcc, 0xa1, 0xcd, 0x8f, 0xab, 0xc0, 0xdc, 0xa6, 0xde, 0x5b, 0x7e, 0xe8, 0xd3, 0xce,
	0x57, 0xe4, 0x3e, 0x17, 0xc0, 0x3c, 0x51, 0x82, 0x24, 0x1d, 0x68, 0x4e, 0x03, 0x85, 0x0b, 0x5d,
	0x01, 0x27, 0x63, 0xa4, 0xb4, 0x13, 0x9d, 0xd0, 0x70, 0xed, 0x46, 0xf9, 0xa6, 0x9a, 0x28, 0x30,
	0xd5, 0x2b, 0x60, 0xd9, 0xc1, 0x41, 0xd4, 0x45, 0xcc, 0xc7, 0x61, 0x8a, 0x62, 0x52, 0x50, 0x2c,
	0x0d, 0x76, 0x13, 0x54, 0xe7, 0xc0, 0x2c, 0x3a, 0x44, 0x4e, 0x2f, 0xe5, 0x93, 0x40, 0x83, 0x36,
	0xfa, 0xdc, 0xe5, 0xb5, 0xe9, 0x88, 0xc4, 0x91, 0x5e, 0x39, 0x9f, 0x80, 0x6e, 0xf4, 0xf3, 0x1d,
	0x65, 0xe6, 0x48, 0x8e, 0x02, 0x8a, 0x1c, 0xe5, 0x3a, 0x30, 0xa5, 0x40, 0x38, 0x89, 0x3e, 0x2b,
	0xd1, 0xf5, 0xce, 0x00, 0x3d, 0x1b, 0x67, 0x73, 0xc3, 0x71, 0x96, 0xe3, 0x7a, 0xf3, 0x79, 0xae,
	0x37, 0x88, 0xe4, 0x85, 0x44, 0x24, 0x67, 0x1c, 0xf2, 0x4d, 0x50, 0x1f, 0xf6, 0xa4, 0xa3, 0x7b,
	0xe4, 0x4f, 0x0d, 0x91, 0xeb, 0x1e, 0xf5, 0x5a, 0x81, 0xcf, 0x1e, 0xa0, 0x83, 0x1d, 0x48, 0x98,
	0xef, 0xf8, 0x11, 0x0c, 0x59, 0x89, 0x5b, 0x9e, 0x04, 0x95, 0x1e, 0xe9, 0x2a, 0x6f, 0xe4, 0x3f,
	0xb9, 0x17, 0xee, 0xc3, 0xae, 0xef, 0xf2, 0x6d, 0x7b, 0x0f, 0xf5, 0xb5, 0x17, 0xc6, 0xc0, 0x77,
	0x51, 0x9f, 0x27, 0x09, 0xfe, 0xa4, 0x20, 0x89, 0x21, 0xfd, 0x6f, 0x46, 0x42, 0xde, 0x45, 0xfd,
	0x8c, 0x82, 0x6d, 0x70, 0xae, 0x40, 0xb0, 0x58, 0xcb, 0x6b, 0x60, 0x31, 0x1a, 0x80, 0x53, 0x7a,
	0x9e, 0x4c, 0x6c, 0x08, 0x4d, 0xcd, 0x65, 0x30, 0x49, 0x19, 0x64, 0x3d, 0xaa, 0xc4, 0x56, 0xab,
	0xe6, 0x3f, 0x0c, 0x30, 0xbf, 0x4d, 0xbd, 0xf7, 0xa5, 0xa0, 0x3c, 0x97, 0x15, 0xeb, 0xbd, 0x00,
	0x8e, 0xc7, 0x41, 0x78, 0xdc, 0x77, 0x87, 0xc2, 0xb3, 0x32, 0x1c, 0x9e, 0x47, 0x88, 0xbc, 0xa1,
	0x48, 0x9e, 0xc8, 0x89, 0xe4, 0x25, 0x30, 0xb1, 0x0f, 0xbb, 0x3d, 0x24, 0xe2, 0xcb, 0xb0, 0xe4,
	0xc2, 0x6c, 0x72, 0xef, 0xdb, 0x8f, 0x55, 0x10, 0x11, 0x35, 0x6d, 0xa5, 0x60, 0x99, 0xeb, 0x3d,
	0x0d, 0x9e, 0x4b, 0x69, 0x1d, 0xbf, 0x70, 0x9f, 0x1a, 0xe9, 0x8b, 0x7f, 0x1c, 0xb6, 0x7b, 0xa1,
	0x8b, 0xdc, 0xf1, 0x3c, 0xa3, 0x06, 0xa6, 0xa0, 0x7c, 0xd0, 0xd5, 0x35, 0xe9, 0xa5, 0xf6, 0x99,
	0xca, 0xc0, 0x67, 0x4e, 0x83, 0xa9, 0xa8, 0xd7, 0x4a, 0xf8, 0xc2, 0x64, 0xd4, 0x6b, 0x71, 0x3f,
	0x19, 0x72, 0xa6, 0x89, 0x91, 0xce, 0x34, 0x59, 0xee, 0x4c, 0x57, 0xc0, 0xe5, 0x11, 0x3a, 0xc5,
	0xfa, 0x3b, 0x60, 0x79, 0x9b, 0x7a, 0x5b, 0xa1, 0x62, 0x86, 0xbe, 0x9a, 0x34, 0x9d, 0x91, 0xa7,
	0x01, 0x56, 0xf3, 0x99, 0x64, 0xc4, 0xb0, 0xd0, 0xd7, 0x20, 0x46, 0x0e, 0x93, 0x58, 0x8c, 0x03,
	0x51, 0xcf, 0x6d, 0x76, 0xa1, 0x1f, 0x58, 0xe8, 0x00, 0x12, 0x97, 0x96, 0xf0, 0x37, 0x41, 0x95,
	0x22, 0x24, 0xf9, 0x56, 0x2c, 0xf1, 0xdb, 0x5c, 0x03, 0x27, 0x23, 0xec, 0xd8, 0x94, 0xbf, 0x9c,
	0x76, 0x07, 0xf9, 0x5e, 0x87, 0x09, 0x1f, 0xa8, 0x5a, 0x0b, 0x11, 0x76, 0xc4, 0x83, 0x7a, 0x5f,
	0x40, 0x33, 0xa2, 0x6d, 0x89, 0xbc, 0x94, 0x64, 0x1c, 0x87, 0xfd, 0x32, 0x98, 0x84, 0x81, 0x78,
	0x63, 0x0c, 0x71, 0x90, 0x5a, 0x71, 0x38, 0x41, 0xb4, 0xd7, 0x65, 0x3a, 0xc2, 0xe5, 0xaa, 0xf9,
	0x99, 0x21, 0x6b, 0x36, 0x61, 0xfd, 0x1d, 0xec, 0x6c, 0x40, 0xe6, 0x74, 0x4a, 0xd4, 0xb8, 0x03,
	0x56, 0x94, 0xc8, 0x1e, 0x52, 0x82, 0xb7, 0xba, 0xd8, 0xd9, 0xd3, 0xe2, 0x4b, 0xf5, 0x6a, 0x52,
	0x7c, 0x0f, 0x09, 0x1d, 0x36, 0x38, 0x82, 0x54, 0xc4, 0x3c, 0x03, 0xa6, 0x5b, 0x9c, 0xc5, 0x20,
	0x23, 0x4c, 0x89, 0xf5, 0x96, 0xcb, 0x45, 0x0c, 0x71, 0xe8, 0x20, 0x5a, 0xab, 0x36, 0x2a, 0x6b,
	0x15, 0x4b, 0xad, 0xf8, 0xcd, 0xb9, 0x3e, 0xe5, 0xcf, 0x6c, 0x65, 0xcd, 0xb0, 0xc4, 0x6f, 0x1e,
	0x1e, 0xa2, 0xea, 0xf2, 0x5d, 0xe5, 0xdd, 0x93, 0x7c, 0x39, 0x64, 0xc3, 0xe7, 0x65, 0x65, 0x92,
	0x52, 0x2e, 0x36, 0xdf, 0xef, 0x2b, 0xc2, 0x8d, 0xe2, 0xdd, 0xb1, 0xb2, 0xdc, 0x3a, 0x38, 0x95,
	0x4c, 0xab, 0xe9, 0x78, 0x36, 0x13, 0x5b, 0xaa, 0x74, 0x1f, 0x79, 0x61, 0x95, 0x11, 0x17, 0x76,
	0x94, 0x5b, 0x11, 0x49, 0xd2, 0x41, 0xfe, 0x3e, 0x72, 0x6d, 0xb1, 0x39, 0x29, 0x36, 0xe7, 0x34,
	0xf0, 0x1e, 0x47, 0x3a, 0x03, 0xa6, 0x89, 0xcd, 0x20, 0xf1, 0x10, 0x13, 0xa9, 0xd0, 0xb0, 0xa6,
	0xc8, 0xae, 0x58, 0xf2, 0x97, 0xb1, 0x4d, 0x60, 0xcf, 0xb5, 0x59, 0x87, 0x20, 0xda, 0xc1, 0x5d,
	0x57, 0x94, 0x16, 0x86, 0xb5, 0x20, 0xc0, 0xbb, 0x1a, 0x6a, 0x3e, 0x0f, 0x66, 0x42, 0xdb, 0x97,
	0x11, 0xaa, 0x6a, 0x8a, 0xe9, 0x50, 0x45, 0x2c, 0x2f, 0x0e, 0x22, 0x82, 0x5b, 0xb0, 0xe5, 0x77,
	0x7d, 0xd6, 0xb7, 0x3b, 0x38, 0x44, 0x94, 0x89, 0x5a, 0xc2, 0xb0, 0x16, 0x13, 0x3b, 0xf7, 0xc5,
	0x06, 0x2f, 0x67, 0x24, 0x53, 0x17, 0x31, 0xe4, 0x30, 0xe4, 0x8a, 0x3a, 0x62, 0xda, 0x9a, 0x17,
	0xd0, 0x7b, 0x0a, 0x98, 0x1b, 0x9c, 0x39, 0xa6, 0x8b, 0xad, 0x7b, 0x28, 0x5e, 0x2e, 0x89, 0xf1,
	0x88, 0x07, 0x5b, 0x69, 0x6a, 0xc8, 0xf1, 0xe1, 0xd9, 0x56, 0xc2, 0x0a, 0x2b, 0x60, 0x66, 0x50,
	0xe7, 0x48, 0xbf, 0x1d, 0x00, 0x72, 0x5f, 0x8f, 0x01, 0xe7, 0x44, 0xda, 0xba, 0x10, 0x6f, 0x3c,
	0x0e, 0x7d, 0xf6, 0xb0, 0xbd, 0x89, 0x83, 0xa8, 0xc7, 0xd0, 0x0e, 0xf1, 0x1d, 0xb4, 0x43, 0x70,
	0x84, 0x29, 0xec, 0x96, 0x08, 0xba, 0x04, 0x26, 0x22, 0x8e, 0x2a, 0x24, 0xac, 0x5a, 0x72, 0x91,
	0xe1, 0x7e, 0x1d, 0x5c, 0x1b, 0x83, 0x49, 0x2c, 0xd3, 0xcf, 0x2b, 0xe0, 0xa4, 0x48, 0x73, 0x9e,
	0x4f, 0x19, 0x22, 0xdb, 0xa2, 0x2f, 0x5a, 0x19, 0xea, 0x4a, 0x93, 0xbd, 0xa7, 0xec, 0xc9, 0x22,
	0x4c, 0x65, 0x31, 0x77, 0x3c, 0xee, 0xc9, 0x04, 0x68, 0xa3, 0xaf, 0x2a, 0x81, 0x4a, 0x5c, 0x09,
	0xdc, 0x06, 0xf5, 0x5e, 0xe8, 0x33, 0x6a, 0xe3, 0xb6, 0xed, 0x48, 0x61, 0xec, 0x08, 0x11, 0x59,
	0x11, 0x8b, 0xe7, 0xad, 0x6a, 0x2d, 0x0b, 0x8c, 0x81, 0xb0, 0x88, 0x88, 0x92, 0x98, 0x07, 0x7a,
	0xa7, 0x6d, 0x13, 0x14, 0x61, 0xf5, 0xd0, 0x4d, 0x76, 0xda, 0x16, 0x8a, 0x30, 0x77, 0xc1, 0x8e,
	0x38, 0x2e, 0xf0, 0x99, 0xca, 0x01, 0xd3, 0x1d, 0x4e, 0x1e, 0xf8, 0x4c, 0x74, 0x5c, 0x5c, 0x13,
	0x1b, 0x12, 0x8f, 0xd6, 0xa6, 0x1a, 0x15, 0xae, 0x81, 0x80, 0xdc, 0x25, 0x1e, 0x35, 0x4f, 0x81,
	0x89, 0x7d, 0x9b, 0xc0, 0x40, 0x78, 0x77, 0xd5, 0xaa, 0xee, 0x5b, 0x30, 0x30, 0xff, 0x0b, 0x2c,
	0xb1, 0x0e, 0xc1, 0x3d, 0xaf, 0x13, 0xf5, 0x98, 0x90, 0x4f, 0x44, 0x9a, 0x70, 0xef, 0xaa, 0x65,
	0x0e, 0xf6, 0x76, 0x10, 0x79, 0xc0, 0x77, 0xcc, 0x87, 0x60, 0x69, 0x50, 0x42, 0x24, 0x62, 0x06,
	0x88, 0x96, 0x7c, 0x25, 0xb7, 0x25, 0xbf, 0x87, 0x1c, 0x3f, 0x80, 0x5d, 0xeb, 0xd4, 0x80, 0x32,
	0x0e, 0xab, 0xdb, 0x0b, 0xe9, 0xae, 0xbc, 0x59, 0x07, 0xb5, 0xac, 0x6d, 0x62, 0xc3, 0x7d, 0x66,
	0x08, 0x37, 0xdb, 0xe4, 0x66, 0x47, 0xbb, 0x6a, 0xc2, 0xb1, 0x0b, 0xe9, 0x5e, 0x89, 0xff, 0x7c,
	0x13, 0x98, 0xf1, 0x88, 0x83, 0x20, 0x8a, 0x7b, 0x84, 0xe7, 0x95, 0xe3, 0x8d, 0xca, 0xda, 0xec,
	0xcd, 0x1b, 0xb9, 0xe2, 0xea, 0x83, 0xef, 0x2b, 0x32, 0x4b, 0x53, 0x59, 0x8b, 0x9d, 0x2c, 0xc8,
	0x7c, 0x03, 0x4c, 0x3a, 0x38, 0x6c, 0xfb, 0x9e, 0xb0, 0xfd, 0xec, 0xcd, 0x0b, 0xa5, 0x47, 0x6e,
	0x0a, 0x54, 0x4b, 0x91, 0x64, 0xbc, 0xf8, 0x7d, 0x70, 0x36, 0x57, 0xb9, 0xf8, 0x9d, 0x7b, 0x15,
	0x54, 0x19, 0xa4, 0x7b, 0x42, 0xc3, 0xd9, 0x9b, 0xe7, 0x4b, 0x39, 0x09, 0x42, 0x81, 0xde, 0xfc,
	0xa3, 0x91, 0x08, 0x4e, 0xad, 0xd4, 0x3d, 0xbf, 0xdd, 0x2e, 0xb9, 0xb5, 0xb7, 0xc1, 0x7c, 0x88,
	0x0e, 0x1e, 0xf2, 0xfb, 0xf7, 0xdb, 0xbe, 0x78, 0xc2, 0x2b, 0x85, 0x3c, 0xf5, 0x99, 0x0f, 0xb0,
	0x8b, 0xac, 0x34, 0x9d, 0xf9, 0x06, 0x98, 0x22, 0x28, 0xc0, 0xfb, 0x88, 0x07, 0xc7, 0x98, 0x47,
	0x68, 0x8a, 0xcc, 0xfd, 0x9c, 0x13, 0xf7, 0x33, 0xac, 0x46, 0xec, 0x1e, 0x2e, 0x38, 0xaf, 0x4b,
	0x84, 0xe4, 0x35, 0xbc, 0x85, 0xc9, 0x5d, 0x31, 0xbb, 0x08, 0x50, 0x69, 0xa9, 0x7a, 0x1a, 0x4c,
	0xf1, 0xfb, 0xd2, 0x85, 0x52, 0xd5, 0x9a, 0xe4, 0xcb, 0xa1, 0xf7, 0xf5, 0x1a, 0xb8, 0x32, 0x92,
	0x4b, 0x2c, 0xd2, 0xaf, 0xe4, 0xdd, 0xcb, 0x9d, 0x31, 0x3d, 0xb6, 0x48, 0x0e, 0xf3, 0x6d, 0x30,
	0xa3, 0x86, 0x30, 0x88, 0xaa, 0xdb, 0xbc, 0x32, 0xd2, 0x09, 0xee, 0x2a, 0x0a, 0x6b, 0x40, 0x9b,
	0x7b, 0xaf, 0xc3, 0x22, 0xc6, 0x4a, 0xfc, 0x56, 0xf6, 0x84, 0xd2, 0x33, 0x45, 0x89, 0x0c, 0xbb,
	0x8f, 0x23, 0x8f, 0x40, 0x17, 0x8d, 0x48, 0x9b, 0xcb, 0x60, 0x32, 0xf1, 0xbe, 0x54, 0x2d, 0xb5,
	0x32, 0x1b, 0x20, 0x39, 0x2c, 0xd2, 0x6d, 0x52, 0x72, 0x7e, 0xb4, 0x06, 0x4e, 0xc0, 0xc8, 0xdf,
	0xf0, 0x43, 0x48, 0x7c, 0x44, 0xdf, 0xa1, 0x38, 0xd4, 0x5d, 0x52, 0x06, 0x3c, 0x94, 0x40, 0xce,
	0x8b, 0x76, 0x25, 0x4f, 0xd8, 0x58, 0xa1, 0x5f, 0x1b, 0x89, 0x1a, 0x49, 0xab, 0xfc, 0xee, 0xbe,
	0x85, 0x1c, 0x4c, 0xca, 0x1e, 0xcd, 0x65, 0xa0, 0x4c, 0x91, 0x31, 0x4c, 0x03, 0xcc, 0x26, 0xaa,
	0x20, 0xad, 0x4e, 0x02, 0xc4, 0x9b, 0x9d, 0x41, 0x5b, 0xc3, 0x7f, 0x0e, 0xfa, 0x36, 0x99, 0xe2,
	0xe5, 0x22, 0x63, 0x99, 0x0b, 0xc2, 0xa1, 0xf3, 0xc5, 0x8c, 0x95, 0xe9, 0x89, 0x8a, 0xfc, 0x1d,
	0xec, 0xc7, 0xc6, 0x2b, 0xd1, 0xe0, 0x36, 0xa8, 0x10, 0xf4, 0x44, 0x0d, 0x50, 0xd7, 0x72, 0x9d,
	0x27, 0x79, 0x92, 0x25, 0xa7, 0x15, 0x16, 0x27, 0xca, 0xc8, 0xf6, 0x7f, 0xc2, 0x27, 0xd2, 0xc8,
	0x2a, 0x4f, 0xdd, 0x89, 0x3b, 0x6b, 0x99, 0xa9, 0x2e, 0xe5, 0xf2, 0xd9, 0x7e, 0x8f, 0x07, 0xbb,
	0x20, 0x7e, 0x24, 0xb0, 0xe3, 0x0e, 0xfc, 0x00, 0x2c, 0x6d, 0x53, 0x2f, 0x4e, 0xc3, 0x08, 0x12,
	0xd6, 0x42, 0xb0, 0x2c, 0x74, 0x5f, 0x4f, 0xaa, 0x75, 0x31, 0x3f, 0xc3, 0xe8, 0x63, 0x4a, 0x74,
	0xfa, 0x00, 0xac, 0xe4, 0x31, 0x8e, 0x15, 0xbb, 0x0d, 0xaa, 0xbc, 0xf7, 0x2e, 0x55, 0x6b, 0x88,
	0xca, 0x12, 0x34, 0xcd, 0x27, 0xb2, 0x36, 0x43, 0x6c, 0x03, 0x12, 0xe2, 0x23, 0x52, 0xa2, 0xcd,
	0xad, 0xa4, 0x36, 0xf9, 0x5c, 0x06, 0xe7, 0x94, 0xa8, 0xb3, 0x2b, 0xf3, 0x7e, 0x02, 0x55, 0xe9,
	0xf1, 0x46, 0x4a, 0x8f, 0xcb, 0x23, 0x39, 0xa4, 0x14, 0xf9, 0x50, 0x9c, 0x9a, 0x34, 0xbc, 0x34,
	0xdf, 0xd7, 0xe2, 0x75, 0xb6, 0xc8, 0x55, 0xc3, 0xcc, 0xbf, 0x32, 0xdf, 0xfb, 0x50, 0x8c, 0xd1,
	0x64, 0xf6, 0xb8, 0xd7, 0x0b, 0x82, 0xfe, 0x98, 0x49, 0x5b, 0xbf, 0xcd, 0xc7, 0x8f, 0xf4, 0x36,
	0x67, 0xb4, 0xfb, 0x7f, 0xd0, 0x2c, 0x66, 0xfe, 0xef, 0x96, 0x01, 0x7f, 0x3e, 0x2e, 0xba, 0xde,
	0x0d, 0xf1, 0x79, 0xe6, 0xcd, 0x43, 0xa7, 0x03, 0x43, 0x4f, 0xe4, 0xef, 0x78, 0x8a, 0xa2, 0xf3,
	0x77, 0x0c, 0xe0, 0x89, 0x4d, 0x8e, 0x22, 0x37, 0x3b, 0xd0, 0x0f, 0xf5, 0xfc, 0x20, 0x01, 0xe2,
	0x79, 0xda, 0xc1, 0x21, 0x23, 0xd0, 0xd1, 0xdd, 0x9f, 0x4a, 0x7f, 0x59, 0xb0, 0xd9, 0x04, 0x73,
	0xf8, 0x20, 0x44, 0x44, 0xa3, 0xc9, 0x5c, 0x98, 0x82, 0x09, 0x7e, 0x7c, 0xbd, 0x23, 0xe6, 0x3e,
	0x2a, 0x35, 0x26, 0x41, 0x89, 0x5e, 0x5f, 0xf5, 0xc0, 0xaa, 0xd7, 0x6f, 0x00, 0xd9, 0xbb, 0x3c,
	0xe8, 0x05, 0x2d, 0x44, 0xf4, 0x57, 0x8d, 0x04, 0x48, 0x8e, 0xc4, 0x1c, 0xe4, 0x47, 0x72, 0xfe,
	0xa7, 0x06, 0xc8, 0x29, 0x58, 0x02, 0x87, 0x5a, 0x18, 0x33, 0xf5, 0x61, 0x23, 0x05, 0x53, 0xef,
	0x4d, 0x7c, 0x47, 0xcd, 0x6b, 0xe2, 0x2d, 0x49, 0x5f, 0x6b, 0x6c, 0x2b, 0xd9, 0x16, 0x18, 0xba,
	0x2d, 0x68, 0x7e, 0xdf, 0x10, 0xfe, 0xa5, 0xcb, 0x5b, 0x49, 0xa5, 0xb4, 0x47, 0x74, 0xc4, 0x6b,
	0xba, 0x02, 0x66, 0x1c, 0x7e, 0xe9, 0x0f, 0x60, 0x80, 0x94, 0x2d, 0x06, 0x00, 0x41, 0xab, 0x0f,
	0x12, 0xd5, 0x01, 0xa7, 0xd5, 0x80, 0xa1, 0x57, 0xf2, 0x05, 0xe1, 0x6a, 0x05, 0x72, 0xc4, 0x6f,
	0xcb, 0xdf, 0x8d, 0x54, 0x35, 0x2e, 0xda, 0x93, 0x6d, 0xc4, 0xa0, 0x0b, 0x19, 0x1c, 0x21, 0x2c,
	0x0f, 0x15, 0x2e, 0xdb, 0x96, 0x1e, 0x3b, 0xe9, 0xe5, 0x11, 0x5c, 0xc6, 0x04, 0xd5, 0x90, 0xeb,
	0x2a, 0x5d, 0x45, 0xfc, 0x16, 0x63, 0xdb, 0x7e, 0xd0, 0xc2, 0x5d, 0xdd, 0x1b, 0xc9, 0x95, 0x59,
	0x07, 0xd3, 0xae, 0xec, 0x33, 0xa8, 0x70, 0x8d, 0x79, 0x2b, 0x5e, 0x73, 0x49, 0xf1, 0x3e, 0x22,
	0x07, 0xc4, 0x67, 0x48, 0x8d, 0x42, 0x07, 0x80, 0xa1, 0xab, 0x69, 0x82, 0x46, 0x91, 0xce, 0xf1,
	0xc5, 0xfc, 0x44, 0x0e, 0x45, 0xef, 0x46, 0x11, 0xc1, 0xfb, 0x48, 0x5e, 0x9f, 0xc0, 0x7c, 0x0b,
	0x93, 0x5d, 0x02, 0x5d, 0xfe, 0x0a, 0xff, 0xc7, 0xef, 0x67, 0x48, 0x72, 0x39, 0xd5, 0x2c, 0x13,
	0x2a, 0x56, 0xe0, 0x97, 0x69, 0xcb, 0xbe, 0xe7, 0x3f, 0xe9, 0xf9, 0xae, 0xcf, 0xfa, 0x3b, 0x18,
	0x8f, 0xea, 0x85, 0x4f, 0x83, 0x29, 0x47, 0xcd, 0xa1, 0xd4, 0x5c, 0xcd, 0x11, 0x73, 0x28, 0x5e,
	0xd2, 0x74, 0x61, 0x0b, 0xe9, 0x99, 0xae, 0x5c, 0xc8, 0x4f, 0x0f, 0x94, 0xc1, 0x90, 0xf9, 0x90,
	0x21, 0x3b, 0xa0, 0x9e, 0xb2, 0xe7, 0x42, 0x02, 0xbc, 0x4d, 0xbd, 0x11, 0x76, 0x48, 0x49, 0x18,
	0xab, 0xf1, 0x27, 0x1d, 0x4f, 0xe2, 0xc5, 0x90, 0x2a, 0xff, 0xaf, 0xcf, 0x3a, 0x2e, 0x81, 0x07,
	0xa5, 0x63, 0x85, 0x5b, 0xa0, 0x76, 0x40, 0x60, 0x14, 0x21, 0xd7, 0xd6, 0xb7, 0x9a, 0x19, 0x6c,
	0x2d, 0xab, 0xfd, 0xcd, 0x8c, 0x53, 0x0e, 0x32, 0x50, 0x25, 0x95, 0x81, 0xd6, 0xc1, 0x29, 0x17,
	0x51, 0xe6, 0x87, 0xb2, 0x35, 0x86, 0xa9, 0x34, 0x67, 0x26, 0xb6, 0xb4, 0xf5, 0xd2, 0xb9, 0xff,
	0x7b, 0x86, 0x8a, 0xc8, 0x5c, 0x4d, 0xe2, 0x84, 0x72, 0x16, 0x00, 0xfd, 0x85, 0x2b, 0x4e, 0x2c,
	0x33, 0x0a, 0xb2, 0xe5, 0x9a, 0x67, 0xc0, 0x34, 0x8a, 0xb0, 0x1c, 0x35, 0xca, 0x1a, 0x75, 0x4a,
	0xac, 0xb7, 0x5c, 0xf3, 0x05, 0xb0, 0xd0, 0xea, 0x52, 0x3b, 0x41, 0xad, 0x3e, 0xc9, 0xb4, 0xba,
	0xd4, 0xd2, 0x07, 0xdc, 0xfc, 0xe1, 0x59, 0x50, 0xd9, 0xa6, 0x9e, 0xd9, 0x02, 0x73, 0xa9, 0x8f,
	0xf6, 0x2f, 0xe4, 0xbf, 0xa3, 0xe9, 0xaf, 0xe2, 0xf5, 0x17, 0xc7, 0xc1, 0x8a, 0x75, 0xe9, 0x80,
	0x85, 0xcc, 0x77, 0xf3, 0x4b, 0x45, 0xf4, 0x69, 0xbc, 0xfa, 0x8d, 0xf1, 0xf0, 0x62, 0x4e, 0x7b,
	0xe0, 0x44, 0xf6, 0x1b, 0xeb, 0xe5, 0xa2, 0x23, 0x32, 0x88, 0xf5, 0xf5, 0x31, 0x11, 0x63, 0x66,
	0xdf, 0x02, 0x4b, 0xb9, 0x9f, 0xcf, 0x0a, 0x2f, 0x27, 0x0f, 0xbb, 0xfe, 0xca, 0x51, 0xb0, 0x63,
	0xde, 0xdf, 0x00, 0x20, 0x31, 0xd2, 0x6d, 0x16, 0x9d, 0x31, 0xc0, 0xa9, 0x5f, 0x1d, 0x8d, 0x13,
	0x9f, 0xfe, 0x63, 0x03, 0xac, 0x94, 0x7e, 0x07, 0x1a, 0x2d, 0x74, 0x0e, 0x55, 0xfd, 0xbf, 0xbf,
	0x0c, 0x55, 0x2c, 0xd4, 0x01, 0x38, 0x95, 0xf7, 0x71, 0xe6, 0x5a, 0xd1, 0xa1, 0x39, 0xc8, 0xf5,
	0x97, 0x8f, 0x80, 0x9c, 0x64, 0x9c, 0xf7, 0x39, 0xa6, 0x90, 0x71, 0x0e, 0x72, 0x31, 0xe3, 0x92,
	0x6f, 0x30, 0x3c, 0x36, 0x53, 0x1f, 0x60, 0x0a, 0x63, 0x33, 0x89, 0x55, 0x1c, 0x9b, 0xb9, 0xdf,
	0x54, 0x78, 0x6c, 0xa6, 0xbf, 0x8f, 0x5c, 0x2a, 0xb7, 0x92, 0xc6, 0x2b, 0x89, 0xcd, 0xdc, 0x4f,
	0x12, 0xfc, 0x1a, 0xf3, 0x3e, 0x47, 0x5c, 0x1b, 0x79, 0x4c, 0xc2, 0x89, 0x5f, 0x3e, 0x02, 0x72,
	0x32, 0x56, 0x12, 0xa3, 0xf2, 0x66, 0xf9, 0x11, 0x1c, 0xa7, 0x38, 0x56, 0x86, 0x07, 0xdf, 0xe6,
	0x2f, 0x0c, 0xd0, 0x18, 0x39, 0xf6, 0xbe, 0x55, 0x7e, 0x60, 0x31, 0x65, 0xfd, 0x7f, 0xbe, 0x2c,
	0x65, 0x2c, 0x20, 0x02, 0xf3, 0xe9, 0x09, 0xf8, 0xc5, 0x62, 0x5f, 0x4c, 0xa0, 0xd5, 0xaf, 0x8f,
	0x85, 0x16, 0xb3, 0x61, 0xc0, 0xcc, 0x99, 0xd7, 0x16, 0xde, 0xe4, 0x30, 0x6e, 0xfd, 0xe6, 0xf8,
	0xb8, 0x49, 0xae, 0x39, 0xf3, 0xce, 0x11, 0xf6, 0x4b, 0xe2, 0x16, 0x73, 0x2d, 0x1e, 0x40, 0xf2,
	0xcc, 0x9f, 0x3b, 0x24, 0x7b, 0xb1, 0x5c, 0x83, 0x34, 0x76, 0x71, 0xe6, 0x2f, 0x9b, 0x69, 0x99,
	0x3f, 0x33, 0xc0, 0xea, 0x88, 0xd1, 0xe7, 0x6b, 0xa5, 0x19, 0xa0, 0x90, 0xae, 0x7e, 0xe7, 0xcb,
	0xd1, 0x25, 0x8d, 0x91, 0x33, 0x00, 0x2d, 0x34, 0xc6, 0x30, 0x6e, 0xb1, 0x31, 0x8a, 0xa7, 0x96,
	0xe6, 0x47, 0x06, 0x58, 0x2e, 0x98, 0xf0, 0x8d, 0x48, 0x51, 0x59, 0xfc, 0xfa, 0x6b, 0x47, 0xc3,
	0x4f, 0x26, 0xea, 0xd4, 0x5c, 0xae, 0x30, 0x51, 0x27, 0xb1, 0x8a, 0x13, 0x75, 0xee, 0xb0, 0xed,
	0x09, 0x58, 0x1c, 0x9e, 0x94, 0x5d, 0x29, 0x3a, 0x62, 0x08, 0xb5, 0xfe, 0xd2, 0xd8, 0xa8, 0xa9,
	0xc4, 0x39, 0x98, 0x63, 0x15, 0x27, 0xce, 0x18, 0xa7, 0x24, 0x71, 0x0e, 0x0f, 0xa7, 0x18, 0x30,
	0x73, 0x86, 0x4b, 0x57, 0xc7, 0xb9, 0x14, 0x89, 0x5b, 0xec, 0x2d, 0x25, 0x73, 0xa3, 0xef, 0x1a,
	0xe0, 0x74, 0xd1, 0xd4, 0x67, 0xbd, 0x3c, 0x20, 0x87, 0x08, 0xea, 0xaf, 0x1f, 0x91, 0x20, 0xf9,
	0xea, 0x66, 0xe6, 0x33, 0x85, 0xaf, 0x6e, 0x1a, 0xaf, 0xf8, 0xd5, 0x2d, 0x18, 0x4c, 0x70, 0x7d,
	0x8b, 0xa6, 0x10, 0xeb, 0xa3, 0x32, 0x7c, 0x86, 0xa0, 0x58, 0xdf, 0x11, 0xf3, 0x05, 0xf3, 0xdb,
	0xe0, 0xb9, 0xfc, 0x0e, 0x74, 0xe4, 0x23, 0x93, 0x42, 0xaf, 0xbf, 0x7a, 0x24, 0xf4, 0x3c, 0xf6,
	0xe9, 0xd1, 0xc6, 0x48, 0xf6, 0x29, 0xf4, 0xd1, 0xec, 0x73, 0x87, 0x08, 0xa2, 0x9c, 0x2e, 0x9d,
	0x20, 0x14, 0xbe, 0x04, 0x65, 0x54, 0xc5, 0xe5, 0xf4, 0x38, 0x83, 0x01, 0xe5, 0x18, 0xf9, 0xed,
	0x74, 0x89, 0x63, 0xe4, 0x12, 0x94, 0x39, 0x46, 0x69, 0x9b, 0x5b, 0x9f, 0xf8, 0xe8, 0xd9, 0xd3,
	0xab, 0xc6, 0xc6, 0xc3, 0x8f, 0x3f, 0x5f, 0x35, 0x3e, 0xf9, 0x7c, 0xd5, 0xf8, 0xdb, 0xe7, 0xab,
	0xc6, 0x8f, 0xbe, 0x58, 0x3d, 0xf6, 0xc9, 0x17, 0xab, 0xc7, 0xfe, 0xf2, 0xc5, 0xea, 0xb1, 0x0f,
	0x5e, 0xf5, 0x7c, 0xd6, 0xe9, 0xb5, 0x6e, 0x38, 0x38, 0x58, 0x8f, 0x08, 0x76, 0x7b, 0x0e, 0xa3,
	0x8e, 0x9f, 0xf9, 0x53, 0xf4, 0xe4, 0xdf, 0x74, 0xb3, 0x7e, 0x84, 0x68, 0x6b, 0x52, 0xfc, 0x59,
	0xfa, 0xcb, 0xff, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x91, 0x05, 0x9f, 0xcd, 0x01, 0x30, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	StartInference(ctx context.Context, in *MsgStartInference, opts ...grpc.CallOption) (*MsgStartInferenceResponse, error)
	FinishInference(ctx context.Context, in *MsgFinishInference, opts ...grpc.CallOption) (*MsgFinishInferenceResponse, error)
	SubmitNewParticipant(ctx context.Context, in *MsgSubmitNewParticipant, opts ...grpc.CallOption) (*MsgSubmitNewParticipantResponse, error)
	Validation(ctx context.Context, in *MsgValidation, opts ...grpc.CallOption) (*MsgValidationResponse, error)
	SubmitNewUnfundedParticipant(ctx context.Context, in *MsgSubmitNewUnfundedParticipant, opts ...grpc.CallOption) (*MsgSubmitNewUnfundedParticipantResponse, error)
	InvalidateInference(ctx context.Context, in *MsgInvalidateInference, opts ...grpc.CallOption) (*MsgInvalidateInferenceResponse, error)
	RevalidateInference(ctx context.Context, in *MsgRevalidateInference, opts ...grpc.CallOption) (*MsgRevalidateInferenceResponse, error)
	ClaimRewards(ctx context.Context, in *MsgClaimRewards, opts ...grpc.CallOption) (*MsgClaimRewardsResponse, error)
	SubmitPocBatch(ctx context.Context, in *MsgSubmitPocBatch, opts ...grpc.CallOption) (*MsgSubmitPocBatchResponse, error)
	SubmitPocValidation(ctx context.Context, in *MsgSubmitPocValidation, opts ...grpc.CallOption) (*MsgSubmitPocValidationResponse, error)
	SubmitSeed(ctx context.Context, in *MsgSubmitSeed, opts ...grpc.CallOption) (*MsgSubmitSeedResponse, error)
	SubmitUnitOfComputePriceProposal(ctx context.Context, in *MsgSubmitUnitOfComputePriceProposal, opts ...grpc.CallOption) (*MsgSubmitUnitOfComputePriceProposalResponse, error)
	RegisterModel(ctx context.Context, in *MsgRegisterModel, opts ...grpc.CallOption) (*MsgRegisterModelResponse, error)
	CreateTrainingTask(ctx context.Context, in *MsgCreateTrainingTask, opts ...grpc.CallOption) (*MsgCreateTrainingTaskResponse, error)
	SubmitHardwareDiff(ctx context.Context, in *MsgSubmitHardwareDiff, opts ...grpc.CallOption) (*MsgSubmitHardwareDiffResponse, error)
	CreatePartialUpgrade(ctx context.Context, in *MsgCreatePartialUpgrade, opts ...grpc.CallOption) (*MsgCreatePartialUpgradeResponse, error)
	ClaimTrainingTaskForAssignment(ctx context.Context, in *MsgClaimTrainingTaskForAssignment, opts ...grpc.CallOption) (*MsgClaimTrainingTaskForAssignmentResponse, error)
	AssignTrainingTask(ctx context.Context, in *MsgAssignTrainingTask, opts ...grpc.CallOption) (*MsgAssignTrainingTaskResponse, error)
	SubmitTrainingKvRecord(ctx context.Context, in *MsgSubmitTrainingKvRecord, opts ...grpc.CallOption) (*MsgSubmitTrainingKvRecordResponse, error)
	JoinTraining(ctx context.Context, in *MsgJoinTraining, opts ...grpc.CallOption) (*MsgJoinTrainingResponse, error)
	TrainingHeartbeat(ctx context.Context, in *MsgTrainingHeartbeat, opts ...grpc.CallOption) (*MsgTrainingHeartbeatResponse, error)
	SetBarrier(ctx context.Context, in *MsgSetBarrier, opts ...grpc.CallOption) (*MsgSetBarrierResponse, error)
	JoinTrainingStatus(ctx context.Context, in *MsgJoinTrainingStatus, opts ...grpc.CallOption) (*MsgJoinTrainingStatusResponse, error)
	CreateDummyTrainingTask(ctx context.Context, in *MsgCreateDummyTrainingTask, opts ...grpc.CallOption) (*MsgCreateDummyTrainingTaskResponse, error)
	BridgeExchange(ctx context.Context, in *MsgBridgeExchange, opts ...grpc.CallOption) (*MsgBridgeExchangeResponse, error)
	RegisterBridgeAddresses(ctx context.Context, in *MsgRegisterBridgeAddresses, opts ...grpc.CallOption) (*MsgRegisterBridgeAddressesResponse, error)
	RegisterLiquidityPool(ctx context.Context, in *MsgRegisterLiquidityPool, opts ...grpc.CallOption) (*MsgRegisterLiquidityPoolResponse, error)
	RegisterTokenMetadata(ctx context.Context, in *MsgRegisterTokenMetadata, opts ...grpc.CallOption) (*MsgRegisterTokenMetadataResponse, error)
	ApproveBridgeTokenForTrading(ctx context.Context, in *MsgApproveBridgeTokenForTrading, opts ...grpc.CallOption) (*MsgApproveBridgeTokenForTradingResponse, error)
	RequestBridgeWithdrawal(ctx context.Context, in *MsgRequestBridgeWithdrawal, opts ...grpc.CallOption) (*MsgRequestBridgeWithdrawalResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) StartInference(ctx context.Context, in *MsgStartInference, opts ...grpc.CallOption) (*MsgStartInferenceResponse, error) {
	out := new(MsgStartInferenceResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Msg/StartInference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) FinishInference(ctx context.Context, in *MsgFinishInference, opts ...grpc.CallOption) (*MsgFinishInferenceResponse, error) {
	out := new(MsgFinishInferenceResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Msg/FinishInference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitNewParticipant(ctx context.Context, in *MsgSubmitNewParticipant, opts ...grpc.CallOption) (*MsgSubmitNewParticipantResponse, error) {
	out := new(MsgSubmitNewParticipantResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Msg/SubmitNewParticipant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Validation(ctx context.Context, in *MsgValidation, opts ...grpc.CallOption) (*MsgValidationResponse, error) {
	out := new(MsgValidationResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Msg/Validation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitNewUnfundedParticipant(ctx context.Context, in *MsgSubmitNewUnfundedParticipant, opts ...grpc.CallOption) (*MsgSubmitNewUnfundedParticipantResponse, error) {
	out := new(MsgSubmitNewUnfundedParticipantResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Msg/SubmitNewUnfundedParticipant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) InvalidateInference(ctx context.Context, in *MsgInvalidateInference, opts ...grpc.CallOption) (*MsgInvalidateInferenceResponse, error) {
	out := new(MsgInvalidateInferenceResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Msg/InvalidateInference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RevalidateInference(ctx context.Context, in *MsgRevalidateInference, opts ...grpc.CallOption) (*MsgRevalidateInferenceResponse, error) {
	out := new(MsgRevalidateInferenceResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Msg/RevalidateInference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClaimRewards(ctx context.Context, in *MsgClaimRewards, opts ...grpc.CallOption) (*MsgClaimRewardsResponse, error) {
	out := new(MsgClaimRewardsResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Msg/ClaimRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitPocBatch(ctx context.Context, in *MsgSubmitPocBatch, opts ...grpc.CallOption) (*MsgSubmitPocBatchResponse, error) {
	out := new(MsgSubmitPocBatchResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Msg/SubmitPocBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitPocValidation(ctx context.Context, in *MsgSubmitPocValidation, opts ...grpc.CallOption) (*MsgSubmitPocValidationResponse, error) {
	out := new(MsgSubmitPocValidationResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Msg/SubmitPocValidation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitSeed(ctx context.Context, in *MsgSubmitSeed, opts ...grpc.CallOption) (*MsgSubmitSeedResponse, error) {
	out := new(MsgSubmitSeedResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Msg/SubmitSeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitUnitOfComputePriceProposal(ctx context.Context, in *MsgSubmitUnitOfComputePriceProposal, opts ...grpc.CallOption) (*MsgSubmitUnitOfComputePriceProposalResponse, error) {
	out := new(MsgSubmitUnitOfComputePriceProposalResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Msg/SubmitUnitOfComputePriceProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterModel(ctx context.Context, in *MsgRegisterModel, opts ...grpc.CallOption) (*MsgRegisterModelResponse, error) {
	out := new(MsgRegisterModelResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Msg/RegisterModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateTrainingTask(ctx context.Context, in *MsgCreateTrainingTask, opts ...grpc.CallOption) (*MsgCreateTrainingTaskResponse, error) {
	out := new(MsgCreateTrainingTaskResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Msg/CreateTrainingTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitHardwareDiff(ctx context.Context, in *MsgSubmitHardwareDiff, opts ...grpc.CallOption) (*MsgSubmitHardwareDiffResponse, error) {
	out := new(MsgSubmitHardwareDiffResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Msg/SubmitHardwareDiff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreatePartialUpgrade(ctx context.Context, in *MsgCreatePartialUpgrade, opts ...grpc.CallOption) (*MsgCreatePartialUpgradeResponse, error) {
	out := new(MsgCreatePartialUpgradeResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Msg/CreatePartialUpgrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClaimTrainingTaskForAssignment(ctx context.Context, in *MsgClaimTrainingTaskForAssignment, opts ...grpc.CallOption) (*MsgClaimTrainingTaskForAssignmentResponse, error) {
	out := new(MsgClaimTrainingTaskForAssignmentResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Msg/ClaimTrainingTaskForAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AssignTrainingTask(ctx context.Context, in *MsgAssignTrainingTask, opts ...grpc.CallOption) (*MsgAssignTrainingTaskResponse, error) {
	out := new(MsgAssignTrainingTaskResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Msg/AssignTrainingTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitTrainingKvRecord(ctx context.Context, in *MsgSubmitTrainingKvRecord, opts ...grpc.CallOption) (*MsgSubmitTrainingKvRecordResponse, error) {
	out := new(MsgSubmitTrainingKvRecordResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Msg/SubmitTrainingKvRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) JoinTraining(ctx context.Context, in *MsgJoinTraining, opts ...grpc.CallOption) (*MsgJoinTrainingResponse, error) {
	out := new(MsgJoinTrainingResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Msg/JoinTraining", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TrainingHeartbeat(ctx context.Context, in *MsgTrainingHeartbeat, opts ...grpc.CallOption) (*MsgTrainingHeartbeatResponse, error) {
	out := new(MsgTrainingHeartbeatResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Msg/TrainingHeartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetBarrier(ctx context.Context, in *MsgSetBarrier, opts ...grpc.CallOption) (*MsgSetBarrierResponse, error) {
	out := new(MsgSetBarrierResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Msg/SetBarrier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) JoinTrainingStatus(ctx context.Context, in *MsgJoinTrainingStatus, opts ...grpc.CallOption) (*MsgJoinTrainingStatusResponse, error) {
	out := new(MsgJoinTrainingStatusResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Msg/JoinTrainingStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateDummyTrainingTask(ctx context.Context, in *MsgCreateDummyTrainingTask, opts ...grpc.CallOption) (*MsgCreateDummyTrainingTaskResponse, error) {
	out := new(MsgCreateDummyTrainingTaskResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Msg/CreateDummyTrainingTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BridgeExchange(ctx context.Context, in *MsgBridgeExchange, opts ...grpc.CallOption) (*MsgBridgeExchangeResponse, error) {
	out := new(MsgBridgeExchangeResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Msg/BridgeExchange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterBridgeAddresses(ctx context.Context, in *MsgRegisterBridgeAddresses, opts ...grpc.CallOption) (*MsgRegisterBridgeAddressesResponse, error) {
	out := new(MsgRegisterBridgeAddressesResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Msg/RegisterBridgeAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterLiquidityPool(ctx context.Context, in *MsgRegisterLiquidityPool, opts ...grpc.CallOption) (*MsgRegisterLiquidityPoolResponse, error) {
	out := new(MsgRegisterLiquidityPoolResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Msg/RegisterLiquidityPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterTokenMetadata(ctx context.Context, in *MsgRegisterTokenMetadata, opts ...grpc.CallOption) (*MsgRegisterTokenMetadataResponse, error) {
	out := new(MsgRegisterTokenMetadataResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Msg/RegisterTokenMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ApproveBridgeTokenForTrading(ctx context.Context, in *MsgApproveBridgeTokenForTrading, opts ...grpc.CallOption) (*MsgApproveBridgeTokenForTradingResponse, error) {
	out := new(MsgApproveBridgeTokenForTradingResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Msg/ApproveBridgeTokenForTrading", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RequestBridgeWithdrawal(ctx context.Context, in *MsgRequestBridgeWithdrawal, opts ...grpc.CallOption) (*MsgRequestBridgeWithdrawalResponse, error) {
	out := new(MsgRequestBridgeWithdrawalResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Msg/RequestBridgeWithdrawal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	StartInference(context.Context, *MsgStartInference) (*MsgStartInferenceResponse, error)
	FinishInference(context.Context, *MsgFinishInference) (*MsgFinishInferenceResponse, error)
	SubmitNewParticipant(context.Context, *MsgSubmitNewParticipant) (*MsgSubmitNewParticipantResponse, error)
	Validation(context.Context, *MsgValidation) (*MsgValidationResponse, error)
	SubmitNewUnfundedParticipant(context.Context, *MsgSubmitNewUnfundedParticipant) (*MsgSubmitNewUnfundedParticipantResponse, error)
	InvalidateInference(context.Context, *MsgInvalidateInference) (*MsgInvalidateInferenceResponse, error)
	RevalidateInference(context.Context, *MsgRevalidateInference) (*MsgRevalidateInferenceResponse, error)
	ClaimRewards(context.Context, *MsgClaimRewards) (*MsgClaimRewardsResponse, error)
	SubmitPocBatch(context.Context, *MsgSubmitPocBatch) (*MsgSubmitPocBatchResponse, error)
	SubmitPocValidation(context.Context, *MsgSubmitPocValidation) (*MsgSubmitPocValidationResponse, error)
	SubmitSeed(context.Context, *MsgSubmitSeed) (*MsgSubmitSeedResponse, error)
	SubmitUnitOfComputePriceProposal(context.Context, *MsgSubmitUnitOfComputePriceProposal) (*MsgSubmitUnitOfComputePriceProposalResponse, error)
	RegisterModel(context.Context, *MsgRegisterModel) (*MsgRegisterModelResponse, error)
	CreateTrainingTask(context.Context, *MsgCreateTrainingTask) (*MsgCreateTrainingTaskResponse, error)
	SubmitHardwareDiff(context.Context, *MsgSubmitHardwareDiff) (*MsgSubmitHardwareDiffResponse, error)
	CreatePartialUpgrade(context.Context, *MsgCreatePartialUpgrade) (*MsgCreatePartialUpgradeResponse, error)
	ClaimTrainingTaskForAssignment(context.Context, *MsgClaimTrainingTaskForAssignment) (*MsgClaimTrainingTaskForAssignmentResponse, error)
	AssignTrainingTask(context.Context, *MsgAssignTrainingTask) (*MsgAssignTrainingTaskResponse, error)
	SubmitTrainingKvRecord(context.Context, *MsgSubmitTrainingKvRecord) (*MsgSubmitTrainingKvRecordResponse, error)
	JoinTraining(context.Context, *MsgJoinTraining) (*MsgJoinTrainingResponse, error)
	TrainingHeartbeat(context.Context, *MsgTrainingHeartbeat) (*MsgTrainingHeartbeatResponse, error)
	SetBarrier(context.Context, *MsgSetBarrier) (*MsgSetBarrierResponse, error)
	JoinTrainingStatus(context.Context, *MsgJoinTrainingStatus) (*MsgJoinTrainingStatusResponse, error)
	CreateDummyTrainingTask(context.Context, *MsgCreateDummyTrainingTask) (*MsgCreateDummyTrainingTaskResponse, error)
	BridgeExchange(context.Context, *MsgBridgeExchange) (*MsgBridgeExchangeResponse, error)
	RegisterBridgeAddresses(context.Context, *MsgRegisterBridgeAddresses) (*MsgRegisterBridgeAddressesResponse, error)
	RegisterLiquidityPool(context.Context, *MsgRegisterLiquidityPool) (*MsgRegisterLiquidityPoolResponse, error)
	RegisterTokenMetadata(context.Context, *MsgRegisterTokenMetadata) (*MsgRegisterTokenMetadataResponse, error)
	ApproveBridgeTokenForTrading(context.Context, *MsgApproveBridgeTokenForTrading) (*MsgApproveBridgeTokenForTradingResponse, error)
	RequestBridgeWithdrawal(context.Context, *MsgRequestBridgeWithdrawal) (*MsgRequestBridgeWithdrawalResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (*UnimplementedMsgServer) StartInference(ctx context.Context, req *MsgStartInference) (*MsgStartInferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartInference not implemented")
}
func (*UnimplementedMsgServer) FinishInference(ctx context.Context, req *MsgFinishInference) (*MsgFinishInferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishInference not implemented")
}
func (*UnimplementedMsgServer) SubmitNewParticipant(ctx context.Context, req *MsgSubmitNewParticipant) (*MsgSubmitNewParticipantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitNewParticipant not implemented")
}
func (*UnimplementedMsgServer) Validation(ctx context.Context, req *MsgValidation) (*MsgValidationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validation not implemented")
}
func (*UnimplementedMsgServer) SubmitNewUnfundedParticipant(ctx context.Context, req *MsgSubmitNewUnfundedParticipant) (*MsgSubmitNewUnfundedParticipantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitNewUnfundedParticipant not implemented")
}
func (*UnimplementedMsgServer) InvalidateInference(ctx context.Context, req *MsgInvalidateInference) (*MsgInvalidateInferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateInference not implemented")
}
func (*UnimplementedMsgServer) RevalidateInference(ctx context.Context, req *MsgRevalidateInference) (*MsgRevalidateInferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevalidateInference not implemented")
}
func (*UnimplementedMsgServer) ClaimRewards(ctx context.Context, req *MsgClaimRewards) (*MsgClaimRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimRewards not implemented")
}
func (*UnimplementedMsgServer) SubmitPocBatch(ctx context.Context, req *MsgSubmitPocBatch) (*MsgSubmitPocBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitPocBatch not implemented")
}
func (*UnimplementedMsgServer) SubmitPocValidation(ctx context.Context, req *MsgSubmitPocValidation) (*MsgSubmitPocValidationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitPocValidation not implemented")
}
func (*UnimplementedMsgServer) SubmitSeed(ctx context.Context, req *MsgSubmitSeed) (*MsgSubmitSeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitSeed not implemented")
}
func (*UnimplementedMsgServer) SubmitUnitOfComputePriceProposal(ctx context.Context, req *MsgSubmitUnitOfComputePriceProposal) (*MsgSubmitUnitOfComputePriceProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitUnitOfComputePriceProposal not implemented")
}
func (*UnimplementedMsgServer) RegisterModel(ctx context.Context, req *MsgRegisterModel) (*MsgRegisterModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterModel not implemented")
}
func (*UnimplementedMsgServer) CreateTrainingTask(ctx context.Context, req *MsgCreateTrainingTask) (*MsgCreateTrainingTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTrainingTask not implemented")
}
func (*UnimplementedMsgServer) SubmitHardwareDiff(ctx context.Context, req *MsgSubmitHardwareDiff) (*MsgSubmitHardwareDiffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitHardwareDiff not implemented")
}
func (*UnimplementedMsgServer) CreatePartialUpgrade(ctx context.Context, req *MsgCreatePartialUpgrade) (*MsgCreatePartialUpgradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePartialUpgrade not implemented")
}
func (*UnimplementedMsgServer) ClaimTrainingTaskForAssignment(ctx context.Context, req *MsgClaimTrainingTaskForAssignment) (*MsgClaimTrainingTaskForAssignmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimTrainingTaskForAssignment not implemented")
}
func (*UnimplementedMsgServer) AssignTrainingTask(ctx context.Context, req *MsgAssignTrainingTask) (*MsgAssignTrainingTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignTrainingTask not implemented")
}
func (*UnimplementedMsgServer) SubmitTrainingKvRecord(ctx context.Context, req *MsgSubmitTrainingKvRecord) (*MsgSubmitTrainingKvRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTrainingKvRecord not implemented")
}
func (*UnimplementedMsgServer) JoinTraining(ctx context.Context, req *MsgJoinTraining) (*MsgJoinTrainingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinTraining not implemented")
}
func (*UnimplementedMsgServer) TrainingHeartbeat(ctx context.Context, req *MsgTrainingHeartbeat) (*MsgTrainingHeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrainingHeartbeat not implemented")
}
func (*UnimplementedMsgServer) SetBarrier(ctx context.Context, req *MsgSetBarrier) (*MsgSetBarrierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBarrier not implemented")
}
func (*UnimplementedMsgServer) JoinTrainingStatus(ctx context.Context, req *MsgJoinTrainingStatus) (*MsgJoinTrainingStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinTrainingStatus not implemented")
}
func (*UnimplementedMsgServer) CreateDummyTrainingTask(ctx context.Context, req *MsgCreateDummyTrainingTask) (*MsgCreateDummyTrainingTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDummyTrainingTask not implemented")
}
func (*UnimplementedMsgServer) BridgeExchange(ctx context.Context, req *MsgBridgeExchange) (*MsgBridgeExchangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BridgeExchange not implemented")
}
func (*UnimplementedMsgServer) RegisterBridgeAddresses(ctx context.Context, req *MsgRegisterBridgeAddresses) (*MsgRegisterBridgeAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterBridgeAddresses not implemented")
}
func (*UnimplementedMsgServer) RegisterLiquidityPool(ctx context.Context, req *MsgRegisterLiquidityPool) (*MsgRegisterLiquidityPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterLiquidityPool not implemented")
}
func (*UnimplementedMsgServer) RegisterTokenMetadata(ctx context.Context, req *MsgRegisterTokenMetadata) (*MsgRegisterTokenMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterTokenMetadata not implemented")
}
func (*UnimplementedMsgServer) ApproveBridgeTokenForTrading(ctx context.Context, req *MsgApproveBridgeTokenForTrading) (*MsgApproveBridgeTokenForTradingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveBridgeTokenForTrading not implemented")
}
func (*UnimplementedMsgServer) RequestBridgeWithdrawal(ctx context.Context, req *MsgRequestBridgeWithdrawal) (*MsgRequestBridgeWithdrawalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestBridgeWithdrawal not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_StartInference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStartInference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).StartInference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Msg/StartInference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).StartInference(ctx, req.(*MsgStartInference))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_FinishInference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFinishInference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).FinishInference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Msg/FinishInference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).FinishInference(ctx, req.(*MsgFinishInference))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitNewParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitNewParticipant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitNewParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Msg/SubmitNewParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitNewParticipant(ctx, req.(*MsgSubmitNewParticipant))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Validation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgValidation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Validation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Msg/Validation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Validation(ctx, req.(*MsgValidation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitNewUnfundedParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitNewUnfundedParticipant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitNewUnfundedParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Msg/SubmitNewUnfundedParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitNewUnfundedParticipant(ctx, req.(*MsgSubmitNewUnfundedParticipant))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_InvalidateInference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgInvalidateInference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).InvalidateInference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Msg/InvalidateInference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).InvalidateInference(ctx, req.(*MsgInvalidateInference))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RevalidateInference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRevalidateInference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RevalidateInference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Msg/RevalidateInference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RevalidateInference(ctx, req.(*MsgRevalidateInference))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClaimRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaimRewards)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClaimRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Msg/ClaimRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClaimRewards(ctx, req.(*MsgClaimRewards))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitPocBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitPocBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitPocBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Msg/SubmitPocBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitPocBatch(ctx, req.(*MsgSubmitPocBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitPocValidation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitPocValidation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitPocValidation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Msg/SubmitPocValidation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitPocValidation(ctx, req.(*MsgSubmitPocValidation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitSeed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Msg/SubmitSeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitSeed(ctx, req.(*MsgSubmitSeed))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitUnitOfComputePriceProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitUnitOfComputePriceProposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitUnitOfComputePriceProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Msg/SubmitUnitOfComputePriceProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitUnitOfComputePriceProposal(ctx, req.(*MsgSubmitUnitOfComputePriceProposal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Msg/RegisterModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterModel(ctx, req.(*MsgRegisterModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateTrainingTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateTrainingTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateTrainingTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Msg/CreateTrainingTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateTrainingTask(ctx, req.(*MsgCreateTrainingTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitHardwareDiff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitHardwareDiff)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitHardwareDiff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Msg/SubmitHardwareDiff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitHardwareDiff(ctx, req.(*MsgSubmitHardwareDiff))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreatePartialUpgrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreatePartialUpgrade)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreatePartialUpgrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Msg/CreatePartialUpgrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreatePartialUpgrade(ctx, req.(*MsgCreatePartialUpgrade))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClaimTrainingTaskForAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaimTrainingTaskForAssignment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClaimTrainingTaskForAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Msg/ClaimTrainingTaskForAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClaimTrainingTaskForAssignment(ctx, req.(*MsgClaimTrainingTaskForAssignment))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AssignTrainingTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAssignTrainingTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AssignTrainingTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Msg/AssignTrainingTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AssignTrainingTask(ctx, req.(*MsgAssignTrainingTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitTrainingKvRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitTrainingKvRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitTrainingKvRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Msg/SubmitTrainingKvRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitTrainingKvRecord(ctx, req.(*MsgSubmitTrainingKvRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_JoinTraining_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgJoinTraining)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).JoinTraining(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Msg/JoinTraining",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).JoinTraining(ctx, req.(*MsgJoinTraining))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TrainingHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTrainingHeartbeat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TrainingHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Msg/TrainingHeartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TrainingHeartbeat(ctx, req.(*MsgTrainingHeartbeat))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetBarrier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetBarrier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetBarrier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Msg/SetBarrier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetBarrier(ctx, req.(*MsgSetBarrier))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_JoinTrainingStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgJoinTrainingStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).JoinTrainingStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Msg/JoinTrainingStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).JoinTrainingStatus(ctx, req.(*MsgJoinTrainingStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateDummyTrainingTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateDummyTrainingTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateDummyTrainingTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Msg/CreateDummyTrainingTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateDummyTrainingTask(ctx, req.(*MsgCreateDummyTrainingTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BridgeExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBridgeExchange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BridgeExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Msg/BridgeExchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BridgeExchange(ctx, req.(*MsgBridgeExchange))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterBridgeAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterBridgeAddresses)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterBridgeAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Msg/RegisterBridgeAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterBridgeAddresses(ctx, req.(*MsgRegisterBridgeAddresses))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterLiquidityPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterLiquidityPool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterLiquidityPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Msg/RegisterLiquidityPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterLiquidityPool(ctx, req.(*MsgRegisterLiquidityPool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterTokenMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterTokenMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterTokenMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Msg/RegisterTokenMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterTokenMetadata(ctx, req.(*MsgRegisterTokenMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ApproveBridgeTokenForTrading_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgApproveBridgeTokenForTrading)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ApproveBridgeTokenForTrading(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Msg/ApproveBridgeTokenForTrading",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ApproveBridgeTokenForTrading(ctx, req.(*MsgApproveBridgeTokenForTrading))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RequestBridgeWithdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRequestBridgeWithdrawal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RequestBridgeWithdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Msg/RequestBridgeWithdrawal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RequestBridgeWithdrawal(ctx, req.(*MsgRequestBridgeWithdrawal))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "inference.inference.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "StartInference",
			Handler:    _Msg_StartInference_Handler,
		},
		{
			MethodName: "FinishInference",
			Handler:    _Msg_FinishInference_Handler,
		},
		{
			MethodName: "SubmitNewParticipant",
			Handler:    _Msg_SubmitNewParticipant_Handler,
		},
		{
			MethodName: "Validation",
			Handler:    _Msg_Validation_Handler,
		},
		{
			MethodName: "SubmitNewUnfundedParticipant",
			Handler:    _Msg_SubmitNewUnfundedParticipant_Handler,
		},
		{
			MethodName: "InvalidateInference",
			Handler:    _Msg_InvalidateInference_Handler,
		},
		{
			MethodName: "RevalidateInference",
			Handler:    _Msg_RevalidateInference_Handler,
		},
		{
			MethodName: "ClaimRewards",
			Handler:    _Msg_ClaimRewards_Handler,
		},
		{
			MethodName: "SubmitPocBatch",
			Handler:    _Msg_SubmitPocBatch_Handler,
		},
		{
			MethodName: "SubmitPocValidation",
			Handler:    _Msg_SubmitPocValidation_Handler,
		},
		{
			MethodName: "SubmitSeed",
			Handler:    _Msg_SubmitSeed_Handler,
		},
		{
			MethodName: "SubmitUnitOfComputePriceProposal",
			Handler:    _Msg_SubmitUnitOfComputePriceProposal_Handler,
		},
		{
			MethodName: "RegisterModel",
			Handler:    _Msg_RegisterModel_Handler,
		},
		{
			MethodName: "CreateTrainingTask",
			Handler:    _Msg_CreateTrainingTask_Handler,
		},
		{
			MethodName: "SubmitHardwareDiff",
			Handler:    _Msg_SubmitHardwareDiff_Handler,
		},
		{
			MethodName: "CreatePartialUpgrade",
			Handler:    _Msg_CreatePartialUpgrade_Handler,
		},
		{
			MethodName: "ClaimTrainingTaskForAssignment",
			Handler:    _Msg_ClaimTrainingTaskForAssignment_Handler,
		},
		{
			MethodName: "AssignTrainingTask",
			Handler:    _Msg_AssignTrainingTask_Handler,
		},
		{
			MethodName: "SubmitTrainingKvRecord",
			Handler:    _Msg_SubmitTrainingKvRecord_Handler,
		},
		{
			MethodName: "JoinTraining",
			Handler:    _Msg_JoinTraining_Handler,
		},
		{
			MethodName: "TrainingHeartbeat",
			Handler:    _Msg_TrainingHeartbeat_Handler,
		},
		{
			MethodName: "SetBarrier",
			Handler:    _Msg_SetBarrier_Handler,
		},
		{
			MethodName: "JoinTrainingStatus",
			Handler:    _Msg_JoinTrainingStatus_Handler,
		},
		{
			MethodName: "CreateDummyTrainingTask",
			Handler:    _Msg_CreateDummyTrainingTask_Handler,
		},
		{
			MethodName: "BridgeExchange",
			Handler:    _Msg_BridgeExchange_Handler,
		},
		{
			MethodName: "RegisterBridgeAddresses",
			Handler:    _Msg_RegisterBridgeAddresses_Handler,
		},
		{
			MethodName: "RegisterLiquidityPool",
			Handler:    _Msg_RegisterLiquidityPool_Handler,
		},
		{
			MethodName: "RegisterTokenMetadata",
			Handler:    _Msg_RegisterTokenMetadata_Handler,
		},
		{
			MethodName: "ApproveBridgeTokenForTrading",
			Handler:    _Msg_ApproveBridgeTokenForTrading_Handler,
		},
		{
			MethodName: "RequestBridgeWithdrawal",
			Handler:    _Msg_RequestBridgeWithdrawal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inference/inference/tx.proto",
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgStartInference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStartInference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStartInference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OriginalPrompt) > 0 {
		i -= len(m.OriginalPrompt)
		copy(dAtA[i:], m.OriginalPrompt)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OriginalPrompt)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.TransferSignature) > 0 {
		i -= len(m.TransferSignature)
		copy(dAtA[i:], m.TransferSignature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TransferSignature)))
		i--
		dAtA[i] = 0x72
	}
	if m.RequestTimestamp != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.RequestTimestamp))
		i--
		dAtA[i] = 0x60
	}
	if m.PromptTokenCount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PromptTokenCount))
		i--
		dAtA[i] = 0x58
	}
	if m.MaxTokens != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MaxTokens))
		i--
		dAtA[i] = 0x50
	}
	if len(m.NodeVersion) > 0 {
		i -= len(m.NodeVersion)
		copy(dAtA[i:], m.NodeVersion)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NodeVersion)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.AssignedTo) > 0 {
		i -= len(m.AssignedTo)
		copy(dAtA[i:], m.AssignedTo)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AssignedTo)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.RequestedBy) > 0 {
		i -= len(m.RequestedBy)
		copy(dAtA[i:], m.RequestedBy)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RequestedBy)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Model) > 0 {
		i -= len(m.Model)
		copy(dAtA[i:], m.Model)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Model)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PromptPayload) > 0 {
		i -= len(m.PromptPayload)
		copy(dAtA[i:], m.PromptPayload)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PromptPayload)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PromptHash) > 0 {
		i -= len(m.PromptHash)
		copy(dAtA[i:], m.PromptHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PromptHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.InferenceId) > 0 {
		i -= len(m.InferenceId)
		copy(dAtA[i:], m.InferenceId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.InferenceId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgStartInferenceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStartInferenceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStartInferenceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InferenceIndex) > 0 {
		i -= len(m.InferenceIndex)
		copy(dAtA[i:], m.InferenceIndex)
		i = encodeVarintTx(dAtA, i, uint64(len(m.InferenceIndex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgFinishInference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFinishInference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFinishInference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Model) > 0 {
		i -= len(m.Model)
		copy(dAtA[i:], m.Model)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Model)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.OriginalPrompt) > 0 {
		i -= len(m.OriginalPrompt)
		copy(dAtA[i:], m.OriginalPrompt)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OriginalPrompt)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.RequestedBy) > 0 {
		i -= len(m.RequestedBy)
		copy(dAtA[i:], m.RequestedBy)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RequestedBy)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.ExecutorSignature) > 0 {
		i -= len(m.ExecutorSignature)
		copy(dAtA[i:], m.ExecutorSignature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ExecutorSignature)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.TransferSignature) > 0 {
		i -= len(m.TransferSignature)
		copy(dAtA[i:], m.TransferSignature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TransferSignature)))
		i--
		dAtA[i] = 0x52
	}
	if m.RequestTimestamp != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.RequestTimestamp))
		i--
		dAtA[i] = 0x48
	}
	if len(m.TransferredBy) > 0 {
		i -= len(m.TransferredBy)
		copy(dAtA[i:], m.TransferredBy)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TransferredBy)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ExecutedBy) > 0 {
		i -= len(m.ExecutedBy)
		copy(dAtA[i:], m.ExecutedBy)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ExecutedBy)))
		i--
		dAtA[i] = 0x3a
	}
	if m.CompletionTokenCount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CompletionTokenCount))
		i--
		dAtA[i] = 0x30
	}
	if m.PromptTokenCount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PromptTokenCount))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ResponsePayload) > 0 {
		i -= len(m.ResponsePayload)
		copy(dAtA[i:], m.ResponsePayload)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ResponsePayload)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ResponseHash) > 0 {
		i -= len(m.ResponseHash)
		copy(dAtA[i:], m.ResponseHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ResponseHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.InferenceId) > 0 {
		i -= len(m.InferenceId)
		copy(dAtA[i:], m.InferenceId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.InferenceId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgFinishInferenceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFinishInferenceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFinishInferenceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InferenceIndex) > 0 {
		i -= len(m.InferenceIndex)
		copy(dAtA[i:], m.InferenceIndex)
		i = encodeVarintTx(dAtA, i, uint64(len(m.InferenceIndex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitNewParticipant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitNewParticipant) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitNewParticipant) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WorkerKey) > 0 {
		i -= len(m.WorkerKey)
		copy(dAtA[i:], m.WorkerKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.WorkerKey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ValidatorKey) > 0 {
		i -= len(m.ValidatorKey)
		copy(dAtA[i:], m.ValidatorKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValidatorKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitNewParticipantResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitNewParticipantResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitNewParticipantResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ParticipantIndex) > 0 {
		i -= len(m.ParticipantIndex)
		copy(dAtA[i:], m.ParticipantIndex)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ParticipantIndex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgValidation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgValidation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgValidation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Revalidation {
		i--
		if m.Revalidation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.Value != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Value))))
		i--
		dAtA[i] = 0x31
	}
	if len(m.ResponseHash) > 0 {
		i -= len(m.ResponseHash)
		copy(dAtA[i:], m.ResponseHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ResponseHash)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ResponsePayload) > 0 {
		i -= len(m.ResponsePayload)
		copy(dAtA[i:], m.ResponsePayload)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ResponsePayload)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.InferenceId) > 0 {
		i -= len(m.InferenceId)
		copy(dAtA[i:], m.InferenceId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.InferenceId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgValidationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgValidationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgValidationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitNewUnfundedParticipant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitNewUnfundedParticipant) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitNewUnfundedParticipant) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WorkerKey) > 0 {
		i -= len(m.WorkerKey)
		copy(dAtA[i:], m.WorkerKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.WorkerKey)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ValidatorKey) > 0 {
		i -= len(m.ValidatorKey)
		copy(dAtA[i:], m.ValidatorKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValidatorKey)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitNewUnfundedParticipantResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitNewUnfundedParticipantResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitNewUnfundedParticipantResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgInvalidateInference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInvalidateInference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInvalidateInference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InferenceId) > 0 {
		i -= len(m.InferenceId)
		copy(dAtA[i:], m.InferenceId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.InferenceId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgInvalidateInferenceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInvalidateInferenceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInvalidateInferenceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRevalidateInference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRevalidateInference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRevalidateInference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InferenceId) > 0 {
		i -= len(m.InferenceId)
		copy(dAtA[i:], m.InferenceId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.InferenceId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRevalidateInferenceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRevalidateInferenceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRevalidateInferenceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgClaimRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PocStartHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PocStartHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.Seed != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Seed))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0x12
	}
	if m.Amount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitPocBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitPocBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitPocBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Dist) > 0 {
		for iNdEx := len(m.Dist) - 1; iNdEx >= 0; iNdEx-- {
			f2 := math.Float64bits(float64(m.Dist[iNdEx]))
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f2))
		}
		i = encodeVarintTx(dAtA, i, uint64(len(m.Dist)*8))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Nonces) > 0 {
		dAtA4 := make([]byte, len(m.Nonces)*10)
		var j3 int
		for _, num1 := range m.Nonces {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintTx(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x22
	}
	if len(m.BatchId) > 0 {
		i -= len(m.BatchId)
		copy(dAtA[i:], m.BatchId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BatchId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PocStageStartBlockHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PocStageStartBlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitPocBatchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitPocBatchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitPocBatchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitPocValidation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitPocValidation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitPocValidation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FraudDetected {
		i--
		if m.FraudDetected {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.ProbabilityHonest != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ProbabilityHonest))))
		i--
		dAtA[i] = 0x51
	}
	if m.NInvalid != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.NInvalid))
		i--
		dAtA[i] = 0x48
	}
	if m.FraudThreshold != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.FraudThreshold))))
		i--
		dAtA[i] = 0x41
	}
	if m.RTarget != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.RTarget))))
		i--
		dAtA[i] = 0x39
	}
	if len(m.ReceivedDist) > 0 {
		for iNdEx := len(m.ReceivedDist) - 1; iNdEx >= 0; iNdEx-- {
			f5 := math.Float64bits(float64(m.ReceivedDist[iNdEx]))
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f5))
		}
		i = encodeVarintTx(dAtA, i, uint64(len(m.ReceivedDist)*8))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Dist) > 0 {
		for iNdEx := len(m.Dist) - 1; iNdEx >= 0; iNdEx-- {
			f6 := math.Float64bits(float64(m.Dist[iNdEx]))
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f6))
		}
		i = encodeVarintTx(dAtA, i, uint64(len(m.Dist)*8))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Nonces) > 0 {
		dAtA8 := make([]byte, len(m.Nonces)*10)
		var j7 int
		for _, num1 := range m.Nonces {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintTx(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0x22
	}
	if m.PocStageStartBlockHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PocStageStartBlockHeight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ParticipantAddress) > 0 {
		i -= len(m.ParticipantAddress)
		copy(dAtA[i:], m.ParticipantAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ParticipantAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitPocValidationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitPocValidationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitPocValidationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitSeed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitSeed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitSeed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BlockHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitSeedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitSeedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitSeedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitUnitOfComputePriceProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitUnitOfComputePriceProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitUnitOfComputePriceProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Price != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Price))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitUnitOfComputePriceProposalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitUnitOfComputePriceProposalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitUnitOfComputePriceProposalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRegisterModel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterModel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterModel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ValidationThreshold != nil {
		{
			size, err := m.ValidationThreshold.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.ThroughputPerNonce != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ThroughputPerNonce))
		i--
		dAtA[i] = 0x48
	}
	if m.VRam != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.VRam))
		i--
		dAtA[i] = 0x40
	}
	if len(m.ModelArgs) > 0 {
		for iNdEx := len(m.ModelArgs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ModelArgs[iNdEx])
			copy(dAtA[i:], m.ModelArgs[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.ModelArgs[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.HfCommit) > 0 {
		i -= len(m.HfCommit)
		copy(dAtA[i:], m.HfCommit)
		i = encodeVarintTx(dAtA, i, uint64(len(m.HfCommit)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.HfRepo) > 0 {
		i -= len(m.HfRepo)
		copy(dAtA[i:], m.HfRepo)
		i = encodeVarintTx(dAtA, i, uint64(len(m.HfRepo)))
		i--
		dAtA[i] = 0x2a
	}
	if m.UnitsOfComputePerToken != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.UnitsOfComputePerToken))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ProposedBy) > 0 {
		i -= len(m.ProposedBy)
		copy(dAtA[i:], m.ProposedBy)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProposedBy)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterModelResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterModelResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterModelResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateTrainingTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateTrainingTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateTrainingTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.HardwareResources) > 0 {
		for iNdEx := len(m.HardwareResources) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HardwareResources[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateTrainingTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateTrainingTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateTrainingTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Task != nil {
		{
			size, err := m.Task.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitHardwareDiff) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitHardwareDiff) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitHardwareDiff) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Removed) > 0 {
		for iNdEx := len(m.Removed) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Removed[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.NewOrModified) > 0 {
		for iNdEx := len(m.NewOrModified) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NewOrModified[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitHardwareDiffResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitHardwareDiffResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitHardwareDiffResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgClaimTrainingTaskForAssignment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimTrainingTaskForAssignment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimTrainingTaskForAssignment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TaskId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TaskId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimTrainingTaskForAssignmentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimTrainingTaskForAssignmentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimTrainingTaskForAssignmentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAssignTrainingTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAssignTrainingTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAssignTrainingTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Assignees) > 0 {
		for iNdEx := len(m.Assignees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Assignees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.TaskId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TaskId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAssignTrainingTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAssignTrainingTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAssignTrainingTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreatePartialUpgrade) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreatePartialUpgrade) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreatePartialUpgrade) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ApiBinariesJson) > 0 {
		i -= len(m.ApiBinariesJson)
		copy(dAtA[i:], m.ApiBinariesJson)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ApiBinariesJson)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NodeVersion) > 0 {
		i -= len(m.NodeVersion)
		copy(dAtA[i:], m.NodeVersion)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NodeVersion)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Height != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreatePartialUpgradeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreatePartialUpgradeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreatePartialUpgradeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitTrainingKvRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitTrainingKvRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitTrainingKvRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Participant) > 0 {
		i -= len(m.Participant)
		copy(dAtA[i:], m.Participant)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Participant)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TaskId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TaskId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitTrainingKvRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitTrainingKvRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitTrainingKvRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgJoinTraining) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgJoinTraining) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgJoinTraining) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Req != nil {
		{
			size, err := m.Req.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgJoinTrainingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgJoinTrainingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgJoinTrainingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTrainingHeartbeat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTrainingHeartbeat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTrainingHeartbeat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Req != nil {
		{
			size, err := m.Req.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTrainingHeartbeatResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTrainingHeartbeatResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTrainingHeartbeatResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Resp != nil {
		{
			size, err := m.Resp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetBarrier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetBarrier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetBarrier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Req != nil {
		{
			size, err := m.Req.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetBarrierResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetBarrierResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetBarrierResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Resp != nil {
		{
			size, err := m.Resp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgJoinTrainingStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgJoinTrainingStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgJoinTrainingStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Req != nil {
		{
			size, err := m.Req.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgJoinTrainingStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgJoinTrainingStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgJoinTrainingStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateDummyTrainingTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateDummyTrainingTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateDummyTrainingTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Task != nil {
		{
			size, err := m.Task.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateDummyTrainingTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateDummyTrainingTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateDummyTrainingTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Task != nil {
		{
			size, err := m.Task.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBridgeExchange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBridgeExchange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBridgeExchange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReceiptsRoot) > 0 {
		i -= len(m.ReceiptsRoot)
		copy(dAtA[i:], m.ReceiptsRoot)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ReceiptsRoot)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ReceiptIndex) > 0 {
		i -= len(m.ReceiptIndex)
		copy(dAtA[i:], m.ReceiptIndex)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ReceiptIndex)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.BlockNumber) > 0 {
		i -= len(m.BlockNumber)
		copy(dAtA[i:], m.BlockNumber)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BlockNumber)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.OwnerPubKey) > 0 {
		i -= len(m.OwnerPubKey)
		copy(dAtA[i:], m.OwnerPubKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OwnerPubKey)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OriginChain) > 0 {
		i -= len(m.OriginChain)
		copy(dAtA[i:], m.OriginChain)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OriginChain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBridgeExchangeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBridgeExchangeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBridgeExchangeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterBridgeAddresses) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterBridgeAddresses) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterBridgeAddresses) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addresses[iNdEx])
			copy(dAtA[i:], m.Addresses[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Addresses[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterBridgeAddressesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterBridgeAddressesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterBridgeAddressesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRegisterTokenMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterTokenMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterTokenMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Overwrite {
		i--
		if m.Overwrite {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.Decimals != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Decimals))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterTokenMetadataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterTokenMetadataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterTokenMetadataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgApproveBridgeTokenForTrading) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgApproveBridgeTokenForTrading) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgApproveBridgeTokenForTrading) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgApproveBridgeTokenForTradingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgApproveBridgeTokenForTradingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgApproveBridgeTokenForTradingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRegisterLiquidityPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterLiquidityPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterLiquidityPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InstantiateMsg) > 0 {
		i -= len(m.InstantiateMsg)
		copy(dAtA[i:], m.InstantiateMsg)
		i = encodeVarintTx(dAtA, i, uint64(len(m.InstantiateMsg)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CodeId) > 0 {
		i -= len(m.CodeId)
		copy(dAtA[i:], m.CodeId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CodeId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterLiquidityPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterLiquidityPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterLiquidityPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRequestBridgeWithdrawal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestBridgeWithdrawal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestBridgeWithdrawal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DestinationAddress) > 0 {
		i -= len(m.DestinationAddress)
		copy(dAtA[i:], m.DestinationAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DestinationAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WrappedContractAddress) > 0 {
		i -= len(m.WrappedContractAddress)
		copy(dAtA[i:], m.WrappedContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.WrappedContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRequestBridgeWithdrawalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestBridgeWithdrawalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestBridgeWithdrawalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BlsRequestId) > 0 {
		i -= len(m.BlsRequestId)
		copy(dAtA[i:], m.BlsRequestId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BlsRequestId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.EpochId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.EpochId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgStartInference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.InferenceId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PromptHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PromptPayload)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Model)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RequestedBy)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AssignedTo)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NodeVersion)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MaxTokens != 0 {
		n += 1 + sovTx(uint64(m.MaxTokens))
	}
	if m.PromptTokenCount != 0 {
		n += 1 + sovTx(uint64(m.PromptTokenCount))
	}
	if m.RequestTimestamp != 0 {
		n += 1 + sovTx(uint64(m.RequestTimestamp))
	}
	l = len(m.TransferSignature)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OriginalPrompt)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgStartInferenceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InferenceIndex)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgFinishInference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.InferenceId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ResponseHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ResponsePayload)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PromptTokenCount != 0 {
		n += 1 + sovTx(uint64(m.PromptTokenCount))
	}
	if m.CompletionTokenCount != 0 {
		n += 1 + sovTx(uint64(m.CompletionTokenCount))
	}
	l = len(m.ExecutedBy)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TransferredBy)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.RequestTimestamp != 0 {
		n += 1 + sovTx(uint64(m.RequestTimestamp))
	}
	l = len(m.TransferSignature)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ExecutorSignature)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RequestedBy)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OriginalPrompt)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Model)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgFinishInferenceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InferenceIndex)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSubmitNewParticipant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ValidatorKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.WorkerKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSubmitNewParticipantResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ParticipantIndex)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgValidation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.InferenceId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ResponsePayload)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ResponseHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Value != 0 {
		n += 9
	}
	if m.Revalidation {
		n += 2
	}
	return n
}

func (m *MsgValidationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitNewUnfundedParticipant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ValidatorKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.WorkerKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSubmitNewUnfundedParticipantResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgInvalidateInference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.InferenceId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgInvalidateInferenceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRevalidateInference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.InferenceId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRevalidateInferenceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgClaimRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Seed != 0 {
		n += 1 + sovTx(uint64(m.Seed))
	}
	if m.PocStartHeight != 0 {
		n += 1 + sovTx(uint64(m.PocStartHeight))
	}
	return n
}

func (m *MsgClaimRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amount != 0 {
		n += 1 + sovTx(uint64(m.Amount))
	}
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSubmitPocBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PocStageStartBlockHeight != 0 {
		n += 1 + sovTx(uint64(m.PocStageStartBlockHeight))
	}
	l = len(m.BatchId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Nonces) > 0 {
		l = 0
		for _, e := range m.Nonces {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	if len(m.Dist) > 0 {
		n += 1 + sovTx(uint64(len(m.Dist)*8)) + len(m.Dist)*8
	}
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSubmitPocBatchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitPocValidation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ParticipantAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PocStageStartBlockHeight != 0 {
		n += 1 + sovTx(uint64(m.PocStageStartBlockHeight))
	}
	if len(m.Nonces) > 0 {
		l = 0
		for _, e := range m.Nonces {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	if len(m.Dist) > 0 {
		n += 1 + sovTx(uint64(len(m.Dist)*8)) + len(m.Dist)*8
	}
	if len(m.ReceivedDist) > 0 {
		n += 1 + sovTx(uint64(len(m.ReceivedDist)*8)) + len(m.ReceivedDist)*8
	}
	if m.RTarget != 0 {
		n += 9
	}
	if m.FraudThreshold != 0 {
		n += 9
	}
	if m.NInvalid != 0 {
		n += 1 + sovTx(uint64(m.NInvalid))
	}
	if m.ProbabilityHonest != 0 {
		n += 9
	}
	if m.FraudDetected {
		n += 2
	}
	return n
}

func (m *MsgSubmitPocValidationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitSeed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovTx(uint64(m.BlockHeight))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSubmitSeedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitUnitOfComputePriceProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Price != 0 {
		n += 1 + sovTx(uint64(m.Price))
	}
	return n
}

func (m *MsgSubmitUnitOfComputePriceProposalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRegisterModel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ProposedBy)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.UnitsOfComputePerToken != 0 {
		n += 1 + sovTx(uint64(m.UnitsOfComputePerToken))
	}
	l = len(m.HfRepo)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.HfCommit)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.ModelArgs) > 0 {
		for _, s := range m.ModelArgs {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.VRam != 0 {
		n += 1 + sovTx(uint64(m.VRam))
	}
	if m.ThroughputPerNonce != 0 {
		n += 1 + sovTx(uint64(m.ThroughputPerNonce))
	}
	if m.ValidationThreshold != nil {
		l = m.ValidationThreshold.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterModelResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateTrainingTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.HardwareResources) > 0 {
		for _, e := range m.HardwareResources {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateTrainingTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Task != nil {
		l = m.Task.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSubmitHardwareDiff) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.NewOrModified) > 0 {
		for _, e := range m.NewOrModified {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Removed) > 0 {
		for _, e := range m.Removed {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgSubmitHardwareDiffResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgClaimTrainingTaskForAssignment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TaskId != 0 {
		n += 1 + sovTx(uint64(m.TaskId))
	}
	return n
}

func (m *MsgClaimTrainingTaskForAssignmentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAssignTrainingTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TaskId != 0 {
		n += 1 + sovTx(uint64(m.TaskId))
	}
	if len(m.Assignees) > 0 {
		for _, e := range m.Assignees {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgAssignTrainingTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreatePartialUpgrade) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovTx(uint64(m.Height))
	}
	l = len(m.NodeVersion)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ApiBinariesJson)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreatePartialUpgradeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitTrainingKvRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TaskId != 0 {
		n += 1 + sovTx(uint64(m.TaskId))
	}
	l = len(m.Participant)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSubmitTrainingKvRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgJoinTraining) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Req != nil {
		l = m.Req.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgJoinTrainingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgTrainingHeartbeat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Req != nil {
		l = m.Req.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgTrainingHeartbeatResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Resp != nil {
		l = m.Resp.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetBarrier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Req != nil {
		l = m.Req.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetBarrierResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Resp != nil {
		l = m.Resp.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgJoinTrainingStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Req != nil {
		l = m.Req.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgJoinTrainingStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateDummyTrainingTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Task != nil {
		l = m.Task.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateDummyTrainingTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Task != nil {
		l = m.Task.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgBridgeExchange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OriginChain)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OwnerPubKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BlockNumber)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ReceiptIndex)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ReceiptsRoot)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgBridgeExchangeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterBridgeAddresses) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgRegisterBridgeAddressesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRegisterTokenMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Decimals != 0 {
		n += 1 + sovTx(uint64(m.Decimals))
	}
	if m.Overwrite {
		n += 2
	}
	return n
}

func (m *MsgRegisterTokenMetadataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgApproveBridgeTokenForTrading) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgApproveBridgeTokenForTradingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRegisterLiquidityPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CodeId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.InstantiateMsg)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterLiquidityPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRequestBridgeWithdrawal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.WrappedContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DestinationAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRequestBridgeWithdrawalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.EpochId != 0 {
		n += 1 + sovTx(uint64(m.EpochId))
	}
	l = len(m.BlsRequestId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgStartInference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStartInference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStartInference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InferenceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InferenceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromptHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PromptHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromptPayload", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PromptPayload = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Model = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssignedTo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssignedTo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTokens", wireType)
			}
			m.MaxTokens = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTokens |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromptTokenCount", wireType)
			}
			m.PromptTokenCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PromptTokenCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestTimestamp", wireType)
			}
			m.RequestTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferSignature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransferSignature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalPrompt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalPrompt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgStartInferenceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStartInferenceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStartInferenceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InferenceIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InferenceIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFinishInference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFinishInference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFinishInference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InferenceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InferenceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponsePayload", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponsePayload = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromptTokenCount", wireType)
			}
			m.PromptTokenCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PromptTokenCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletionTokenCount", wireType)
			}
			m.CompletionTokenCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompletionTokenCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecutedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferredBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransferredBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestTimestamp", wireType)
			}
			m.RequestTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferSignature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransferSignature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutorSignature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecutorSignature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalPrompt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalPrompt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Model = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFinishInferenceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFinishInferenceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFinishInferenceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InferenceIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InferenceIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitNewParticipant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitNewParticipant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitNewParticipant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkerKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitNewParticipantResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitNewParticipantResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitNewParticipantResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParticipantIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgValidation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgValidation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgValidation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InferenceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InferenceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponsePayload", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponsePayload = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = float64(math.Float64frombits(v))
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revalidation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Revalidation = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgValidationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgValidationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgValidationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitNewUnfundedParticipant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitNewUnfundedParticipant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitNewUnfundedParticipant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkerKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitNewUnfundedParticipantResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitNewUnfundedParticipantResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitNewUnfundedParticipantResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInvalidateInference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInvalidateInference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInvalidateInference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InferenceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InferenceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInvalidateInferenceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInvalidateInferenceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInvalidateInferenceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRevalidateInference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRevalidateInference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRevalidateInference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InferenceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InferenceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRevalidateInferenceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRevalidateInferenceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRevalidateInferenceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seed", wireType)
			}
			m.Seed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seed |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PocStartHeight", wireType)
			}
			m.PocStartHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PocStartHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitPocBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitPocBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitPocBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PocStageStartBlockHeight", wireType)
			}
			m.PocStageStartBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PocStageStartBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Nonces = append(m.Nonces, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Nonces) == 0 {
					m.Nonces = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Nonces = append(m.Nonces, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonces", wireType)
			}
		case 5:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.Dist = append(m.Dist, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.Dist) == 0 {
					m.Dist = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.Dist = append(m.Dist, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Dist", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitPocBatchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitPocBatchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitPocBatchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitPocValidation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitPocValidation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitPocValidation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParticipantAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PocStageStartBlockHeight", wireType)
			}
			m.PocStageStartBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PocStageStartBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Nonces = append(m.Nonces, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Nonces) == 0 {
					m.Nonces = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Nonces = append(m.Nonces, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonces", wireType)
			}
		case 5:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.Dist = append(m.Dist, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.Dist) == 0 {
					m.Dist = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.Dist = append(m.Dist, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Dist", wireType)
			}
		case 6:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.ReceivedDist = append(m.ReceivedDist, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.ReceivedDist) == 0 {
					m.ReceivedDist = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.ReceivedDist = append(m.ReceivedDist, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedDist", wireType)
			}
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RTarget", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.RTarget = float64(math.Float64frombits(v))
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FraudThreshold", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.FraudThreshold = float64(math.Float64frombits(v))
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NInvalid", wireType)
			}
			m.NInvalid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NInvalid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbabilityHonest", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ProbabilityHonest = float64(math.Float64frombits(v))
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FraudDetected", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FraudDetected = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitPocValidationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitPocValidationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitPocValidationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitSeed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitSeed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitSeed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitSeedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitSeedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitSeedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitUnitOfComputePriceProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitUnitOfComputePriceProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitUnitOfComputePriceProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitUnitOfComputePriceProposalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitUnitOfComputePriceProposalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitUnitOfComputePriceProposalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterModel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterModel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterModel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitsOfComputePerToken", wireType)
			}
			m.UnitsOfComputePerToken = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnitsOfComputePerToken |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HfRepo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HfRepo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HfCommit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HfCommit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelArgs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelArgs = append(m.ModelArgs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRam", wireType)
			}
			m.VRam = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VRam |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThroughputPerNonce", wireType)
			}
			m.ThroughputPerNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThroughputPerNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationThreshold", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ValidationThreshold == nil {
				m.ValidationThreshold = &Decimal{}
			}
			if err := m.ValidationThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterModelResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterModelResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterModelResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateTrainingTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateTrainingTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateTrainingTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardwareResources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HardwareResources = append(m.HardwareResources, &TrainingHardwareResources{})
			if err := m.HardwareResources[len(m.HardwareResources)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &TrainingConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateTrainingTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateTrainingTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateTrainingTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Task == nil {
				m.Task = &TrainingTask{}
			}
			if err := m.Task.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitHardwareDiff) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitHardwareDiff: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitHardwareDiff: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewOrModified", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewOrModified = append(m.NewOrModified, &HardwareNode{})
			if err := m.NewOrModified[len(m.NewOrModified)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Removed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Removed = append(m.Removed, &HardwareNode{})
			if err := m.Removed[len(m.Removed)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitHardwareDiffResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitHardwareDiffResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitHardwareDiffResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimTrainingTaskForAssignment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimTrainingTaskForAssignment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimTrainingTaskForAssignment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimTrainingTaskForAssignmentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimTrainingTaskForAssignmentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimTrainingTaskForAssignmentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAssignTrainingTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAssignTrainingTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAssignTrainingTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assignees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assignees = append(m.Assignees, &TrainingTaskAssignee{})
			if err := m.Assignees[len(m.Assignees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAssignTrainingTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAssignTrainingTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAssignTrainingTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreatePartialUpgrade) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreatePartialUpgrade: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreatePartialUpgrade: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiBinariesJson", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiBinariesJson = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreatePartialUpgradeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreatePartialUpgradeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreatePartialUpgradeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitTrainingKvRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitTrainingKvRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitTrainingKvRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitTrainingKvRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitTrainingKvRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitTrainingKvRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgJoinTraining) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgJoinTraining: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgJoinTraining: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Req", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Req == nil {
				m.Req = &JoinTrainingRequest{}
			}
			if err := m.Req.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgJoinTrainingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgJoinTrainingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgJoinTrainingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &MLNodeTrainStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTrainingHeartbeat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTrainingHeartbeat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTrainingHeartbeat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Req", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Req == nil {
				m.Req = &HeartbeatRequest{}
			}
			if err := m.Req.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTrainingHeartbeatResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTrainingHeartbeatResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTrainingHeartbeatResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resp == nil {
				m.Resp = &HeartbeatResponse{}
			}
			if err := m.Resp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetBarrier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetBarrier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetBarrier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Req", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Req == nil {
				m.Req = &SetBarrierRequest{}
			}
			if err := m.Req.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetBarrierResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetBarrierResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetBarrierResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resp == nil {
				m.Resp = &SetBarrierResponse{}
			}
			if err := m.Resp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgJoinTrainingStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgJoinTrainingStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgJoinTrainingStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Req", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Req == nil {
				m.Req = &JoinTrainingRequest{}
			}
			if err := m.Req.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgJoinTrainingStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgJoinTrainingStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgJoinTrainingStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &MLNodeTrainStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateDummyTrainingTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateDummyTrainingTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateDummyTrainingTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Task == nil {
				m.Task = &TrainingTask{}
			}
			if err := m.Task.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateDummyTrainingTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateDummyTrainingTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateDummyTrainingTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Task == nil {
				m.Task = &TrainingTask{}
			}
			if err := m.Task.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBridgeExchange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBridgeExchange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBridgeExchange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerPubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerPubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiptIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiptIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiptsRoot", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiptsRoot = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBridgeExchangeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBridgeExchangeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBridgeExchangeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterBridgeAddresses) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterBridgeAddresses: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterBridgeAddresses: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterBridgeAddressesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterBridgeAddressesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterBridgeAddressesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterTokenMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterTokenMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterTokenMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimals", wireType)
			}
			m.Decimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimals |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Overwrite", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Overwrite = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterTokenMetadataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterTokenMetadataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterTokenMetadataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgApproveBridgeTokenForTrading) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgApproveBridgeTokenForTrading: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgApproveBridgeTokenForTrading: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgApproveBridgeTokenForTradingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgApproveBridgeTokenForTradingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgApproveBridgeTokenForTradingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterLiquidityPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterLiquidityPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterLiquidityPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstantiateMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstantiateMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterLiquidityPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterLiquidityPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterLiquidityPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequestBridgeWithdrawal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestBridgeWithdrawal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestBridgeWithdrawal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WrappedContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WrappedContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequestBridgeWithdrawalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestBridgeWithdrawalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestBridgeWithdrawalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochId", wireType)
			}
			m.EpochId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlsRequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlsRequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)

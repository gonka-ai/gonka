// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: inference/inference/wasm_contract.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type WasmContract struct {
	Label                   string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	PoolAddress             string `protobuf:"bytes,2,opt,name=pool_address,json=poolAddress,proto3" json:"pool_address,omitempty"`
	RegisteredBy            string `protobuf:"bytes,3,opt,name=registered_by,json=registeredBy,proto3" json:"registered_by,omitempty"`
	RegistrationBlockHeight int64  `protobuf:"varint,4,opt,name=registration_block_height,json=registrationBlockHeight,proto3" json:"registration_block_height,omitempty"`
}

func (m *WasmContract) Reset()         { *m = WasmContract{} }
func (m *WasmContract) String() string { return proto.CompactTextString(m) }
func (*WasmContract) ProtoMessage()    {}
func (*WasmContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_558b78e151dd3cc9, []int{0}
}
func (m *WasmContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WasmContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WasmContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WasmContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WasmContract.Merge(m, src)
}
func (m *WasmContract) XXX_Size() int {
	return m.Size()
}
func (m *WasmContract) XXX_DiscardUnknown() {
	xxx_messageInfo_WasmContract.DiscardUnknown(m)
}

var xxx_messageInfo_WasmContract proto.InternalMessageInfo

func (m *WasmContract) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *WasmContract) GetPoolAddress() string {
	if m != nil {
		return m.PoolAddress
	}
	return ""
}

func (m *WasmContract) GetRegisteredBy() string {
	if m != nil {
		return m.RegisteredBy
	}
	return ""
}

func (m *WasmContract) GetRegistrationBlockHeight() int64 {
	if m != nil {
		return m.RegistrationBlockHeight
	}
	return 0
}

func init() {
	proto.RegisterType((*WasmContract)(nil), "inference.inference.WasmContract")
}

func init() {
	proto.RegisterFile("inference/inference/wasm_contract.proto", fileDescriptor_558b78e151dd3cc9)
}

var fileDescriptor_558b78e151dd3cc9 = []byte{
	// 252 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0xcf, 0xcc, 0x4b, 0x4b,
	0x2d, 0x4a, 0xcd, 0x4b, 0x4e, 0xd5, 0x47, 0xb0, 0xca, 0x13, 0x8b, 0x73, 0xe3, 0x93, 0xf3, 0xf3,
	0x4a, 0x8a, 0x12, 0x93, 0x4b, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x84, 0xe1, 0xd2, 0x7a,
	0x70, 0x96, 0xd2, 0x0a, 0x46, 0x2e, 0x9e, 0xf0, 0xc4, 0xe2, 0x5c, 0x67, 0xa8, 0x5a, 0x21, 0x11,
	0x2e, 0xd6, 0x9c, 0xc4, 0xa4, 0xd4, 0x1c, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x08, 0x47,
	0x48, 0x91, 0x8b, 0xa7, 0x20, 0x3f, 0x3f, 0x27, 0x3e, 0x31, 0x25, 0xa5, 0x28, 0xb5, 0xb8, 0x58,
	0x82, 0x09, 0x2c, 0xc9, 0x0d, 0x12, 0x73, 0x84, 0x08, 0x09, 0x29, 0x73, 0xf1, 0x16, 0xa5, 0xa6,
	0x67, 0x16, 0x97, 0xa4, 0x16, 0xa5, 0xa6, 0xc4, 0x27, 0x55, 0x4a, 0x30, 0x83, 0xd5, 0xf0, 0x20,
	0x04, 0x9d, 0x2a, 0x85, 0xac, 0xb8, 0x24, 0x21, 0xfc, 0xa2, 0xc4, 0x92, 0xcc, 0xfc, 0xbc, 0xf8,
	0xa4, 0x9c, 0xfc, 0xe4, 0xec, 0xf8, 0x8c, 0xd4, 0xcc, 0xf4, 0x8c, 0x12, 0x09, 0x16, 0x05, 0x46,
	0x0d, 0xe6, 0x20, 0x71, 0x64, 0x05, 0x4e, 0x20, 0x79, 0x0f, 0xb0, 0xb4, 0x93, 0xff, 0x89, 0x47,
	0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85,
	0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb, 0x31, 0x44, 0x99, 0xa6, 0x67, 0x96, 0x64, 0x94, 0x26, 0xe9,
	0x25, 0xe7, 0xe7, 0xea, 0x17, 0x14, 0xe5, 0xa7, 0x94, 0x26, 0x97, 0x14, 0x27, 0x67, 0xa2, 0x05,
	0x49, 0x05, 0x12, 0xbb, 0xa4, 0xb2, 0x20, 0xb5, 0x38, 0x89, 0x0d, 0x1c, 0x2e, 0xc6, 0x80, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x89, 0xb7, 0x2f, 0xce, 0x42, 0x01, 0x00, 0x00,
}

func (m *WasmContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WasmContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WasmContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RegistrationBlockHeight != 0 {
		i = encodeVarintWasmContract(dAtA, i, uint64(m.RegistrationBlockHeight))
		i--
		dAtA[i] = 0x20
	}
	if len(m.RegisteredBy) > 0 {
		i -= len(m.RegisteredBy)
		copy(dAtA[i:], m.RegisteredBy)
		i = encodeVarintWasmContract(dAtA, i, uint64(len(m.RegisteredBy)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PoolAddress) > 0 {
		i -= len(m.PoolAddress)
		copy(dAtA[i:], m.PoolAddress)
		i = encodeVarintWasmContract(dAtA, i, uint64(len(m.PoolAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintWasmContract(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintWasmContract(dAtA []byte, offset int, v uint64) int {
	offset -= sovWasmContract(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WasmContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovWasmContract(uint64(l))
	}
	l = len(m.PoolAddress)
	if l > 0 {
		n += 1 + l + sovWasmContract(uint64(l))
	}
	l = len(m.RegisteredBy)
	if l > 0 {
		n += 1 + l + sovWasmContract(uint64(l))
	}
	if m.RegistrationBlockHeight != 0 {
		n += 1 + sovWasmContract(uint64(m.RegistrationBlockHeight))
	}
	return n
}

func sovWasmContract(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWasmContract(x uint64) (n int) {
	return sovWasmContract(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WasmContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWasmContract
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WasmContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WasmContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWasmContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWasmContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWasmContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWasmContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisteredBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWasmContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWasmContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegisteredBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistrationBlockHeight", wireType)
			}
			m.RegistrationBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegistrationBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWasmContract(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWasmContract
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWasmContract(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWasmContract
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWasmContract
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWasmContract
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWasmContract
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWasmContract
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWasmContract
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWasmContract        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWasmContract          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWasmContract = fmt.Errorf("proto: unexpected end of group")
)

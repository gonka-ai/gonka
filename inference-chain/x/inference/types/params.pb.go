// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: inference/inference/params.proto

package types

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the module.
type Params struct {
	EpochParams      *EpochParams      `protobuf:"bytes,1,opt,name=epoch_params,json=epochParams,proto3" json:"epoch_params,omitempty"`
	ValidationParams *ValidationParams `protobuf:"bytes,2,opt,name=validation_params,json=validationParams,proto3" json:"validation_params,omitempty"`
	PocParams        *PocParams        `protobuf:"bytes,3,opt,name=poc_params,json=pocParams,proto3" json:"poc_params,omitempty"`
	TokenomicsParams *TokenomicsParams `protobuf:"bytes,4,opt,name=tokenomics_params,json=tokenomicsParams,proto3" json:"tokenomics_params,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cf34332021bbe94, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetEpochParams() *EpochParams {
	if m != nil {
		return m.EpochParams
	}
	return nil
}

func (m *Params) GetValidationParams() *ValidationParams {
	if m != nil {
		return m.ValidationParams
	}
	return nil
}

func (m *Params) GetPocParams() *PocParams {
	if m != nil {
		return m.PocParams
	}
	return nil
}

func (m *Params) GetTokenomicsParams() *TokenomicsParams {
	if m != nil {
		return m.TokenomicsParams
	}
	return nil
}

type GenesisOnlyParams struct {
	TotalSupply      uint64 `protobuf:"varint,4,opt,name=total_supply,json=totalSupply,proto3" json:"total_supply,omitempty"`
	OriginatorSupply uint64 `protobuf:"varint,5,opt,name=originator_supply,json=originatorSupply,proto3" json:"originator_supply,omitempty"`
	TopRewardAmount  uint64 `protobuf:"varint,6,opt,name=top_reward_amount,json=topRewardAmount,proto3" json:"top_reward_amount,omitempty"`
	TopRewards       int32  `protobuf:"varint,7,opt,name=top_rewards,json=topRewards,proto3" json:"top_rewards,omitempty"`
	SupplyDenom      string `protobuf:"bytes,8,opt,name=supply_denom,json=supplyDenom,proto3" json:"supply_denom,omitempty"`
}

func (m *GenesisOnlyParams) Reset()         { *m = GenesisOnlyParams{} }
func (m *GenesisOnlyParams) String() string { return proto.CompactTextString(m) }
func (*GenesisOnlyParams) ProtoMessage()    {}
func (*GenesisOnlyParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cf34332021bbe94, []int{1}
}
func (m *GenesisOnlyParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisOnlyParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisOnlyParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisOnlyParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisOnlyParams.Merge(m, src)
}
func (m *GenesisOnlyParams) XXX_Size() int {
	return m.Size()
}
func (m *GenesisOnlyParams) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisOnlyParams.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisOnlyParams proto.InternalMessageInfo

func (m *GenesisOnlyParams) GetTotalSupply() uint64 {
	if m != nil {
		return m.TotalSupply
	}
	return 0
}

func (m *GenesisOnlyParams) GetOriginatorSupply() uint64 {
	if m != nil {
		return m.OriginatorSupply
	}
	return 0
}

func (m *GenesisOnlyParams) GetTopRewardAmount() uint64 {
	if m != nil {
		return m.TopRewardAmount
	}
	return 0
}

func (m *GenesisOnlyParams) GetTopRewards() int32 {
	if m != nil {
		return m.TopRewards
	}
	return 0
}

func (m *GenesisOnlyParams) GetSupplyDenom() string {
	if m != nil {
		return m.SupplyDenom
	}
	return ""
}

type TokenomicsParams struct {
	SubsidyReductionInterval float64 `protobuf:"fixed64,1,opt,name=subsidy_reduction_interval,json=subsidyReductionInterval,proto3" json:"subsidy_reduction_interval,omitempty"`
	SubsidyReductionAmount   float32 `protobuf:"fixed32,2,opt,name=subsidy_reduction_amount,json=subsidyReductionAmount,proto3" json:"subsidy_reduction_amount,omitempty"`
	CurrentSubsidyPercentage float32 `protobuf:"fixed32,3,opt,name=current_subsidy_percentage,json=currentSubsidyPercentage,proto3" json:"current_subsidy_percentage,omitempty"`
}

func (m *TokenomicsParams) Reset()         { *m = TokenomicsParams{} }
func (m *TokenomicsParams) String() string { return proto.CompactTextString(m) }
func (*TokenomicsParams) ProtoMessage()    {}
func (*TokenomicsParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cf34332021bbe94, []int{2}
}
func (m *TokenomicsParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenomicsParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenomicsParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenomicsParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenomicsParams.Merge(m, src)
}
func (m *TokenomicsParams) XXX_Size() int {
	return m.Size()
}
func (m *TokenomicsParams) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenomicsParams.DiscardUnknown(m)
}

var xxx_messageInfo_TokenomicsParams proto.InternalMessageInfo

func (m *TokenomicsParams) GetSubsidyReductionInterval() float64 {
	if m != nil {
		return m.SubsidyReductionInterval
	}
	return 0
}

func (m *TokenomicsParams) GetSubsidyReductionAmount() float32 {
	if m != nil {
		return m.SubsidyReductionAmount
	}
	return 0
}

func (m *TokenomicsParams) GetCurrentSubsidyPercentage() float32 {
	if m != nil {
		return m.CurrentSubsidyPercentage
	}
	return 0
}

type EpochParams struct {
	EpochLength               int64  `protobuf:"varint,1,opt,name=epoch_length,json=epochLength,proto3" json:"epoch_length,omitempty"`
	EpochMultiplier           int64  `protobuf:"varint,2,opt,name=epoch_multiplier,json=epochMultiplier,proto3" json:"epoch_multiplier,omitempty"`
	EpochNewCoin              uint64 `protobuf:"varint,3,opt,name=epoch_new_coin,json=epochNewCoin,proto3" json:"epoch_new_coin,omitempty"`
	CoinHalvingInterval       int64  `protobuf:"varint,4,opt,name=coin_halving_interval,json=coinHalvingInterval,proto3" json:"coin_halving_interval,omitempty"`
	DefaultUnitOfComputePrice uint64 `protobuf:"varint,5,opt,name=defaultUnitOfComputePrice,proto3" json:"defaultUnitOfComputePrice,omitempty"`
}

func (m *EpochParams) Reset()         { *m = EpochParams{} }
func (m *EpochParams) String() string { return proto.CompactTextString(m) }
func (*EpochParams) ProtoMessage()    {}
func (*EpochParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cf34332021bbe94, []int{3}
}
func (m *EpochParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EpochParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EpochParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EpochParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochParams.Merge(m, src)
}
func (m *EpochParams) XXX_Size() int {
	return m.Size()
}
func (m *EpochParams) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochParams.DiscardUnknown(m)
}

var xxx_messageInfo_EpochParams proto.InternalMessageInfo

func (m *EpochParams) GetEpochLength() int64 {
	if m != nil {
		return m.EpochLength
	}
	return 0
}

func (m *EpochParams) GetEpochMultiplier() int64 {
	if m != nil {
		return m.EpochMultiplier
	}
	return 0
}

func (m *EpochParams) GetEpochNewCoin() uint64 {
	if m != nil {
		return m.EpochNewCoin
	}
	return 0
}

func (m *EpochParams) GetCoinHalvingInterval() int64 {
	if m != nil {
		return m.CoinHalvingInterval
	}
	return 0
}

func (m *EpochParams) GetDefaultUnitOfComputePrice() uint64 {
	if m != nil {
		return m.DefaultUnitOfComputePrice
	}
	return 0
}

type ValidationParams struct {
	FalsePositiveRate     float64 `protobuf:"fixed64,1,opt,name=false_positive_rate,json=falsePositiveRate,proto3" json:"false_positive_rate,omitempty"`
	MinRampUpMeasurements uint32  `protobuf:"varint,2,opt,name=min_ramp_up_measurements,json=minRampUpMeasurements,proto3" json:"min_ramp_up_measurements,omitempty"`
	PassValue             float64 `protobuf:"fixed64,3,opt,name=pass_value,json=passValue,proto3" json:"pass_value,omitempty"`
	MinValidationAverage  float64 `protobuf:"fixed64,4,opt,name=min_validation_average,json=minValidationAverage,proto3" json:"min_validation_average,omitempty"`
	MaxValidationAverage  float64 `protobuf:"fixed64,5,opt,name=max_validation_average,json=maxValidationAverage,proto3" json:"max_validation_average,omitempty"`
}

func (m *ValidationParams) Reset()         { *m = ValidationParams{} }
func (m *ValidationParams) String() string { return proto.CompactTextString(m) }
func (*ValidationParams) ProtoMessage()    {}
func (*ValidationParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cf34332021bbe94, []int{4}
}
func (m *ValidationParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidationParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidationParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidationParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidationParams.Merge(m, src)
}
func (m *ValidationParams) XXX_Size() int {
	return m.Size()
}
func (m *ValidationParams) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidationParams.DiscardUnknown(m)
}

var xxx_messageInfo_ValidationParams proto.InternalMessageInfo

func (m *ValidationParams) GetFalsePositiveRate() float64 {
	if m != nil {
		return m.FalsePositiveRate
	}
	return 0
}

func (m *ValidationParams) GetMinRampUpMeasurements() uint32 {
	if m != nil {
		return m.MinRampUpMeasurements
	}
	return 0
}

func (m *ValidationParams) GetPassValue() float64 {
	if m != nil {
		return m.PassValue
	}
	return 0
}

func (m *ValidationParams) GetMinValidationAverage() float64 {
	if m != nil {
		return m.MinValidationAverage
	}
	return 0
}

func (m *ValidationParams) GetMaxValidationAverage() float64 {
	if m != nil {
		return m.MaxValidationAverage
	}
	return 0
}

type PocParams struct {
	DefaultDifficulty uint32 `protobuf:"varint,1,opt,name=default_difficulty,json=defaultDifficulty,proto3" json:"default_difficulty,omitempty"`
}

func (m *PocParams) Reset()         { *m = PocParams{} }
func (m *PocParams) String() string { return proto.CompactTextString(m) }
func (*PocParams) ProtoMessage()    {}
func (*PocParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cf34332021bbe94, []int{5}
}
func (m *PocParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PocParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PocParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PocParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PocParams.Merge(m, src)
}
func (m *PocParams) XXX_Size() int {
	return m.Size()
}
func (m *PocParams) XXX_DiscardUnknown() {
	xxx_messageInfo_PocParams.DiscardUnknown(m)
}

var xxx_messageInfo_PocParams proto.InternalMessageInfo

func (m *PocParams) GetDefaultDifficulty() uint32 {
	if m != nil {
		return m.DefaultDifficulty
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "inference.inference.Params")
	proto.RegisterType((*GenesisOnlyParams)(nil), "inference.inference.GenesisOnlyParams")
	proto.RegisterType((*TokenomicsParams)(nil), "inference.inference.TokenomicsParams")
	proto.RegisterType((*EpochParams)(nil), "inference.inference.EpochParams")
	proto.RegisterType((*ValidationParams)(nil), "inference.inference.ValidationParams")
	proto.RegisterType((*PocParams)(nil), "inference.inference.PocParams")
}

func init() { proto.RegisterFile("inference/inference/params.proto", fileDescriptor_3cf34332021bbe94) }

var fileDescriptor_3cf34332021bbe94 = []byte{
	// 795 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0xcd, 0x6e, 0x2b, 0x35,
	0x14, 0xee, 0xa4, 0x69, 0x21, 0xce, 0xbd, 0xdc, 0xc4, 0xbd, 0xf7, 0x6a, 0x1a, 0x41, 0x1a, 0x22,
	0x2a, 0x95, 0x22, 0x12, 0xa9, 0x80, 0x40, 0x55, 0x91, 0x28, 0x2d, 0x02, 0x24, 0x4a, 0x23, 0x97,
	0x76, 0xc1, 0xc6, 0x72, 0x27, 0x4e, 0x62, 0x31, 0x63, 0x5b, 0xb6, 0x27, 0x6d, 0x5e, 0x01, 0xb1,
	0xe0, 0x11, 0x78, 0x04, 0x1e, 0x83, 0x15, 0xaa, 0xc4, 0x06, 0x89, 0x0d, 0x6a, 0x17, 0xf0, 0x0a,
	0xec, 0x90, 0x7f, 0x66, 0x12, 0xa5, 0x81, 0xcd, 0xc8, 0xf3, 0x7d, 0xdf, 0xf9, 0x7c, 0x7c, 0xce,
	0xb1, 0x41, 0x87, 0xf1, 0x11, 0x55, 0x94, 0x27, 0xb4, 0x3f, 0x5f, 0x49, 0xa2, 0x48, 0xa6, 0x7b,
	0x52, 0x09, 0x23, 0xe0, 0x56, 0x89, 0xf7, 0xca, 0x55, 0xab, 0x49, 0x32, 0xc6, 0x45, 0xdf, 0x7d,
	0xbd, 0xae, 0xf5, 0x7c, 0x2c, 0xc6, 0xc2, 0x2d, 0xfb, 0x76, 0x15, 0xd0, 0xed, 0x44, 0xe8, 0x4c,
	0x68, 0xec, 0x09, 0xff, 0xe3, 0xa9, 0xee, 0x1f, 0x15, 0xb0, 0x39, 0x70, 0x3b, 0xc1, 0x13, 0xf0,
	0x84, 0x4a, 0x91, 0x4c, 0xb0, 0xdf, 0x39, 0x8e, 0x3a, 0xd1, 0x5e, 0xfd, 0xa0, 0xd3, 0x5b, 0xb1,
	0x75, 0xef, 0x33, 0x2b, 0xf4, 0x71, 0xa8, 0x4e, 0xe7, 0x3f, 0x10, 0x81, 0xe6, 0x94, 0xa4, 0x6c,
	0x48, 0x0c, 0x13, 0xbc, 0x70, 0xaa, 0x38, 0xa7, 0xdd, 0x95, 0x4e, 0x57, 0xa5, 0x3a, 0xd8, 0x35,
	0xa6, 0x4b, 0x08, 0xfc, 0x18, 0x00, 0x29, 0x92, 0xc2, 0x6c, 0xdd, 0x99, 0xb5, 0x57, 0x9a, 0x0d,
	0x44, 0x12, 0x5c, 0x6a, 0xb2, 0x58, 0xda, 0x94, 0x8c, 0xf8, 0x8e, 0x72, 0x91, 0xb1, 0x44, 0x17,
	0x2e, 0xd5, 0xff, 0x49, 0xe9, 0x9b, 0x52, 0x5d, 0xa4, 0x64, 0x96, 0x90, 0xc3, 0xdd, 0xbf, 0x7f,
	0xda, 0x89, 0xbe, 0xff, 0xeb, 0xe7, 0xfd, 0xd7, 0xe7, 0x0d, 0xbb, 0x5d, 0x68, 0x9e, 0x97, 0x75,
	0x7f, 0x8b, 0x40, 0xf3, 0x73, 0xca, 0xa9, 0x66, 0xfa, 0x9c, 0xa7, 0xb3, 0x90, 0xd0, 0x9b, 0xe0,
	0x89, 0x11, 0x86, 0xa4, 0x58, 0xe7, 0x52, 0xa6, 0x33, 0x97, 0x4b, 0x15, 0xd5, 0x1d, 0x76, 0xe1,
	0x20, 0xf8, 0x0e, 0x68, 0x0a, 0xc5, 0xc6, 0x8c, 0x13, 0x23, 0x54, 0xa1, 0xdb, 0x70, 0xba, 0xc6,
	0x9c, 0x08, 0xe2, 0x7d, 0x7b, 0x40, 0x89, 0x15, 0xbd, 0x21, 0x6a, 0x88, 0x49, 0x26, 0x72, 0x6e,
	0xe2, 0x4d, 0x27, 0x7e, 0x66, 0x84, 0x44, 0x0e, 0x3f, 0x76, 0x30, 0xdc, 0x01, 0xf5, 0xb9, 0x56,
	0xc7, 0xaf, 0x74, 0xa2, 0xbd, 0x0d, 0x04, 0x4a, 0x95, 0x4b, 0xce, 0x6f, 0x87, 0x87, 0xf6, 0xc8,
	0xf1, 0xab, 0x9d, 0x68, 0xaf, 0x86, 0xea, 0x1e, 0x3b, 0xb5, 0x50, 0xf7, 0xd7, 0x08, 0x34, 0x96,
	0x6b, 0x04, 0x8f, 0x40, 0x4b, 0xe7, 0xd7, 0x9a, 0x0d, 0x67, 0x58, 0xd1, 0x61, 0x9e, 0xb8, 0xfe,
	0x33, 0x6e, 0xa8, 0x9a, 0x92, 0xd4, 0xcd, 0x52, 0x84, 0xe2, 0xa0, 0x40, 0x85, 0xe0, 0xcb, 0xc0,
	0xc3, 0x8f, 0x40, 0xfc, 0x38, 0x3a, 0x9c, 0xc4, 0x4e, 0x4f, 0x05, 0xbd, 0x5c, 0x8e, 0x0d, 0x07,
	0x3a, 0x02, 0xad, 0x24, 0x57, 0x8a, 0x72, 0x83, 0x0b, 0x07, 0x49, 0x55, 0x42, 0xb9, 0x21, 0x63,
	0xea, 0x86, 0xa5, 0x82, 0xe2, 0xa0, 0xb8, 0xf0, 0x82, 0x41, 0xc9, 0x1f, 0x56, 0x6d, 0x1f, 0xbb,
	0xff, 0x44, 0xa0, 0xbe, 0x30, 0xd1, 0xb6, 0x06, 0xfe, 0x26, 0xa4, 0x94, 0x8f, 0xcd, 0xc4, 0x65,
	0xbf, 0x1e, 0xe6, 0xfc, 0x2b, 0x07, 0xc1, 0xb7, 0x41, 0xc3, 0x4b, 0xb2, 0x3c, 0x35, 0x4c, 0xa6,
	0x8c, 0x2a, 0x97, 0xe8, 0x3a, 0x7a, 0xe6, 0xf0, 0xb3, 0x12, 0x86, 0x6f, 0x81, 0xd7, 0xbc, 0x94,
	0xd3, 0x1b, 0x9c, 0x08, 0xc6, 0x5d, 0x56, 0x55, 0xe4, 0xf7, 0xf8, 0x9a, 0xde, 0x9c, 0x08, 0xc6,
	0xe1, 0x01, 0x78, 0x61, 0x39, 0x3c, 0x21, 0xe9, 0x94, 0xf1, 0xf1, 0xbc, 0x74, 0x55, 0xe7, 0xba,
	0x65, 0xc9, 0x2f, 0x3c, 0x57, 0x56, 0xed, 0x08, 0x6c, 0x0f, 0xe9, 0x88, 0xe4, 0xa9, 0xb9, 0xe4,
	0xcc, 0x9c, 0x8f, 0x4e, 0x44, 0x26, 0x73, 0x43, 0x07, 0x8a, 0x25, 0x34, 0x4c, 0xcb, 0x7f, 0x0b,
	0xc2, 0xd9, 0x7f, 0xa8, 0x80, 0xc6, 0xf2, 0x1d, 0x84, 0x3d, 0xb0, 0x35, 0x22, 0xa9, 0xa6, 0x58,
	0x0a, 0xcd, 0x0c, 0x9b, 0x52, 0xac, 0x88, 0xa1, 0xa1, 0x8b, 0x4d, 0x47, 0x0d, 0x02, 0x83, 0x88,
	0xa1, 0xf0, 0x43, 0x10, 0x67, 0x8c, 0x63, 0x45, 0x32, 0x89, 0x73, 0x89, 0x33, 0x4a, 0x74, 0xae,
	0x68, 0x46, 0xb9, 0xf1, 0x97, 0xff, 0x29, 0x7a, 0x91, 0x31, 0x8e, 0x48, 0x26, 0x2f, 0xe5, 0xd9,
	0x02, 0x09, 0xdf, 0x00, 0x40, 0x12, 0xad, 0xf1, 0x94, 0xa4, 0xb9, 0xef, 0x56, 0x84, 0x6a, 0x16,
	0xb9, 0xb2, 0x00, 0x7c, 0x1f, 0xbc, 0xb4, 0xbe, 0x0b, 0x2f, 0x0a, 0x99, 0x52, 0x65, 0x1b, 0x5b,
	0x75, 0xd2, 0xe7, 0x19, 0xe3, 0xf3, 0xe4, 0x8f, 0x3d, 0xe7, 0xa2, 0xc8, 0xed, 0xaa, 0xa8, 0x8d,
	0x10, 0x45, 0x6e, 0x1f, 0x45, 0x85, 0x72, 0x7c, 0x02, 0x6a, 0xe5, 0x23, 0x02, 0xdf, 0x05, 0x30,
	0x94, 0x0f, 0x0f, 0xd9, 0x68, 0xc4, 0x92, 0x3c, 0x35, 0x33, 0x57, 0x85, 0xa7, 0xa8, 0x19, 0x98,
	0xd3, 0x92, 0xf0, 0x0e, 0x9f, 0x9e, 0xff, 0x72, 0xdf, 0x8e, 0xee, 0xee, 0xdb, 0xd1, 0x9f, 0xf7,
	0xed, 0xe8, 0xc7, 0x87, 0xf6, 0xda, 0xdd, 0x43, 0x7b, 0xed, 0xf7, 0x87, 0xf6, 0xda, 0xb7, 0x1f,
	0x8c, 0x99, 0x99, 0xe4, 0xd7, 0xbd, 0x44, 0x64, 0x7d, 0xa9, 0x84, 0x9d, 0x63, 0x9d, 0xb0, 0xa5,
	0x67, 0x7f, 0xf1, 0x15, 0x31, 0x33, 0x49, 0xf5, 0xf5, 0xa6, 0x7b, 0xa9, 0xdf, 0xfb, 0x37, 0x00,
	0x00, 0xff, 0xff, 0x77, 0x12, 0xbd, 0x8c, 0x26, 0x06, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EpochParams.Equal(that1.EpochParams) {
		return false
	}
	if !this.ValidationParams.Equal(that1.ValidationParams) {
		return false
	}
	if !this.PocParams.Equal(that1.PocParams) {
		return false
	}
	if !this.TokenomicsParams.Equal(that1.TokenomicsParams) {
		return false
	}
	return true
}
func (this *TokenomicsParams) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TokenomicsParams)
	if !ok {
		that2, ok := that.(TokenomicsParams)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SubsidyReductionInterval != that1.SubsidyReductionInterval {
		return false
	}
	if this.SubsidyReductionAmount != that1.SubsidyReductionAmount {
		return false
	}
	if this.CurrentSubsidyPercentage != that1.CurrentSubsidyPercentage {
		return false
	}
	return true
}
func (this *EpochParams) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EpochParams)
	if !ok {
		that2, ok := that.(EpochParams)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.EpochLength != that1.EpochLength {
		return false
	}
	if this.EpochMultiplier != that1.EpochMultiplier {
		return false
	}
	if this.EpochNewCoin != that1.EpochNewCoin {
		return false
	}
	if this.CoinHalvingInterval != that1.CoinHalvingInterval {
		return false
	}
	if this.DefaultUnitOfComputePrice != that1.DefaultUnitOfComputePrice {
		return false
	}
	return true
}
func (this *ValidationParams) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValidationParams)
	if !ok {
		that2, ok := that.(ValidationParams)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FalsePositiveRate != that1.FalsePositiveRate {
		return false
	}
	if this.MinRampUpMeasurements != that1.MinRampUpMeasurements {
		return false
	}
	if this.PassValue != that1.PassValue {
		return false
	}
	if this.MinValidationAverage != that1.MinValidationAverage {
		return false
	}
	if this.MaxValidationAverage != that1.MaxValidationAverage {
		return false
	}
	return true
}
func (this *PocParams) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PocParams)
	if !ok {
		that2, ok := that.(PocParams)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DefaultDifficulty != that1.DefaultDifficulty {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TokenomicsParams != nil {
		{
			size, err := m.TokenomicsParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintParams(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.PocParams != nil {
		{
			size, err := m.PocParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintParams(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ValidationParams != nil {
		{
			size, err := m.ValidationParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintParams(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.EpochParams != nil {
		{
			size, err := m.EpochParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintParams(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisOnlyParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisOnlyParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisOnlyParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SupplyDenom) > 0 {
		i -= len(m.SupplyDenom)
		copy(dAtA[i:], m.SupplyDenom)
		i = encodeVarintParams(dAtA, i, uint64(len(m.SupplyDenom)))
		i--
		dAtA[i] = 0x42
	}
	if m.TopRewards != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.TopRewards))
		i--
		dAtA[i] = 0x38
	}
	if m.TopRewardAmount != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.TopRewardAmount))
		i--
		dAtA[i] = 0x30
	}
	if m.OriginatorSupply != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.OriginatorSupply))
		i--
		dAtA[i] = 0x28
	}
	if m.TotalSupply != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.TotalSupply))
		i--
		dAtA[i] = 0x20
	}
	return len(dAtA) - i, nil
}

func (m *TokenomicsParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenomicsParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenomicsParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CurrentSubsidyPercentage != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.CurrentSubsidyPercentage))))
		i--
		dAtA[i] = 0x1d
	}
	if m.SubsidyReductionAmount != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.SubsidyReductionAmount))))
		i--
		dAtA[i] = 0x15
	}
	if m.SubsidyReductionInterval != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.SubsidyReductionInterval))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *EpochParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EpochParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EpochParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DefaultUnitOfComputePrice != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.DefaultUnitOfComputePrice))
		i--
		dAtA[i] = 0x28
	}
	if m.CoinHalvingInterval != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.CoinHalvingInterval))
		i--
		dAtA[i] = 0x20
	}
	if m.EpochNewCoin != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.EpochNewCoin))
		i--
		dAtA[i] = 0x18
	}
	if m.EpochMultiplier != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.EpochMultiplier))
		i--
		dAtA[i] = 0x10
	}
	if m.EpochLength != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.EpochLength))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ValidationParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidationParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidationParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxValidationAverage != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MaxValidationAverage))))
		i--
		dAtA[i] = 0x29
	}
	if m.MinValidationAverage != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MinValidationAverage))))
		i--
		dAtA[i] = 0x21
	}
	if m.PassValue != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.PassValue))))
		i--
		dAtA[i] = 0x19
	}
	if m.MinRampUpMeasurements != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MinRampUpMeasurements))
		i--
		dAtA[i] = 0x10
	}
	if m.FalsePositiveRate != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.FalsePositiveRate))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *PocParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PocParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PocParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DefaultDifficulty != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.DefaultDifficulty))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochParams != nil {
		l = m.EpochParams.Size()
		n += 1 + l + sovParams(uint64(l))
	}
	if m.ValidationParams != nil {
		l = m.ValidationParams.Size()
		n += 1 + l + sovParams(uint64(l))
	}
	if m.PocParams != nil {
		l = m.PocParams.Size()
		n += 1 + l + sovParams(uint64(l))
	}
	if m.TokenomicsParams != nil {
		l = m.TokenomicsParams.Size()
		n += 1 + l + sovParams(uint64(l))
	}
	return n
}

func (m *GenesisOnlyParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalSupply != 0 {
		n += 1 + sovParams(uint64(m.TotalSupply))
	}
	if m.OriginatorSupply != 0 {
		n += 1 + sovParams(uint64(m.OriginatorSupply))
	}
	if m.TopRewardAmount != 0 {
		n += 1 + sovParams(uint64(m.TopRewardAmount))
	}
	if m.TopRewards != 0 {
		n += 1 + sovParams(uint64(m.TopRewards))
	}
	l = len(m.SupplyDenom)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	return n
}

func (m *TokenomicsParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SubsidyReductionInterval != 0 {
		n += 9
	}
	if m.SubsidyReductionAmount != 0 {
		n += 5
	}
	if m.CurrentSubsidyPercentage != 0 {
		n += 5
	}
	return n
}

func (m *EpochParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochLength != 0 {
		n += 1 + sovParams(uint64(m.EpochLength))
	}
	if m.EpochMultiplier != 0 {
		n += 1 + sovParams(uint64(m.EpochMultiplier))
	}
	if m.EpochNewCoin != 0 {
		n += 1 + sovParams(uint64(m.EpochNewCoin))
	}
	if m.CoinHalvingInterval != 0 {
		n += 1 + sovParams(uint64(m.CoinHalvingInterval))
	}
	if m.DefaultUnitOfComputePrice != 0 {
		n += 1 + sovParams(uint64(m.DefaultUnitOfComputePrice))
	}
	return n
}

func (m *ValidationParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FalsePositiveRate != 0 {
		n += 9
	}
	if m.MinRampUpMeasurements != 0 {
		n += 1 + sovParams(uint64(m.MinRampUpMeasurements))
	}
	if m.PassValue != 0 {
		n += 9
	}
	if m.MinValidationAverage != 0 {
		n += 9
	}
	if m.MaxValidationAverage != 0 {
		n += 9
	}
	return n
}

func (m *PocParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultDifficulty != 0 {
		n += 1 + sovParams(uint64(m.DefaultDifficulty))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EpochParams == nil {
				m.EpochParams = &EpochParams{}
			}
			if err := m.EpochParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ValidationParams == nil {
				m.ValidationParams = &ValidationParams{}
			}
			if err := m.ValidationParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PocParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PocParams == nil {
				m.PocParams = &PocParams{}
			}
			if err := m.PocParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenomicsParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TokenomicsParams == nil {
				m.TokenomicsParams = &TokenomicsParams{}
			}
			if err := m.TokenomicsParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisOnlyParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisOnlyParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisOnlyParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSupply", wireType)
			}
			m.TotalSupply = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalSupply |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginatorSupply", wireType)
			}
			m.OriginatorSupply = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OriginatorSupply |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopRewardAmount", wireType)
			}
			m.TopRewardAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopRewardAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopRewards", wireType)
			}
			m.TopRewards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopRewards |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupplyDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupplyDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenomicsParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenomicsParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenomicsParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubsidyReductionInterval", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.SubsidyReductionInterval = float64(math.Float64frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubsidyReductionAmount", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.SubsidyReductionAmount = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentSubsidyPercentage", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.CurrentSubsidyPercentage = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EpochParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EpochParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EpochParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochLength", wireType)
			}
			m.EpochLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochLength |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochMultiplier", wireType)
			}
			m.EpochMultiplier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochMultiplier |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNewCoin", wireType)
			}
			m.EpochNewCoin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNewCoin |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinHalvingInterval", wireType)
			}
			m.CoinHalvingInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinHalvingInterval |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultUnitOfComputePrice", wireType)
			}
			m.DefaultUnitOfComputePrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefaultUnitOfComputePrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidationParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidationParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidationParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FalsePositiveRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.FalsePositiveRate = float64(math.Float64frombits(v))
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinRampUpMeasurements", wireType)
			}
			m.MinRampUpMeasurements = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinRampUpMeasurements |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassValue", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.PassValue = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinValidationAverage", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MinValidationAverage = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxValidationAverage", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MaxValidationAverage = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PocParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PocParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PocParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultDifficulty", wireType)
			}
			m.DefaultDifficulty = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefaultDifficulty |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)

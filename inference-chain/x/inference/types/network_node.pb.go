// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: inference/inference/network_node.proto

package types

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MLNodeTrainStatusEnum int32

const (
	MLNodeTrainStatusEnum_OK         MLNodeTrainStatusEnum = 0
	MLNodeTrainStatusEnum_ERROR      MLNodeTrainStatusEnum = 1
	MLNodeTrainStatusEnum_JOINED     MLNodeTrainStatusEnum = 2
	MLNodeTrainStatusEnum_NOT_JOINED MLNodeTrainStatusEnum = 3
)

var MLNodeTrainStatusEnum_name = map[int32]string{
	0: "OK",
	1: "ERROR",
	2: "JOINED",
	3: "NOT_JOINED",
}

var MLNodeTrainStatusEnum_value = map[string]int32{
	"OK":         0,
	"ERROR":      1,
	"JOINED":     2,
	"NOT_JOINED": 3,
}

func (x MLNodeTrainStatusEnum) String() string {
	return proto.EnumName(MLNodeTrainStatusEnum_name, int32(x))
}

func (MLNodeTrainStatusEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_12ca758870675d40, []int{0}
}

type HeartbeatStatusEnum int32

const (
	HeartbeatStatusEnum_HEARTBEAT_OK    HeartbeatStatusEnum = 0
	HeartbeatStatusEnum_HEARTBEAT_ERROR HeartbeatStatusEnum = 1
)

var HeartbeatStatusEnum_name = map[int32]string{
	0: "HEARTBEAT_OK",
	1: "HEARTBEAT_ERROR",
}

var HeartbeatStatusEnum_value = map[string]int32{
	"HEARTBEAT_OK":    0,
	"HEARTBEAT_ERROR": 1,
}

func (x HeartbeatStatusEnum) String() string {
	return proto.EnumName(HeartbeatStatusEnum_name, int32(x))
}

func (HeartbeatStatusEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_12ca758870675d40, []int{1}
}

type BarrierStatusEnum int32

const (
	BarrierStatusEnum_READY     BarrierStatusEnum = 0
	BarrierStatusEnum_NOT_READY BarrierStatusEnum = 1
)

var BarrierStatusEnum_name = map[int32]string{
	0: "READY",
	1: "NOT_READY",
}

var BarrierStatusEnum_value = map[string]int32{
	"READY":     0,
	"NOT_READY": 1,
}

func (x BarrierStatusEnum) String() string {
	return proto.EnumName(BarrierStatusEnum_name, int32(x))
}

func (BarrierStatusEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_12ca758870675d40, []int{2}
}

type StoreRecordStatusEnum int32

const (
	StoreRecordStatusEnum_SET_RECORD_OK    StoreRecordStatusEnum = 0
	StoreRecordStatusEnum_SET_RECORD_ERROR StoreRecordStatusEnum = 1
)

var StoreRecordStatusEnum_name = map[int32]string{
	0: "SET_RECORD_OK",
	1: "SET_RECORD_ERROR",
}

var StoreRecordStatusEnum_value = map[string]int32{
	"SET_RECORD_OK":    0,
	"SET_RECORD_ERROR": 1,
}

func (x StoreRecordStatusEnum) String() string {
	return proto.EnumName(StoreRecordStatusEnum_name, int32(x))
}

func (StoreRecordStatusEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_12ca758870675d40, []int{3}
}

type JoinTrainingRequest struct {
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	RunId  uint64 `protobuf:"varint,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	Epoch  int32  `protobuf:"varint,3,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (m *JoinTrainingRequest) Reset()         { *m = JoinTrainingRequest{} }
func (m *JoinTrainingRequest) String() string { return proto.CompactTextString(m) }
func (*JoinTrainingRequest) ProtoMessage()    {}
func (*JoinTrainingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_12ca758870675d40, []int{0}
}
func (m *JoinTrainingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JoinTrainingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JoinTrainingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JoinTrainingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinTrainingRequest.Merge(m, src)
}
func (m *JoinTrainingRequest) XXX_Size() int {
	return m.Size()
}
func (m *JoinTrainingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinTrainingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JoinTrainingRequest proto.InternalMessageInfo

func (m *JoinTrainingRequest) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *JoinTrainingRequest) GetRunId() uint64 {
	if m != nil {
		return m.RunId
	}
	return 0
}

func (m *JoinTrainingRequest) GetEpoch() int32 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

type MLNodeTrainStatus struct {
	Status      MLNodeTrainStatusEnum `protobuf:"varint,1,opt,name=status,proto3,enum=inference.inference.MLNodeTrainStatusEnum" json:"status,omitempty"`
	NodeId      string                `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Epoch       int32                 `protobuf:"varint,3,opt,name=epoch,proto3" json:"epoch,omitempty"`
	ActiveNodes []string              `protobuf:"bytes,4,rep,name=active_nodes,json=activeNodes,proto3" json:"active_nodes,omitempty"`
	Rank        int32                 `protobuf:"varint,5,opt,name=rank,proto3" json:"rank,omitempty"`
}

func (m *MLNodeTrainStatus) Reset()         { *m = MLNodeTrainStatus{} }
func (m *MLNodeTrainStatus) String() string { return proto.CompactTextString(m) }
func (*MLNodeTrainStatus) ProtoMessage()    {}
func (*MLNodeTrainStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_12ca758870675d40, []int{1}
}
func (m *MLNodeTrainStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MLNodeTrainStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MLNodeTrainStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MLNodeTrainStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MLNodeTrainStatus.Merge(m, src)
}
func (m *MLNodeTrainStatus) XXX_Size() int {
	return m.Size()
}
func (m *MLNodeTrainStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_MLNodeTrainStatus.DiscardUnknown(m)
}

var xxx_messageInfo_MLNodeTrainStatus proto.InternalMessageInfo

func (m *MLNodeTrainStatus) GetStatus() MLNodeTrainStatusEnum {
	if m != nil {
		return m.Status
	}
	return MLNodeTrainStatusEnum_OK
}

func (m *MLNodeTrainStatus) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *MLNodeTrainStatus) GetEpoch() int32 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *MLNodeTrainStatus) GetActiveNodes() []string {
	if m != nil {
		return m.ActiveNodes
	}
	return nil
}

func (m *MLNodeTrainStatus) GetRank() int32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

type HeartbeatRequest struct {
	NodeId      string  `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	RunId       uint64  `protobuf:"varint,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	LocalRank   int32   `protobuf:"varint,3,opt,name=local_rank,json=localRank,proto3" json:"local_rank,omitempty"`
	Timestamp   float64 `protobuf:"fixed64,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Step        int32   `protobuf:"varint,5,opt,name=step,proto3" json:"step,omitempty"`
	GlobalEpoch int32   `protobuf:"varint,6,opt,name=global_epoch,json=globalEpoch,proto3" json:"global_epoch,omitempty"`
}

func (m *HeartbeatRequest) Reset()         { *m = HeartbeatRequest{} }
func (m *HeartbeatRequest) String() string { return proto.CompactTextString(m) }
func (*HeartbeatRequest) ProtoMessage()    {}
func (*HeartbeatRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_12ca758870675d40, []int{2}
}
func (m *HeartbeatRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HeartbeatRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HeartbeatRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HeartbeatRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartbeatRequest.Merge(m, src)
}
func (m *HeartbeatRequest) XXX_Size() int {
	return m.Size()
}
func (m *HeartbeatRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartbeatRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HeartbeatRequest proto.InternalMessageInfo

func (m *HeartbeatRequest) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *HeartbeatRequest) GetRunId() uint64 {
	if m != nil {
		return m.RunId
	}
	return 0
}

func (m *HeartbeatRequest) GetLocalRank() int32 {
	if m != nil {
		return m.LocalRank
	}
	return 0
}

func (m *HeartbeatRequest) GetTimestamp() float64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *HeartbeatRequest) GetStep() int32 {
	if m != nil {
		return m.Step
	}
	return 0
}

func (m *HeartbeatRequest) GetGlobalEpoch() int32 {
	if m != nil {
		return m.GlobalEpoch
	}
	return 0
}

type HeartbeatResponse struct {
	Status HeartbeatStatusEnum `protobuf:"varint,1,opt,name=status,proto3,enum=inference.inference.HeartbeatStatusEnum" json:"status,omitempty"`
}

func (m *HeartbeatResponse) Reset()         { *m = HeartbeatResponse{} }
func (m *HeartbeatResponse) String() string { return proto.CompactTextString(m) }
func (*HeartbeatResponse) ProtoMessage()    {}
func (*HeartbeatResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_12ca758870675d40, []int{3}
}
func (m *HeartbeatResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HeartbeatResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HeartbeatResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HeartbeatResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartbeatResponse.Merge(m, src)
}
func (m *HeartbeatResponse) XXX_Size() int {
	return m.Size()
}
func (m *HeartbeatResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartbeatResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HeartbeatResponse proto.InternalMessageInfo

func (m *HeartbeatResponse) GetStatus() HeartbeatStatusEnum {
	if m != nil {
		return m.Status
	}
	return HeartbeatStatusEnum_HEARTBEAT_OK
}

type GetAliveNodesRequest struct {
	RunId uint64 `protobuf:"varint,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	Epoch int32  `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (m *GetAliveNodesRequest) Reset()         { *m = GetAliveNodesRequest{} }
func (m *GetAliveNodesRequest) String() string { return proto.CompactTextString(m) }
func (*GetAliveNodesRequest) ProtoMessage()    {}
func (*GetAliveNodesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_12ca758870675d40, []int{4}
}
func (m *GetAliveNodesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAliveNodesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAliveNodesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAliveNodesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAliveNodesRequest.Merge(m, src)
}
func (m *GetAliveNodesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAliveNodesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAliveNodesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAliveNodesRequest proto.InternalMessageInfo

func (m *GetAliveNodesRequest) GetRunId() uint64 {
	if m != nil {
		return m.RunId
	}
	return 0
}

func (m *GetAliveNodesRequest) GetEpoch() int32 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

type GetAliveNodesResponse struct {
	AliveNodes []string `protobuf:"bytes,1,rep,name=alive_nodes,json=aliveNodes,proto3" json:"alive_nodes,omitempty"`
}

func (m *GetAliveNodesResponse) Reset()         { *m = GetAliveNodesResponse{} }
func (m *GetAliveNodesResponse) String() string { return proto.CompactTextString(m) }
func (*GetAliveNodesResponse) ProtoMessage()    {}
func (*GetAliveNodesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_12ca758870675d40, []int{5}
}
func (m *GetAliveNodesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAliveNodesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAliveNodesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAliveNodesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAliveNodesResponse.Merge(m, src)
}
func (m *GetAliveNodesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAliveNodesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAliveNodesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAliveNodesResponse proto.InternalMessageInfo

func (m *GetAliveNodesResponse) GetAliveNodes() []string {
	if m != nil {
		return m.AliveNodes
	}
	return nil
}

type SetBarrierRequest struct {
	BarrierId string `protobuf:"bytes,1,opt,name=barrier_id,json=barrierId,proto3" json:"barrier_id,omitempty"`
	NodeId    string `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	RunId     uint64 `protobuf:"varint,3,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	Epoch     int32  `protobuf:"varint,4,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (m *SetBarrierRequest) Reset()         { *m = SetBarrierRequest{} }
func (m *SetBarrierRequest) String() string { return proto.CompactTextString(m) }
func (*SetBarrierRequest) ProtoMessage()    {}
func (*SetBarrierRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_12ca758870675d40, []int{6}
}
func (m *SetBarrierRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetBarrierRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetBarrierRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetBarrierRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetBarrierRequest.Merge(m, src)
}
func (m *SetBarrierRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetBarrierRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetBarrierRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetBarrierRequest proto.InternalMessageInfo

func (m *SetBarrierRequest) GetBarrierId() string {
	if m != nil {
		return m.BarrierId
	}
	return ""
}

func (m *SetBarrierRequest) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *SetBarrierRequest) GetRunId() uint64 {
	if m != nil {
		return m.RunId
	}
	return 0
}

func (m *SetBarrierRequest) GetEpoch() int32 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

type SetBarrierResponse struct {
	Status BarrierStatusEnum `protobuf:"varint,1,opt,name=status,proto3,enum=inference.inference.BarrierStatusEnum" json:"status,omitempty"`
}

func (m *SetBarrierResponse) Reset()         { *m = SetBarrierResponse{} }
func (m *SetBarrierResponse) String() string { return proto.CompactTextString(m) }
func (*SetBarrierResponse) ProtoMessage()    {}
func (*SetBarrierResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_12ca758870675d40, []int{7}
}
func (m *SetBarrierResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetBarrierResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetBarrierResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetBarrierResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetBarrierResponse.Merge(m, src)
}
func (m *SetBarrierResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetBarrierResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetBarrierResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetBarrierResponse proto.InternalMessageInfo

func (m *SetBarrierResponse) GetStatus() BarrierStatusEnum {
	if m != nil {
		return m.Status
	}
	return BarrierStatusEnum_READY
}

type GetBarrierStatusRequest struct {
	BarrierId string `protobuf:"bytes,1,opt,name=barrier_id,json=barrierId,proto3" json:"barrier_id,omitempty"`
	RunId     uint64 `protobuf:"varint,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	Epoch     int32  `protobuf:"varint,3,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (m *GetBarrierStatusRequest) Reset()         { *m = GetBarrierStatusRequest{} }
func (m *GetBarrierStatusRequest) String() string { return proto.CompactTextString(m) }
func (*GetBarrierStatusRequest) ProtoMessage()    {}
func (*GetBarrierStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_12ca758870675d40, []int{8}
}
func (m *GetBarrierStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBarrierStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBarrierStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBarrierStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBarrierStatusRequest.Merge(m, src)
}
func (m *GetBarrierStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetBarrierStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBarrierStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBarrierStatusRequest proto.InternalMessageInfo

func (m *GetBarrierStatusRequest) GetBarrierId() string {
	if m != nil {
		return m.BarrierId
	}
	return ""
}

func (m *GetBarrierStatusRequest) GetRunId() uint64 {
	if m != nil {
		return m.RunId
	}
	return 0
}

func (m *GetBarrierStatusRequest) GetEpoch() int32 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

type GetBarrierStatusResponse struct {
	AllReady   bool     `protobuf:"varint,1,opt,name=all_ready,json=allReady,proto3" json:"all_ready,omitempty"`
	NotReady   []string `protobuf:"bytes,2,rep,name=not_ready,json=notReady,proto3" json:"not_ready,omitempty"`
	AliveNodes []string `protobuf:"bytes,3,rep,name=alive_nodes,json=aliveNodes,proto3" json:"alive_nodes,omitempty"`
}

func (m *GetBarrierStatusResponse) Reset()         { *m = GetBarrierStatusResponse{} }
func (m *GetBarrierStatusResponse) String() string { return proto.CompactTextString(m) }
func (*GetBarrierStatusResponse) ProtoMessage()    {}
func (*GetBarrierStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_12ca758870675d40, []int{9}
}
func (m *GetBarrierStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBarrierStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBarrierStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBarrierStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBarrierStatusResponse.Merge(m, src)
}
func (m *GetBarrierStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetBarrierStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBarrierStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBarrierStatusResponse proto.InternalMessageInfo

func (m *GetBarrierStatusResponse) GetAllReady() bool {
	if m != nil {
		return m.AllReady
	}
	return false
}

func (m *GetBarrierStatusResponse) GetNotReady() []string {
	if m != nil {
		return m.NotReady
	}
	return nil
}

func (m *GetBarrierStatusResponse) GetAliveNodes() []string {
	if m != nil {
		return m.AliveNodes
	}
	return nil
}

type SetStoreRecordRequest struct {
	RunId  uint64  `protobuf:"varint,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	Record *Record `protobuf:"bytes,2,opt,name=record,proto3" json:"record,omitempty"`
}

func (m *SetStoreRecordRequest) Reset()         { *m = SetStoreRecordRequest{} }
func (m *SetStoreRecordRequest) String() string { return proto.CompactTextString(m) }
func (*SetStoreRecordRequest) ProtoMessage()    {}
func (*SetStoreRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_12ca758870675d40, []int{10}
}
func (m *SetStoreRecordRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetStoreRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetStoreRecordRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetStoreRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetStoreRecordRequest.Merge(m, src)
}
func (m *SetStoreRecordRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetStoreRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetStoreRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetStoreRecordRequest proto.InternalMessageInfo

func (m *SetStoreRecordRequest) GetRunId() uint64 {
	if m != nil {
		return m.RunId
	}
	return 0
}

func (m *SetStoreRecordRequest) GetRecord() *Record {
	if m != nil {
		return m.Record
	}
	return nil
}

type Record struct {
	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Record) Reset()         { *m = Record{} }
func (m *Record) String() string { return proto.CompactTextString(m) }
func (*Record) ProtoMessage()    {}
func (*Record) Descriptor() ([]byte, []int) {
	return fileDescriptor_12ca758870675d40, []int{11}
}
func (m *Record) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Record) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Record.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Record) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Record.Merge(m, src)
}
func (m *Record) XXX_Size() int {
	return m.Size()
}
func (m *Record) XXX_DiscardUnknown() {
	xxx_messageInfo_Record.DiscardUnknown(m)
}

var xxx_messageInfo_Record proto.InternalMessageInfo

func (m *Record) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Record) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type SetStoreRecordResponse struct {
	Status StoreRecordStatusEnum `protobuf:"varint,1,opt,name=status,proto3,enum=inference.inference.StoreRecordStatusEnum" json:"status,omitempty"`
}

func (m *SetStoreRecordResponse) Reset()         { *m = SetStoreRecordResponse{} }
func (m *SetStoreRecordResponse) String() string { return proto.CompactTextString(m) }
func (*SetStoreRecordResponse) ProtoMessage()    {}
func (*SetStoreRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_12ca758870675d40, []int{12}
}
func (m *SetStoreRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetStoreRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetStoreRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetStoreRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetStoreRecordResponse.Merge(m, src)
}
func (m *SetStoreRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetStoreRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetStoreRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetStoreRecordResponse proto.InternalMessageInfo

func (m *SetStoreRecordResponse) GetStatus() StoreRecordStatusEnum {
	if m != nil {
		return m.Status
	}
	return StoreRecordStatusEnum_SET_RECORD_OK
}

type GetStoreRecordRequest struct {
	RunId uint64 `protobuf:"varint,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	Key   string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *GetStoreRecordRequest) Reset()         { *m = GetStoreRecordRequest{} }
func (m *GetStoreRecordRequest) String() string { return proto.CompactTextString(m) }
func (*GetStoreRecordRequest) ProtoMessage()    {}
func (*GetStoreRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_12ca758870675d40, []int{13}
}
func (m *GetStoreRecordRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStoreRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStoreRecordRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStoreRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStoreRecordRequest.Merge(m, src)
}
func (m *GetStoreRecordRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetStoreRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStoreRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetStoreRecordRequest proto.InternalMessageInfo

func (m *GetStoreRecordRequest) GetRunId() uint64 {
	if m != nil {
		return m.RunId
	}
	return 0
}

func (m *GetStoreRecordRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type GetStoreRecordResponse struct {
	Record *Record `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
}

func (m *GetStoreRecordResponse) Reset()         { *m = GetStoreRecordResponse{} }
func (m *GetStoreRecordResponse) String() string { return proto.CompactTextString(m) }
func (*GetStoreRecordResponse) ProtoMessage()    {}
func (*GetStoreRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_12ca758870675d40, []int{14}
}
func (m *GetStoreRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStoreRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStoreRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStoreRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStoreRecordResponse.Merge(m, src)
}
func (m *GetStoreRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetStoreRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStoreRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetStoreRecordResponse proto.InternalMessageInfo

func (m *GetStoreRecordResponse) GetRecord() *Record {
	if m != nil {
		return m.Record
	}
	return nil
}

type StoreListKeysRequest struct {
	RunId uint64 `protobuf:"varint,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
}

func (m *StoreListKeysRequest) Reset()         { *m = StoreListKeysRequest{} }
func (m *StoreListKeysRequest) String() string { return proto.CompactTextString(m) }
func (*StoreListKeysRequest) ProtoMessage()    {}
func (*StoreListKeysRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_12ca758870675d40, []int{15}
}
func (m *StoreListKeysRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreListKeysRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoreListKeysRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoreListKeysRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreListKeysRequest.Merge(m, src)
}
func (m *StoreListKeysRequest) XXX_Size() int {
	return m.Size()
}
func (m *StoreListKeysRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreListKeysRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StoreListKeysRequest proto.InternalMessageInfo

func (m *StoreListKeysRequest) GetRunId() uint64 {
	if m != nil {
		return m.RunId
	}
	return 0
}

type StoreListKeysResponse struct {
	Keys []string `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (m *StoreListKeysResponse) Reset()         { *m = StoreListKeysResponse{} }
func (m *StoreListKeysResponse) String() string { return proto.CompactTextString(m) }
func (*StoreListKeysResponse) ProtoMessage()    {}
func (*StoreListKeysResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_12ca758870675d40, []int{16}
}
func (m *StoreListKeysResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreListKeysResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoreListKeysResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoreListKeysResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreListKeysResponse.Merge(m, src)
}
func (m *StoreListKeysResponse) XXX_Size() int {
	return m.Size()
}
func (m *StoreListKeysResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreListKeysResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StoreListKeysResponse proto.InternalMessageInfo

func (m *StoreListKeysResponse) GetKeys() []string {
	if m != nil {
		return m.Keys
	}
	return nil
}

func init() {
	proto.RegisterEnum("inference.inference.MLNodeTrainStatusEnum", MLNodeTrainStatusEnum_name, MLNodeTrainStatusEnum_value)
	proto.RegisterEnum("inference.inference.HeartbeatStatusEnum", HeartbeatStatusEnum_name, HeartbeatStatusEnum_value)
	proto.RegisterEnum("inference.inference.BarrierStatusEnum", BarrierStatusEnum_name, BarrierStatusEnum_value)
	proto.RegisterEnum("inference.inference.StoreRecordStatusEnum", StoreRecordStatusEnum_name, StoreRecordStatusEnum_value)
	proto.RegisterType((*JoinTrainingRequest)(nil), "inference.inference.JoinTrainingRequest")
	proto.RegisterType((*MLNodeTrainStatus)(nil), "inference.inference.MLNodeTrainStatus")
	proto.RegisterType((*HeartbeatRequest)(nil), "inference.inference.HeartbeatRequest")
	proto.RegisterType((*HeartbeatResponse)(nil), "inference.inference.HeartbeatResponse")
	proto.RegisterType((*GetAliveNodesRequest)(nil), "inference.inference.GetAliveNodesRequest")
	proto.RegisterType((*GetAliveNodesResponse)(nil), "inference.inference.GetAliveNodesResponse")
	proto.RegisterType((*SetBarrierRequest)(nil), "inference.inference.SetBarrierRequest")
	proto.RegisterType((*SetBarrierResponse)(nil), "inference.inference.SetBarrierResponse")
	proto.RegisterType((*GetBarrierStatusRequest)(nil), "inference.inference.GetBarrierStatusRequest")
	proto.RegisterType((*GetBarrierStatusResponse)(nil), "inference.inference.GetBarrierStatusResponse")
	proto.RegisterType((*SetStoreRecordRequest)(nil), "inference.inference.SetStoreRecordRequest")
	proto.RegisterType((*Record)(nil), "inference.inference.Record")
	proto.RegisterType((*SetStoreRecordResponse)(nil), "inference.inference.SetStoreRecordResponse")
	proto.RegisterType((*GetStoreRecordRequest)(nil), "inference.inference.GetStoreRecordRequest")
	proto.RegisterType((*GetStoreRecordResponse)(nil), "inference.inference.GetStoreRecordResponse")
	proto.RegisterType((*StoreListKeysRequest)(nil), "inference.inference.StoreListKeysRequest")
	proto.RegisterType((*StoreListKeysResponse)(nil), "inference.inference.StoreListKeysResponse")
}

func init() {
	proto.RegisterFile("inference/inference/network_node.proto", fileDescriptor_12ca758870675d40)
}

var fileDescriptor_12ca758870675d40 = []byte{
	// 959 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x36, 0xf5, 0xc3, 0x58, 0x63, 0xcb, 0xa5, 0xd6, 0x56, 0x22, 0x28, 0x8d, 0xaa, 0x12, 0xa8,
	0xab, 0x2a, 0xb5, 0x52, 0x38, 0x28, 0xd0, 0x43, 0x51, 0xd8, 0x8e, 0x55, 0xc5, 0xf9, 0xb1, 0x00,
	0x4a, 0x3d, 0xf4, 0x57, 0xa5, 0xc8, 0xb5, 0x43, 0x88, 0x26, 0xd5, 0xe5, 0xd2, 0x8d, 0xde, 0xa2,
	0x4f, 0xd3, 0x9e, 0x7a, 0xef, 0x31, 0xc7, 0x1e, 0x0b, 0xfb, 0x45, 0x8a, 0x5d, 0xae, 0x44, 0x9a,
	0x5a, 0xc5, 0x4c, 0xd1, 0xdb, 0xee, 0xec, 0xec, 0x7c, 0xdf, 0x7c, 0xb3, 0x9c, 0x21, 0xec, 0x3a,
	0xde, 0x19, 0x26, 0xd8, 0xb3, 0xf0, 0xa3, 0x78, 0xe5, 0x61, 0xfa, 0xab, 0x4f, 0x26, 0x23, 0xcf,
	0xb7, 0x71, 0x67, 0x4a, 0x7c, 0xea, 0xa3, 0xed, 0xc5, 0x69, 0x67, 0xb1, 0xd2, 0xbf, 0x87, 0xed,
	0x67, 0xbe, 0xe3, 0x0d, 0x89, 0xe9, 0x78, 0x8e, 0x77, 0x6e, 0xe0, 0x5f, 0x42, 0x1c, 0x50, 0x74,
	0x0f, 0xee, 0xb0, 0x9b, 0x23, 0xc7, 0xae, 0x29, 0x4d, 0xa5, 0x55, 0x32, 0x54, 0xb6, 0x3d, 0xb1,
	0x51, 0x15, 0x54, 0x12, 0x7a, 0xcc, 0x9e, 0x6b, 0x2a, 0xad, 0x82, 0x51, 0x24, 0xa1, 0x77, 0x62,
	0xa3, 0x1d, 0x28, 0xe2, 0xa9, 0x6f, 0xbd, 0xaa, 0xe5, 0x9b, 0x4a, 0xab, 0x68, 0x44, 0x1b, 0xfd,
	0x4f, 0x05, 0x2a, 0x2f, 0x5f, 0x9c, 0xfa, 0x36, 0xe6, 0xf1, 0x07, 0xd4, 0xa4, 0x61, 0x80, 0x8e,
	0x40, 0x0d, 0xf8, 0x8a, 0x87, 0xde, 0xda, 0x6f, 0x77, 0x24, 0xc4, 0x3a, 0x4b, 0xf7, 0xba, 0x5e,
	0x78, 0x61, 0x88, 0x9b, 0x49, 0x7e, 0xb9, 0x1b, 0xfc, 0xa4, 0x44, 0xd0, 0x87, 0xb0, 0x69, 0x5a,
	0xd4, 0xb9, 0xc4, 0x5c, 0x8f, 0xa0, 0x56, 0x68, 0xe6, 0x5b, 0x25, 0x63, 0x23, 0xb2, 0x31, 0x9c,
	0x00, 0x21, 0x28, 0x10, 0xd3, 0x9b, 0xd4, 0x8a, 0xfc, 0x1e, 0x5f, 0xeb, 0xbf, 0x2b, 0xa0, 0x3d,
	0xc5, 0x26, 0xa1, 0x63, 0x6c, 0xd2, 0xff, 0x2a, 0xcd, 0x03, 0x00, 0xd7, 0xb7, 0x4c, 0x77, 0xc4,
	0xc3, 0x47, 0xb4, 0x4a, 0xdc, 0x62, 0x98, 0xde, 0x04, 0xbd, 0x0f, 0x25, 0xea, 0x5c, 0xe0, 0x80,
	0x9a, 0x17, 0xd3, 0x5a, 0xa1, 0xa9, 0xb4, 0x14, 0x23, 0x36, 0x30, 0x56, 0x01, 0xc5, 0xd3, 0x39,
	0x2b, 0xb6, 0x66, 0xc9, 0x9c, 0xbb, 0xfe, 0xd8, 0x74, 0x47, 0x51, 0xa6, 0x2a, 0x3f, 0xdb, 0x88,
	0x6c, 0x5d, 0x2e, 0xfc, 0x37, 0x50, 0x49, 0xf0, 0x0e, 0xa6, 0xbe, 0x17, 0x60, 0x74, 0x90, 0xd2,
	0xbd, 0x25, 0xd5, 0x7d, 0x71, 0x6f, 0x59, 0x75, 0xfd, 0x09, 0xec, 0xf4, 0x30, 0x3d, 0x74, 0xe7,
	0xa2, 0xcd, 0x25, 0x89, 0x33, 0x57, 0xa4, 0x8f, 0x22, 0x97, 0x7c, 0x14, 0x5f, 0x40, 0x35, 0x15,
	0x44, 0xf0, 0xfb, 0x00, 0x36, 0x4c, 0x37, 0xae, 0x91, 0xc2, 0x6b, 0x04, 0xe6, 0xc2, 0x51, 0x7f,
	0x0d, 0x95, 0x01, 0xa6, 0x47, 0x26, 0x21, 0x0e, 0x26, 0x73, 0xec, 0x07, 0x00, 0xe3, 0xc8, 0x12,
	0x57, 0xa4, 0x24, 0x2c, 0x27, 0xf6, 0xea, 0x87, 0x12, 0x73, 0xce, 0x4b, 0x39, 0x17, 0x92, 0x9c,
	0x87, 0x80, 0x92, 0xc8, 0x82, 0xf0, 0x57, 0x29, 0x41, 0x77, 0xa5, 0x82, 0x8a, 0x5b, 0x12, 0x39,
	0x31, 0xdc, 0xeb, 0x2d, 0xa2, 0x46, 0xe7, 0x19, 0xb3, 0x7a, 0xa7, 0xaf, 0x30, 0x84, 0xda, 0x32,
	0x8c, 0x48, 0xe1, 0x3e, 0x94, 0x4c, 0xd7, 0x1d, 0x11, 0x6c, 0xda, 0x33, 0x0e, 0xb3, 0x6e, 0xac,
	0x9b, 0xae, 0x6b, 0xb0, 0x3d, 0x3b, 0xf4, 0x7c, 0x2a, 0x0e, 0x73, 0xbc, 0x1c, 0xeb, 0x9e, 0x4f,
	0xa3, 0xc3, 0x54, 0xb5, 0xf2, 0x4b, 0xd5, 0xb2, 0xa0, 0x3a, 0xc0, 0x74, 0x40, 0x7d, 0x82, 0x0d,
	0x6c, 0xf9, 0xc4, 0xbe, 0xe5, 0xb5, 0x3c, 0x06, 0x95, 0x70, 0x3f, 0x9e, 0xd3, 0xc6, 0xfe, 0x7d,
	0xa9, 0x9a, 0x22, 0x94, 0x70, 0xd5, 0x3f, 0x03, 0x35, 0xb2, 0x20, 0x0d, 0xf2, 0x13, 0x3c, 0x13,
	0x52, 0xb1, 0x25, 0x53, 0xe3, 0xd2, 0x74, 0x43, 0x2c, 0x0a, 0x1f, 0x6d, 0xf4, 0x1f, 0xe0, 0x6e,
	0x9a, 0x96, 0xd0, 0x22, 0x5b, 0x5f, 0x4a, 0xdc, 0x94, 0x94, 0xf4, 0x80, 0x3f, 0xee, 0xec, 0x49,
	0x0b, 0xd6, 0xb9, 0x05, 0x6b, 0xfd, 0x25, 0xdc, 0xed, 0xc9, 0xf9, 0xc5, 0x02, 0x29, 0xd9, 0x05,
	0xda, 0x83, 0x1d, 0x1e, 0xeb, 0x85, 0x13, 0xd0, 0xe7, 0x78, 0x76, 0xcb, 0x27, 0xab, 0x3f, 0x84,
	0x6a, 0xca, 0x5d, 0x80, 0x23, 0x28, 0x4c, 0xf0, 0x6c, 0xfe, 0x55, 0xf2, 0x75, 0xfb, 0x6b, 0xa8,
	0x4a, 0xbb, 0x34, 0x52, 0x21, 0xd7, 0x7f, 0xae, 0xad, 0xa1, 0x12, 0x14, 0xbb, 0x86, 0xd1, 0x37,
	0x34, 0x05, 0x01, 0xa8, 0xcf, 0xfa, 0x27, 0xa7, 0xdd, 0x63, 0x2d, 0x87, 0xb6, 0x00, 0x4e, 0xfb,
	0xc3, 0x91, 0xd8, 0xe7, 0xdb, 0x5f, 0xc2, 0xb6, 0xa4, 0xeb, 0x20, 0x0d, 0x36, 0x9f, 0x76, 0x0f,
	0x8d, 0xe1, 0x51, 0xf7, 0x70, 0x38, 0xe2, 0xf1, 0xb6, 0xe1, 0xbd, 0xd8, 0x22, 0x22, 0xb7, 0xf7,
	0xa0, 0xb2, 0xf4, 0x89, 0x31, 0x64, 0xa3, 0x7b, 0x78, 0xfc, 0xad, 0xb6, 0x86, 0xca, 0x50, 0x62,
	0x68, 0xd1, 0x56, 0x69, 0x1f, 0x88, 0x0c, 0xd3, 0x25, 0x44, 0x15, 0x28, 0x0f, 0xba, 0xcc, 0xef,
	0x49, 0xdf, 0x38, 0x8e, 0xf0, 0x76, 0x40, 0x4b, 0x98, 0x04, 0xe0, 0xfe, 0x1f, 0x77, 0x00, 0x9d,
	0x46, 0xe3, 0x95, 0x25, 0x3f, 0xc0, 0xe4, 0xd2, 0xb1, 0x30, 0xfa, 0x19, 0x36, 0x93, 0x93, 0x14,
	0xc9, 0xdb, 0xab, 0x64, 0xd8, 0xd6, 0x77, 0xb3, 0x0d, 0x40, 0xe4, 0xf0, 0xc7, 0x95, 0x8c, 0x20,
	0x0e, 0xfe, 0x7f, 0xa8, 0x9f, 0xa0, 0x3c, 0xc0, 0x9e, 0xbd, 0x28, 0x0b, 0xfa, 0xe8, 0xed, 0xc3,
	0xe2, 0xed, 0xf1, 0x97, 0x67, 0xd1, 0x19, 0x94, 0x6f, 0x0c, 0x01, 0xf4, 0x89, 0xf4, 0xa2, 0x6c,
	0xda, 0xd4, 0xdb, 0x59, 0x5c, 0x05, 0xce, 0x8f, 0x00, 0x71, 0xe3, 0x46, 0x72, 0x76, 0x4b, 0x33,
	0xa5, 0xfe, 0xf1, 0xad, 0x7e, 0x22, 0xbc, 0x0f, 0x5a, 0xba, 0xb5, 0xa2, 0x4f, 0x57, 0xd1, 0x93,
	0x35, 0xfa, 0xfa, 0x5e, 0x46, 0x6f, 0x01, 0xe8, 0xc0, 0xd6, 0xcd, 0xee, 0x85, 0xda, 0xab, 0xb8,
	0x2e, 0x37, 0xa1, 0xfa, 0xc3, 0x4c, 0xbe, 0x31, 0x54, 0x2f, 0x0b, 0x54, 0xef, 0x1d, 0xa0, 0x56,
	0x74, 0xb6, 0x33, 0x28, 0xb3, 0x86, 0xc3, 0x8f, 0x58, 0xd7, 0x59, 0xf1, 0x1a, 0x64, 0x8d, 0xac,
	0xde, 0xce, 0xe2, 0x1a, 0xe1, 0x1c, 0xf5, 0xff, 0xba, 0x6a, 0x28, 0x6f, 0xae, 0x1a, 0xca, 0x3f,
	0x57, 0x0d, 0xe5, 0xb7, 0xeb, 0xc6, 0xda, 0x9b, 0xeb, 0xc6, 0xda, 0xdf, 0xd7, 0x8d, 0xb5, 0xef,
	0x3e, 0x3f, 0x77, 0xe8, 0xab, 0x70, 0xdc, 0xb1, 0xfc, 0x8b, 0x47, 0x53, 0xe2, 0xdb, 0xa1, 0x45,
	0x03, 0xcb, 0x49, 0xfd, 0x53, 0xbf, 0x4e, 0xac, 0xe9, 0x6c, 0x8a, 0x83, 0xb1, 0xca, 0xff, 0xac,
	0x1f, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x60, 0x73, 0xc7, 0x5c, 0x83, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NetworkNodeServiceClient is the client API for NetworkNodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NetworkNodeServiceClient interface {
	JoinTraining(ctx context.Context, in *JoinTrainingRequest, opts ...grpc.CallOption) (*MLNodeTrainStatus, error)
	GetJoinTrainingStatus(ctx context.Context, in *JoinTrainingRequest, opts ...grpc.CallOption) (*MLNodeTrainStatus, error)
	SendHeartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
	GetAliveNodes(ctx context.Context, in *GetAliveNodesRequest, opts ...grpc.CallOption) (*GetAliveNodesResponse, error)
	SetBarrier(ctx context.Context, in *SetBarrierRequest, opts ...grpc.CallOption) (*SetBarrierResponse, error)
	GetBarrierStatus(ctx context.Context, in *GetBarrierStatusRequest, opts ...grpc.CallOption) (*GetBarrierStatusResponse, error)
	SetStoreRecord(ctx context.Context, in *SetStoreRecordRequest, opts ...grpc.CallOption) (*SetStoreRecordResponse, error)
	GetStoreRecord(ctx context.Context, in *GetStoreRecordRequest, opts ...grpc.CallOption) (*GetStoreRecordResponse, error)
	ListStoreKeys(ctx context.Context, in *StoreListKeysRequest, opts ...grpc.CallOption) (*StoreListKeysResponse, error)
}

type networkNodeServiceClient struct {
	cc grpc1.ClientConn
}

func NewNetworkNodeServiceClient(cc grpc1.ClientConn) NetworkNodeServiceClient {
	return &networkNodeServiceClient{cc}
}

func (c *networkNodeServiceClient) JoinTraining(ctx context.Context, in *JoinTrainingRequest, opts ...grpc.CallOption) (*MLNodeTrainStatus, error) {
	out := new(MLNodeTrainStatus)
	err := c.cc.Invoke(ctx, "/inference.inference.NetworkNodeService/JoinTraining", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkNodeServiceClient) GetJoinTrainingStatus(ctx context.Context, in *JoinTrainingRequest, opts ...grpc.CallOption) (*MLNodeTrainStatus, error) {
	out := new(MLNodeTrainStatus)
	err := c.cc.Invoke(ctx, "/inference.inference.NetworkNodeService/GetJoinTrainingStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkNodeServiceClient) SendHeartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.NetworkNodeService/SendHeartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkNodeServiceClient) GetAliveNodes(ctx context.Context, in *GetAliveNodesRequest, opts ...grpc.CallOption) (*GetAliveNodesResponse, error) {
	out := new(GetAliveNodesResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.NetworkNodeService/GetAliveNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkNodeServiceClient) SetBarrier(ctx context.Context, in *SetBarrierRequest, opts ...grpc.CallOption) (*SetBarrierResponse, error) {
	out := new(SetBarrierResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.NetworkNodeService/SetBarrier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkNodeServiceClient) GetBarrierStatus(ctx context.Context, in *GetBarrierStatusRequest, opts ...grpc.CallOption) (*GetBarrierStatusResponse, error) {
	out := new(GetBarrierStatusResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.NetworkNodeService/GetBarrierStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkNodeServiceClient) SetStoreRecord(ctx context.Context, in *SetStoreRecordRequest, opts ...grpc.CallOption) (*SetStoreRecordResponse, error) {
	out := new(SetStoreRecordResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.NetworkNodeService/SetStoreRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkNodeServiceClient) GetStoreRecord(ctx context.Context, in *GetStoreRecordRequest, opts ...grpc.CallOption) (*GetStoreRecordResponse, error) {
	out := new(GetStoreRecordResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.NetworkNodeService/GetStoreRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkNodeServiceClient) ListStoreKeys(ctx context.Context, in *StoreListKeysRequest, opts ...grpc.CallOption) (*StoreListKeysResponse, error) {
	out := new(StoreListKeysResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.NetworkNodeService/ListStoreKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkNodeServiceServer is the server API for NetworkNodeService service.
type NetworkNodeServiceServer interface {
	JoinTraining(context.Context, *JoinTrainingRequest) (*MLNodeTrainStatus, error)
	GetJoinTrainingStatus(context.Context, *JoinTrainingRequest) (*MLNodeTrainStatus, error)
	SendHeartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	GetAliveNodes(context.Context, *GetAliveNodesRequest) (*GetAliveNodesResponse, error)
	SetBarrier(context.Context, *SetBarrierRequest) (*SetBarrierResponse, error)
	GetBarrierStatus(context.Context, *GetBarrierStatusRequest) (*GetBarrierStatusResponse, error)
	SetStoreRecord(context.Context, *SetStoreRecordRequest) (*SetStoreRecordResponse, error)
	GetStoreRecord(context.Context, *GetStoreRecordRequest) (*GetStoreRecordResponse, error)
	ListStoreKeys(context.Context, *StoreListKeysRequest) (*StoreListKeysResponse, error)
}

// UnimplementedNetworkNodeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNetworkNodeServiceServer struct {
}

func (*UnimplementedNetworkNodeServiceServer) JoinTraining(ctx context.Context, req *JoinTrainingRequest) (*MLNodeTrainStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinTraining not implemented")
}
func (*UnimplementedNetworkNodeServiceServer) GetJoinTrainingStatus(ctx context.Context, req *JoinTrainingRequest) (*MLNodeTrainStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJoinTrainingStatus not implemented")
}
func (*UnimplementedNetworkNodeServiceServer) SendHeartbeat(ctx context.Context, req *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendHeartbeat not implemented")
}
func (*UnimplementedNetworkNodeServiceServer) GetAliveNodes(ctx context.Context, req *GetAliveNodesRequest) (*GetAliveNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAliveNodes not implemented")
}
func (*UnimplementedNetworkNodeServiceServer) SetBarrier(ctx context.Context, req *SetBarrierRequest) (*SetBarrierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBarrier not implemented")
}
func (*UnimplementedNetworkNodeServiceServer) GetBarrierStatus(ctx context.Context, req *GetBarrierStatusRequest) (*GetBarrierStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBarrierStatus not implemented")
}
func (*UnimplementedNetworkNodeServiceServer) SetStoreRecord(ctx context.Context, req *SetStoreRecordRequest) (*SetStoreRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStoreRecord not implemented")
}
func (*UnimplementedNetworkNodeServiceServer) GetStoreRecord(ctx context.Context, req *GetStoreRecordRequest) (*GetStoreRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoreRecord not implemented")
}
func (*UnimplementedNetworkNodeServiceServer) ListStoreKeys(ctx context.Context, req *StoreListKeysRequest) (*StoreListKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStoreKeys not implemented")
}

func RegisterNetworkNodeServiceServer(s grpc1.Server, srv NetworkNodeServiceServer) {
	s.RegisterService(&_NetworkNodeService_serviceDesc, srv)
}

func _NetworkNodeService_JoinTraining_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinTrainingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkNodeServiceServer).JoinTraining(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.NetworkNodeService/JoinTraining",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkNodeServiceServer).JoinTraining(ctx, req.(*JoinTrainingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkNodeService_GetJoinTrainingStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinTrainingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkNodeServiceServer).GetJoinTrainingStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.NetworkNodeService/GetJoinTrainingStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkNodeServiceServer).GetJoinTrainingStatus(ctx, req.(*JoinTrainingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkNodeService_SendHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkNodeServiceServer).SendHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.NetworkNodeService/SendHeartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkNodeServiceServer).SendHeartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkNodeService_GetAliveNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAliveNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkNodeServiceServer).GetAliveNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.NetworkNodeService/GetAliveNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkNodeServiceServer).GetAliveNodes(ctx, req.(*GetAliveNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkNodeService_SetBarrier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBarrierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkNodeServiceServer).SetBarrier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.NetworkNodeService/SetBarrier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkNodeServiceServer).SetBarrier(ctx, req.(*SetBarrierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkNodeService_GetBarrierStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBarrierStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkNodeServiceServer).GetBarrierStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.NetworkNodeService/GetBarrierStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkNodeServiceServer).GetBarrierStatus(ctx, req.(*GetBarrierStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkNodeService_SetStoreRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStoreRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkNodeServiceServer).SetStoreRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.NetworkNodeService/SetStoreRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkNodeServiceServer).SetStoreRecord(ctx, req.(*SetStoreRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkNodeService_GetStoreRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoreRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkNodeServiceServer).GetStoreRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.NetworkNodeService/GetStoreRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkNodeServiceServer).GetStoreRecord(ctx, req.(*GetStoreRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkNodeService_ListStoreKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreListKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkNodeServiceServer).ListStoreKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.NetworkNodeService/ListStoreKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkNodeServiceServer).ListStoreKeys(ctx, req.(*StoreListKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var NetworkNodeService_serviceDesc = _NetworkNodeService_serviceDesc
var _NetworkNodeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "inference.inference.NetworkNodeService",
	HandlerType: (*NetworkNodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinTraining",
			Handler:    _NetworkNodeService_JoinTraining_Handler,
		},
		{
			MethodName: "GetJoinTrainingStatus",
			Handler:    _NetworkNodeService_GetJoinTrainingStatus_Handler,
		},
		{
			MethodName: "SendHeartbeat",
			Handler:    _NetworkNodeService_SendHeartbeat_Handler,
		},
		{
			MethodName: "GetAliveNodes",
			Handler:    _NetworkNodeService_GetAliveNodes_Handler,
		},
		{
			MethodName: "SetBarrier",
			Handler:    _NetworkNodeService_SetBarrier_Handler,
		},
		{
			MethodName: "GetBarrierStatus",
			Handler:    _NetworkNodeService_GetBarrierStatus_Handler,
		},
		{
			MethodName: "SetStoreRecord",
			Handler:    _NetworkNodeService_SetStoreRecord_Handler,
		},
		{
			MethodName: "GetStoreRecord",
			Handler:    _NetworkNodeService_GetStoreRecord_Handler,
		},
		{
			MethodName: "ListStoreKeys",
			Handler:    _NetworkNodeService_ListStoreKeys_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inference/inference/network_node.proto",
}

func (m *JoinTrainingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinTrainingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JoinTrainingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Epoch != 0 {
		i = encodeVarintNetworkNode(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x18
	}
	if m.RunId != 0 {
		i = encodeVarintNetworkNode(dAtA, i, uint64(m.RunId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintNetworkNode(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MLNodeTrainStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MLNodeTrainStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MLNodeTrainStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Rank != 0 {
		i = encodeVarintNetworkNode(dAtA, i, uint64(m.Rank))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ActiveNodes) > 0 {
		for iNdEx := len(m.ActiveNodes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ActiveNodes[iNdEx])
			copy(dAtA[i:], m.ActiveNodes[iNdEx])
			i = encodeVarintNetworkNode(dAtA, i, uint64(len(m.ActiveNodes[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Epoch != 0 {
		i = encodeVarintNetworkNode(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x18
	}
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintNetworkNode(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintNetworkNode(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HeartbeatRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeartbeatRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HeartbeatRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GlobalEpoch != 0 {
		i = encodeVarintNetworkNode(dAtA, i, uint64(m.GlobalEpoch))
		i--
		dAtA[i] = 0x30
	}
	if m.Step != 0 {
		i = encodeVarintNetworkNode(dAtA, i, uint64(m.Step))
		i--
		dAtA[i] = 0x28
	}
	if m.Timestamp != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Timestamp))))
		i--
		dAtA[i] = 0x21
	}
	if m.LocalRank != 0 {
		i = encodeVarintNetworkNode(dAtA, i, uint64(m.LocalRank))
		i--
		dAtA[i] = 0x18
	}
	if m.RunId != 0 {
		i = encodeVarintNetworkNode(dAtA, i, uint64(m.RunId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintNetworkNode(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HeartbeatResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeartbeatResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HeartbeatResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintNetworkNode(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetAliveNodesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAliveNodesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAliveNodesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Epoch != 0 {
		i = encodeVarintNetworkNode(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x10
	}
	if m.RunId != 0 {
		i = encodeVarintNetworkNode(dAtA, i, uint64(m.RunId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetAliveNodesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAliveNodesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAliveNodesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AliveNodes) > 0 {
		for iNdEx := len(m.AliveNodes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AliveNodes[iNdEx])
			copy(dAtA[i:], m.AliveNodes[iNdEx])
			i = encodeVarintNetworkNode(dAtA, i, uint64(len(m.AliveNodes[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SetBarrierRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetBarrierRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetBarrierRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Epoch != 0 {
		i = encodeVarintNetworkNode(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x20
	}
	if m.RunId != 0 {
		i = encodeVarintNetworkNode(dAtA, i, uint64(m.RunId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintNetworkNode(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BarrierId) > 0 {
		i -= len(m.BarrierId)
		copy(dAtA[i:], m.BarrierId)
		i = encodeVarintNetworkNode(dAtA, i, uint64(len(m.BarrierId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetBarrierResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetBarrierResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetBarrierResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintNetworkNode(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetBarrierStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBarrierStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBarrierStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Epoch != 0 {
		i = encodeVarintNetworkNode(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x18
	}
	if m.RunId != 0 {
		i = encodeVarintNetworkNode(dAtA, i, uint64(m.RunId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.BarrierId) > 0 {
		i -= len(m.BarrierId)
		copy(dAtA[i:], m.BarrierId)
		i = encodeVarintNetworkNode(dAtA, i, uint64(len(m.BarrierId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetBarrierStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBarrierStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBarrierStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AliveNodes) > 0 {
		for iNdEx := len(m.AliveNodes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AliveNodes[iNdEx])
			copy(dAtA[i:], m.AliveNodes[iNdEx])
			i = encodeVarintNetworkNode(dAtA, i, uint64(len(m.AliveNodes[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.NotReady) > 0 {
		for iNdEx := len(m.NotReady) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.NotReady[iNdEx])
			copy(dAtA[i:], m.NotReady[iNdEx])
			i = encodeVarintNetworkNode(dAtA, i, uint64(len(m.NotReady[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.AllReady {
		i--
		if m.AllReady {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SetStoreRecordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetStoreRecordRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetStoreRecordRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Record != nil {
		{
			size, err := m.Record.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetworkNode(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RunId != 0 {
		i = encodeVarintNetworkNode(dAtA, i, uint64(m.RunId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Record) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Record) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Record) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintNetworkNode(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintNetworkNode(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetStoreRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetStoreRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetStoreRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintNetworkNode(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetStoreRecordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStoreRecordRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStoreRecordRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintNetworkNode(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x12
	}
	if m.RunId != 0 {
		i = encodeVarintNetworkNode(dAtA, i, uint64(m.RunId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetStoreRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStoreRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStoreRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Record != nil {
		{
			size, err := m.Record.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetworkNode(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StoreListKeysRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreListKeysRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoreListKeysRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RunId != 0 {
		i = encodeVarintNetworkNode(dAtA, i, uint64(m.RunId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StoreListKeysResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreListKeysResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoreListKeysResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for iNdEx := len(m.Keys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Keys[iNdEx])
			copy(dAtA[i:], m.Keys[iNdEx])
			i = encodeVarintNetworkNode(dAtA, i, uint64(len(m.Keys[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintNetworkNode(dAtA []byte, offset int, v uint64) int {
	offset -= sovNetworkNode(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *JoinTrainingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovNetworkNode(uint64(l))
	}
	if m.RunId != 0 {
		n += 1 + sovNetworkNode(uint64(m.RunId))
	}
	if m.Epoch != 0 {
		n += 1 + sovNetworkNode(uint64(m.Epoch))
	}
	return n
}

func (m *MLNodeTrainStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovNetworkNode(uint64(m.Status))
	}
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovNetworkNode(uint64(l))
	}
	if m.Epoch != 0 {
		n += 1 + sovNetworkNode(uint64(m.Epoch))
	}
	if len(m.ActiveNodes) > 0 {
		for _, s := range m.ActiveNodes {
			l = len(s)
			n += 1 + l + sovNetworkNode(uint64(l))
		}
	}
	if m.Rank != 0 {
		n += 1 + sovNetworkNode(uint64(m.Rank))
	}
	return n
}

func (m *HeartbeatRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovNetworkNode(uint64(l))
	}
	if m.RunId != 0 {
		n += 1 + sovNetworkNode(uint64(m.RunId))
	}
	if m.LocalRank != 0 {
		n += 1 + sovNetworkNode(uint64(m.LocalRank))
	}
	if m.Timestamp != 0 {
		n += 9
	}
	if m.Step != 0 {
		n += 1 + sovNetworkNode(uint64(m.Step))
	}
	if m.GlobalEpoch != 0 {
		n += 1 + sovNetworkNode(uint64(m.GlobalEpoch))
	}
	return n
}

func (m *HeartbeatResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovNetworkNode(uint64(m.Status))
	}
	return n
}

func (m *GetAliveNodesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RunId != 0 {
		n += 1 + sovNetworkNode(uint64(m.RunId))
	}
	if m.Epoch != 0 {
		n += 1 + sovNetworkNode(uint64(m.Epoch))
	}
	return n
}

func (m *GetAliveNodesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AliveNodes) > 0 {
		for _, s := range m.AliveNodes {
			l = len(s)
			n += 1 + l + sovNetworkNode(uint64(l))
		}
	}
	return n
}

func (m *SetBarrierRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BarrierId)
	if l > 0 {
		n += 1 + l + sovNetworkNode(uint64(l))
	}
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovNetworkNode(uint64(l))
	}
	if m.RunId != 0 {
		n += 1 + sovNetworkNode(uint64(m.RunId))
	}
	if m.Epoch != 0 {
		n += 1 + sovNetworkNode(uint64(m.Epoch))
	}
	return n
}

func (m *SetBarrierResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovNetworkNode(uint64(m.Status))
	}
	return n
}

func (m *GetBarrierStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BarrierId)
	if l > 0 {
		n += 1 + l + sovNetworkNode(uint64(l))
	}
	if m.RunId != 0 {
		n += 1 + sovNetworkNode(uint64(m.RunId))
	}
	if m.Epoch != 0 {
		n += 1 + sovNetworkNode(uint64(m.Epoch))
	}
	return n
}

func (m *GetBarrierStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllReady {
		n += 2
	}
	if len(m.NotReady) > 0 {
		for _, s := range m.NotReady {
			l = len(s)
			n += 1 + l + sovNetworkNode(uint64(l))
		}
	}
	if len(m.AliveNodes) > 0 {
		for _, s := range m.AliveNodes {
			l = len(s)
			n += 1 + l + sovNetworkNode(uint64(l))
		}
	}
	return n
}

func (m *SetStoreRecordRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RunId != 0 {
		n += 1 + sovNetworkNode(uint64(m.RunId))
	}
	if m.Record != nil {
		l = m.Record.Size()
		n += 1 + l + sovNetworkNode(uint64(l))
	}
	return n
}

func (m *Record) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovNetworkNode(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovNetworkNode(uint64(l))
	}
	return n
}

func (m *SetStoreRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovNetworkNode(uint64(m.Status))
	}
	return n
}

func (m *GetStoreRecordRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RunId != 0 {
		n += 1 + sovNetworkNode(uint64(m.RunId))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovNetworkNode(uint64(l))
	}
	return n
}

func (m *GetStoreRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Record != nil {
		l = m.Record.Size()
		n += 1 + l + sovNetworkNode(uint64(l))
	}
	return n
}

func (m *StoreListKeysRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RunId != 0 {
		n += 1 + sovNetworkNode(uint64(m.RunId))
	}
	return n
}

func (m *StoreListKeysResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for _, s := range m.Keys {
			l = len(s)
			n += 1 + l + sovNetworkNode(uint64(l))
		}
	}
	return n
}

func sovNetworkNode(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNetworkNode(x uint64) (n int) {
	return sovNetworkNode(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *JoinTrainingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinTrainingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinTrainingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunId", wireType)
			}
			m.RunId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RunId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetworkNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MLNodeTrainStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MLNodeTrainStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MLNodeTrainStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= MLNodeTrainStatusEnum(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveNodes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActiveNodes = append(m.ActiveNodes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetworkNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeartbeatRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeartbeatRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeartbeatRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunId", wireType)
			}
			m.RunId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RunId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalRank", wireType)
			}
			m.LocalRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LocalRank |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Timestamp = float64(math.Float64frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			m.Step = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Step |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalEpoch", wireType)
			}
			m.GlobalEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GlobalEpoch |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetworkNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeartbeatResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeartbeatResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeartbeatResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= HeartbeatStatusEnum(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetworkNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAliveNodesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAliveNodesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAliveNodesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunId", wireType)
			}
			m.RunId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RunId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetworkNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAliveNodesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAliveNodesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAliveNodesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AliveNodes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AliveNodes = append(m.AliveNodes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetworkNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetBarrierRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetBarrierRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetBarrierRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BarrierId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BarrierId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunId", wireType)
			}
			m.RunId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RunId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetworkNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetBarrierResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetBarrierResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetBarrierResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= BarrierStatusEnum(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetworkNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBarrierStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBarrierStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBarrierStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BarrierId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BarrierId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunId", wireType)
			}
			m.RunId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RunId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetworkNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBarrierStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBarrierStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBarrierStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllReady", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllReady = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotReady", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotReady = append(m.NotReady, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AliveNodes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AliveNodes = append(m.AliveNodes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetworkNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetStoreRecordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetStoreRecordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetStoreRecordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunId", wireType)
			}
			m.RunId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RunId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Record == nil {
				m.Record = &Record{}
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetworkNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Record) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Record: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Record: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetworkNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetStoreRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetStoreRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetStoreRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= StoreRecordStatusEnum(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetworkNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStoreRecordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStoreRecordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStoreRecordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunId", wireType)
			}
			m.RunId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RunId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetworkNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStoreRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStoreRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStoreRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Record == nil {
				m.Record = &Record{}
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetworkNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreListKeysRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreListKeysRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreListKeysRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunId", wireType)
			}
			m.RunId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RunId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetworkNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreListKeysResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreListKeysResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreListKeysResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetworkNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNetworkNode(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNetworkNode
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetworkNode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetworkNode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNetworkNode
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNetworkNode
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNetworkNode
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNetworkNode        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNetworkNode          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNetworkNode = fmt.Errorf("proto: unexpected end of group")
)

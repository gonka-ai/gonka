// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: inference/inference/activeparticipants.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Not added to the Genesis, because at genesis it's constructed based on Participants
type ActiveParticipants struct {
	Participants         []*ActiveParticipant `protobuf:"bytes,1,rep,name=participants,proto3" json:"participants,omitempty"`
	EpochGroupId         uint64               `protobuf:"varint,2,opt,name=epochGroupId,proto3" json:"epochGroupId,omitempty"`
	PocStartBlockHeight  int64                `protobuf:"varint,3,opt,name=pocStartBlockHeight,proto3" json:"pocStartBlockHeight,omitempty"`
	EffectiveBlockHeight int64                `protobuf:"varint,4,opt,name=effectiveBlockHeight,proto3" json:"effectiveBlockHeight,omitempty"`
	CreatedAtBlockHeight int64                `protobuf:"varint,5,opt,name=createdAtBlockHeight,proto3" json:"createdAtBlockHeight,omitempty"`
}

func (m *ActiveParticipants) Reset()         { *m = ActiveParticipants{} }
func (m *ActiveParticipants) String() string { return proto.CompactTextString(m) }
func (*ActiveParticipants) ProtoMessage()    {}
func (*ActiveParticipants) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd4d0434f36692fa, []int{0}
}
func (m *ActiveParticipants) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActiveParticipants) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActiveParticipants.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActiveParticipants) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActiveParticipants.Merge(m, src)
}
func (m *ActiveParticipants) XXX_Size() int {
	return m.Size()
}
func (m *ActiveParticipants) XXX_DiscardUnknown() {
	xxx_messageInfo_ActiveParticipants.DiscardUnknown(m)
}

var xxx_messageInfo_ActiveParticipants proto.InternalMessageInfo

func (m *ActiveParticipants) GetParticipants() []*ActiveParticipant {
	if m != nil {
		return m.Participants
	}
	return nil
}

func (m *ActiveParticipants) GetEpochGroupId() uint64 {
	if m != nil {
		return m.EpochGroupId
	}
	return 0
}

func (m *ActiveParticipants) GetPocStartBlockHeight() int64 {
	if m != nil {
		return m.PocStartBlockHeight
	}
	return 0
}

func (m *ActiveParticipants) GetEffectiveBlockHeight() int64 {
	if m != nil {
		return m.EffectiveBlockHeight
	}
	return 0
}

func (m *ActiveParticipants) GetCreatedAtBlockHeight() int64 {
	if m != nil {
		return m.CreatedAtBlockHeight
	}
	return 0
}

type ActiveParticipant struct {
	Index        string   `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	ValidatorKey string   `protobuf:"bytes,2,opt,name=validatorKey,proto3" json:"validatorKey,omitempty"`
	Weight       int64    `protobuf:"varint,3,opt,name=weight,proto3" json:"weight,omitempty"`
	InferenceUrl string   `protobuf:"bytes,4,opt,name=inferenceUrl,proto3" json:"inferenceUrl,omitempty"`
	Models       []string `protobuf:"bytes,5,rep,name=models,proto3" json:"models,omitempty"`
}

func (m *ActiveParticipant) Reset()         { *m = ActiveParticipant{} }
func (m *ActiveParticipant) String() string { return proto.CompactTextString(m) }
func (*ActiveParticipant) ProtoMessage()    {}
func (*ActiveParticipant) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd4d0434f36692fa, []int{1}
}
func (m *ActiveParticipant) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActiveParticipant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActiveParticipant.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActiveParticipant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActiveParticipant.Merge(m, src)
}
func (m *ActiveParticipant) XXX_Size() int {
	return m.Size()
}
func (m *ActiveParticipant) XXX_DiscardUnknown() {
	xxx_messageInfo_ActiveParticipant.DiscardUnknown(m)
}

var xxx_messageInfo_ActiveParticipant proto.InternalMessageInfo

func (m *ActiveParticipant) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *ActiveParticipant) GetValidatorKey() string {
	if m != nil {
		return m.ValidatorKey
	}
	return ""
}

func (m *ActiveParticipant) GetWeight() int64 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *ActiveParticipant) GetInferenceUrl() string {
	if m != nil {
		return m.InferenceUrl
	}
	return ""
}

func (m *ActiveParticipant) GetModels() []string {
	if m != nil {
		return m.Models
	}
	return nil
}

func init() {
	proto.RegisterType((*ActiveParticipants)(nil), "inference.inference.ActiveParticipants")
	proto.RegisterType((*ActiveParticipant)(nil), "inference.inference.ActiveParticipant")
}

func init() {
	proto.RegisterFile("inference/inference/activeparticipants.proto", fileDescriptor_cd4d0434f36692fa)
}

var fileDescriptor_cd4d0434f36692fa = []byte{
	// 339 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xbf, 0x6e, 0xf2, 0x30,
	0x14, 0xc5, 0x31, 0x01, 0xa4, 0xf8, 0x63, 0xf9, 0x0c, 0xaa, 0x32, 0x45, 0x11, 0x43, 0x95, 0xa1,
	0x0a, 0x15, 0x55, 0x1f, 0x00, 0x96, 0xfe, 0x1b, 0x5a, 0xb9, 0xea, 0xd2, 0xcd, 0x38, 0x17, 0xb0,
	0x1a, 0x62, 0xcb, 0x31, 0x14, 0xde, 0xa2, 0x4f, 0x50, 0xa9, 0x6f, 0xd3, 0x91, 0xb1, 0x63, 0x05,
	0x2f, 0x52, 0x25, 0xa0, 0x34, 0x29, 0xd9, 0xee, 0x3d, 0xc7, 0xbf, 0x7b, 0x75, 0xac, 0x8b, 0xcf,
	0x44, 0x3c, 0x01, 0x0d, 0x31, 0x87, 0xfe, 0x6f, 0xc5, 0xb8, 0x11, 0x4b, 0x50, 0x4c, 0x1b, 0xc1,
	0x85, 0x62, 0xb1, 0x49, 0x02, 0xa5, 0xa5, 0x91, 0xa4, 0x93, 0xbf, 0x09, 0xf2, 0xaa, 0xf7, 0x5e,
	0xc7, 0x64, 0x98, 0x11, 0x0f, 0x05, 0x82, 0xdc, 0xe2, 0x76, 0x71, 0x82, 0x83, 0x3c, 0xcb, 0xff,
	0x37, 0x38, 0x0d, 0x2a, 0x46, 0x04, 0x47, 0x38, 0x2d, 0xb1, 0xa4, 0x87, 0xdb, 0xa0, 0x24, 0x9f,
	0x5d, 0x69, 0xb9, 0x50, 0x37, 0xa1, 0x53, 0xf7, 0x90, 0xdf, 0xa0, 0x25, 0x8d, 0x9c, 0xe3, 0x8e,
	0x92, 0xfc, 0xd1, 0x30, 0x6d, 0x46, 0x91, 0xe4, 0x2f, 0xd7, 0x20, 0xa6, 0x33, 0xe3, 0x58, 0x1e,
	0xf2, 0x2d, 0x5a, 0x65, 0x91, 0x01, 0xee, 0xc2, 0x64, 0x02, 0xd9, 0xee, 0x22, 0xd2, 0xc8, 0x90,
	0x4a, 0x2f, 0x65, 0xb8, 0x06, 0x66, 0x20, 0x1c, 0x96, 0xd6, 0x34, 0xf7, 0x4c, 0x95, 0xd7, 0xfb,
	0x40, 0xf8, 0xff, 0x51, 0x42, 0xd2, 0xc5, 0x4d, 0x11, 0x87, 0xb0, 0x72, 0x90, 0x87, 0x7c, 0x9b,
	0xee, 0x9b, 0x34, 0xe9, 0x92, 0x45, 0x22, 0x64, 0x46, 0xea, 0x3b, 0x58, 0x67, 0x49, 0x6d, 0x5a,
	0xd2, 0xc8, 0x09, 0x6e, 0xbd, 0x16, 0xc3, 0x1d, 0xba, 0x94, 0xcd, 0xbf, 0xf4, 0x49, 0x47, 0x59,
	0x0e, 0x9b, 0x96, 0xb4, 0x94, 0x9d, 0xcb, 0x10, 0xa2, 0xc4, 0x69, 0x7a, 0x96, 0x6f, 0xd3, 0x43,
	0x37, 0xba, 0xff, 0xdc, 0xba, 0x68, 0xb3, 0x75, 0xd1, 0xf7, 0xd6, 0x45, 0x6f, 0x3b, 0xb7, 0xb6,
	0xd9, 0xb9, 0xb5, 0xaf, 0x9d, 0x5b, 0x7b, 0xbe, 0x9c, 0x0a, 0x33, 0x5b, 0x8c, 0x03, 0x2e, 0xe7,
	0x7d, 0xa5, 0x65, 0xb8, 0xe0, 0x26, 0xe1, 0xe2, 0xcf, 0xc5, 0xac, 0x0a, 0xb5, 0x59, 0x2b, 0x48,
	0xc6, 0xad, 0xec, 0x62, 0x2e, 0x7e, 0x02, 0x00, 0x00, 0xff, 0xff, 0xce, 0x40, 0x4a, 0x63, 0x61,
	0x02, 0x00, 0x00,
}

func (m *ActiveParticipants) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActiveParticipants) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActiveParticipants) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatedAtBlockHeight != 0 {
		i = encodeVarintActiveparticipants(dAtA, i, uint64(m.CreatedAtBlockHeight))
		i--
		dAtA[i] = 0x28
	}
	if m.EffectiveBlockHeight != 0 {
		i = encodeVarintActiveparticipants(dAtA, i, uint64(m.EffectiveBlockHeight))
		i--
		dAtA[i] = 0x20
	}
	if m.PocStartBlockHeight != 0 {
		i = encodeVarintActiveparticipants(dAtA, i, uint64(m.PocStartBlockHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.EpochGroupId != 0 {
		i = encodeVarintActiveparticipants(dAtA, i, uint64(m.EpochGroupId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Participants) > 0 {
		for iNdEx := len(m.Participants) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Participants[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintActiveparticipants(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ActiveParticipant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActiveParticipant) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActiveParticipant) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Models) > 0 {
		for iNdEx := len(m.Models) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Models[iNdEx])
			copy(dAtA[i:], m.Models[iNdEx])
			i = encodeVarintActiveparticipants(dAtA, i, uint64(len(m.Models[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.InferenceUrl) > 0 {
		i -= len(m.InferenceUrl)
		copy(dAtA[i:], m.InferenceUrl)
		i = encodeVarintActiveparticipants(dAtA, i, uint64(len(m.InferenceUrl)))
		i--
		dAtA[i] = 0x22
	}
	if m.Weight != 0 {
		i = encodeVarintActiveparticipants(dAtA, i, uint64(m.Weight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ValidatorKey) > 0 {
		i -= len(m.ValidatorKey)
		copy(dAtA[i:], m.ValidatorKey)
		i = encodeVarintActiveparticipants(dAtA, i, uint64(len(m.ValidatorKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintActiveparticipants(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintActiveparticipants(dAtA []byte, offset int, v uint64) int {
	offset -= sovActiveparticipants(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ActiveParticipants) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Participants) > 0 {
		for _, e := range m.Participants {
			l = e.Size()
			n += 1 + l + sovActiveparticipants(uint64(l))
		}
	}
	if m.EpochGroupId != 0 {
		n += 1 + sovActiveparticipants(uint64(m.EpochGroupId))
	}
	if m.PocStartBlockHeight != 0 {
		n += 1 + sovActiveparticipants(uint64(m.PocStartBlockHeight))
	}
	if m.EffectiveBlockHeight != 0 {
		n += 1 + sovActiveparticipants(uint64(m.EffectiveBlockHeight))
	}
	if m.CreatedAtBlockHeight != 0 {
		n += 1 + sovActiveparticipants(uint64(m.CreatedAtBlockHeight))
	}
	return n
}

func (m *ActiveParticipant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovActiveparticipants(uint64(l))
	}
	l = len(m.ValidatorKey)
	if l > 0 {
		n += 1 + l + sovActiveparticipants(uint64(l))
	}
	if m.Weight != 0 {
		n += 1 + sovActiveparticipants(uint64(m.Weight))
	}
	l = len(m.InferenceUrl)
	if l > 0 {
		n += 1 + l + sovActiveparticipants(uint64(l))
	}
	if len(m.Models) > 0 {
		for _, s := range m.Models {
			l = len(s)
			n += 1 + l + sovActiveparticipants(uint64(l))
		}
	}
	return n
}

func sovActiveparticipants(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozActiveparticipants(x uint64) (n int) {
	return sovActiveparticipants(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ActiveParticipants) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveparticipants
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActiveParticipants: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActiveParticipants: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveparticipants
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActiveparticipants
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActiveparticipants
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participants = append(m.Participants, &ActiveParticipant{})
			if err := m.Participants[len(m.Participants)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochGroupId", wireType)
			}
			m.EpochGroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveparticipants
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochGroupId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PocStartBlockHeight", wireType)
			}
			m.PocStartBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveparticipants
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PocStartBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveBlockHeight", wireType)
			}
			m.EffectiveBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveparticipants
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EffectiveBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAtBlockHeight", wireType)
			}
			m.CreatedAtBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveparticipants
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAtBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveparticipants(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActiveparticipants
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActiveParticipant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveparticipants
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActiveParticipant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActiveParticipant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveparticipants
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActiveparticipants
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActiveparticipants
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveparticipants
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActiveparticipants
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActiveparticipants
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveparticipants
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InferenceUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveparticipants
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActiveparticipants
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActiveparticipants
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InferenceUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Models", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveparticipants
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActiveparticipants
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActiveparticipants
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Models = append(m.Models, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActiveparticipants(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActiveparticipants
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipActiveparticipants(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowActiveparticipants
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActiveparticipants
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActiveparticipants
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthActiveparticipants
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupActiveparticipants
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthActiveparticipants
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthActiveparticipants        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowActiveparticipants          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupActiveparticipants = fmt.Errorf("proto: unexpected end of group")
)

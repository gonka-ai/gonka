// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: inference/inference/pocbatch.proto

package types

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PoCBatch struct {
	ParticipantAddress       string    `protobuf:"bytes,1,opt,name=participant_address,json=participantAddress,proto3" json:"participant_address,omitempty"`
	PocStageStartBlockHeight int64     `protobuf:"varint,2,opt,name=poc_stage_start_block_height,json=pocStageStartBlockHeight,proto3" json:"poc_stage_start_block_height,omitempty"`
	ReceivedAtBlockHeight    int64     `protobuf:"varint,3,opt,name=received_at_block_height,json=receivedAtBlockHeight,proto3" json:"received_at_block_height,omitempty"`
	Nonces                   []int64   `protobuf:"varint,4,rep,packed,name=nonces,proto3" json:"nonces,omitempty"`
	Dist                     []float64 `protobuf:"fixed64,5,rep,packed,name=dist,proto3" json:"dist,omitempty"`
	BatchId                  string    `protobuf:"bytes,6,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
}

func (m *PoCBatch) Reset()         { *m = PoCBatch{} }
func (m *PoCBatch) String() string { return proto.CompactTextString(m) }
func (*PoCBatch) ProtoMessage()    {}
func (*PoCBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba47c2fd2ca3ae22, []int{0}
}
func (m *PoCBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoCBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoCBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoCBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoCBatch.Merge(m, src)
}
func (m *PoCBatch) XXX_Size() int {
	return m.Size()
}
func (m *PoCBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_PoCBatch.DiscardUnknown(m)
}

var xxx_messageInfo_PoCBatch proto.InternalMessageInfo

func (m *PoCBatch) GetParticipantAddress() string {
	if m != nil {
		return m.ParticipantAddress
	}
	return ""
}

func (m *PoCBatch) GetPocStageStartBlockHeight() int64 {
	if m != nil {
		return m.PocStageStartBlockHeight
	}
	return 0
}

func (m *PoCBatch) GetReceivedAtBlockHeight() int64 {
	if m != nil {
		return m.ReceivedAtBlockHeight
	}
	return 0
}

func (m *PoCBatch) GetNonces() []int64 {
	if m != nil {
		return m.Nonces
	}
	return nil
}

func (m *PoCBatch) GetDist() []float64 {
	if m != nil {
		return m.Dist
	}
	return nil
}

func (m *PoCBatch) GetBatchId() string {
	if m != nil {
		return m.BatchId
	}
	return ""
}

// ignite scaffold message SubmitPocValidation participant_address poc_stage_start_block_height:int nonces:array.int dist:array.int received_dist:array.int r_target:int fraud_threshold:int n_invalid:int probability_honest:int fraud_detected:bool
type PoCValidation struct {
	ParticipantAddress          string    `protobuf:"bytes,1,opt,name=participant_address,json=participantAddress,proto3" json:"participant_address,omitempty"`
	ValidatorParticipantAddress string    `protobuf:"bytes,2,opt,name=validator_participant_address,json=validatorParticipantAddress,proto3" json:"validator_participant_address,omitempty"`
	PocStageStartBlockHeight    int64     `protobuf:"varint,3,opt,name=poc_stage_start_block_height,json=pocStageStartBlockHeight,proto3" json:"poc_stage_start_block_height,omitempty"`
	ValidatedAtBlockHeight      int64     `protobuf:"varint,4,opt,name=validated_at_block_height,json=validatedAtBlockHeight,proto3" json:"validated_at_block_height,omitempty"`
	Nonces                      []int64   `protobuf:"varint,5,rep,packed,name=nonces,proto3" json:"nonces,omitempty"`
	Dist                        []float64 `protobuf:"fixed64,6,rep,packed,name=dist,proto3" json:"dist,omitempty"`
	ReceivedDist                []float64 `protobuf:"fixed64,7,rep,packed,name=received_dist,json=receivedDist,proto3" json:"received_dist,omitempty"`
	RTarget                     float64   `protobuf:"fixed64,8,opt,name=r_target,json=rTarget,proto3" json:"r_target,omitempty"`
	FraudThreshold              float64   `protobuf:"fixed64,9,opt,name=fraud_threshold,json=fraudThreshold,proto3" json:"fraud_threshold,omitempty"`
	NInvalid                    int64     `protobuf:"varint,10,opt,name=n_invalid,json=nInvalid,proto3" json:"n_invalid,omitempty"`
	ProbabilityHonest           float64   `protobuf:"fixed64,11,opt,name=probability_honest,json=probabilityHonest,proto3" json:"probability_honest,omitempty"`
	FraudDetected               bool      `protobuf:"varint,12,opt,name=fraud_detected,json=fraudDetected,proto3" json:"fraud_detected,omitempty"`
}

func (m *PoCValidation) Reset()         { *m = PoCValidation{} }
func (m *PoCValidation) String() string { return proto.CompactTextString(m) }
func (*PoCValidation) ProtoMessage()    {}
func (*PoCValidation) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba47c2fd2ca3ae22, []int{1}
}
func (m *PoCValidation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoCValidation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoCValidation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoCValidation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoCValidation.Merge(m, src)
}
func (m *PoCValidation) XXX_Size() int {
	return m.Size()
}
func (m *PoCValidation) XXX_DiscardUnknown() {
	xxx_messageInfo_PoCValidation.DiscardUnknown(m)
}

var xxx_messageInfo_PoCValidation proto.InternalMessageInfo

func (m *PoCValidation) GetParticipantAddress() string {
	if m != nil {
		return m.ParticipantAddress
	}
	return ""
}

func (m *PoCValidation) GetValidatorParticipantAddress() string {
	if m != nil {
		return m.ValidatorParticipantAddress
	}
	return ""
}

func (m *PoCValidation) GetPocStageStartBlockHeight() int64 {
	if m != nil {
		return m.PocStageStartBlockHeight
	}
	return 0
}

func (m *PoCValidation) GetValidatedAtBlockHeight() int64 {
	if m != nil {
		return m.ValidatedAtBlockHeight
	}
	return 0
}

func (m *PoCValidation) GetNonces() []int64 {
	if m != nil {
		return m.Nonces
	}
	return nil
}

func (m *PoCValidation) GetDist() []float64 {
	if m != nil {
		return m.Dist
	}
	return nil
}

func (m *PoCValidation) GetReceivedDist() []float64 {
	if m != nil {
		return m.ReceivedDist
	}
	return nil
}

func (m *PoCValidation) GetRTarget() float64 {
	if m != nil {
		return m.RTarget
	}
	return 0
}

func (m *PoCValidation) GetFraudThreshold() float64 {
	if m != nil {
		return m.FraudThreshold
	}
	return 0
}

func (m *PoCValidation) GetNInvalid() int64 {
	if m != nil {
		return m.NInvalid
	}
	return 0
}

func (m *PoCValidation) GetProbabilityHonest() float64 {
	if m != nil {
		return m.ProbabilityHonest
	}
	return 0
}

func (m *PoCValidation) GetFraudDetected() bool {
	if m != nil {
		return m.FraudDetected
	}
	return false
}

func init() {
	proto.RegisterType((*PoCBatch)(nil), "inference.inference.PoCBatch")
	proto.RegisterType((*PoCValidation)(nil), "inference.inference.PoCValidation")
}

func init() {
	proto.RegisterFile("inference/inference/pocbatch.proto", fileDescriptor_ba47c2fd2ca3ae22)
}

var fileDescriptor_ba47c2fd2ca3ae22 = []byte{
	// 480 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0xeb, 0xa5, 0x6b, 0x53, 0xb3, 0x82, 0xf0, 0xc4, 0xe4, 0x69, 0x10, 0x45, 0x45, 0x88,
	0x5c, 0x68, 0x0f, 0x08, 0x21, 0x2e, 0x48, 0xeb, 0x76, 0xd8, 0x4e, 0x54, 0xd9, 0xc4, 0x81, 0x8b,
	0xe5, 0xd8, 0x5e, 0x63, 0x51, 0xec, 0xc8, 0x71, 0x27, 0xf6, 0x09, 0xb8, 0xf2, 0xb1, 0x38, 0xee,
	0xc8, 0x11, 0xb5, 0x1f, 0x83, 0x0b, 0xca, 0x6b, 0x1b, 0xca, 0x54, 0x34, 0xf5, 0x12, 0xbd, 0xf7,
	0xfe, 0xff, 0xff, 0x93, 0xf3, 0xb3, 0x8c, 0x7b, 0xda, 0x5c, 0x29, 0xa7, 0x8c, 0x50, 0x83, 0xbf,
	0x55, 0x61, 0x45, 0xc6, 0xbd, 0xc8, 0xfb, 0x85, 0xb3, 0xde, 0x92, 0xfd, 0x5a, 0xe9, 0xd7, 0x55,
	0xef, 0x37, 0xc2, 0xe1, 0xc8, 0x9e, 0x0c, 0x2b, 0x1f, 0x19, 0xe0, 0xfd, 0x82, 0x3b, 0xaf, 0x85,
	0x2e, 0xb8, 0xf1, 0x8c, 0x4b, 0xe9, 0x54, 0x59, 0x52, 0x14, 0xa3, 0xa4, 0x93, 0x92, 0x35, 0xe9,
	0x78, 0xa1, 0x90, 0xf7, 0xf8, 0x69, 0x61, 0x05, 0x2b, 0x3d, 0x1f, 0xab, 0xea, 0xeb, 0x3c, 0xcb,
	0x26, 0x56, 0x7c, 0x66, 0xb9, 0xd2, 0xe3, 0xdc, 0xd3, 0x9d, 0x18, 0x25, 0x41, 0x4a, 0x0b, 0x2b,
	0x2e, 0x2a, 0xcb, 0x45, 0xe5, 0x18, 0x56, 0x86, 0x33, 0xd0, 0xc9, 0x5b, 0x4c, 0x9d, 0x12, 0x4a,
	0x5f, 0x2b, 0xc9, 0xf8, 0x9d, 0x6c, 0x00, 0xd9, 0x27, 0x2b, 0xfd, 0xf8, 0x9f, 0xe0, 0x01, 0x6e,
	0x19, 0x6b, 0x84, 0x2a, 0x69, 0x33, 0x0e, 0x92, 0x20, 0x5d, 0x76, 0x84, 0xe0, 0xa6, 0xd4, 0xa5,
	0xa7, 0xbb, 0x71, 0x90, 0xa0, 0x14, 0x6a, 0x72, 0x88, 0x43, 0xc0, 0xc0, 0xb4, 0xa4, 0x2d, 0xf8,
	0x95, 0x36, 0xf4, 0xe7, 0xb2, 0xf7, 0xad, 0x89, 0xbb, 0x23, 0x7b, 0xf2, 0x91, 0x4f, 0xb4, 0xe4,
	0x5e, 0x5b, 0xb3, 0x3d, 0x82, 0x21, 0x7e, 0x76, 0xbd, 0x88, 0x5b, 0xc7, 0x36, 0x45, 0x77, 0x20,
	0x7a, 0x54, 0x9b, 0x46, 0xdb, 0x63, 0x0c, 0xee, 0xc1, 0xf8, 0x0e, 0x1f, 0x2e, 0xd7, 0x6f, 0xe0,
	0xd8, 0x84, 0xf0, 0x41, 0x6d, 0xf8, 0x1f, 0xc8, 0xdd, 0x8d, 0x20, 0x5b, 0x6b, 0x20, 0x9f, 0xe3,
	0x6e, 0x7d, 0x5b, 0x20, 0xb6, 0x41, 0xdc, 0x5b, 0x0d, 0x4f, 0x97, 0xb4, 0x1d, 0xf3, 0xdc, 0x8d,
	0x95, 0xa7, 0x61, 0x8c, 0x12, 0x94, 0xb6, 0xdd, 0x25, 0xb4, 0xe4, 0x25, 0x7e, 0x74, 0xe5, 0xf8,
	0x54, 0x32, 0x9f, 0x3b, 0x55, 0xe6, 0x76, 0x22, 0x69, 0x07, 0x1c, 0x0f, 0x61, 0x7c, 0xb9, 0x9a,
	0x92, 0x23, 0xdc, 0x31, 0x4c, 0x1b, 0x38, 0x32, 0xc5, 0x70, 0xfe, 0xd0, 0x9c, 0x2f, 0x7a, 0xf2,
	0x0a, 0x93, 0xc2, 0xd9, 0x8c, 0x67, 0x7a, 0xa2, 0xfd, 0x0d, 0xcb, 0xad, 0x51, 0xa5, 0xa7, 0x0f,
	0x60, 0xd1, 0xe3, 0x35, 0xe5, 0x0c, 0x04, 0xf2, 0x02, 0x2f, 0xb6, 0x33, 0xa9, 0xbc, 0x12, 0x5e,
	0x49, 0xba, 0x17, 0xa3, 0x24, 0x4c, 0xbb, 0x30, 0x3d, 0x5d, 0x0e, 0x87, 0x1f, 0x7e, 0xcc, 0x22,
	0x74, 0x3b, 0x8b, 0xd0, 0xaf, 0x59, 0x84, 0xbe, 0xcf, 0xa3, 0xc6, 0xed, 0x3c, 0x6a, 0xfc, 0x9c,
	0x47, 0x8d, 0x4f, 0x6f, 0xc6, 0xda, 0xe7, 0xd3, 0xac, 0x2f, 0xec, 0x97, 0x41, 0xe1, 0xac, 0x9c,
	0x0a, 0x5f, 0x0a, 0x7d, 0xe7, 0xa9, 0x7d, 0x5d, 0xab, 0xfd, 0x4d, 0xa1, 0xca, 0xac, 0x05, 0x8f,
	0xee, 0xf5, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5c, 0x74, 0xfc, 0x8f, 0x9a, 0x03, 0x00, 0x00,
}

func (m *PoCBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoCBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoCBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BatchId) > 0 {
		i -= len(m.BatchId)
		copy(dAtA[i:], m.BatchId)
		i = encodeVarintPocbatch(dAtA, i, uint64(len(m.BatchId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Dist) > 0 {
		for iNdEx := len(m.Dist) - 1; iNdEx >= 0; iNdEx-- {
			f1 := math.Float64bits(float64(m.Dist[iNdEx]))
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f1))
		}
		i = encodeVarintPocbatch(dAtA, i, uint64(len(m.Dist)*8))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Nonces) > 0 {
		dAtA3 := make([]byte, len(m.Nonces)*10)
		var j2 int
		for _, num1 := range m.Nonces {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintPocbatch(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x22
	}
	if m.ReceivedAtBlockHeight != 0 {
		i = encodeVarintPocbatch(dAtA, i, uint64(m.ReceivedAtBlockHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.PocStageStartBlockHeight != 0 {
		i = encodeVarintPocbatch(dAtA, i, uint64(m.PocStageStartBlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ParticipantAddress) > 0 {
		i -= len(m.ParticipantAddress)
		copy(dAtA[i:], m.ParticipantAddress)
		i = encodeVarintPocbatch(dAtA, i, uint64(len(m.ParticipantAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PoCValidation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoCValidation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoCValidation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FraudDetected {
		i--
		if m.FraudDetected {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.ProbabilityHonest != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ProbabilityHonest))))
		i--
		dAtA[i] = 0x59
	}
	if m.NInvalid != 0 {
		i = encodeVarintPocbatch(dAtA, i, uint64(m.NInvalid))
		i--
		dAtA[i] = 0x50
	}
	if m.FraudThreshold != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.FraudThreshold))))
		i--
		dAtA[i] = 0x49
	}
	if m.RTarget != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.RTarget))))
		i--
		dAtA[i] = 0x41
	}
	if len(m.ReceivedDist) > 0 {
		for iNdEx := len(m.ReceivedDist) - 1; iNdEx >= 0; iNdEx-- {
			f4 := math.Float64bits(float64(m.ReceivedDist[iNdEx]))
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f4))
		}
		i = encodeVarintPocbatch(dAtA, i, uint64(len(m.ReceivedDist)*8))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Dist) > 0 {
		for iNdEx := len(m.Dist) - 1; iNdEx >= 0; iNdEx-- {
			f5 := math.Float64bits(float64(m.Dist[iNdEx]))
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f5))
		}
		i = encodeVarintPocbatch(dAtA, i, uint64(len(m.Dist)*8))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Nonces) > 0 {
		dAtA7 := make([]byte, len(m.Nonces)*10)
		var j6 int
		for _, num1 := range m.Nonces {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintPocbatch(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0x2a
	}
	if m.ValidatedAtBlockHeight != 0 {
		i = encodeVarintPocbatch(dAtA, i, uint64(m.ValidatedAtBlockHeight))
		i--
		dAtA[i] = 0x20
	}
	if m.PocStageStartBlockHeight != 0 {
		i = encodeVarintPocbatch(dAtA, i, uint64(m.PocStageStartBlockHeight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ValidatorParticipantAddress) > 0 {
		i -= len(m.ValidatorParticipantAddress)
		copy(dAtA[i:], m.ValidatorParticipantAddress)
		i = encodeVarintPocbatch(dAtA, i, uint64(len(m.ValidatorParticipantAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ParticipantAddress) > 0 {
		i -= len(m.ParticipantAddress)
		copy(dAtA[i:], m.ParticipantAddress)
		i = encodeVarintPocbatch(dAtA, i, uint64(len(m.ParticipantAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPocbatch(dAtA []byte, offset int, v uint64) int {
	offset -= sovPocbatch(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PoCBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ParticipantAddress)
	if l > 0 {
		n += 1 + l + sovPocbatch(uint64(l))
	}
	if m.PocStageStartBlockHeight != 0 {
		n += 1 + sovPocbatch(uint64(m.PocStageStartBlockHeight))
	}
	if m.ReceivedAtBlockHeight != 0 {
		n += 1 + sovPocbatch(uint64(m.ReceivedAtBlockHeight))
	}
	if len(m.Nonces) > 0 {
		l = 0
		for _, e := range m.Nonces {
			l += sovPocbatch(uint64(e))
		}
		n += 1 + sovPocbatch(uint64(l)) + l
	}
	if len(m.Dist) > 0 {
		n += 1 + sovPocbatch(uint64(len(m.Dist)*8)) + len(m.Dist)*8
	}
	l = len(m.BatchId)
	if l > 0 {
		n += 1 + l + sovPocbatch(uint64(l))
	}
	return n
}

func (m *PoCValidation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ParticipantAddress)
	if l > 0 {
		n += 1 + l + sovPocbatch(uint64(l))
	}
	l = len(m.ValidatorParticipantAddress)
	if l > 0 {
		n += 1 + l + sovPocbatch(uint64(l))
	}
	if m.PocStageStartBlockHeight != 0 {
		n += 1 + sovPocbatch(uint64(m.PocStageStartBlockHeight))
	}
	if m.ValidatedAtBlockHeight != 0 {
		n += 1 + sovPocbatch(uint64(m.ValidatedAtBlockHeight))
	}
	if len(m.Nonces) > 0 {
		l = 0
		for _, e := range m.Nonces {
			l += sovPocbatch(uint64(e))
		}
		n += 1 + sovPocbatch(uint64(l)) + l
	}
	if len(m.Dist) > 0 {
		n += 1 + sovPocbatch(uint64(len(m.Dist)*8)) + len(m.Dist)*8
	}
	if len(m.ReceivedDist) > 0 {
		n += 1 + sovPocbatch(uint64(len(m.ReceivedDist)*8)) + len(m.ReceivedDist)*8
	}
	if m.RTarget != 0 {
		n += 9
	}
	if m.FraudThreshold != 0 {
		n += 9
	}
	if m.NInvalid != 0 {
		n += 1 + sovPocbatch(uint64(m.NInvalid))
	}
	if m.ProbabilityHonest != 0 {
		n += 9
	}
	if m.FraudDetected {
		n += 2
	}
	return n
}

func sovPocbatch(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPocbatch(x uint64) (n int) {
	return sovPocbatch(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PoCBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPocbatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoCBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoCBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPocbatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPocbatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPocbatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParticipantAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PocStageStartBlockHeight", wireType)
			}
			m.PocStageStartBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPocbatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PocStageStartBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedAtBlockHeight", wireType)
			}
			m.ReceivedAtBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPocbatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceivedAtBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPocbatch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Nonces = append(m.Nonces, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPocbatch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPocbatch
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPocbatch
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Nonces) == 0 {
					m.Nonces = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPocbatch
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Nonces = append(m.Nonces, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonces", wireType)
			}
		case 5:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.Dist = append(m.Dist, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPocbatch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPocbatch
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPocbatch
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.Dist) == 0 {
					m.Dist = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.Dist = append(m.Dist, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Dist", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPocbatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPocbatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPocbatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPocbatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPocbatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoCValidation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPocbatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoCValidation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoCValidation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPocbatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPocbatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPocbatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParticipantAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorParticipantAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPocbatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPocbatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPocbatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorParticipantAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PocStageStartBlockHeight", wireType)
			}
			m.PocStageStartBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPocbatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PocStageStartBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatedAtBlockHeight", wireType)
			}
			m.ValidatedAtBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPocbatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatedAtBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPocbatch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Nonces = append(m.Nonces, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPocbatch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPocbatch
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPocbatch
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Nonces) == 0 {
					m.Nonces = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPocbatch
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Nonces = append(m.Nonces, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonces", wireType)
			}
		case 6:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.Dist = append(m.Dist, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPocbatch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPocbatch
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPocbatch
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.Dist) == 0 {
					m.Dist = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.Dist = append(m.Dist, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Dist", wireType)
			}
		case 7:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.ReceivedDist = append(m.ReceivedDist, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPocbatch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPocbatch
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPocbatch
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.ReceivedDist) == 0 {
					m.ReceivedDist = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.ReceivedDist = append(m.ReceivedDist, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedDist", wireType)
			}
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RTarget", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.RTarget = float64(math.Float64frombits(v))
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FraudThreshold", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.FraudThreshold = float64(math.Float64frombits(v))
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NInvalid", wireType)
			}
			m.NInvalid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPocbatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NInvalid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbabilityHonest", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ProbabilityHonest = float64(math.Float64frombits(v))
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FraudDetected", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPocbatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FraudDetected = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPocbatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPocbatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPocbatch(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPocbatch
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPocbatch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPocbatch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPocbatch
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPocbatch
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPocbatch
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPocbatch        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPocbatch          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPocbatch = fmt.Errorf("proto: unexpected end of group")
)

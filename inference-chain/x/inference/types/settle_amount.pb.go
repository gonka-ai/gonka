// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: inference/inference/settle_amount.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SettleAmount struct {
	Participant   string `protobuf:"bytes,1,opt,name=participant,proto3" json:"participant,omitempty"`
	RewardCoins   uint64 `protobuf:"varint,2,opt,name=reward_coins,json=rewardCoins,proto3" json:"reward_coins,omitempty"`
	WorkCoins     uint64 `protobuf:"varint,3,opt,name=work_coins,json=workCoins,proto3" json:"work_coins,omitempty"`
	EpochIndex    uint64 `protobuf:"varint,4,opt,name=epoch_index,json=epochIndex,proto3" json:"epoch_index,omitempty"`
	SeedSignature string `protobuf:"bytes,5,opt,name=seed_signature,json=seedSignature,proto3" json:"seed_signature,omitempty"`
}

func (m *SettleAmount) Reset()         { *m = SettleAmount{} }
func (m *SettleAmount) String() string { return proto.CompactTextString(m) }
func (*SettleAmount) ProtoMessage()    {}
func (*SettleAmount) Descriptor() ([]byte, []int) {
	return fileDescriptor_b05d6309beaf448e, []int{0}
}
func (m *SettleAmount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SettleAmount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SettleAmount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SettleAmount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettleAmount.Merge(m, src)
}
func (m *SettleAmount) XXX_Size() int {
	return m.Size()
}
func (m *SettleAmount) XXX_DiscardUnknown() {
	xxx_messageInfo_SettleAmount.DiscardUnknown(m)
}

var xxx_messageInfo_SettleAmount proto.InternalMessageInfo

func (m *SettleAmount) GetParticipant() string {
	if m != nil {
		return m.Participant
	}
	return ""
}

func (m *SettleAmount) GetRewardCoins() uint64 {
	if m != nil {
		return m.RewardCoins
	}
	return 0
}

func (m *SettleAmount) GetWorkCoins() uint64 {
	if m != nil {
		return m.WorkCoins
	}
	return 0
}

func (m *SettleAmount) GetEpochIndex() uint64 {
	if m != nil {
		return m.EpochIndex
	}
	return 0
}

func (m *SettleAmount) GetSeedSignature() string {
	if m != nil {
		return m.SeedSignature
	}
	return ""
}

func init() {
	proto.RegisterType((*SettleAmount)(nil), "inference.inference.SettleAmount")
}

func init() {
	proto.RegisterFile("inference/inference/settle_amount.proto", fileDescriptor_b05d6309beaf448e)
}

var fileDescriptor_b05d6309beaf448e = []byte{
	// 262 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0xd0, 0xb1, 0x4e, 0xf3, 0x30,
	0x14, 0x05, 0xe0, 0xf8, 0xff, 0x0b, 0x52, 0x6f, 0x0a, 0x83, 0x59, 0xb2, 0x60, 0x02, 0x12, 0xa2,
	0x53, 0x3a, 0x20, 0x1e, 0x00, 0x98, 0x98, 0x90, 0xda, 0x8d, 0x25, 0x72, 0x9d, 0x4b, 0x6b, 0x41,
	0x6d, 0xcb, 0xbe, 0x51, 0xcb, 0x5b, 0xf0, 0x3c, 0x3c, 0x01, 0x63, 0x47, 0x46, 0x94, 0xbc, 0x08,
	0x8a, 0x0b, 0xa5, 0x62, 0x3b, 0xfa, 0xce, 0x19, 0xae, 0x2e, 0x5c, 0x68, 0xf3, 0x88, 0x1e, 0x8d,
	0xc2, 0xd1, 0x6f, 0x0a, 0x48, 0xf4, 0x8c, 0xa5, 0x5c, 0xd8, 0xda, 0x50, 0xe1, 0xbc, 0x25, 0xcb,
	0x8f, 0xb6, 0x75, 0xb1, 0x4d, 0x67, 0x6f, 0x0c, 0x06, 0x93, 0x38, 0xbe, 0x8e, 0x5b, 0x9e, 0x43,
	0xea, 0xa4, 0x27, 0xad, 0xb4, 0x93, 0x86, 0x32, 0x96, 0xb3, 0x61, 0x7f, 0xbc, 0x4b, 0xfc, 0x14,
	0x06, 0x1e, 0x97, 0xd2, 0x57, 0xa5, 0xb2, 0xda, 0x84, 0xec, 0x5f, 0xce, 0x86, 0xbd, 0x71, 0xba,
	0xb1, 0xdb, 0x8e, 0xf8, 0x31, 0xc0, 0xd2, 0xfa, 0xa7, 0xef, 0xc1, 0xff, 0x38, 0xe8, 0x77, 0xb2,
	0xa9, 0x4f, 0x20, 0x45, 0x67, 0xd5, 0xbc, 0xd4, 0xa6, 0xc2, 0x55, 0xd6, 0x8b, 0x3d, 0x44, 0xba,
	0xeb, 0x84, 0x9f, 0xc3, 0x61, 0x40, 0xac, 0xca, 0xa0, 0x67, 0x46, 0x52, 0xed, 0x31, 0xdb, 0x8b,
	0x77, 0x1c, 0x74, 0x3a, 0xf9, 0xc1, 0x9b, 0xfb, 0xf7, 0x46, 0xb0, 0x75, 0x23, 0xd8, 0x67, 0x23,
	0xd8, 0x6b, 0x2b, 0x92, 0x75, 0x2b, 0x92, 0x8f, 0x56, 0x24, 0x0f, 0x57, 0x33, 0x4d, 0xf3, 0x7a,
	0x5a, 0x28, 0xbb, 0x18, 0x39, 0x6f, 0xab, 0x5a, 0x51, 0x50, 0xfa, 0xcf, 0x93, 0x56, 0x3b, 0x99,
	0x5e, 0x1c, 0x86, 0xe9, 0x7e, 0xfc, 0xd4, 0xe5, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8e, 0x44,
	0x66, 0x57, 0x54, 0x01, 0x00, 0x00,
}

func (m *SettleAmount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SettleAmount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SettleAmount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SeedSignature) > 0 {
		i -= len(m.SeedSignature)
		copy(dAtA[i:], m.SeedSignature)
		i = encodeVarintSettleAmount(dAtA, i, uint64(len(m.SeedSignature)))
		i--
		dAtA[i] = 0x2a
	}
	if m.EpochIndex != 0 {
		i = encodeVarintSettleAmount(dAtA, i, uint64(m.EpochIndex))
		i--
		dAtA[i] = 0x20
	}
	if m.WorkCoins != 0 {
		i = encodeVarintSettleAmount(dAtA, i, uint64(m.WorkCoins))
		i--
		dAtA[i] = 0x18
	}
	if m.RewardCoins != 0 {
		i = encodeVarintSettleAmount(dAtA, i, uint64(m.RewardCoins))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Participant) > 0 {
		i -= len(m.Participant)
		copy(dAtA[i:], m.Participant)
		i = encodeVarintSettleAmount(dAtA, i, uint64(len(m.Participant)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSettleAmount(dAtA []byte, offset int, v uint64) int {
	offset -= sovSettleAmount(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SettleAmount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Participant)
	if l > 0 {
		n += 1 + l + sovSettleAmount(uint64(l))
	}
	if m.RewardCoins != 0 {
		n += 1 + sovSettleAmount(uint64(m.RewardCoins))
	}
	if m.WorkCoins != 0 {
		n += 1 + sovSettleAmount(uint64(m.WorkCoins))
	}
	if m.EpochIndex != 0 {
		n += 1 + sovSettleAmount(uint64(m.EpochIndex))
	}
	l = len(m.SeedSignature)
	if l > 0 {
		n += 1 + l + sovSettleAmount(uint64(l))
	}
	return n
}

func sovSettleAmount(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSettleAmount(x uint64) (n int) {
	return sovSettleAmount(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SettleAmount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSettleAmount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SettleAmount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SettleAmount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettleAmount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSettleAmount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSettleAmount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardCoins", wireType)
			}
			m.RewardCoins = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettleAmount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardCoins |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkCoins", wireType)
			}
			m.WorkCoins = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettleAmount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkCoins |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochIndex", wireType)
			}
			m.EpochIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettleAmount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeedSignature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettleAmount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSettleAmount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSettleAmount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SeedSignature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSettleAmount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSettleAmount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSettleAmount(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSettleAmount
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSettleAmount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSettleAmount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSettleAmount
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSettleAmount
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSettleAmount
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSettleAmount        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSettleAmount          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSettleAmount = fmt.Errorf("proto: unexpected end of group")
)

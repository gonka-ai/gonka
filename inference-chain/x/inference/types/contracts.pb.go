// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: inference/inference/contracts.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ContractsParams struct {
	Cw20Code   []byte `protobuf:"bytes,1,opt,name=cw20_code,json=cw20Code,proto3" json:"cw20_code,omitempty"`
	Cw20CodeId uint64 `protobuf:"varint,2,opt,name=cw20_code_id,json=cw20CodeId,proto3" json:"cw20_code_id,omitempty"`
}

func (m *ContractsParams) Reset()         { *m = ContractsParams{} }
func (m *ContractsParams) String() string { return proto.CompactTextString(m) }
func (*ContractsParams) ProtoMessage()    {}
func (*ContractsParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_15e3e4d970cdc3ff, []int{0}
}
func (m *ContractsParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractsParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractsParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractsParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractsParams.Merge(m, src)
}
func (m *ContractsParams) XXX_Size() int {
	return m.Size()
}
func (m *ContractsParams) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractsParams.DiscardUnknown(m)
}

var xxx_messageInfo_ContractsParams proto.InternalMessageInfo

func (m *ContractsParams) GetCw20Code() []byte {
	if m != nil {
		return m.Cw20Code
	}
	return nil
}

func (m *ContractsParams) GetCw20CodeId() uint64 {
	if m != nil {
		return m.Cw20CodeId
	}
	return 0
}

// Stores mapping between external chain tokens and their CW20 counterparts
type BridgeContract struct {
	ExternalChain    string `protobuf:"bytes,1,opt,name=external_chain,json=externalChain,proto3" json:"external_chain,omitempty"`
	ExternalContract string `protobuf:"bytes,2,opt,name=external_contract,json=externalContract,proto3" json:"external_contract,omitempty"`
	Cw20Contract     string `protobuf:"bytes,3,opt,name=cw20_contract,json=cw20Contract,proto3" json:"cw20_contract,omitempty"`
	Name             string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Symbol           string `protobuf:"bytes,5,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Decimals         uint32 `protobuf:"varint,6,opt,name=decimals,proto3" json:"decimals,omitempty"`
}

func (m *BridgeContract) Reset()         { *m = BridgeContract{} }
func (m *BridgeContract) String() string { return proto.CompactTextString(m) }
func (*BridgeContract) ProtoMessage()    {}
func (*BridgeContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_15e3e4d970cdc3ff, []int{1}
}
func (m *BridgeContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BridgeContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BridgeContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BridgeContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BridgeContract.Merge(m, src)
}
func (m *BridgeContract) XXX_Size() int {
	return m.Size()
}
func (m *BridgeContract) XXX_DiscardUnknown() {
	xxx_messageInfo_BridgeContract.DiscardUnknown(m)
}

var xxx_messageInfo_BridgeContract proto.InternalMessageInfo

func (m *BridgeContract) GetExternalChain() string {
	if m != nil {
		return m.ExternalChain
	}
	return ""
}

func (m *BridgeContract) GetExternalContract() string {
	if m != nil {
		return m.ExternalContract
	}
	return ""
}

func (m *BridgeContract) GetCw20Contract() string {
	if m != nil {
		return m.Cw20Contract
	}
	return ""
}

func (m *BridgeContract) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BridgeContract) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *BridgeContract) GetDecimals() uint32 {
	if m != nil {
		return m.Decimals
	}
	return 0
}

// For storing the CW20 code ID after uploading the contract code
type BridgeContractCodeID struct {
	CodeId uint64 `protobuf:"varint,1,opt,name=code_id,json=codeId,proto3" json:"code_id,omitempty"`
}

func (m *BridgeContractCodeID) Reset()         { *m = BridgeContractCodeID{} }
func (m *BridgeContractCodeID) String() string { return proto.CompactTextString(m) }
func (*BridgeContractCodeID) ProtoMessage()    {}
func (*BridgeContractCodeID) Descriptor() ([]byte, []int) {
	return fileDescriptor_15e3e4d970cdc3ff, []int{2}
}
func (m *BridgeContractCodeID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BridgeContractCodeID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BridgeContractCodeID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BridgeContractCodeID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BridgeContractCodeID.Merge(m, src)
}
func (m *BridgeContractCodeID) XXX_Size() int {
	return m.Size()
}
func (m *BridgeContractCodeID) XXX_DiscardUnknown() {
	xxx_messageInfo_BridgeContractCodeID.DiscardUnknown(m)
}

var xxx_messageInfo_BridgeContractCodeID proto.InternalMessageInfo

func (m *BridgeContractCodeID) GetCodeId() uint64 {
	if m != nil {
		return m.CodeId
	}
	return 0
}

func init() {
	proto.RegisterType((*ContractsParams)(nil), "inference.inference.ContractsParams")
	proto.RegisterType((*BridgeContract)(nil), "inference.inference.BridgeContract")
	proto.RegisterType((*BridgeContractCodeID)(nil), "inference.inference.BridgeContractCodeID")
}

func init() {
	proto.RegisterFile("inference/inference/contracts.proto", fileDescriptor_15e3e4d970cdc3ff)
}

var fileDescriptor_15e3e4d970cdc3ff = []byte{
	// 344 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x51, 0xc1, 0x4e, 0xc2, 0x40,
	0x10, 0x65, 0xb5, 0x56, 0x98, 0x00, 0xea, 0x4a, 0xb4, 0xc1, 0xa4, 0x36, 0x10, 0x13, 0x12, 0x13,
	0x6a, 0x34, 0x5e, 0x3c, 0x82, 0x17, 0x4f, 0x9a, 0x1e, 0x3c, 0x78, 0x21, 0xcb, 0xee, 0x5a, 0x36,
	0xa1, 0x5d, 0xb2, 0x5d, 0x22, 0xfc, 0x85, 0x9f, 0xe0, 0xe7, 0x78, 0xc4, 0x9b, 0x47, 0x03, 0x17,
	0x3f, 0xc3, 0x74, 0x69, 0x8b, 0x7a, 0x7b, 0xfb, 0xde, 0x9b, 0xd9, 0x99, 0x37, 0xd0, 0x16, 0xf1,
	0x33, 0x57, 0x3c, 0xa6, 0xdc, 0xdf, 0x20, 0x2a, 0x63, 0xad, 0x08, 0xd5, 0x49, 0x77, 0xa2, 0xa4,
	0x96, 0xf8, 0xb0, 0x90, 0xba, 0x05, 0x6a, 0x36, 0x42, 0x19, 0x4a, 0xa3, 0xfb, 0x29, 0x5a, 0x5b,
	0x5b, 0x8f, 0xb0, 0xd7, 0xcf, 0xab, 0x1f, 0x88, 0x22, 0x51, 0x82, 0x4f, 0xa0, 0x42, 0x5f, 0x2e,
	0x2f, 0x06, 0x54, 0x32, 0xee, 0x20, 0x0f, 0x75, 0xaa, 0x41, 0x39, 0x25, 0xfa, 0x92, 0x71, 0xec,
	0x41, 0xb5, 0x10, 0x07, 0x82, 0x39, 0x5b, 0x1e, 0xea, 0x58, 0x01, 0xe4, 0xfa, 0x1d, 0xbb, 0xb1,
	0xbe, 0xdf, 0x4e, 0x51, 0xeb, 0x03, 0x41, 0xbd, 0xa7, 0x04, 0x0b, 0x79, 0xde, 0x1e, 0x9f, 0x41,
	0x9d, 0xcf, 0x34, 0x57, 0x31, 0x19, 0x0f, 0xe8, 0x88, 0x88, 0xd8, 0x34, 0xaf, 0x04, 0xb5, 0x9c,
	0xed, 0xa7, 0x24, 0x3e, 0x87, 0x83, 0x8d, 0x2d, 0xab, 0x35, 0xdf, 0x54, 0x82, 0xfd, 0xc2, 0x99,
	0xf7, 0x6c, 0x43, 0x2d, 0x1b, 0x27, 0x33, 0x6e, 0x1b, 0x63, 0x75, 0x3d, 0x4f, 0x66, 0xc2, 0x60,
	0xc5, 0x24, 0xe2, 0x8e, 0x65, 0x34, 0x83, 0xf1, 0x11, 0xd8, 0xc9, 0x3c, 0x1a, 0xca, 0xb1, 0xb3,
	0x63, 0xd8, 0xec, 0x85, 0x9b, 0x50, 0x66, 0x9c, 0x8a, 0x88, 0x8c, 0x13, 0xc7, 0xf6, 0x50, 0xa7,
	0x16, 0x14, 0xef, 0x96, 0x0f, 0x8d, 0xbf, 0x2b, 0x99, 0x8d, 0x6f, 0xf1, 0x31, 0xec, 0xe6, 0x71,
	0x20, 0x13, 0x87, 0x4d, 0x4d, 0x14, 0xbd, 0xfb, 0xf7, 0xa5, 0x8b, 0x16, 0x4b, 0x17, 0x7d, 0x2d,
	0x5d, 0xf4, 0xba, 0x72, 0x4b, 0x8b, 0x95, 0x5b, 0xfa, 0x5c, 0xb9, 0xa5, 0xa7, 0xeb, 0x50, 0xe8,
	0xd1, 0x74, 0xd8, 0xa5, 0x32, 0xf2, 0x27, 0x4a, 0xb2, 0x29, 0xd5, 0x09, 0x15, 0xff, 0xce, 0x3a,
	0xfb, 0x85, 0xf5, 0x7c, 0xc2, 0x93, 0xa1, 0x6d, 0x8e, 0x76, 0xf5, 0x13, 0x00, 0x00, 0xff, 0xff,
	0x34, 0x20, 0x38, 0x06, 0x06, 0x02, 0x00, 0x00,
}

func (this *ContractsParams) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ContractsParams)
	if !ok {
		that2, ok := that.(ContractsParams)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Cw20Code, that1.Cw20Code) {
		return false
	}
	if this.Cw20CodeId != that1.Cw20CodeId {
		return false
	}
	return true
}
func (m *ContractsParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractsParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractsParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cw20CodeId != 0 {
		i = encodeVarintContracts(dAtA, i, uint64(m.Cw20CodeId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Cw20Code) > 0 {
		i -= len(m.Cw20Code)
		copy(dAtA[i:], m.Cw20Code)
		i = encodeVarintContracts(dAtA, i, uint64(len(m.Cw20Code)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BridgeContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BridgeContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BridgeContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Decimals != 0 {
		i = encodeVarintContracts(dAtA, i, uint64(m.Decimals))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintContracts(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintContracts(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Cw20Contract) > 0 {
		i -= len(m.Cw20Contract)
		copy(dAtA[i:], m.Cw20Contract)
		i = encodeVarintContracts(dAtA, i, uint64(len(m.Cw20Contract)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ExternalContract) > 0 {
		i -= len(m.ExternalContract)
		copy(dAtA[i:], m.ExternalContract)
		i = encodeVarintContracts(dAtA, i, uint64(len(m.ExternalContract)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ExternalChain) > 0 {
		i -= len(m.ExternalChain)
		copy(dAtA[i:], m.ExternalChain)
		i = encodeVarintContracts(dAtA, i, uint64(len(m.ExternalChain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BridgeContractCodeID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BridgeContractCodeID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BridgeContractCodeID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CodeId != 0 {
		i = encodeVarintContracts(dAtA, i, uint64(m.CodeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintContracts(dAtA []byte, offset int, v uint64) int {
	offset -= sovContracts(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ContractsParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cw20Code)
	if l > 0 {
		n += 1 + l + sovContracts(uint64(l))
	}
	if m.Cw20CodeId != 0 {
		n += 1 + sovContracts(uint64(m.Cw20CodeId))
	}
	return n
}

func (m *BridgeContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExternalChain)
	if l > 0 {
		n += 1 + l + sovContracts(uint64(l))
	}
	l = len(m.ExternalContract)
	if l > 0 {
		n += 1 + l + sovContracts(uint64(l))
	}
	l = len(m.Cw20Contract)
	if l > 0 {
		n += 1 + l + sovContracts(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovContracts(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovContracts(uint64(l))
	}
	if m.Decimals != 0 {
		n += 1 + sovContracts(uint64(m.Decimals))
	}
	return n
}

func (m *BridgeContractCodeID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CodeId != 0 {
		n += 1 + sovContracts(uint64(m.CodeId))
	}
	return n
}

func sovContracts(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozContracts(x uint64) (n int) {
	return sovContracts(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ContractsParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContracts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractsParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractsParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cw20Code", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContracts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthContracts
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthContracts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cw20Code = append(m.Cw20Code[:0], dAtA[iNdEx:postIndex]...)
			if m.Cw20Code == nil {
				m.Cw20Code = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cw20CodeId", wireType)
			}
			m.Cw20CodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContracts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cw20CodeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipContracts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContracts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BridgeContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContracts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BridgeContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BridgeContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContracts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContracts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContracts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContracts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContracts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContracts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cw20Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContracts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContracts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContracts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cw20Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContracts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContracts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContracts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContracts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContracts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContracts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimals", wireType)
			}
			m.Decimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContracts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimals |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipContracts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContracts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BridgeContractCodeID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContracts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BridgeContractCodeID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BridgeContractCodeID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeId", wireType)
			}
			m.CodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContracts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CodeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipContracts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContracts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipContracts(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowContracts
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContracts
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContracts
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthContracts
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupContracts
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthContracts
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthContracts        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowContracts          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupContracts = fmt.Errorf("proto: unexpected end of group")
)

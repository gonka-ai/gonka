// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: inference/inference/contracts.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CosmWasmParams struct {
	Cw20Code   []byte `protobuf:"bytes,1,opt,name=cw20_code,json=cw20Code,proto3" json:"cw20_code,omitempty"`
	Cw20CodeId uint64 `protobuf:"varint,2,opt,name=cw20_code_id,json=cw20CodeId,proto3" json:"cw20_code_id,omitempty"`
}

func (m *CosmWasmParams) Reset()         { *m = CosmWasmParams{} }
func (m *CosmWasmParams) String() string { return proto.CompactTextString(m) }
func (*CosmWasmParams) ProtoMessage()    {}
func (*CosmWasmParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_15e3e4d970cdc3ff, []int{0}
}
func (m *CosmWasmParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CosmWasmParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CosmWasmParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CosmWasmParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CosmWasmParams.Merge(m, src)
}
func (m *CosmWasmParams) XXX_Size() int {
	return m.Size()
}
func (m *CosmWasmParams) XXX_DiscardUnknown() {
	xxx_messageInfo_CosmWasmParams.DiscardUnknown(m)
}

var xxx_messageInfo_CosmWasmParams proto.InternalMessageInfo

func (m *CosmWasmParams) GetCw20Code() []byte {
	if m != nil {
		return m.Cw20Code
	}
	return nil
}

func (m *CosmWasmParams) GetCw20CodeId() uint64 {
	if m != nil {
		return m.Cw20CodeId
	}
	return 0
}

func init() {
	proto.RegisterType((*CosmWasmParams)(nil), "inference.inference.CosmWasmParams")
}

func init() {
	proto.RegisterFile("inference/inference/contracts.proto", fileDescriptor_15e3e4d970cdc3ff)
}

var fileDescriptor_15e3e4d970cdc3ff = []byte{
	// 210 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0xce, 0xcc, 0x4b, 0x4b,
	0x2d, 0x4a, 0xcd, 0x4b, 0x4e, 0xd5, 0x47, 0xb0, 0x92, 0xf3, 0xf3, 0x4a, 0x8a, 0x12, 0x93, 0x4b,
	0x8a, 0xf5, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x84, 0xe1, 0x52, 0x7a, 0x70, 0x96, 0x94, 0x48,
	0x7a, 0x7e, 0x7a, 0x3e, 0x58, 0x5e, 0x1f, 0xc4, 0x82, 0x28, 0x55, 0x0a, 0xe5, 0xe2, 0x73, 0xce,
	0x2f, 0xce, 0x0d, 0x4f, 0x2c, 0xce, 0x0d, 0x48, 0x2c, 0x4a, 0xcc, 0x2d, 0x16, 0x92, 0xe6, 0xe2,
	0x4c, 0x2e, 0x37, 0x32, 0x88, 0x4f, 0xce, 0x4f, 0x49, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x09,
	0xe2, 0x00, 0x09, 0x38, 0xe7, 0xa7, 0xa4, 0x0a, 0x29, 0x70, 0xf1, 0xc0, 0x25, 0xe3, 0x33, 0x53,
	0x24, 0x98, 0x14, 0x18, 0x35, 0x58, 0x82, 0xb8, 0x60, 0xf2, 0x9e, 0x29, 0x56, 0x2c, 0x2f, 0x16,
	0xc8, 0x33, 0x3a, 0xf9, 0x9f, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72,
	0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x5c, 0x78, 0x2c, 0xc7, 0x70, 0xe3, 0xb1, 0x1c, 0x43, 0x94, 0x69,
	0x7a, 0x66, 0x49, 0x46, 0x69, 0x92, 0x5e, 0x72, 0x7e, 0xae, 0x7e, 0x41, 0x51, 0x7e, 0x4a, 0x69,
	0x72, 0x49, 0x71, 0x72, 0x26, 0x9a, 0x87, 0x2a, 0x90, 0xd8, 0x25, 0x95, 0x05, 0xa9, 0xc5, 0x49,
	0x6c, 0x60, 0xe7, 0x1a, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x01, 0xfb, 0xc9, 0x92, 0x00, 0x01,
	0x00, 0x00,
}

func (this *CosmWasmParams) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CosmWasmParams)
	if !ok {
		that2, ok := that.(CosmWasmParams)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Cw20Code, that1.Cw20Code) {
		return false
	}
	if this.Cw20CodeId != that1.Cw20CodeId {
		return false
	}
	return true
}
func (m *CosmWasmParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CosmWasmParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CosmWasmParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cw20CodeId != 0 {
		i = encodeVarintContracts(dAtA, i, uint64(m.Cw20CodeId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Cw20Code) > 0 {
		i -= len(m.Cw20Code)
		copy(dAtA[i:], m.Cw20Code)
		i = encodeVarintContracts(dAtA, i, uint64(len(m.Cw20Code)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintContracts(dAtA []byte, offset int, v uint64) int {
	offset -= sovContracts(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CosmWasmParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cw20Code)
	if l > 0 {
		n += 1 + l + sovContracts(uint64(l))
	}
	if m.Cw20CodeId != 0 {
		n += 1 + sovContracts(uint64(m.Cw20CodeId))
	}
	return n
}

func sovContracts(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozContracts(x uint64) (n int) {
	return sovContracts(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CosmWasmParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContracts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CosmWasmParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CosmWasmParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cw20Code", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContracts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthContracts
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthContracts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cw20Code = append(m.Cw20Code[:0], dAtA[iNdEx:postIndex]...)
			if m.Cw20Code == nil {
				m.Cw20Code = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cw20CodeId", wireType)
			}
			m.Cw20CodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContracts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cw20CodeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipContracts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContracts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipContracts(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowContracts
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContracts
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContracts
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthContracts
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupContracts
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthContracts
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthContracts        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowContracts          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupContracts = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: inference/inference/v1/bridge_transaction.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BridgeTransactionStatus int32

const (
	BridgeTransactionStatus_BRIDGE_PENDING   BridgeTransactionStatus = 0
	BridgeTransactionStatus_BRIDGE_COMPLETED BridgeTransactionStatus = 1
)

var BridgeTransactionStatus_name = map[int32]string{
	0: "BRIDGE_PENDING",
	1: "BRIDGE_COMPLETED",
}

var BridgeTransactionStatus_value = map[string]int32{
	"BRIDGE_PENDING":   0,
	"BRIDGE_COMPLETED": 1,
}

func (x BridgeTransactionStatus) String() string {
	return proto.EnumName(BridgeTransactionStatus_name, int32(x))
}

func (BridgeTransactionStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_165bb08a25587d70, []int{0}
}

type BridgeTransaction struct {
	Id              string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OriginChain     string                  `protobuf:"bytes,2,opt,name=originChain,proto3" json:"originChain,omitempty"`
	ContractAddress string                  `protobuf:"bytes,3,opt,name=contractAddress,proto3" json:"contractAddress,omitempty"`
	OwnerAddress    string                  `protobuf:"bytes,4,opt,name=ownerAddress,proto3" json:"ownerAddress,omitempty"`
	Amount          string                  `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	Recipient       string                  `protobuf:"bytes,6,opt,name=recipient,proto3" json:"recipient,omitempty"`
	BlockHeight     int64                   `protobuf:"varint,7,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	Timestamp       int64                   `protobuf:"varint,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Status          BridgeTransactionStatus `protobuf:"varint,9,opt,name=status,proto3,enum=inference.inference.BridgeTransactionStatus" json:"status,omitempty"`
	Validators      []string                `protobuf:"bytes,10,rep,name=validators,proto3" json:"validators,omitempty"`
	ValidationCount uint32                  `protobuf:"varint,11,opt,name=validationCount,proto3" json:"validationCount,omitempty"`
	BlockNumber     string                  `protobuf:"bytes,12,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
	ReceiptIndex    string                  `protobuf:"bytes,13,opt,name=receiptIndex,proto3" json:"receiptIndex,omitempty"`
	ReceiptsRoot    string                  `protobuf:"bytes,14,opt,name=receiptsRoot,proto3" json:"receiptsRoot,omitempty"`
}

func (m *BridgeTransaction) Reset()         { *m = BridgeTransaction{} }
func (m *BridgeTransaction) String() string { return proto.CompactTextString(m) }
func (*BridgeTransaction) ProtoMessage()    {}
func (*BridgeTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_165bb08a25587d70, []int{0}
}
func (m *BridgeTransaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BridgeTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BridgeTransaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BridgeTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BridgeTransaction.Merge(m, src)
}
func (m *BridgeTransaction) XXX_Size() int {
	return m.Size()
}
func (m *BridgeTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_BridgeTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_BridgeTransaction proto.InternalMessageInfo

func (m *BridgeTransaction) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BridgeTransaction) GetOriginChain() string {
	if m != nil {
		return m.OriginChain
	}
	return ""
}

func (m *BridgeTransaction) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *BridgeTransaction) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func (m *BridgeTransaction) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *BridgeTransaction) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

func (m *BridgeTransaction) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *BridgeTransaction) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *BridgeTransaction) GetStatus() BridgeTransactionStatus {
	if m != nil {
		return m.Status
	}
	return BridgeTransactionStatus_BRIDGE_PENDING
}

func (m *BridgeTransaction) GetValidators() []string {
	if m != nil {
		return m.Validators
	}
	return nil
}

func (m *BridgeTransaction) GetValidationCount() uint32 {
	if m != nil {
		return m.ValidationCount
	}
	return 0
}

func (m *BridgeTransaction) GetBlockNumber() string {
	if m != nil {
		return m.BlockNumber
	}
	return ""
}

func (m *BridgeTransaction) GetReceiptIndex() string {
	if m != nil {
		return m.ReceiptIndex
	}
	return ""
}

func (m *BridgeTransaction) GetReceiptsRoot() string {
	if m != nil {
		return m.ReceiptsRoot
	}
	return ""
}

func init() {
	proto.RegisterEnum("inference.inference.BridgeTransactionStatus", BridgeTransactionStatus_name, BridgeTransactionStatus_value)
	proto.RegisterType((*BridgeTransaction)(nil), "inference.inference.BridgeTransaction")
}

func init() {
	proto.RegisterFile("inference/inference/v1/bridge_transaction.proto", fileDescriptor_165bb08a25587d70)
}

var fileDescriptor_165bb08a25587d70 = []byte{
	// 433 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xcd, 0x6e, 0x13, 0x31,
	0x14, 0x85, 0xe3, 0xa4, 0x04, 0xe2, 0xb6, 0x21, 0x18, 0x04, 0x5e, 0xa0, 0xd1, 0xa8, 0xab, 0x11,
	0x42, 0x13, 0x01, 0xe2, 0x01, 0xc8, 0x8f, 0x4a, 0x24, 0x48, 0xab, 0xa1, 0x2b, 0x36, 0x95, 0xc7,
	0x63, 0x92, 0x2b, 0x3a, 0xf6, 0xc8, 0xbe, 0x53, 0xca, 0x9a, 0x17, 0xe0, 0xb1, 0x58, 0x76, 0xc9,
	0x12, 0x25, 0x2f, 0x82, 0xe2, 0x86, 0xc4, 0x0d, 0xb0, 0xbb, 0xfe, 0xce, 0x39, 0x92, 0xef, 0xd1,
	0xa5, 0x7d, 0xd0, 0x9f, 0x94, 0x55, 0x5a, 0xaa, 0x60, 0xba, 0x7c, 0xd1, 0xcf, 0x2d, 0x14, 0x33,
	0x75, 0x8e, 0x56, 0x68, 0x27, 0x24, 0x82, 0xd1, 0x69, 0x65, 0x0d, 0x1a, 0xf6, 0x70, 0x63, 0x4b,
	0x37, 0xd3, 0xd1, 0xb7, 0x3d, 0xfa, 0x60, 0xe0, 0x13, 0x67, 0xdb, 0x00, 0xeb, 0xd2, 0x26, 0x14,
	0x9c, 0xc4, 0x24, 0xe9, 0x64, 0x4d, 0x28, 0x58, 0x4c, 0xf7, 0x8d, 0x85, 0x19, 0xe8, 0xe1, 0x5c,
	0x80, 0xe6, 0x4d, 0x2f, 0x84, 0x88, 0x25, 0xf4, 0xbe, 0x34, 0x1a, 0xad, 0x90, 0xf8, 0xa6, 0x28,
	0xac, 0x72, 0x8e, 0xb7, 0xbc, 0x6b, 0x17, 0xb3, 0x23, 0x7a, 0x60, 0xbe, 0x68, 0x65, 0xff, 0xd8,
	0xf6, 0xbc, 0xed, 0x16, 0x63, 0x8f, 0x69, 0x5b, 0x94, 0xa6, 0xd6, 0xc8, 0xef, 0x78, 0x75, 0xfd,
	0x62, 0x4f, 0x69, 0xc7, 0x2a, 0x09, 0x15, 0x28, 0x8d, 0xbc, 0xed, 0xa5, 0x2d, 0x58, 0xfd, 0x32,
	0xbf, 0x30, 0xf2, 0xf3, 0x5b, 0x05, 0xb3, 0x39, 0xf2, 0xbb, 0x31, 0x49, 0x5a, 0x59, 0x88, 0x56,
	0x79, 0x84, 0x52, 0x39, 0x14, 0x65, 0xc5, 0xef, 0x79, 0x7d, 0x0b, 0xd8, 0x88, 0xb6, 0x1d, 0x0a,
	0xac, 0x1d, 0xef, 0xc4, 0x24, 0xe9, 0xbe, 0x7c, 0x9e, 0xfe, 0xa3, 0xb1, 0xf4, 0xaf, 0xb6, 0x3e,
	0xf8, 0x4c, 0xb6, 0xce, 0xb2, 0x88, 0xd2, 0x4b, 0x71, 0x01, 0x85, 0x40, 0x63, 0x1d, 0xa7, 0x71,
	0x2b, 0xe9, 0x64, 0x01, 0x59, 0x35, 0xb5, 0x7e, 0x81, 0xd1, 0x43, 0xbf, 0xe4, 0x7e, 0x4c, 0x92,
	0xc3, 0x6c, 0x17, 0x6f, 0xf6, 0x99, 0xd6, 0x65, 0xae, 0x2c, 0x3f, 0xb8, 0x69, 0x3d, 0x40, 0xab,
	0x2e, 0xad, 0x92, 0x0a, 0x2a, 0x9c, 0xe8, 0x42, 0x5d, 0xf1, 0xc3, 0x9b, 0x2e, 0x43, 0x16, 0x78,
	0x5c, 0x66, 0x0c, 0xf2, 0xee, 0x2d, 0x8f, 0x67, 0xcf, 0x86, 0xf4, 0xc9, 0x7f, 0xd6, 0x62, 0x8c,
	0x76, 0x07, 0xd9, 0x64, 0x74, 0x3c, 0x3e, 0x3f, 0x1d, 0x4f, 0x47, 0x93, 0xe9, 0x71, 0xaf, 0xc1,
	0x1e, 0xd1, 0xde, 0x9a, 0x0d, 0x4f, 0xde, 0x9f, 0xbe, 0x1b, 0x9f, 0x8d, 0x47, 0x3d, 0x32, 0x38,
	0xf9, 0xb1, 0x88, 0xc8, 0xf5, 0x22, 0x22, 0xbf, 0x16, 0x11, 0xf9, 0xbe, 0x8c, 0x1a, 0xd7, 0xcb,
	0xa8, 0xf1, 0x73, 0x19, 0x35, 0x3e, 0xbe, 0x9e, 0x01, 0xce, 0xeb, 0x3c, 0x95, 0xa6, 0xec, 0x57,
	0xd6, 0x14, 0xb5, 0x44, 0x27, 0x61, 0xe7, 0x74, 0xaf, 0x82, 0x19, 0xbf, 0x56, 0xca, 0xe5, 0x6d,
	0x7f, 0xb7, 0xaf, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0xd0, 0x77, 0xaf, 0x0b, 0xea, 0x02, 0x00,
	0x00,
}

func (m *BridgeTransaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BridgeTransaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BridgeTransaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReceiptsRoot) > 0 {
		i -= len(m.ReceiptsRoot)
		copy(dAtA[i:], m.ReceiptsRoot)
		i = encodeVarintBridgeTransaction(dAtA, i, uint64(len(m.ReceiptsRoot)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.ReceiptIndex) > 0 {
		i -= len(m.ReceiptIndex)
		copy(dAtA[i:], m.ReceiptIndex)
		i = encodeVarintBridgeTransaction(dAtA, i, uint64(len(m.ReceiptIndex)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.BlockNumber) > 0 {
		i -= len(m.BlockNumber)
		copy(dAtA[i:], m.BlockNumber)
		i = encodeVarintBridgeTransaction(dAtA, i, uint64(len(m.BlockNumber)))
		i--
		dAtA[i] = 0x62
	}
	if m.ValidationCount != 0 {
		i = encodeVarintBridgeTransaction(dAtA, i, uint64(m.ValidationCount))
		i--
		dAtA[i] = 0x58
	}
	if len(m.Validators) > 0 {
		for iNdEx := len(m.Validators) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Validators[iNdEx])
			copy(dAtA[i:], m.Validators[iNdEx])
			i = encodeVarintBridgeTransaction(dAtA, i, uint64(len(m.Validators[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if m.Status != 0 {
		i = encodeVarintBridgeTransaction(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x48
	}
	if m.Timestamp != 0 {
		i = encodeVarintBridgeTransaction(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x40
	}
	if m.BlockHeight != 0 {
		i = encodeVarintBridgeTransaction(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintBridgeTransaction(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintBridgeTransaction(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintBridgeTransaction(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintBridgeTransaction(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OriginChain) > 0 {
		i -= len(m.OriginChain)
		copy(dAtA[i:], m.OriginChain)
		i = encodeVarintBridgeTransaction(dAtA, i, uint64(len(m.OriginChain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBridgeTransaction(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBridgeTransaction(dAtA []byte, offset int, v uint64) int {
	offset -= sovBridgeTransaction(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BridgeTransaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBridgeTransaction(uint64(l))
	}
	l = len(m.OriginChain)
	if l > 0 {
		n += 1 + l + sovBridgeTransaction(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovBridgeTransaction(uint64(l))
	}
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovBridgeTransaction(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovBridgeTransaction(uint64(l))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovBridgeTransaction(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovBridgeTransaction(uint64(m.BlockHeight))
	}
	if m.Timestamp != 0 {
		n += 1 + sovBridgeTransaction(uint64(m.Timestamp))
	}
	if m.Status != 0 {
		n += 1 + sovBridgeTransaction(uint64(m.Status))
	}
	if len(m.Validators) > 0 {
		for _, s := range m.Validators {
			l = len(s)
			n += 1 + l + sovBridgeTransaction(uint64(l))
		}
	}
	if m.ValidationCount != 0 {
		n += 1 + sovBridgeTransaction(uint64(m.ValidationCount))
	}
	l = len(m.BlockNumber)
	if l > 0 {
		n += 1 + l + sovBridgeTransaction(uint64(l))
	}
	l = len(m.ReceiptIndex)
	if l > 0 {
		n += 1 + l + sovBridgeTransaction(uint64(l))
	}
	l = len(m.ReceiptsRoot)
	if l > 0 {
		n += 1 + l + sovBridgeTransaction(uint64(l))
	}
	return n
}

func sovBridgeTransaction(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBridgeTransaction(x uint64) (n int) {
	return sovBridgeTransaction(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BridgeTransaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridgeTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BridgeTransaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BridgeTransaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgeTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridgeTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgeTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgeTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridgeTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgeTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgeTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridgeTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgeTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgeTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridgeTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgeTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgeTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridgeTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgeTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgeTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridgeTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgeTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgeTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgeTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgeTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= BridgeTransactionStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgeTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridgeTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgeTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validators = append(m.Validators, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationCount", wireType)
			}
			m.ValidationCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgeTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidationCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgeTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridgeTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgeTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiptIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgeTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridgeTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgeTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiptIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiptsRoot", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgeTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridgeTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgeTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiptsRoot = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBridgeTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBridgeTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBridgeTransaction(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBridgeTransaction
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBridgeTransaction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBridgeTransaction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBridgeTransaction
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBridgeTransaction
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBridgeTransaction
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBridgeTransaction        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBridgeTransaction          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBridgeTransaction = fmt.Errorf("proto: unexpected end of group")
)

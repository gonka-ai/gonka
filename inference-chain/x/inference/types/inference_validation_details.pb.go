// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: inference/inference/inference_validation_details.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type InferenceValidationDetails struct {
	EpochId            uint64 `protobuf:"varint,1,opt,name=epoch_id,json=epochId,proto3" json:"epoch_id,omitempty"`
	InferenceId        string `protobuf:"bytes,2,opt,name=inference_id,json=inferenceId,proto3" json:"inference_id,omitempty"`
	ExecutorId         string `protobuf:"bytes,3,opt,name=executor_id,json=executorId,proto3" json:"executor_id,omitempty"`
	ExecutorReputation int32  `protobuf:"varint,4,opt,name=executor_reputation,json=executorReputation,proto3" json:"executor_reputation,omitempty"`
	TrafficBasis       uint64 `protobuf:"varint,5,opt,name=traffic_basis,json=trafficBasis,proto3" json:"traffic_basis,omitempty"`
	ExecutorPower      uint64 `protobuf:"varint,6,opt,name=executor_power,json=executorPower,proto3" json:"executor_power,omitempty"`
	Model              string `protobuf:"bytes,7,opt,name=model,proto3" json:"model,omitempty"`
	TotalPower         uint64 `protobuf:"varint,8,opt,name=total_power,json=totalPower,proto3" json:"total_power,omitempty"`
	EpochIndex         uint64 `protobuf:"varint,9,opt,name=epoch_index,json=epochIndex,proto3" json:"epoch_index,omitempty"`
}

func (m *InferenceValidationDetails) Reset()         { *m = InferenceValidationDetails{} }
func (m *InferenceValidationDetails) String() string { return proto.CompactTextString(m) }
func (*InferenceValidationDetails) ProtoMessage()    {}
func (*InferenceValidationDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_caf29ad96621edf5, []int{0}
}
func (m *InferenceValidationDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InferenceValidationDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InferenceValidationDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InferenceValidationDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InferenceValidationDetails.Merge(m, src)
}
func (m *InferenceValidationDetails) XXX_Size() int {
	return m.Size()
}
func (m *InferenceValidationDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_InferenceValidationDetails.DiscardUnknown(m)
}

var xxx_messageInfo_InferenceValidationDetails proto.InternalMessageInfo

func (m *InferenceValidationDetails) GetEpochId() uint64 {
	if m != nil {
		return m.EpochId
	}
	return 0
}

func (m *InferenceValidationDetails) GetInferenceId() string {
	if m != nil {
		return m.InferenceId
	}
	return ""
}

func (m *InferenceValidationDetails) GetExecutorId() string {
	if m != nil {
		return m.ExecutorId
	}
	return ""
}

func (m *InferenceValidationDetails) GetExecutorReputation() int32 {
	if m != nil {
		return m.ExecutorReputation
	}
	return 0
}

func (m *InferenceValidationDetails) GetTrafficBasis() uint64 {
	if m != nil {
		return m.TrafficBasis
	}
	return 0
}

func (m *InferenceValidationDetails) GetExecutorPower() uint64 {
	if m != nil {
		return m.ExecutorPower
	}
	return 0
}

func (m *InferenceValidationDetails) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *InferenceValidationDetails) GetTotalPower() uint64 {
	if m != nil {
		return m.TotalPower
	}
	return 0
}

func (m *InferenceValidationDetails) GetEpochIndex() uint64 {
	if m != nil {
		return m.EpochIndex
	}
	return 0
}

func init() {
	proto.RegisterType((*InferenceValidationDetails)(nil), "inference.inference.InferenceValidationDetails")
}

func init() {
	proto.RegisterFile("inference/inference/inference_validation_details.proto", fileDescriptor_caf29ad96621edf5)
}

var fileDescriptor_caf29ad96621edf5 = []byte{
	// 327 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xbf, 0x4e, 0xfb, 0x30,
	0x10, 0xc7, 0xeb, 0xfe, 0xfa, 0xd7, 0x6d, 0x7f, 0x83, 0xcb, 0x60, 0x18, 0x42, 0x01, 0x21, 0x75,
	0x6a, 0x07, 0x04, 0x0f, 0x50, 0xb1, 0x64, 0x02, 0x65, 0x60, 0x60, 0x89, 0x52, 0xfb, 0x4a, 0x2d,
	0xa5, 0x71, 0xe4, 0x38, 0x50, 0xde, 0x82, 0xc7, 0x62, 0xec, 0xc8, 0x88, 0x9a, 0x17, 0x41, 0xb6,
	0x1b, 0x83, 0x10, 0xdb, 0xdd, 0xe7, 0xbe, 0x5f, 0xdf, 0xf9, 0x0e, 0xdf, 0x88, 0x6c, 0x05, 0x0a,
	0x32, 0x06, 0xf3, 0x3f, 0xa2, 0xf8, 0x39, 0x49, 0x05, 0x4f, 0xb4, 0x90, 0x59, 0xcc, 0x41, 0x27,
	0x22, 0x2d, 0x66, 0xb9, 0x92, 0x5a, 0x92, 0xb1, 0xd7, 0xcc, 0x7c, 0x74, 0xbe, 0x6b, 0xe2, 0x93,
	0xb0, 0xce, 0x1e, 0xbc, 0xf5, 0xd6, 0x39, 0xc9, 0x31, 0xee, 0x41, 0x2e, 0xd9, 0x3a, 0x16, 0x9c,
	0xa2, 0x09, 0x9a, 0xb6, 0xa2, 0xae, 0xcd, 0x43, 0x4e, 0xce, 0xf0, 0xf0, 0xbb, 0xa9, 0xe0, 0xb4,
	0x39, 0x41, 0xd3, 0x7e, 0x34, 0xf0, 0x2c, 0xe4, 0xe4, 0x14, 0x0f, 0x60, 0x0b, 0xac, 0xd4, 0x52,
	0x19, 0xc5, 0x3f, 0xab, 0xc0, 0x35, 0x0a, 0x39, 0x99, 0xe3, 0xb1, 0x17, 0x28, 0xc8, 0x4b, 0x6d,
	0x9b, 0xd3, 0xd6, 0x04, 0x4d, 0xdb, 0x11, 0xa9, 0x4b, 0x91, 0xaf, 0x90, 0x0b, 0x3c, 0xd2, 0x2a,
	0x59, 0xad, 0x04, 0x8b, 0x97, 0x49, 0x21, 0x0a, 0xda, 0xb6, 0x43, 0x0d, 0x0f, 0x70, 0x61, 0x18,
	0xb9, 0xc4, 0xff, 0xfd, 0xab, 0xb9, 0x7c, 0x01, 0x45, 0x3b, 0x56, 0x35, 0xaa, 0xe9, 0xbd, 0x81,
	0xe4, 0x08, 0xb7, 0x37, 0x92, 0x43, 0x4a, 0xbb, 0x76, 0x2e, 0x97, 0x98, 0x99, 0xb5, 0xd4, 0x49,
	0x7a, 0x70, 0xf6, 0xac, 0x13, 0x5b, 0xe4, 0x6c, 0xe6, 0x53, 0x6e, 0x25, 0x19, 0x87, 0x2d, 0xed,
	0x3b, 0x81, 0xdb, 0x8a, 0x21, 0x8b, 0xbb, 0xf7, 0x7d, 0x80, 0x76, 0xfb, 0x00, 0x7d, 0xee, 0x03,
	0xf4, 0x56, 0x05, 0x8d, 0x5d, 0x15, 0x34, 0x3e, 0xaa, 0xa0, 0xf1, 0x78, 0xfd, 0x24, 0xf4, 0xba,
	0x5c, 0xce, 0x98, 0xdc, 0xcc, 0x73, 0x25, 0x79, 0xc9, 0x74, 0xc1, 0xc4, 0xaf, 0x4b, 0x6e, 0x7f,
	0xc4, 0xfa, 0x35, 0x87, 0x62, 0xd9, 0xb1, 0xf7, 0xbb, 0xfa, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xab,
	0x0f, 0x31, 0xa2, 0xf9, 0x01, 0x00, 0x00,
}

func (m *InferenceValidationDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InferenceValidationDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InferenceValidationDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EpochIndex != 0 {
		i = encodeVarintInferenceValidationDetails(dAtA, i, uint64(m.EpochIndex))
		i--
		dAtA[i] = 0x48
	}
	if m.TotalPower != 0 {
		i = encodeVarintInferenceValidationDetails(dAtA, i, uint64(m.TotalPower))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Model) > 0 {
		i -= len(m.Model)
		copy(dAtA[i:], m.Model)
		i = encodeVarintInferenceValidationDetails(dAtA, i, uint64(len(m.Model)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ExecutorPower != 0 {
		i = encodeVarintInferenceValidationDetails(dAtA, i, uint64(m.ExecutorPower))
		i--
		dAtA[i] = 0x30
	}
	if m.TrafficBasis != 0 {
		i = encodeVarintInferenceValidationDetails(dAtA, i, uint64(m.TrafficBasis))
		i--
		dAtA[i] = 0x28
	}
	if m.ExecutorReputation != 0 {
		i = encodeVarintInferenceValidationDetails(dAtA, i, uint64(m.ExecutorReputation))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ExecutorId) > 0 {
		i -= len(m.ExecutorId)
		copy(dAtA[i:], m.ExecutorId)
		i = encodeVarintInferenceValidationDetails(dAtA, i, uint64(len(m.ExecutorId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.InferenceId) > 0 {
		i -= len(m.InferenceId)
		copy(dAtA[i:], m.InferenceId)
		i = encodeVarintInferenceValidationDetails(dAtA, i, uint64(len(m.InferenceId)))
		i--
		dAtA[i] = 0x12
	}
	if m.EpochId != 0 {
		i = encodeVarintInferenceValidationDetails(dAtA, i, uint64(m.EpochId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintInferenceValidationDetails(dAtA []byte, offset int, v uint64) int {
	offset -= sovInferenceValidationDetails(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InferenceValidationDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochId != 0 {
		n += 1 + sovInferenceValidationDetails(uint64(m.EpochId))
	}
	l = len(m.InferenceId)
	if l > 0 {
		n += 1 + l + sovInferenceValidationDetails(uint64(l))
	}
	l = len(m.ExecutorId)
	if l > 0 {
		n += 1 + l + sovInferenceValidationDetails(uint64(l))
	}
	if m.ExecutorReputation != 0 {
		n += 1 + sovInferenceValidationDetails(uint64(m.ExecutorReputation))
	}
	if m.TrafficBasis != 0 {
		n += 1 + sovInferenceValidationDetails(uint64(m.TrafficBasis))
	}
	if m.ExecutorPower != 0 {
		n += 1 + sovInferenceValidationDetails(uint64(m.ExecutorPower))
	}
	l = len(m.Model)
	if l > 0 {
		n += 1 + l + sovInferenceValidationDetails(uint64(l))
	}
	if m.TotalPower != 0 {
		n += 1 + sovInferenceValidationDetails(uint64(m.TotalPower))
	}
	if m.EpochIndex != 0 {
		n += 1 + sovInferenceValidationDetails(uint64(m.EpochIndex))
	}
	return n
}

func sovInferenceValidationDetails(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozInferenceValidationDetails(x uint64) (n int) {
	return sovInferenceValidationDetails(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InferenceValidationDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInferenceValidationDetails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InferenceValidationDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InferenceValidationDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochId", wireType)
			}
			m.EpochId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInferenceValidationDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InferenceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInferenceValidationDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInferenceValidationDetails
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInferenceValidationDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InferenceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInferenceValidationDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInferenceValidationDetails
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInferenceValidationDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecutorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutorReputation", wireType)
			}
			m.ExecutorReputation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInferenceValidationDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecutorReputation |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrafficBasis", wireType)
			}
			m.TrafficBasis = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInferenceValidationDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrafficBasis |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutorPower", wireType)
			}
			m.ExecutorPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInferenceValidationDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecutorPower |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInferenceValidationDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInferenceValidationDetails
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInferenceValidationDetails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Model = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPower", wireType)
			}
			m.TotalPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInferenceValidationDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalPower |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochIndex", wireType)
			}
			m.EpochIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInferenceValidationDetails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInferenceValidationDetails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInferenceValidationDetails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInferenceValidationDetails(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInferenceValidationDetails
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInferenceValidationDetails
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInferenceValidationDetails
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInferenceValidationDetails
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupInferenceValidationDetails
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthInferenceValidationDetails
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthInferenceValidationDetails        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInferenceValidationDetails          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupInferenceValidationDetails = fmt.Errorf("proto: unexpected end of group")
)

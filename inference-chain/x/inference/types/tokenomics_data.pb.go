// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: inference/inference/tokenomics_data.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TokenomicsData struct {
	TotalFees      uint64 `protobuf:"varint,1,opt,name=total_fees,json=totalFees,proto3" json:"total_fees,omitempty"`
	TotalSubsidies uint64 `protobuf:"varint,2,opt,name=total_subsidies,json=totalSubsidies,proto3" json:"total_subsidies,omitempty"`
	TotalRefunded  uint64 `protobuf:"varint,3,opt,name=total_refunded,json=totalRefunded,proto3" json:"total_refunded,omitempty"`
	TotalBurned    uint64 `protobuf:"varint,4,opt,name=total_burned,json=totalBurned,proto3" json:"total_burned,omitempty"`
}

func (m *TokenomicsData) Reset()         { *m = TokenomicsData{} }
func (m *TokenomicsData) String() string { return proto.CompactTextString(m) }
func (*TokenomicsData) ProtoMessage()    {}
func (*TokenomicsData) Descriptor() ([]byte, []int) {
	return fileDescriptor_1688fe8cc1986b9b, []int{0}
}
func (m *TokenomicsData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenomicsData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenomicsData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenomicsData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenomicsData.Merge(m, src)
}
func (m *TokenomicsData) XXX_Size() int {
	return m.Size()
}
func (m *TokenomicsData) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenomicsData.DiscardUnknown(m)
}

var xxx_messageInfo_TokenomicsData proto.InternalMessageInfo

func (m *TokenomicsData) GetTotalFees() uint64 {
	if m != nil {
		return m.TotalFees
	}
	return 0
}

func (m *TokenomicsData) GetTotalSubsidies() uint64 {
	if m != nil {
		return m.TotalSubsidies
	}
	return 0
}

func (m *TokenomicsData) GetTotalRefunded() uint64 {
	if m != nil {
		return m.TotalRefunded
	}
	return 0
}

func (m *TokenomicsData) GetTotalBurned() uint64 {
	if m != nil {
		return m.TotalBurned
	}
	return 0
}

func init() {
	proto.RegisterType((*TokenomicsData)(nil), "inference.inference.TokenomicsData")
}

func init() {
	proto.RegisterFile("inference/inference/tokenomics_data.proto", fileDescriptor_1688fe8cc1986b9b)
}

var fileDescriptor_1688fe8cc1986b9b = []byte{
	// 241 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0xd0, 0x3f, 0x4a, 0x04, 0x31,
	0x14, 0xc7, 0xf1, 0x89, 0x2e, 0x82, 0x51, 0x57, 0x88, 0xcd, 0x34, 0x06, 0x15, 0x44, 0x6d, 0x66,
	0x0b, 0xf1, 0x02, 0x8b, 0xd8, 0x0a, 0xab, 0x95, 0xcd, 0x90, 0x3f, 0x6f, 0x34, 0xe8, 0x26, 0x43,
	0xf2, 0x02, 0x7a, 0x0b, 0xcf, 0xe0, 0x69, 0x2c, 0xb7, 0xb4, 0x94, 0x99, 0x8b, 0x08, 0x6f, 0x74,
	0x14, 0xbb, 0xc7, 0xe7, 0x7d, 0xab, 0x1f, 0x3f, 0x73, 0xbe, 0x81, 0x08, 0xde, 0xc0, 0xec, 0xf7,
	0xc2, 0xf0, 0x08, 0x3e, 0x2c, 0x9d, 0x49, 0xb5, 0x55, 0xa8, 0xaa, 0x36, 0x06, 0x0c, 0x62, 0x6f,
	0x0c, 0xaa, 0xf1, 0x3a, 0x7a, 0x63, 0x7c, 0x7a, 0x3b, 0xe6, 0x97, 0x0a, 0x95, 0xd8, 0xe7, 0x1c,
	0x03, 0xaa, 0xa7, 0xba, 0x01, 0x48, 0x25, 0x3b, 0x60, 0xa7, 0x93, 0xc5, 0x26, 0xc9, 0x15, 0x40,
	0x12, 0x27, 0x7c, 0x77, 0x78, 0xa7, 0xac, 0x93, 0xb3, 0x0e, 0x52, 0xb9, 0x46, 0xcd, 0x94, 0xf8,
	0xe6, 0x47, 0xc5, 0x31, 0x1f, 0xa4, 0x8e, 0xd0, 0x64, 0x6f, 0xc1, 0x96, 0xeb, 0xd4, 0xed, 0x90,
	0x2e, 0xbe, 0x51, 0x1c, 0xf2, 0xed, 0x21, 0xd3, 0x39, 0x7a, 0xb0, 0xe5, 0x84, 0xa2, 0x2d, 0xb2,
	0x39, 0xd1, 0xfc, 0xfa, 0xbd, 0x93, 0x6c, 0xd5, 0x49, 0xf6, 0xd9, 0x49, 0xf6, 0xda, 0xcb, 0x62,
	0xd5, 0xcb, 0xe2, 0xa3, 0x97, 0xc5, 0xdd, 0xc5, 0xbd, 0xc3, 0x87, 0xac, 0x2b, 0x13, 0x96, 0xb3,
	0x36, 0x06, 0x9b, 0x0d, 0x26, 0xe3, 0xfe, 0xcd, 0xf1, 0xfc, 0x77, 0x9a, 0x97, 0x16, 0x92, 0xde,
	0xa0, 0x45, 0xce, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x21, 0x5a, 0x16, 0x10, 0x3e, 0x01, 0x00,
	0x00,
}

func (m *TokenomicsData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenomicsData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenomicsData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalBurned != 0 {
		i = encodeVarintTokenomicsData(dAtA, i, uint64(m.TotalBurned))
		i--
		dAtA[i] = 0x20
	}
	if m.TotalRefunded != 0 {
		i = encodeVarintTokenomicsData(dAtA, i, uint64(m.TotalRefunded))
		i--
		dAtA[i] = 0x18
	}
	if m.TotalSubsidies != 0 {
		i = encodeVarintTokenomicsData(dAtA, i, uint64(m.TotalSubsidies))
		i--
		dAtA[i] = 0x10
	}
	if m.TotalFees != 0 {
		i = encodeVarintTokenomicsData(dAtA, i, uint64(m.TotalFees))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTokenomicsData(dAtA []byte, offset int, v uint64) int {
	offset -= sovTokenomicsData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TokenomicsData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalFees != 0 {
		n += 1 + sovTokenomicsData(uint64(m.TotalFees))
	}
	if m.TotalSubsidies != 0 {
		n += 1 + sovTokenomicsData(uint64(m.TotalSubsidies))
	}
	if m.TotalRefunded != 0 {
		n += 1 + sovTokenomicsData(uint64(m.TotalRefunded))
	}
	if m.TotalBurned != 0 {
		n += 1 + sovTokenomicsData(uint64(m.TotalBurned))
	}
	return n
}

func sovTokenomicsData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTokenomicsData(x uint64) (n int) {
	return sovTokenomicsData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TokenomicsData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenomicsData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenomicsData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenomicsData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalFees", wireType)
			}
			m.TotalFees = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenomicsData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalFees |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSubsidies", wireType)
			}
			m.TotalSubsidies = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenomicsData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalSubsidies |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRefunded", wireType)
			}
			m.TotalRefunded = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenomicsData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalRefunded |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBurned", wireType)
			}
			m.TotalBurned = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenomicsData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalBurned |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTokenomicsData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTokenomicsData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTokenomicsData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTokenomicsData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTokenomicsData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTokenomicsData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTokenomicsData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTokenomicsData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTokenomicsData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTokenomicsData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTokenomicsData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTokenomicsData = fmt.Errorf("proto: unexpected end of group")
)

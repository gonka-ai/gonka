// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: inference/inference/participant.proto

package types

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ParticipantStatus int32

const (
	ParticipantStatus_UNSPECIFIED ParticipantStatus = 0
	ParticipantStatus_ACTIVE      ParticipantStatus = 1
	ParticipantStatus_INACTIVE    ParticipantStatus = 2
	ParticipantStatus_INVALID     ParticipantStatus = 3
	ParticipantStatus_RAMPING     ParticipantStatus = 4
)

var ParticipantStatus_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "ACTIVE",
	2: "INACTIVE",
	3: "INVALID",
	4: "RAMPING",
}

var ParticipantStatus_value = map[string]int32{
	"UNSPECIFIED": 0,
	"ACTIVE":      1,
	"INACTIVE":    2,
	"INVALID":     3,
	"RAMPING":     4,
}

func (x ParticipantStatus) String() string {
	return proto.EnumName(ParticipantStatus_name, int32(x))
}

func (ParticipantStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d2bc555767052d80, []int{0}
}

type Participant struct {
	Index             string            `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Address           string            `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Reputation        float32           `protobuf:"fixed32,3,opt,name=reputation,proto3" json:"reputation,omitempty"`
	Weight            int32             `protobuf:"varint,4,opt,name=weight,proto3" json:"weight,omitempty"`
	JoinTime          int64             `protobuf:"varint,5,opt,name=join_time,json=joinTime,proto3" json:"join_time,omitempty"`
	JoinHeight        int64             `protobuf:"varint,6,opt,name=join_height,json=joinHeight,proto3" json:"join_height,omitempty"`
	LastInferenceTime int64             `protobuf:"varint,7,opt,name=last_inference_time,json=lastInferenceTime,proto3" json:"last_inference_time,omitempty"`
	InferenceUrl      string            `protobuf:"bytes,8,opt,name=inference_url,json=inferenceUrl,proto3" json:"inference_url,omitempty"`
	Models            []string          `protobuf:"bytes,9,rep,name=models,proto3" json:"models,omitempty"`
	Status            ParticipantStatus `protobuf:"varint,10,opt,name=status,proto3,enum=inference.inference.ParticipantStatus" json:"status,omitempty"`
	// TODO: must be removed! maps are not deterministic
	PromptTokenCount      map[string]uint64 `protobuf:"bytes,11,rep,name=prompt_token_count,json=promptTokenCount,proto3" json:"prompt_token_count,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	CompletionTokenCount  map[string]uint64 `protobuf:"bytes,12,rep,name=completion_token_count,json=completionTokenCount,proto3" json:"completion_token_count,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	InferenceCount        uint64            `protobuf:"varint,13,opt,name=inference_count,json=inferenceCount,proto3" json:"inference_count,omitempty"`
	ValidatedInferences   uint64            `protobuf:"varint,14,opt,name=validated_inferences,json=validatedInferences,proto3" json:"validated_inferences,omitempty"`
	InvalidatedInferences uint64            `protobuf:"varint,15,opt,name=invalidated_inferences,json=invalidatedInferences,proto3" json:"invalidated_inferences,omitempty"`
	// I don't see how a negative balance makes sense
	CoinBalance                  int64  `protobuf:"varint,16,opt,name=coin_balance,json=coinBalance,proto3" json:"coin_balance,omitempty"`
	ValidatorKey                 string `protobuf:"bytes,17,opt,name=validator_key,json=validatorKey,proto3" json:"validator_key,omitempty"`
	RefundBalance                int64  `protobuf:"varint,18,opt,name=refund_balance,json=refundBalance,proto3" json:"refund_balance,omitempty"`
	ConsecutiveInvalidInferences int64  `protobuf:"varint,19,opt,name=consecutive_invalid_inferences,json=consecutiveInvalidInferences,proto3" json:"consecutive_invalid_inferences,omitempty"`
}

func (m *Participant) Reset()         { *m = Participant{} }
func (m *Participant) String() string { return proto.CompactTextString(m) }
func (*Participant) ProtoMessage()    {}
func (*Participant) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2bc555767052d80, []int{0}
}
func (m *Participant) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Participant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Participant.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Participant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Participant.Merge(m, src)
}
func (m *Participant) XXX_Size() int {
	return m.Size()
}
func (m *Participant) XXX_DiscardUnknown() {
	xxx_messageInfo_Participant.DiscardUnknown(m)
}

var xxx_messageInfo_Participant proto.InternalMessageInfo

func (m *Participant) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *Participant) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Participant) GetReputation() float32 {
	if m != nil {
		return m.Reputation
	}
	return 0
}

func (m *Participant) GetWeight() int32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *Participant) GetJoinTime() int64 {
	if m != nil {
		return m.JoinTime
	}
	return 0
}

func (m *Participant) GetJoinHeight() int64 {
	if m != nil {
		return m.JoinHeight
	}
	return 0
}

func (m *Participant) GetLastInferenceTime() int64 {
	if m != nil {
		return m.LastInferenceTime
	}
	return 0
}

func (m *Participant) GetInferenceUrl() string {
	if m != nil {
		return m.InferenceUrl
	}
	return ""
}

func (m *Participant) GetModels() []string {
	if m != nil {
		return m.Models
	}
	return nil
}

func (m *Participant) GetStatus() ParticipantStatus {
	if m != nil {
		return m.Status
	}
	return ParticipantStatus_UNSPECIFIED
}

func (m *Participant) GetPromptTokenCount() map[string]uint64 {
	if m != nil {
		return m.PromptTokenCount
	}
	return nil
}

func (m *Participant) GetCompletionTokenCount() map[string]uint64 {
	if m != nil {
		return m.CompletionTokenCount
	}
	return nil
}

func (m *Participant) GetInferenceCount() uint64 {
	if m != nil {
		return m.InferenceCount
	}
	return 0
}

func (m *Participant) GetValidatedInferences() uint64 {
	if m != nil {
		return m.ValidatedInferences
	}
	return 0
}

func (m *Participant) GetInvalidatedInferences() uint64 {
	if m != nil {
		return m.InvalidatedInferences
	}
	return 0
}

func (m *Participant) GetCoinBalance() int64 {
	if m != nil {
		return m.CoinBalance
	}
	return 0
}

func (m *Participant) GetValidatorKey() string {
	if m != nil {
		return m.ValidatorKey
	}
	return ""
}

func (m *Participant) GetRefundBalance() int64 {
	if m != nil {
		return m.RefundBalance
	}
	return 0
}

func (m *Participant) GetConsecutiveInvalidInferences() int64 {
	if m != nil {
		return m.ConsecutiveInvalidInferences
	}
	return 0
}

func init() {
	proto.RegisterEnum("inference.inference.ParticipantStatus", ParticipantStatus_name, ParticipantStatus_value)
	proto.RegisterType((*Participant)(nil), "inference.inference.Participant")
	proto.RegisterMapType((map[string]uint64)(nil), "inference.inference.Participant.CompletionTokenCountEntry")
	proto.RegisterMapType((map[string]uint64)(nil), "inference.inference.Participant.PromptTokenCountEntry")
}

func init() {
	proto.RegisterFile("inference/inference/participant.proto", fileDescriptor_d2bc555767052d80)
}

var fileDescriptor_d2bc555767052d80 = []byte{
	// 648 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x6e, 0xd3, 0x4e,
	0x10, 0x8f, 0x93, 0x34, 0x4d, 0xc6, 0x69, 0xea, 0x6e, 0xda, 0xca, 0xff, 0xfe, 0x91, 0x31, 0xa0,
	0x82, 0xc5, 0xc1, 0x15, 0x45, 0x45, 0xa8, 0x07, 0xa4, 0x36, 0x0d, 0xc5, 0x02, 0x42, 0xe4, 0x7e,
	0x08, 0x71, 0x89, 0x5c, 0x7b, 0xdb, 0x2e, 0x75, 0x76, 0x2d, 0x7b, 0x5d, 0x9a, 0x97, 0x40, 0x3c,
	0x16, 0xc7, 0x1e, 0x39, 0xa2, 0xf6, 0x45, 0xd0, 0xae, 0x53, 0xc7, 0x94, 0xa0, 0x8a, 0xdb, 0xce,
	0xef, 0x63, 0x66, 0xbc, 0x33, 0x6b, 0x58, 0x25, 0xf4, 0x18, 0xc7, 0x98, 0xfa, 0x78, 0x6d, 0x72,
	0x8a, 0xbc, 0x98, 0x13, 0x9f, 0x44, 0x1e, 0xe5, 0x76, 0x14, 0x33, 0xce, 0x50, 0x3b, 0x27, 0xed,
	0xfc, 0xf4, 0xf0, 0x6b, 0x1d, 0xd4, 0xfe, 0x44, 0x8a, 0x16, 0x61, 0x86, 0xd0, 0x00, 0x5f, 0xe8,
	0x8a, 0xa9, 0x58, 0x0d, 0x37, 0x0b, 0x90, 0x0e, 0xb3, 0x5e, 0x10, 0xc4, 0x38, 0x49, 0xf4, 0xb2,
	0xc4, 0x6f, 0x42, 0x64, 0x00, 0xc4, 0x38, 0x4a, 0xb9, 0xc7, 0x09, 0xa3, 0x7a, 0xc5, 0x54, 0xac,
	0xb2, 0x5b, 0x40, 0xd0, 0x32, 0xd4, 0xbe, 0x60, 0x72, 0x72, 0xca, 0xf5, 0xaa, 0xa9, 0x58, 0x33,
	0xee, 0x38, 0x42, 0xff, 0x43, 0xe3, 0x33, 0x23, 0x74, 0xc0, 0xc9, 0x10, 0xeb, 0x33, 0xa6, 0x62,
	0x55, 0xdc, 0xba, 0x00, 0xf6, 0xc9, 0x10, 0xa3, 0xfb, 0xa0, 0x4a, 0xf2, 0x34, 0x73, 0xd6, 0x24,
	0x0d, 0x02, 0x7a, 0x93, 0xb9, 0x6d, 0x68, 0x87, 0x5e, 0xc2, 0x07, 0xf9, 0x77, 0x64, 0x79, 0x66,
	0xa5, 0x70, 0x41, 0x50, 0xce, 0x0d, 0x23, 0x13, 0x3e, 0x82, 0xb9, 0x89, 0x34, 0x8d, 0x43, 0xbd,
	0x2e, 0xbf, 0xa2, 0x99, 0x83, 0x07, 0x71, 0x28, 0x5a, 0x1d, 0xb2, 0x00, 0x87, 0x89, 0xde, 0x30,
	0x2b, 0x56, 0xc3, 0x1d, 0x47, 0xe8, 0x15, 0xd4, 0x12, 0xee, 0xf1, 0x34, 0xd1, 0xc1, 0x54, 0xac,
	0xd6, 0xfa, 0x63, 0x7b, 0xca, 0x45, 0xda, 0x85, 0x4b, 0xdc, 0x93, 0x6a, 0x77, 0xec, 0x42, 0x01,
	0xa0, 0x28, 0x66, 0xc3, 0x88, 0x0f, 0x38, 0x3b, 0xc3, 0x74, 0xe0, 0xb3, 0x94, 0x72, 0x5d, 0x35,
	0x2b, 0x96, 0xba, 0xfe, 0xe2, 0xae, 0x5c, 0x76, 0x5f, 0x5a, 0xf7, 0x85, 0xb3, 0x23, 0x8c, 0x5d,
	0xca, 0xe3, 0x91, 0xab, 0x45, 0xb7, 0x60, 0x14, 0xc1, 0xb2, 0xcf, 0x86, 0x51, 0x88, 0xc5, 0xb5,
	0xff, 0x56, 0xa9, 0x29, 0x2b, 0x6d, 0xde, 0x59, 0xa9, 0x93, 0xdb, 0x6f, 0x57, 0x5b, 0xf4, 0xa7,
	0x50, 0xe8, 0x09, 0xcc, 0x4f, 0x2e, 0x35, 0x2b, 0x35, 0x67, 0x2a, 0x56, 0xd5, 0x6d, 0xe5, 0x70,
	0x26, 0x7c, 0x06, 0x8b, 0xe7, 0x5e, 0x48, 0x02, 0x8f, 0xe3, 0x60, 0x32, 0xb2, 0x44, 0x6f, 0x49,
	0x75, 0x3b, 0xe7, 0xf2, 0x99, 0x25, 0x68, 0x03, 0x96, 0x09, 0x9d, 0x6a, 0x9a, 0x97, 0xa6, 0xa5,
	0x02, 0x5b, 0xb0, 0x3d, 0x80, 0xa6, 0x2f, 0x16, 0xe7, 0xc8, 0x0b, 0x3d, 0xea, 0x63, 0x5d, 0x93,
	0x0b, 0xa1, 0x0a, 0x6c, 0x3b, 0x83, 0xc4, 0x2a, 0x8c, 0x9d, 0x2c, 0x1e, 0x9c, 0xe1, 0x91, 0xbe,
	0x90, 0xad, 0x42, 0x0e, 0xbe, 0xc5, 0x23, 0xb4, 0x0a, 0xad, 0x18, 0x1f, 0xa7, 0x34, 0xc8, 0x33,
	0x21, 0x99, 0x69, 0x2e, 0x43, 0x6f, 0x72, 0xed, 0x80, 0xe1, 0x33, 0x9a, 0x60, 0x3f, 0xe5, 0xe4,
	0x1c, 0x0f, 0xc6, 0x3d, 0x15, 0xbb, 0x6d, 0x4b, 0xdb, 0xbd, 0x82, 0xca, 0xc9, 0x44, 0x93, 0xa6,
	0x57, 0x3a, 0xb0, 0x34, 0x75, 0xc8, 0x48, 0x83, 0x8a, 0x68, 0x30, 0x7b, 0x89, 0xe2, 0x28, 0x5e,
	0xe7, 0xb9, 0x17, 0xa6, 0x58, 0xbe, 0xc2, 0xaa, 0x9b, 0x05, 0x9b, 0xe5, 0x97, 0xca, 0xca, 0x2e,
	0xfc, 0xf7, 0xd7, 0xf9, 0xfd, 0x4b, 0xa2, 0xa7, 0x1f, 0x61, 0xe1, 0x8f, 0x55, 0x46, 0xf3, 0xa0,
	0x1e, 0xf4, 0xf6, 0xfa, 0xdd, 0x8e, 0xf3, 0xda, 0xe9, 0xee, 0x68, 0x25, 0x04, 0x50, 0xdb, 0xea,
	0xec, 0x3b, 0x87, 0x5d, 0x4d, 0x41, 0x4d, 0xa8, 0x3b, 0xbd, 0x71, 0x54, 0x46, 0x2a, 0xcc, 0x3a,
	0xbd, 0xc3, 0xad, 0x77, 0xce, 0x8e, 0x56, 0x11, 0x81, 0xbb, 0xf5, 0xbe, 0xef, 0xf4, 0x76, 0xb5,
	0xea, 0xf6, 0x87, 0xef, 0x57, 0x86, 0x72, 0x79, 0x65, 0x28, 0x3f, 0xaf, 0x0c, 0xe5, 0xdb, 0xb5,
	0x51, 0xba, 0xbc, 0x36, 0x4a, 0x3f, 0xae, 0x8d, 0xd2, 0xa7, 0x8d, 0x13, 0xc2, 0x4f, 0xd3, 0x23,
	0xdb, 0x67, 0xc3, 0xb5, 0x28, 0x66, 0x41, 0xea, 0xf3, 0xc4, 0x27, 0xb7, 0x7e, 0x68, 0x17, 0x85,
	0x33, 0x1f, 0x45, 0x38, 0x39, 0xaa, 0xc9, 0xff, 0xda, 0xf3, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x0f, 0x65, 0xc7, 0xe0, 0x00, 0x05, 0x00, 0x00,
}

func (m *Participant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Participant) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Participant) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConsecutiveInvalidInferences != 0 {
		i = encodeVarintParticipant(dAtA, i, uint64(m.ConsecutiveInvalidInferences))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.RefundBalance != 0 {
		i = encodeVarintParticipant(dAtA, i, uint64(m.RefundBalance))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if len(m.ValidatorKey) > 0 {
		i -= len(m.ValidatorKey)
		copy(dAtA[i:], m.ValidatorKey)
		i = encodeVarintParticipant(dAtA, i, uint64(len(m.ValidatorKey)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.CoinBalance != 0 {
		i = encodeVarintParticipant(dAtA, i, uint64(m.CoinBalance))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.InvalidatedInferences != 0 {
		i = encodeVarintParticipant(dAtA, i, uint64(m.InvalidatedInferences))
		i--
		dAtA[i] = 0x78
	}
	if m.ValidatedInferences != 0 {
		i = encodeVarintParticipant(dAtA, i, uint64(m.ValidatedInferences))
		i--
		dAtA[i] = 0x70
	}
	if m.InferenceCount != 0 {
		i = encodeVarintParticipant(dAtA, i, uint64(m.InferenceCount))
		i--
		dAtA[i] = 0x68
	}
	if len(m.CompletionTokenCount) > 0 {
		for k := range m.CompletionTokenCount {
			v := m.CompletionTokenCount[k]
			baseI := i
			i = encodeVarintParticipant(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintParticipant(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintParticipant(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.PromptTokenCount) > 0 {
		for k := range m.PromptTokenCount {
			v := m.PromptTokenCount[k]
			baseI := i
			i = encodeVarintParticipant(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintParticipant(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintParticipant(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.Status != 0 {
		i = encodeVarintParticipant(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Models) > 0 {
		for iNdEx := len(m.Models) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Models[iNdEx])
			copy(dAtA[i:], m.Models[iNdEx])
			i = encodeVarintParticipant(dAtA, i, uint64(len(m.Models[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.InferenceUrl) > 0 {
		i -= len(m.InferenceUrl)
		copy(dAtA[i:], m.InferenceUrl)
		i = encodeVarintParticipant(dAtA, i, uint64(len(m.InferenceUrl)))
		i--
		dAtA[i] = 0x42
	}
	if m.LastInferenceTime != 0 {
		i = encodeVarintParticipant(dAtA, i, uint64(m.LastInferenceTime))
		i--
		dAtA[i] = 0x38
	}
	if m.JoinHeight != 0 {
		i = encodeVarintParticipant(dAtA, i, uint64(m.JoinHeight))
		i--
		dAtA[i] = 0x30
	}
	if m.JoinTime != 0 {
		i = encodeVarintParticipant(dAtA, i, uint64(m.JoinTime))
		i--
		dAtA[i] = 0x28
	}
	if m.Weight != 0 {
		i = encodeVarintParticipant(dAtA, i, uint64(m.Weight))
		i--
		dAtA[i] = 0x20
	}
	if m.Reputation != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Reputation))))
		i--
		dAtA[i] = 0x1d
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintParticipant(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintParticipant(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintParticipant(dAtA []byte, offset int, v uint64) int {
	offset -= sovParticipant(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Participant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovParticipant(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovParticipant(uint64(l))
	}
	if m.Reputation != 0 {
		n += 5
	}
	if m.Weight != 0 {
		n += 1 + sovParticipant(uint64(m.Weight))
	}
	if m.JoinTime != 0 {
		n += 1 + sovParticipant(uint64(m.JoinTime))
	}
	if m.JoinHeight != 0 {
		n += 1 + sovParticipant(uint64(m.JoinHeight))
	}
	if m.LastInferenceTime != 0 {
		n += 1 + sovParticipant(uint64(m.LastInferenceTime))
	}
	l = len(m.InferenceUrl)
	if l > 0 {
		n += 1 + l + sovParticipant(uint64(l))
	}
	if len(m.Models) > 0 {
		for _, s := range m.Models {
			l = len(s)
			n += 1 + l + sovParticipant(uint64(l))
		}
	}
	if m.Status != 0 {
		n += 1 + sovParticipant(uint64(m.Status))
	}
	if len(m.PromptTokenCount) > 0 {
		for k, v := range m.PromptTokenCount {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovParticipant(uint64(len(k))) + 1 + sovParticipant(uint64(v))
			n += mapEntrySize + 1 + sovParticipant(uint64(mapEntrySize))
		}
	}
	if len(m.CompletionTokenCount) > 0 {
		for k, v := range m.CompletionTokenCount {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovParticipant(uint64(len(k))) + 1 + sovParticipant(uint64(v))
			n += mapEntrySize + 1 + sovParticipant(uint64(mapEntrySize))
		}
	}
	if m.InferenceCount != 0 {
		n += 1 + sovParticipant(uint64(m.InferenceCount))
	}
	if m.ValidatedInferences != 0 {
		n += 1 + sovParticipant(uint64(m.ValidatedInferences))
	}
	if m.InvalidatedInferences != 0 {
		n += 1 + sovParticipant(uint64(m.InvalidatedInferences))
	}
	if m.CoinBalance != 0 {
		n += 2 + sovParticipant(uint64(m.CoinBalance))
	}
	l = len(m.ValidatorKey)
	if l > 0 {
		n += 2 + l + sovParticipant(uint64(l))
	}
	if m.RefundBalance != 0 {
		n += 2 + sovParticipant(uint64(m.RefundBalance))
	}
	if m.ConsecutiveInvalidInferences != 0 {
		n += 2 + sovParticipant(uint64(m.ConsecutiveInvalidInferences))
	}
	return n
}

func sovParticipant(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParticipant(x uint64) (n int) {
	return sovParticipant(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Participant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParticipant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Participant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Participant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParticipant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParticipant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParticipant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParticipant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reputation", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Reputation = float32(math.Float32frombits(v))
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinTime", wireType)
			}
			m.JoinTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JoinTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinHeight", wireType)
			}
			m.JoinHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JoinHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastInferenceTime", wireType)
			}
			m.LastInferenceTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastInferenceTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InferenceUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParticipant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParticipant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InferenceUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Models", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParticipant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParticipant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Models = append(m.Models, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ParticipantStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromptTokenCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParticipant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParticipant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PromptTokenCount == nil {
				m.PromptTokenCount = make(map[string]uint64)
			}
			var mapkey string
			var mapvalue uint64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowParticipant
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowParticipant
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthParticipant
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthParticipant
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowParticipant
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipParticipant(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthParticipant
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PromptTokenCount[mapkey] = mapvalue
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletionTokenCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParticipant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParticipant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CompletionTokenCount == nil {
				m.CompletionTokenCount = make(map[string]uint64)
			}
			var mapkey string
			var mapvalue uint64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowParticipant
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowParticipant
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthParticipant
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthParticipant
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowParticipant
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipParticipant(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthParticipant
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.CompletionTokenCount[mapkey] = mapvalue
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InferenceCount", wireType)
			}
			m.InferenceCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InferenceCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatedInferences", wireType)
			}
			m.ValidatedInferences = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatedInferences |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidatedInferences", wireType)
			}
			m.InvalidatedInferences = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvalidatedInferences |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinBalance", wireType)
			}
			m.CoinBalance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinBalance |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParticipant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParticipant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundBalance", wireType)
			}
			m.RefundBalance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefundBalance |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsecutiveInvalidInferences", wireType)
			}
			m.ConsecutiveInvalidInferences = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConsecutiveInvalidInferences |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParticipant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParticipant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParticipant(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParticipant
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParticipant
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParticipant
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParticipant
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParticipant
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParticipant
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParticipant        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParticipant          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParticipant = fmt.Errorf("proto: unexpected end of group")
)

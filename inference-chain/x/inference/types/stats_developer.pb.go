// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: inference/inference/v1/stats_developer.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DeveloperStatsByEpoch struct {
	EpochId      uint64   `protobuf:"varint,1,opt,name=epoch_id,json=epochId,proto3" json:"epoch_id,omitempty"`
	InferenceIds []string `protobuf:"bytes,2,rep,name=inference_ids,json=inferenceIds,proto3" json:"inference_ids,omitempty"`
}

func (m *DeveloperStatsByEpoch) Reset()         { *m = DeveloperStatsByEpoch{} }
func (m *DeveloperStatsByEpoch) String() string { return proto.CompactTextString(m) }
func (*DeveloperStatsByEpoch) ProtoMessage()    {}
func (*DeveloperStatsByEpoch) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7a070ac9f2b5dfb, []int{0}
}
func (m *DeveloperStatsByEpoch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeveloperStatsByEpoch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeveloperStatsByEpoch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeveloperStatsByEpoch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeveloperStatsByEpoch.Merge(m, src)
}
func (m *DeveloperStatsByEpoch) XXX_Size() int {
	return m.Size()
}
func (m *DeveloperStatsByEpoch) XXX_DiscardUnknown() {
	xxx_messageInfo_DeveloperStatsByEpoch.DiscardUnknown(m)
}

var xxx_messageInfo_DeveloperStatsByEpoch proto.InternalMessageInfo

func (m *DeveloperStatsByEpoch) GetEpochId() uint64 {
	if m != nil {
		return m.EpochId
	}
	return 0
}

func (m *DeveloperStatsByEpoch) GetInferenceIds() []string {
	if m != nil {
		return m.InferenceIds
	}
	return nil
}

type InferenceStats struct {
	InferenceId       string          `protobuf:"bytes,1,opt,name=inference_id,json=inferenceId,proto3" json:"inference_id,omitempty"`
	EpochId           uint64          `protobuf:"varint,2,opt,name=epoch_id,json=epochId,proto3" json:"epoch_id,omitempty"`
	Status            InferenceStatus `protobuf:"varint,3,opt,name=status,proto3,enum=inference.inference.InferenceStatus" json:"status,omitempty"`
	TotalTokenCount   uint64          `protobuf:"varint,4,opt,name=total_token_count,json=totalTokenCount,proto3" json:"total_token_count,omitempty"`
	Model             string          `protobuf:"bytes,5,opt,name=model,proto3" json:"model,omitempty"`
	ActualCostInCoins int64           `protobuf:"varint,6,opt,name=actual_cost_in_coins,json=actualCostInCoins,proto3" json:"actual_cost_in_coins,omitempty"`
}

func (m *InferenceStats) Reset()         { *m = InferenceStats{} }
func (m *InferenceStats) String() string { return proto.CompactTextString(m) }
func (*InferenceStats) ProtoMessage()    {}
func (*InferenceStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7a070ac9f2b5dfb, []int{1}
}
func (m *InferenceStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InferenceStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InferenceStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InferenceStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InferenceStats.Merge(m, src)
}
func (m *InferenceStats) XXX_Size() int {
	return m.Size()
}
func (m *InferenceStats) XXX_DiscardUnknown() {
	xxx_messageInfo_InferenceStats.DiscardUnknown(m)
}

var xxx_messageInfo_InferenceStats proto.InternalMessageInfo

func (m *InferenceStats) GetInferenceId() string {
	if m != nil {
		return m.InferenceId
	}
	return ""
}

func (m *InferenceStats) GetEpochId() uint64 {
	if m != nil {
		return m.EpochId
	}
	return 0
}

func (m *InferenceStats) GetStatus() InferenceStatus {
	if m != nil {
		return m.Status
	}
	return InferenceStatus_STARTED
}

func (m *InferenceStats) GetTotalTokenCount() uint64 {
	if m != nil {
		return m.TotalTokenCount
	}
	return 0
}

func (m *InferenceStats) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *InferenceStats) GetActualCostInCoins() int64 {
	if m != nil {
		return m.ActualCostInCoins
	}
	return 0
}

type DeveloperStatsByTime struct {
	EpochId   uint64          `protobuf:"varint,1,opt,name=epoch_id,json=epochId,proto3" json:"epoch_id,omitempty"`
	Timestamp int64           `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Inference *InferenceStats `protobuf:"bytes,3,opt,name=inference,proto3" json:"inference,omitempty"`
}

func (m *DeveloperStatsByTime) Reset()         { *m = DeveloperStatsByTime{} }
func (m *DeveloperStatsByTime) String() string { return proto.CompactTextString(m) }
func (*DeveloperStatsByTime) ProtoMessage()    {}
func (*DeveloperStatsByTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7a070ac9f2b5dfb, []int{2}
}
func (m *DeveloperStatsByTime) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeveloperStatsByTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeveloperStatsByTime.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeveloperStatsByTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeveloperStatsByTime.Merge(m, src)
}
func (m *DeveloperStatsByTime) XXX_Size() int {
	return m.Size()
}
func (m *DeveloperStatsByTime) XXX_DiscardUnknown() {
	xxx_messageInfo_DeveloperStatsByTime.DiscardUnknown(m)
}

var xxx_messageInfo_DeveloperStatsByTime proto.InternalMessageInfo

func (m *DeveloperStatsByTime) GetEpochId() uint64 {
	if m != nil {
		return m.EpochId
	}
	return 0
}

func (m *DeveloperStatsByTime) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *DeveloperStatsByTime) GetInference() *InferenceStats {
	if m != nil {
		return m.Inference
	}
	return nil
}

func init() {
	proto.RegisterType((*DeveloperStatsByEpoch)(nil), "inference.inference.DeveloperStatsByEpoch")
	proto.RegisterType((*InferenceStats)(nil), "inference.inference.InferenceStats")
	proto.RegisterType((*DeveloperStatsByTime)(nil), "inference.inference.DeveloperStatsByTime")
}

func init() {
	proto.RegisterFile("inference/inference/v1/stats_developer.proto", fileDescriptor_a7a070ac9f2b5dfb)
}

var fileDescriptor_a7a070ac9f2b5dfb = []byte{
	// 393 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0x4f, 0x6f, 0xda, 0x30,
	0x1c, 0xc5, 0x04, 0xd8, 0x62, 0x18, 0x13, 0x1e, 0x93, 0xb2, 0x69, 0x8a, 0x32, 0x98, 0xa6, 0x68,
	0x9a, 0x12, 0x8d, 0x69, 0xb7, 0x5d, 0x0a, 0xed, 0x21, 0xa7, 0x4a, 0x29, 0x52, 0xa5, 0x5e, 0xa2,
	0xe0, 0xb8, 0xc5, 0x6a, 0x12, 0x47, 0xb1, 0x83, 0xca, 0xb7, 0xa8, 0xfa, 0xa9, 0x7a, 0xe4, 0xd8,
	0x63, 0x05, 0x1f, 0xa4, 0x55, 0x4c, 0x49, 0x00, 0xf5, 0xcf, 0xed, 0xf9, 0xfd, 0xfc, 0xde, 0xf3,
	0xef, 0xc9, 0xf0, 0x37, 0x8d, 0xcf, 0x49, 0x4a, 0x62, 0x4c, 0xec, 0x12, 0xcd, 0xfe, 0xd8, 0x5c,
	0xf8, 0x82, 0x7b, 0x01, 0x99, 0x91, 0x90, 0x25, 0x24, 0xb5, 0x92, 0x94, 0x09, 0x86, 0x3e, 0x15,
	0x77, 0xac, 0x02, 0x7d, 0xfd, 0xf9, 0x82, 0x45, 0x79, 0x57, 0x8a, 0x7b, 0xa7, 0xf0, 0xf3, 0xe1,
	0xc6, 0xef, 0x24, 0xb7, 0x1f, 0xce, 0x8f, 0x12, 0x86, 0xa7, 0xe8, 0x0b, 0x7c, 0x4f, 0x72, 0xe0,
	0xd1, 0x40, 0x03, 0x06, 0x30, 0x6b, 0xee, 0x3b, 0x79, 0x76, 0x02, 0xd4, 0x87, 0x1f, 0x0a, 0x1b,
	0x8f, 0x06, 0x5c, 0xab, 0x1a, 0x8a, 0xa9, 0xba, 0xad, 0x82, 0x74, 0x02, 0xde, 0x7b, 0x00, 0xb0,
	0xed, 0x6c, 0x08, 0xe9, 0x8c, 0xbe, 0xc3, 0xd6, 0xb6, 0x4e, 0xda, 0xaa, 0x6e, 0x73, 0x4b, 0xb6,
	0x93, 0x5a, 0xdd, 0x4d, 0xfd, 0x0f, 0x1b, 0xf9, 0xfe, 0x19, 0xd7, 0x14, 0x03, 0x98, 0xed, 0xc1,
	0x0f, 0xeb, 0x99, 0xbd, 0xad, 0x9d, 0xc8, 0x8c, 0xbb, 0x4f, 0x1a, 0xf4, 0x0b, 0x76, 0x04, 0x13,
	0x7e, 0xe8, 0x09, 0x76, 0x49, 0x62, 0x0f, 0xb3, 0x2c, 0x16, 0x5a, 0x4d, 0x26, 0x7c, 0x94, 0x83,
	0x71, 0xce, 0x8f, 0x72, 0x1a, 0x75, 0x61, 0x3d, 0x62, 0x01, 0x09, 0xb5, 0xba, 0x7c, 0xe0, 0xfa,
	0x80, 0x6c, 0xd8, 0xf5, 0xb1, 0xc8, 0xfc, 0xd0, 0xc3, 0x8c, 0x0b, 0x8f, 0xe6, 0x26, 0x34, 0xe6,
	0x5a, 0xc3, 0x00, 0xa6, 0xe2, 0x76, 0xd6, 0xb3, 0x11, 0xe3, 0xc2, 0x89, 0x47, 0xf9, 0xa0, 0x77,
	0x03, 0x60, 0x77, 0xbf, 0xdb, 0x31, 0x8d, 0xc8, 0x6b, 0xd5, 0x7e, 0x83, 0xaa, 0xa0, 0x11, 0xe1,
	0xc2, 0x8f, 0x12, 0x59, 0x80, 0xe2, 0x96, 0x04, 0x3a, 0x80, 0x6a, 0xb1, 0xa9, 0x6c, 0xa1, 0x39,
	0xe8, 0xbf, 0xdd, 0x02, 0x77, 0x4b, 0xd5, 0xf0, 0xf8, 0x76, 0xa9, 0x83, 0xc5, 0x52, 0x07, 0xf7,
	0x4b, 0x1d, 0x5c, 0xaf, 0xf4, 0xca, 0x62, 0xa5, 0x57, 0xee, 0x56, 0x7a, 0xe5, 0xec, 0xdf, 0x05,
	0x15, 0xd3, 0x6c, 0x62, 0x61, 0x16, 0xd9, 0x49, 0xca, 0x82, 0x0c, 0x0b, 0x8e, 0xe9, 0xde, 0x0f,
	0xba, 0xda, 0xc2, 0x62, 0x9e, 0x10, 0x3e, 0x69, 0xc8, 0x7f, 0xf4, 0xf7, 0x31, 0x00, 0x00, 0xff,
	0xff, 0xd7, 0x3a, 0x9a, 0x5f, 0xb4, 0x02, 0x00, 0x00,
}

func (m *DeveloperStatsByEpoch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeveloperStatsByEpoch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeveloperStatsByEpoch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InferenceIds) > 0 {
		for iNdEx := len(m.InferenceIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.InferenceIds[iNdEx])
			copy(dAtA[i:], m.InferenceIds[iNdEx])
			i = encodeVarintStatsDeveloper(dAtA, i, uint64(len(m.InferenceIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.EpochId != 0 {
		i = encodeVarintStatsDeveloper(dAtA, i, uint64(m.EpochId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InferenceStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InferenceStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InferenceStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActualCostInCoins != 0 {
		i = encodeVarintStatsDeveloper(dAtA, i, uint64(m.ActualCostInCoins))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Model) > 0 {
		i -= len(m.Model)
		copy(dAtA[i:], m.Model)
		i = encodeVarintStatsDeveloper(dAtA, i, uint64(len(m.Model)))
		i--
		dAtA[i] = 0x2a
	}
	if m.TotalTokenCount != 0 {
		i = encodeVarintStatsDeveloper(dAtA, i, uint64(m.TotalTokenCount))
		i--
		dAtA[i] = 0x20
	}
	if m.Status != 0 {
		i = encodeVarintStatsDeveloper(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.EpochId != 0 {
		i = encodeVarintStatsDeveloper(dAtA, i, uint64(m.EpochId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.InferenceId) > 0 {
		i -= len(m.InferenceId)
		copy(dAtA[i:], m.InferenceId)
		i = encodeVarintStatsDeveloper(dAtA, i, uint64(len(m.InferenceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeveloperStatsByTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeveloperStatsByTime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeveloperStatsByTime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Inference != nil {
		{
			size, err := m.Inference.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStatsDeveloper(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Timestamp != 0 {
		i = encodeVarintStatsDeveloper(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if m.EpochId != 0 {
		i = encodeVarintStatsDeveloper(dAtA, i, uint64(m.EpochId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintStatsDeveloper(dAtA []byte, offset int, v uint64) int {
	offset -= sovStatsDeveloper(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DeveloperStatsByEpoch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochId != 0 {
		n += 1 + sovStatsDeveloper(uint64(m.EpochId))
	}
	if len(m.InferenceIds) > 0 {
		for _, s := range m.InferenceIds {
			l = len(s)
			n += 1 + l + sovStatsDeveloper(uint64(l))
		}
	}
	return n
}

func (m *InferenceStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InferenceId)
	if l > 0 {
		n += 1 + l + sovStatsDeveloper(uint64(l))
	}
	if m.EpochId != 0 {
		n += 1 + sovStatsDeveloper(uint64(m.EpochId))
	}
	if m.Status != 0 {
		n += 1 + sovStatsDeveloper(uint64(m.Status))
	}
	if m.TotalTokenCount != 0 {
		n += 1 + sovStatsDeveloper(uint64(m.TotalTokenCount))
	}
	l = len(m.Model)
	if l > 0 {
		n += 1 + l + sovStatsDeveloper(uint64(l))
	}
	if m.ActualCostInCoins != 0 {
		n += 1 + sovStatsDeveloper(uint64(m.ActualCostInCoins))
	}
	return n
}

func (m *DeveloperStatsByTime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochId != 0 {
		n += 1 + sovStatsDeveloper(uint64(m.EpochId))
	}
	if m.Timestamp != 0 {
		n += 1 + sovStatsDeveloper(uint64(m.Timestamp))
	}
	if m.Inference != nil {
		l = m.Inference.Size()
		n += 1 + l + sovStatsDeveloper(uint64(l))
	}
	return n
}

func sovStatsDeveloper(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStatsDeveloper(x uint64) (n int) {
	return sovStatsDeveloper(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DeveloperStatsByEpoch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatsDeveloper
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeveloperStatsByEpoch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeveloperStatsByEpoch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochId", wireType)
			}
			m.EpochId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatsDeveloper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InferenceIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatsDeveloper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatsDeveloper
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStatsDeveloper
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InferenceIds = append(m.InferenceIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStatsDeveloper(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStatsDeveloper
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InferenceStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatsDeveloper
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InferenceStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InferenceStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InferenceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatsDeveloper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatsDeveloper
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStatsDeveloper
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InferenceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochId", wireType)
			}
			m.EpochId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatsDeveloper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatsDeveloper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= InferenceStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalTokenCount", wireType)
			}
			m.TotalTokenCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatsDeveloper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalTokenCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatsDeveloper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatsDeveloper
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStatsDeveloper
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Model = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualCostInCoins", wireType)
			}
			m.ActualCostInCoins = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatsDeveloper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActualCostInCoins |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStatsDeveloper(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStatsDeveloper
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeveloperStatsByTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatsDeveloper
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeveloperStatsByTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeveloperStatsByTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochId", wireType)
			}
			m.EpochId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatsDeveloper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatsDeveloper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inference", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatsDeveloper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatsDeveloper
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStatsDeveloper
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Inference == nil {
				m.Inference = &InferenceStats{}
			}
			if err := m.Inference.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStatsDeveloper(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStatsDeveloper
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStatsDeveloper(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStatsDeveloper
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStatsDeveloper
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStatsDeveloper
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStatsDeveloper
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStatsDeveloper
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStatsDeveloper
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStatsDeveloper        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStatsDeveloper          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStatsDeveloper = fmt.Errorf("proto: unexpected end of group")
)

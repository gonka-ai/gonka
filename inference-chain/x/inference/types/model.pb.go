// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: inference/inference/model.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Model struct {
	ProposedBy             string   `protobuf:"bytes,1,opt,name=proposed_by,json=proposedBy,proto3" json:"proposed_by,omitempty"`
	Id                     string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	UnitsOfComputePerToken uint64   `protobuf:"varint,3,opt,name=units_of_compute_per_token,json=unitsOfComputePerToken,proto3" json:"units_of_compute_per_token,omitempty"`
	ContextWindow          uint64   `protobuf:"varint,4,opt,name=context_window,json=contextWindow,proto3" json:"context_window,omitempty"`
	Quantization           string   `protobuf:"bytes,5,opt,name=quantization,proto3" json:"quantization,omitempty"`
	CoinsPerInputToken     uint64   `protobuf:"varint,6,opt,name=coins_per_input_token,json=coinsPerInputToken,proto3" json:"coins_per_input_token,omitempty"`
	CoinsPerOutputToken    uint64   `protobuf:"varint,7,opt,name=coins_per_output_token,json=coinsPerOutputToken,proto3" json:"coins_per_output_token,omitempty"`
	HfRepo                 string   `protobuf:"bytes,8,opt,name=hf_repo,json=hfRepo,proto3" json:"hf_repo,omitempty"`
	HfCommit               string   `protobuf:"bytes,9,opt,name=hf_commit,json=hfCommit,proto3" json:"hf_commit,omitempty"`
	ModelArgs              []string `protobuf:"bytes,10,rep,name=model_args,json=modelArgs,proto3" json:"model_args,omitempty"`
	VRam                   uint64   `protobuf:"varint,11,opt,name=v_ram,json=vRam,proto3" json:"v_ram,omitempty"`
	ThroughputPerNonce     uint64   `protobuf:"varint,12,opt,name=throughput_per_nonce,json=throughputPerNonce,proto3" json:"throughput_per_nonce,omitempty"`
	ValidationThreshold    *Decimal `protobuf:"bytes,13,opt,name=validation_threshold,json=validationThreshold,proto3" json:"validation_threshold,omitempty"`
}

func (m *Model) Reset()         { *m = Model{} }
func (m *Model) String() string { return proto.CompactTextString(m) }
func (*Model) ProtoMessage()    {}
func (*Model) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7b516097210bdb1, []int{0}
}
func (m *Model) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Model) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Model.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Model) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Model.Merge(m, src)
}
func (m *Model) XXX_Size() int {
	return m.Size()
}
func (m *Model) XXX_DiscardUnknown() {
	xxx_messageInfo_Model.DiscardUnknown(m)
}

var xxx_messageInfo_Model proto.InternalMessageInfo

func (m *Model) GetProposedBy() string {
	if m != nil {
		return m.ProposedBy
	}
	return ""
}

func (m *Model) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Model) GetUnitsOfComputePerToken() uint64 {
	if m != nil {
		return m.UnitsOfComputePerToken
	}
	return 0
}

func (m *Model) GetContextWindow() uint64 {
	if m != nil {
		return m.ContextWindow
	}
	return 0
}

func (m *Model) GetQuantization() string {
	if m != nil {
		return m.Quantization
	}
	return ""
}

func (m *Model) GetCoinsPerInputToken() uint64 {
	if m != nil {
		return m.CoinsPerInputToken
	}
	return 0
}

func (m *Model) GetCoinsPerOutputToken() uint64 {
	if m != nil {
		return m.CoinsPerOutputToken
	}
	return 0
}

func (m *Model) GetHfRepo() string {
	if m != nil {
		return m.HfRepo
	}
	return ""
}

func (m *Model) GetHfCommit() string {
	if m != nil {
		return m.HfCommit
	}
	return ""
}

func (m *Model) GetModelArgs() []string {
	if m != nil {
		return m.ModelArgs
	}
	return nil
}

func (m *Model) GetVRam() uint64 {
	if m != nil {
		return m.VRam
	}
	return 0
}

func (m *Model) GetThroughputPerNonce() uint64 {
	if m != nil {
		return m.ThroughputPerNonce
	}
	return 0
}

func (m *Model) GetValidationThreshold() *Decimal {
	if m != nil {
		return m.ValidationThreshold
	}
	return nil
}

func init() {
	proto.RegisterType((*Model)(nil), "inference.inference.Model")
}

func init() { proto.RegisterFile("inference/inference/model.proto", fileDescriptor_d7b516097210bdb1) }

var fileDescriptor_d7b516097210bdb1 = []byte{
	// 465 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xc1, 0x6f, 0xd3, 0x3e,
	0x14, 0xc7, 0x9b, 0xae, 0xed, 0x16, 0x77, 0xdb, 0xc1, 0xdd, 0x6f, 0x3f, 0x6b, 0x40, 0x16, 0x4d,
	0x42, 0xea, 0x29, 0x03, 0x26, 0x2e, 0xdc, 0x18, 0x5c, 0x38, 0x40, 0xab, 0x68, 0x12, 0x12, 0x17,
	0x2b, 0x4d, 0x9c, 0xc6, 0xa2, 0xf1, 0x33, 0xb6, 0xd3, 0xad, 0xfc, 0x15, 0x1c, 0xf8, 0xa3, 0x38,
	0xee, 0xc8, 0x11, 0xb5, 0xff, 0x08, 0xca, 0xcb, 0xba, 0x00, 0xda, 0xed, 0xe9, 0xfb, 0xf5, 0xc7,
	0xef, 0xeb, 0xe7, 0x47, 0x4e, 0xa5, 0xca, 0x85, 0x11, 0x2a, 0x15, 0xe7, 0x6d, 0x55, 0x42, 0x26,
	0x16, 0x91, 0x36, 0xe0, 0x80, 0x8e, 0xee, 0xe5, 0xe8, 0xbe, 0x3a, 0x09, 0x1f, 0xa2, 0x74, 0x62,
	0x92, 0xd2, 0x36, 0xd8, 0xd9, 0xf7, 0x1e, 0xe9, 0xbf, 0xaf, 0xaf, 0xa1, 0xa7, 0x64, 0xa8, 0x0d,
	0x68, 0xb0, 0x22, 0xe3, 0xb3, 0x15, 0xf3, 0x42, 0x6f, 0xec, 0xc7, 0x64, 0x2b, 0x5d, 0xae, 0xe8,
	0x21, 0xe9, 0xca, 0x8c, 0x75, 0x51, 0xef, 0xca, 0x8c, 0xbe, 0x22, 0x27, 0x95, 0x92, 0xce, 0x72,
	0xc8, 0x79, 0x0a, 0xa5, 0xae, 0x9c, 0xe0, 0x5a, 0x18, 0xee, 0xe0, 0xb3, 0x50, 0x6c, 0x27, 0xf4,
	0xc6, 0xbd, 0xf8, 0x18, 0x4f, 0x4c, 0xf2, 0x37, 0x8d, 0x3f, 0x15, 0xe6, 0xaa, 0x76, 0xe9, 0x53,
	0x72, 0x98, 0x82, 0x72, 0xe2, 0xc6, 0xf1, 0x6b, 0xa9, 0x32, 0xb8, 0x66, 0x3d, 0x3c, 0x7f, 0x70,
	0xa7, 0x7e, 0x44, 0x91, 0x9e, 0x91, 0xfd, 0x2f, 0x55, 0xa2, 0x9c, 0xfc, 0x9a, 0x38, 0x09, 0x8a,
	0xf5, 0xb1, 0xf9, 0x5f, 0x1a, 0x7d, 0x4e, 0xfe, 0x4b, 0x41, 0x2a, 0x8b, 0xbd, 0xa5, 0xd2, 0x95,
	0xbb, 0x4b, 0x30, 0xc0, 0x1b, 0x29, 0x9a, 0x53, 0x61, 0xde, 0xd5, 0x56, 0xd3, 0xfd, 0x82, 0x1c,
	0xb7, 0x08, 0x54, 0xae, 0x65, 0x76, 0x91, 0x19, 0x6d, 0x99, 0x09, 0x7a, 0x0d, 0xf4, 0x3f, 0xd9,
	0x2d, 0x72, 0x6e, 0x84, 0x06, 0xb6, 0x87, 0x31, 0x06, 0x45, 0x1e, 0x0b, 0x0d, 0xf4, 0x11, 0xf1,
	0x0b, 0x9c, 0x40, 0x29, 0x1d, 0xf3, 0xd1, 0xda, 0x2b, 0xea, 0x17, 0x97, 0xd2, 0xd1, 0x27, 0x84,
	0xe0, 0x2f, 0xf1, 0xc4, 0xcc, 0x2d, 0x23, 0xe1, 0xce, 0xd8, 0x8f, 0x7d, 0x54, 0x5e, 0x9b, 0xb9,
	0xa5, 0x23, 0xd2, 0x5f, 0x72, 0x93, 0x94, 0x6c, 0x88, 0x8d, 0x7b, 0xcb, 0x38, 0x29, 0xe9, 0x33,
	0x72, 0xe4, 0x0a, 0x03, 0xd5, 0xbc, 0xa8, 0x83, 0xd5, 0x19, 0x15, 0xa8, 0x54, 0xb0, 0xfd, 0xe6,
	0x41, 0xad, 0x37, 0x15, 0xe6, 0x43, 0xed, 0xd0, 0x09, 0x39, 0x5a, 0x26, 0x0b, 0x99, 0xe1, 0x44,
	0xb8, 0x2b, 0x8c, 0xb0, 0x05, 0x2c, 0x32, 0x76, 0x10, 0x7a, 0xe3, 0xe1, 0x8b, 0xc7, 0xd1, 0x03,
	0xbb, 0x11, 0xbd, 0x15, 0xa9, 0x2c, 0x93, 0x45, 0x3c, 0x6a, 0xc9, 0xab, 0x2d, 0x78, 0x39, 0xf9,
	0xb1, 0x0e, 0xbc, 0xdb, 0x75, 0xe0, 0xfd, 0x5a, 0x07, 0xde, 0xb7, 0x4d, 0xd0, 0xb9, 0xdd, 0x04,
	0x9d, 0x9f, 0x9b, 0xa0, 0xf3, 0xe9, 0xe5, 0x5c, 0xba, 0xa2, 0x9a, 0x45, 0x29, 0x94, 0xe7, 0xda,
	0x40, 0x56, 0xa5, 0xce, 0xa6, 0xf2, 0x9f, 0x15, 0xbb, 0xf9, 0xa3, 0x76, 0x2b, 0x2d, 0xec, 0x6c,
	0x80, 0xeb, 0x76, 0xf1, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xd4, 0x33, 0x3f, 0xc3, 0xc8, 0x02, 0x00,
	0x00,
}

func (m *Model) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Model) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Model) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ValidationThreshold != nil {
		{
			size, err := m.ValidationThreshold.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.ThroughputPerNonce != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.ThroughputPerNonce))
		i--
		dAtA[i] = 0x60
	}
	if m.VRam != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.VRam))
		i--
		dAtA[i] = 0x58
	}
	if len(m.ModelArgs) > 0 {
		for iNdEx := len(m.ModelArgs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ModelArgs[iNdEx])
			copy(dAtA[i:], m.ModelArgs[iNdEx])
			i = encodeVarintModel(dAtA, i, uint64(len(m.ModelArgs[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.HfCommit) > 0 {
		i -= len(m.HfCommit)
		copy(dAtA[i:], m.HfCommit)
		i = encodeVarintModel(dAtA, i, uint64(len(m.HfCommit)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.HfRepo) > 0 {
		i -= len(m.HfRepo)
		copy(dAtA[i:], m.HfRepo)
		i = encodeVarintModel(dAtA, i, uint64(len(m.HfRepo)))
		i--
		dAtA[i] = 0x42
	}
	if m.CoinsPerOutputToken != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.CoinsPerOutputToken))
		i--
		dAtA[i] = 0x38
	}
	if m.CoinsPerInputToken != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.CoinsPerInputToken))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Quantization) > 0 {
		i -= len(m.Quantization)
		copy(dAtA[i:], m.Quantization)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Quantization)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ContextWindow != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.ContextWindow))
		i--
		dAtA[i] = 0x20
	}
	if m.UnitsOfComputePerToken != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.UnitsOfComputePerToken))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProposedBy) > 0 {
		i -= len(m.ProposedBy)
		copy(dAtA[i:], m.ProposedBy)
		i = encodeVarintModel(dAtA, i, uint64(len(m.ProposedBy)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintModel(dAtA []byte, offset int, v uint64) int {
	offset -= sovModel(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Model) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProposedBy)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.UnitsOfComputePerToken != 0 {
		n += 1 + sovModel(uint64(m.UnitsOfComputePerToken))
	}
	if m.ContextWindow != 0 {
		n += 1 + sovModel(uint64(m.ContextWindow))
	}
	l = len(m.Quantization)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.CoinsPerInputToken != 0 {
		n += 1 + sovModel(uint64(m.CoinsPerInputToken))
	}
	if m.CoinsPerOutputToken != 0 {
		n += 1 + sovModel(uint64(m.CoinsPerOutputToken))
	}
	l = len(m.HfRepo)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.HfCommit)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if len(m.ModelArgs) > 0 {
		for _, s := range m.ModelArgs {
			l = len(s)
			n += 1 + l + sovModel(uint64(l))
		}
	}
	if m.VRam != 0 {
		n += 1 + sovModel(uint64(m.VRam))
	}
	if m.ThroughputPerNonce != 0 {
		n += 1 + sovModel(uint64(m.ThroughputPerNonce))
	}
	if m.ValidationThreshold != nil {
		l = m.ValidationThreshold.Size()
		n += 1 + l + sovModel(uint64(l))
	}
	return n
}

func sovModel(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozModel(x uint64) (n int) {
	return sovModel(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Model) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Model: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Model: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitsOfComputePerToken", wireType)
			}
			m.UnitsOfComputePerToken = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnitsOfComputePerToken |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContextWindow", wireType)
			}
			m.ContextWindow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContextWindow |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantization", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Quantization = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinsPerInputToken", wireType)
			}
			m.CoinsPerInputToken = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinsPerInputToken |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinsPerOutputToken", wireType)
			}
			m.CoinsPerOutputToken = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinsPerOutputToken |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HfRepo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HfRepo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HfCommit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HfCommit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelArgs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelArgs = append(m.ModelArgs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRam", wireType)
			}
			m.VRam = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VRam |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThroughputPerNonce", wireType)
			}
			m.ThroughputPerNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThroughputPerNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationThreshold", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ValidationThreshold == nil {
				m.ValidationThreshold = &Decimal{}
			}
			if err := m.ValidationThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipModel(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowModel
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthModel
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupModel
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthModel
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthModel        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowModel          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupModel = fmt.Errorf("proto: unexpected end of group")
)

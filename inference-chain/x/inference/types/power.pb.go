// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: inference/inference/power.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Power at the moment isn't added to Genesis, because we're reusing staking's genesis for now
type Power struct {
	ParticipantAddress       string `protobuf:"bytes,1,opt,name=participant_address,json=participantAddress,proto3" json:"participant_address,omitempty"`
	Power                    int64  `protobuf:"varint,2,opt,name=power,proto3" json:"power,omitempty"`
	PocStageStartBlockHeight int64  `protobuf:"varint,3,opt,name=poc_stage_start_block_height,json=pocStageStartBlockHeight,proto3" json:"poc_stage_start_block_height,omitempty"`
	ReceivedAtBlockHeight    int64  `protobuf:"varint,4,opt,name=received_at_block_height,json=receivedAtBlockHeight,proto3" json:"received_at_block_height,omitempty"`
}

func (m *Power) Reset()         { *m = Power{} }
func (m *Power) String() string { return proto.CompactTextString(m) }
func (*Power) ProtoMessage()    {}
func (*Power) Descriptor() ([]byte, []int) {
	return fileDescriptor_993889d9045bd33b, []int{0}
}
func (m *Power) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Power) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Power.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Power) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Power.Merge(m, src)
}
func (m *Power) XXX_Size() int {
	return m.Size()
}
func (m *Power) XXX_DiscardUnknown() {
	xxx_messageInfo_Power.DiscardUnknown(m)
}

var xxx_messageInfo_Power proto.InternalMessageInfo

func (m *Power) GetParticipantAddress() string {
	if m != nil {
		return m.ParticipantAddress
	}
	return ""
}

func (m *Power) GetPower() int64 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *Power) GetPocStageStartBlockHeight() int64 {
	if m != nil {
		return m.PocStageStartBlockHeight
	}
	return 0
}

func (m *Power) GetReceivedAtBlockHeight() int64 {
	if m != nil {
		return m.ReceivedAtBlockHeight
	}
	return 0
}

func init() {
	proto.RegisterType((*Power)(nil), "inference.inference.Power")
}

func init() { proto.RegisterFile("inference/inference/power.proto", fileDescriptor_993889d9045bd33b) }

var fileDescriptor_993889d9045bd33b = []byte{
	// 255 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xbd, 0x4e, 0xf3, 0x30,
	0x18, 0x85, 0xe3, 0xaf, 0x5f, 0x91, 0xf0, 0xe8, 0x82, 0xe4, 0x01, 0x99, 0x8a, 0xa9, 0x53, 0x32,
	0x20, 0xc4, 0x86, 0xd4, 0x4e, 0x6c, 0xa0, 0x76, 0x63, 0xb1, 0x1c, 0xe7, 0x25, 0xb1, 0x80, 0xd8,
	0xb2, 0xdf, 0xf2, 0x73, 0x17, 0xdc, 0x15, 0x8c, 0x1d, 0x19, 0x51, 0x72, 0x23, 0xc8, 0xae, 0x28,
	0x51, 0x17, 0xeb, 0xd8, 0xcf, 0x73, 0x3c, 0x1c, 0x7a, 0x6a, 0xda, 0x7b, 0xf0, 0xd0, 0x6a, 0x28,
	0xfe, 0x92, 0xb3, 0x2f, 0xe0, 0x73, 0xe7, 0x2d, 0x5a, 0x36, 0xd9, 0x3d, 0xe7, 0xbb, 0x74, 0xf6,
	0x41, 0xe8, 0xf8, 0x36, 0x4a, 0xac, 0xa0, 0x13, 0xa7, 0x3c, 0x1a, 0x6d, 0x9c, 0x6a, 0x51, 0xaa,
	0xaa, 0xf2, 0x10, 0x02, 0x27, 0x53, 0x32, 0x3b, 0x5c, 0xb2, 0x01, 0x9a, 0x6f, 0x09, 0x3b, 0xa2,
	0xe3, 0xf4, 0x3d, 0xff, 0x37, 0x25, 0xb3, 0xd1, 0x72, 0x7b, 0x61, 0x57, 0xf4, 0xc4, 0x59, 0x2d,
	0x03, 0xaa, 0x1a, 0xe2, 0xe9, 0x51, 0x96, 0x8f, 0x56, 0x3f, 0xc8, 0x06, 0x4c, 0xdd, 0x20, 0x1f,
	0x25, 0x99, 0x3b, 0xab, 0x57, 0x51, 0x59, 0x45, 0x63, 0x11, 0x85, 0xeb, 0xc4, 0xd9, 0x25, 0xe5,
	0x1e, 0x34, 0x98, 0x67, 0xa8, 0xa4, 0xda, 0xeb, 0xfe, 0x4f, 0xdd, 0xe3, 0x5f, 0x3e, 0x1f, 0x16,
	0x17, 0x37, 0x9f, 0x9d, 0x20, 0x9b, 0x4e, 0x90, 0xef, 0x4e, 0x90, 0xf7, 0x5e, 0x64, 0x9b, 0x5e,
	0x64, 0x5f, 0xbd, 0xc8, 0xee, 0x2e, 0x6a, 0x83, 0xcd, 0xba, 0xcc, 0xb5, 0x7d, 0x2a, 0x9c, 0xb7,
	0xd5, 0x5a, 0x63, 0xd0, 0x66, 0x6f, 0xa9, 0xd7, 0x41, 0xc6, 0x37, 0x07, 0xa1, 0x3c, 0x48, 0xb3,
	0x9d, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0xc6, 0x11, 0x46, 0x2f, 0x59, 0x01, 0x00, 0x00,
}

func (m *Power) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Power) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Power) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReceivedAtBlockHeight != 0 {
		i = encodeVarintPower(dAtA, i, uint64(m.ReceivedAtBlockHeight))
		i--
		dAtA[i] = 0x20
	}
	if m.PocStageStartBlockHeight != 0 {
		i = encodeVarintPower(dAtA, i, uint64(m.PocStageStartBlockHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.Power != 0 {
		i = encodeVarintPower(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ParticipantAddress) > 0 {
		i -= len(m.ParticipantAddress)
		copy(dAtA[i:], m.ParticipantAddress)
		i = encodeVarintPower(dAtA, i, uint64(len(m.ParticipantAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPower(dAtA []byte, offset int, v uint64) int {
	offset -= sovPower(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Power) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ParticipantAddress)
	if l > 0 {
		n += 1 + l + sovPower(uint64(l))
	}
	if m.Power != 0 {
		n += 1 + sovPower(uint64(m.Power))
	}
	if m.PocStageStartBlockHeight != 0 {
		n += 1 + sovPower(uint64(m.PocStageStartBlockHeight))
	}
	if m.ReceivedAtBlockHeight != 0 {
		n += 1 + sovPower(uint64(m.ReceivedAtBlockHeight))
	}
	return n
}

func sovPower(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPower(x uint64) (n int) {
	return sovPower(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Power) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Power: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Power: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPower
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPower
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParticipantAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PocStageStartBlockHeight", wireType)
			}
			m.PocStageStartBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PocStageStartBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedAtBlockHeight", wireType)
			}
			m.ReceivedAtBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceivedAtBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPower(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPower
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPower
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPower
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPower
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPower
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPower
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPower        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPower          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPower = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: inference/inference/epoch_group_data.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Enum for timeslot types
type TimeslotType int32

const (
	TimeslotType_PRE_POC_SLOT TimeslotType = 0
	TimeslotType_POC_SLOT     TimeslotType = 1
)

var TimeslotType_name = map[int32]string{
	0: "PRE_POC_SLOT",
	1: "POC_SLOT",
}

var TimeslotType_value = map[string]int32{
	"PRE_POC_SLOT": 0,
	"POC_SLOT":     1,
}

func (x TimeslotType) String() string {
	return proto.EnumName(TimeslotType_name, int32(x))
}

func (TimeslotType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_47040406f6377eb3, []int{0}
}

// These top two values are uint64s because they are IDs, not numerical values.
type EpochGroupData struct {
	PocStartBlockHeight   uint64              `protobuf:"varint,1,opt,name=poc_start_block_height,json=pocStartBlockHeight,proto3" json:"poc_start_block_height,omitempty"`
	EpochGroupId          uint64              `protobuf:"varint,2,opt,name=epoch_group_id,json=epochGroupId,proto3" json:"epoch_group_id,omitempty"`
	EpochPolicy           string              `protobuf:"bytes,3,opt,name=epoch_policy,json=epochPolicy,proto3" json:"epoch_policy,omitempty"`
	EffectiveBlockHeight  int64               `protobuf:"varint,4,opt,name=effective_block_height,json=effectiveBlockHeight,proto3" json:"effective_block_height,omitempty"`
	LastBlockHeight       int64               `protobuf:"varint,5,opt,name=last_block_height,json=lastBlockHeight,proto3" json:"last_block_height,omitempty"`
	MemberSeedSignatures  []*SeedSignature    `protobuf:"bytes,6,rep,name=member_seed_signatures,json=memberSeedSignatures,proto3" json:"member_seed_signatures,omitempty"`
	ValidationWeights     []*ValidationWeight `protobuf:"bytes,8,rep,name=validation_weights,json=validationWeights,proto3" json:"validation_weights,omitempty"`
	UnitOfComputePrice    int64               `protobuf:"varint,9,opt,name=unit_of_compute_price,json=unitOfComputePrice,proto3" json:"unit_of_compute_price,omitempty"`
	NumberOfRequests      int64               `protobuf:"varint,10,opt,name=number_of_requests,json=numberOfRequests,proto3" json:"number_of_requests,omitempty"`
	PreviousEpochRequests int64               `protobuf:"varint,11,opt,name=previous_epoch_requests,json=previousEpochRequests,proto3" json:"previous_epoch_requests,omitempty"`
	ValidationParams      *ValidationParams   `protobuf:"bytes,12,opt,name=validation_params,json=validationParams,proto3" json:"validation_params,omitempty"`
	TotalWeight           int64               `protobuf:"varint,13,opt,name=total_weight,json=totalWeight,proto3" json:"total_weight,omitempty"`
	// If model_id is empty, this is the parent EpochGroup
	// If model_id is set, this is a sub EpochGroup for that specific model
	ModelId string `protobuf:"bytes,14,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	// List of model IDs for sub EpochGroups, only used in parent EpochGroup
	SubGroupModels  []string `protobuf:"bytes,15,rep,name=sub_group_models,json=subGroupModels,proto3" json:"sub_group_models,omitempty"`
	EpochId         uint64   `protobuf:"varint,16,opt,name=epoch_id,json=epochId,proto3" json:"epoch_id,omitempty"`
	ModelSnapshot   *Model   `protobuf:"bytes,17,opt,name=model_snapshot,json=modelSnapshot,proto3" json:"model_snapshot,omitempty"`
	TotalThroughput int64    `protobuf:"varint,18,opt,name=total_throughput,json=totalThroughput,proto3" json:"total_throughput,omitempty"`
}

func (m *EpochGroupData) Reset()         { *m = EpochGroupData{} }
func (m *EpochGroupData) String() string { return proto.CompactTextString(m) }
func (*EpochGroupData) ProtoMessage()    {}
func (*EpochGroupData) Descriptor() ([]byte, []int) {
	return fileDescriptor_47040406f6377eb3, []int{0}
}
func (m *EpochGroupData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EpochGroupData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EpochGroupData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EpochGroupData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochGroupData.Merge(m, src)
}
func (m *EpochGroupData) XXX_Size() int {
	return m.Size()
}
func (m *EpochGroupData) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochGroupData.DiscardUnknown(m)
}

var xxx_messageInfo_EpochGroupData proto.InternalMessageInfo

func (m *EpochGroupData) GetPocStartBlockHeight() uint64 {
	if m != nil {
		return m.PocStartBlockHeight
	}
	return 0
}

func (m *EpochGroupData) GetEpochGroupId() uint64 {
	if m != nil {
		return m.EpochGroupId
	}
	return 0
}

func (m *EpochGroupData) GetEpochPolicy() string {
	if m != nil {
		return m.EpochPolicy
	}
	return ""
}

func (m *EpochGroupData) GetEffectiveBlockHeight() int64 {
	if m != nil {
		return m.EffectiveBlockHeight
	}
	return 0
}

func (m *EpochGroupData) GetLastBlockHeight() int64 {
	if m != nil {
		return m.LastBlockHeight
	}
	return 0
}

func (m *EpochGroupData) GetMemberSeedSignatures() []*SeedSignature {
	if m != nil {
		return m.MemberSeedSignatures
	}
	return nil
}

func (m *EpochGroupData) GetValidationWeights() []*ValidationWeight {
	if m != nil {
		return m.ValidationWeights
	}
	return nil
}

func (m *EpochGroupData) GetUnitOfComputePrice() int64 {
	if m != nil {
		return m.UnitOfComputePrice
	}
	return 0
}

func (m *EpochGroupData) GetNumberOfRequests() int64 {
	if m != nil {
		return m.NumberOfRequests
	}
	return 0
}

func (m *EpochGroupData) GetPreviousEpochRequests() int64 {
	if m != nil {
		return m.PreviousEpochRequests
	}
	return 0
}

func (m *EpochGroupData) GetValidationParams() *ValidationParams {
	if m != nil {
		return m.ValidationParams
	}
	return nil
}

func (m *EpochGroupData) GetTotalWeight() int64 {
	if m != nil {
		return m.TotalWeight
	}
	return 0
}

func (m *EpochGroupData) GetModelId() string {
	if m != nil {
		return m.ModelId
	}
	return ""
}

func (m *EpochGroupData) GetSubGroupModels() []string {
	if m != nil {
		return m.SubGroupModels
	}
	return nil
}

func (m *EpochGroupData) GetEpochId() uint64 {
	if m != nil {
		return m.EpochId
	}
	return 0
}

func (m *EpochGroupData) GetModelSnapshot() *Model {
	if m != nil {
		return m.ModelSnapshot
	}
	return nil
}

func (m *EpochGroupData) GetTotalThroughput() int64 {
	if m != nil {
		return m.TotalThroughput
	}
	return 0
}

type ValidationWeight struct {
	MemberAddress string `protobuf:"bytes,1,opt,name=member_address,json=memberAddress,proto3" json:"member_address,omitempty"`
	Weight        int64  `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
	Reputation    int32  `protobuf:"varint,3,opt,name=reputation,proto3" json:"reputation,omitempty"`
	// We may decide to move ml_nodes directly to EpochGroupData,
	// but for now, this is a good solution.
	MlNodes []*MLNodeInfo `protobuf:"bytes,4,rep,name=ml_nodes,json=mlNodes,proto3" json:"ml_nodes,omitempty"`
}

func (m *ValidationWeight) Reset()         { *m = ValidationWeight{} }
func (m *ValidationWeight) String() string { return proto.CompactTextString(m) }
func (*ValidationWeight) ProtoMessage()    {}
func (*ValidationWeight) Descriptor() ([]byte, []int) {
	return fileDescriptor_47040406f6377eb3, []int{1}
}
func (m *ValidationWeight) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidationWeight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidationWeight.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidationWeight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidationWeight.Merge(m, src)
}
func (m *ValidationWeight) XXX_Size() int {
	return m.Size()
}
func (m *ValidationWeight) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidationWeight.DiscardUnknown(m)
}

var xxx_messageInfo_ValidationWeight proto.InternalMessageInfo

func (m *ValidationWeight) GetMemberAddress() string {
	if m != nil {
		return m.MemberAddress
	}
	return ""
}

func (m *ValidationWeight) GetWeight() int64 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *ValidationWeight) GetReputation() int32 {
	if m != nil {
		return m.Reputation
	}
	return 0
}

func (m *ValidationWeight) GetMlNodes() []*MLNodeInfo {
	if m != nil {
		return m.MlNodes
	}
	return nil
}

type SeedSignature struct {
	MemberAddress string `protobuf:"bytes,1,opt,name=member_address,json=memberAddress,proto3" json:"member_address,omitempty"`
	Signature     string `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *SeedSignature) Reset()         { *m = SeedSignature{} }
func (m *SeedSignature) String() string { return proto.CompactTextString(m) }
func (*SeedSignature) ProtoMessage()    {}
func (*SeedSignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_47040406f6377eb3, []int{2}
}
func (m *SeedSignature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeedSignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeedSignature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeedSignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeedSignature.Merge(m, src)
}
func (m *SeedSignature) XXX_Size() int {
	return m.Size()
}
func (m *SeedSignature) XXX_DiscardUnknown() {
	xxx_messageInfo_SeedSignature.DiscardUnknown(m)
}

var xxx_messageInfo_SeedSignature proto.InternalMessageInfo

func (m *SeedSignature) GetMemberAddress() string {
	if m != nil {
		return m.MemberAddress
	}
	return ""
}

func (m *SeedSignature) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

type MLNodeInfo struct {
	NodeId             string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Throughput         int64  `protobuf:"varint,2,opt,name=throughput,proto3" json:"throughput,omitempty"`
	PocWeight          int64  `protobuf:"varint,3,opt,name=poc_weight,json=pocWeight,proto3" json:"poc_weight,omitempty"`
	TimeslotAllocation []bool `protobuf:"varint,4,rep,packed,name=timeslot_allocation,json=timeslotAllocation,proto3" json:"timeslot_allocation,omitempty"`
}

func (m *MLNodeInfo) Reset()         { *m = MLNodeInfo{} }
func (m *MLNodeInfo) String() string { return proto.CompactTextString(m) }
func (*MLNodeInfo) ProtoMessage()    {}
func (*MLNodeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_47040406f6377eb3, []int{3}
}
func (m *MLNodeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MLNodeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MLNodeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MLNodeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MLNodeInfo.Merge(m, src)
}
func (m *MLNodeInfo) XXX_Size() int {
	return m.Size()
}
func (m *MLNodeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MLNodeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MLNodeInfo proto.InternalMessageInfo

func (m *MLNodeInfo) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *MLNodeInfo) GetThroughput() int64 {
	if m != nil {
		return m.Throughput
	}
	return 0
}

func (m *MLNodeInfo) GetPocWeight() int64 {
	if m != nil {
		return m.PocWeight
	}
	return 0
}

func (m *MLNodeInfo) GetTimeslotAllocation() []bool {
	if m != nil {
		return m.TimeslotAllocation
	}
	return nil
}

func init() {
	proto.RegisterEnum("inference.inference.TimeslotType", TimeslotType_name, TimeslotType_value)
	proto.RegisterType((*EpochGroupData)(nil), "inference.inference.EpochGroupData")
	proto.RegisterType((*ValidationWeight)(nil), "inference.inference.ValidationWeight")
	proto.RegisterType((*SeedSignature)(nil), "inference.inference.SeedSignature")
	proto.RegisterType((*MLNodeInfo)(nil), "inference.inference.MLNodeInfo")
}

func init() {
	proto.RegisterFile("inference/inference/epoch_group_data.proto", fileDescriptor_47040406f6377eb3)
}

var fileDescriptor_47040406f6377eb3 = []byte{
	// 804 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xc1, 0x6e, 0x23, 0x45,
	0x10, 0xcd, 0xac, 0xb3, 0x8e, 0x5d, 0x71, 0xbc, 0x4e, 0x67, 0xd7, 0x3b, 0x44, 0xe0, 0x35, 0x16,
	0x91, 0x4c, 0x84, 0x1c, 0xc1, 0x02, 0x07, 0x6e, 0xd9, 0x65, 0x05, 0x96, 0x16, 0x6c, 0x8d, 0x2d,
	0x40, 0x5c, 0x5a, 0xe3, 0xe9, 0xb6, 0xdd, 0x62, 0x66, 0xba, 0x99, 0xee, 0x31, 0xe4, 0x2f, 0xb8,
	0xf0, 0x19, 0xfc, 0x07, 0xc7, 0x3d, 0x72, 0x44, 0xc9, 0x7f, 0x20, 0xd4, 0xd5, 0x93, 0xc9, 0xc4,
	0xf2, 0x4a, 0x7b, 0xeb, 0x7a, 0xef, 0x55, 0x75, 0x55, 0xcd, 0x9b, 0x86, 0x73, 0x91, 0x2e, 0x79,
	0xc6, 0xd3, 0x88, 0x5f, 0xdc, 0x9d, 0xb8, 0x92, 0xd1, 0x9a, 0xae, 0x32, 0x99, 0x2b, 0xca, 0x42,
	0x13, 0x8e, 0x54, 0x26, 0x8d, 0x24, 0x27, 0xa5, 0x62, 0x54, 0x9e, 0x4e, 0xcf, 0x76, 0x15, 0x50,
	0x61, 0x66, 0x44, 0x24, 0x54, 0x98, 0x1a, 0x97, 0x7b, 0xda, 0x7f, 0x8b, 0x2c, 0x4c, 0x74, 0xa1,
	0x78, 0xb6, 0x4b, 0x91, 0x48, 0xc6, 0x63, 0x27, 0x18, 0xfc, 0x57, 0x87, 0xf6, 0x2b, 0xdb, 0xd9,
	0x37, 0xb6, 0xb1, 0xaf, 0x43, 0x13, 0x92, 0xe7, 0xd0, 0x55, 0x32, 0xa2, 0xda, 0x84, 0x99, 0xa1,
	0x8b, 0x58, 0x46, 0xbf, 0xd0, 0x35, 0x17, 0xab, 0xb5, 0xf1, 0xbd, 0xbe, 0x37, 0xdc, 0x0f, 0x4e,
	0x94, 0x8c, 0x66, 0x96, 0x7c, 0x61, 0xb9, 0x6f, 0x91, 0x22, 0x1f, 0x41, 0xbb, 0x3a, 0xa0, 0x60,
	0xfe, 0x03, 0x14, 0xb7, 0x78, 0x59, 0x7c, 0xcc, 0xc8, 0x87, 0xe0, 0x62, 0xaa, 0x64, 0x2c, 0xa2,
	0x2b, 0xbf, 0xd6, 0xf7, 0x86, 0xcd, 0xe0, 0x10, 0xb1, 0x29, 0x42, 0xe4, 0x73, 0xe8, 0xf2, 0xe5,
	0x92, 0x47, 0x46, 0x6c, 0xf8, 0xfd, 0xdb, 0xf7, 0xfb, 0xde, 0xb0, 0x16, 0x3c, 0x2e, 0xd9, 0xea,
	0xf5, 0xe7, 0x70, 0x1c, 0x87, 0x7a, 0xab, 0xdd, 0x87, 0x98, 0xf0, 0xc8, 0x12, 0x55, 0xed, 0x4f,
	0xd0, 0x4d, 0x78, 0xb2, 0xe0, 0x19, 0xd5, 0x9c, 0x33, 0xaa, 0xc5, 0x2a, 0x0d, 0x4d, 0x9e, 0x71,
	0xed, 0xd7, 0xfb, 0xb5, 0xe1, 0xe1, 0x67, 0x83, 0xd1, 0x8e, 0x4f, 0x32, 0x9a, 0x71, 0xce, 0x66,
	0xb7, 0xd2, 0xe0, 0xb1, 0xab, 0x70, 0x0f, 0xd4, 0x64, 0x0e, 0x64, 0x13, 0xc6, 0x82, 0x85, 0x46,
	0xc8, 0x94, 0xfe, 0x86, 0xd7, 0x69, 0xbf, 0x81, 0x55, 0xcf, 0x76, 0x56, 0xfd, 0xa1, 0x94, 0xff,
	0x88, 0xea, 0xe0, 0x78, 0xb3, 0x85, 0x68, 0xf2, 0x29, 0x3c, 0xc9, 0x53, 0x61, 0xa8, 0x5c, 0xd2,
	0x48, 0x26, 0x2a, 0x37, 0x9c, 0xaa, 0x4c, 0x44, 0xdc, 0x6f, 0xe2, 0x7c, 0xc4, 0x92, 0x93, 0xe5,
	0x4b, 0x47, 0x4d, 0x2d, 0x43, 0x3e, 0x01, 0x92, 0xe6, 0x38, 0xa2, 0x5c, 0xd2, 0x8c, 0xff, 0x9a,
	0x73, 0x6d, 0xb4, 0x0f, 0xa8, 0xef, 0x38, 0x66, 0xb2, 0x0c, 0x0a, 0x9c, 0x7c, 0x09, 0x4f, 0x55,
	0xc6, 0x37, 0x42, 0xe6, 0x9a, 0xba, 0xcf, 0x53, 0xa6, 0x1c, 0x62, 0xca, 0x93, 0x5b, 0x1a, 0x9d,
	0x52, 0xe6, 0x05, 0x50, 0xe9, 0x96, 0x3a, 0xdf, 0xf9, 0xad, 0xbe, 0xf7, 0x0e, 0xd3, 0x4e, 0x51,
	0x1c, 0x74, 0x36, 0x5b, 0x88, 0x75, 0x88, 0x91, 0x26, 0x8c, 0x8b, 0xed, 0xf9, 0x47, 0xd8, 0xc0,
	0x21, 0x62, 0x6e, 0x21, 0xe4, 0x3d, 0x68, 0xa0, 0x83, 0xad, 0xc9, 0xda, 0x68, 0xa0, 0x03, 0x8c,
	0xc7, 0x8c, 0x0c, 0xa1, 0xa3, 0xf3, 0x45, 0xe1, 0x41, 0x04, 0xb5, 0xff, 0xa8, 0x5f, 0x1b, 0x36,
	0x83, 0xb6, 0xce, 0x17, 0xe8, 0xc2, 0xef, 0x10, 0xb5, 0x45, 0xdc, 0xa8, 0x82, 0xf9, 0x1d, 0x74,
	0xea, 0x01, 0xc6, 0x63, 0x46, 0x2e, 0xa1, 0xed, 0xea, 0xeb, 0x34, 0x54, 0x7a, 0x2d, 0x8d, 0x7f,
	0x8c, 0x33, 0x9d, 0xee, 0x9c, 0x09, 0xeb, 0x05, 0x47, 0x98, 0x31, 0x2b, 0x12, 0xc8, 0xc7, 0xd0,
	0x71, 0x53, 0x98, 0x75, 0x26, 0xf3, 0xd5, 0x5a, 0xe5, 0xc6, 0x27, 0xce, 0x8d, 0x88, 0xcf, 0x4b,
	0x78, 0xf0, 0x97, 0x07, 0x9d, 0x6d, 0x17, 0x90, 0x33, 0x68, 0x17, 0x16, 0x0d, 0x19, 0xcb, 0xb8,
	0xd6, 0xf8, 0xeb, 0x35, 0x83, 0x23, 0x87, 0x5e, 0x3a, 0x90, 0x74, 0xa1, 0x5e, 0xac, 0xe9, 0x01,
	0x16, 0x2f, 0x22, 0xd2, 0x03, 0xc8, 0xb8, 0xca, 0x0d, 0x96, 0xc4, 0x9f, 0xec, 0x61, 0x50, 0x41,
	0xc8, 0x57, 0xd0, 0x48, 0x62, 0x9a, 0x4a, 0xc6, 0xb5, 0xbf, 0x8f, 0xee, 0x7c, 0xb6, 0x7b, 0xb6,
	0xd7, 0xdf, 0x4b, 0xc6, 0xc7, 0xe9, 0x52, 0x06, 0x07, 0x49, 0x6c, 0xcf, 0x7a, 0x30, 0x87, 0xa3,
	0x7b, 0xae, 0x7f, 0xd7, 0x5e, 0xdf, 0x87, 0x66, 0xf9, 0xa7, 0x61, 0xbb, 0xcd, 0xe0, 0x0e, 0x18,
	0xfc, 0xe9, 0x01, 0xdc, 0xdd, 0x46, 0x9e, 0xc2, 0x81, 0xed, 0xce, 0x7e, 0x1c, 0x57, 0xac, 0x6e,
	0xc3, 0x31, 0xb3, 0x93, 0x55, 0x56, 0xea, 0xa6, 0xae, 0x20, 0xe4, 0x03, 0x00, 0xfb, 0x76, 0x15,
	0x5b, 0xa9, 0x21, 0xdf, 0x54, 0x32, 0x2a, 0xf6, 0x7a, 0x01, 0x27, 0x46, 0x24, 0x5c, 0xc7, 0xd2,
	0xd0, 0x30, 0x8e, 0x65, 0xe4, 0x36, 0x64, 0x77, 0xd0, 0x08, 0xc8, 0x2d, 0x75, 0x59, 0x32, 0xe7,
	0x23, 0x68, 0xcd, 0x0b, 0x74, 0x7e, 0xa5, 0x38, 0xe9, 0x40, 0x6b, 0x1a, 0xbc, 0xa2, 0xd3, 0xc9,
	0x4b, 0x3a, 0x7b, 0x3d, 0x99, 0x77, 0xf6, 0x48, 0x0b, 0x1a, 0x65, 0xe4, 0xbd, 0x98, 0xfc, 0x7d,
	0xdd, 0xf3, 0xde, 0x5c, 0xf7, 0xbc, 0x7f, 0xaf, 0x7b, 0xde, 0x1f, 0x37, 0xbd, 0xbd, 0x37, 0x37,
	0xbd, 0xbd, 0x7f, 0x6e, 0x7a, 0x7b, 0x3f, 0x7f, 0xb1, 0x12, 0x66, 0x9d, 0x2f, 0x46, 0x91, 0x4c,
	0x2e, 0x54, 0x26, 0x59, 0x1e, 0x19, 0x1d, 0x89, 0xad, 0x97, 0xf9, 0xf7, 0xca, 0xd9, 0x5c, 0x29,
	0xae, 0x17, 0x75, 0x7c, 0xa6, 0x9f, 0xff, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x39, 0x8a, 0x87, 0x75,
	0x53, 0x06, 0x00, 0x00,
}

func (m *EpochGroupData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EpochGroupData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EpochGroupData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalThroughput != 0 {
		i = encodeVarintEpochGroupData(dAtA, i, uint64(m.TotalThroughput))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.ModelSnapshot != nil {
		{
			size, err := m.ModelSnapshot.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEpochGroupData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.EpochId != 0 {
		i = encodeVarintEpochGroupData(dAtA, i, uint64(m.EpochId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.SubGroupModels) > 0 {
		for iNdEx := len(m.SubGroupModels) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SubGroupModels[iNdEx])
			copy(dAtA[i:], m.SubGroupModels[iNdEx])
			i = encodeVarintEpochGroupData(dAtA, i, uint64(len(m.SubGroupModels[iNdEx])))
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.ModelId) > 0 {
		i -= len(m.ModelId)
		copy(dAtA[i:], m.ModelId)
		i = encodeVarintEpochGroupData(dAtA, i, uint64(len(m.ModelId)))
		i--
		dAtA[i] = 0x72
	}
	if m.TotalWeight != 0 {
		i = encodeVarintEpochGroupData(dAtA, i, uint64(m.TotalWeight))
		i--
		dAtA[i] = 0x68
	}
	if m.ValidationParams != nil {
		{
			size, err := m.ValidationParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEpochGroupData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.PreviousEpochRequests != 0 {
		i = encodeVarintEpochGroupData(dAtA, i, uint64(m.PreviousEpochRequests))
		i--
		dAtA[i] = 0x58
	}
	if m.NumberOfRequests != 0 {
		i = encodeVarintEpochGroupData(dAtA, i, uint64(m.NumberOfRequests))
		i--
		dAtA[i] = 0x50
	}
	if m.UnitOfComputePrice != 0 {
		i = encodeVarintEpochGroupData(dAtA, i, uint64(m.UnitOfComputePrice))
		i--
		dAtA[i] = 0x48
	}
	if len(m.ValidationWeights) > 0 {
		for iNdEx := len(m.ValidationWeights) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValidationWeights[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEpochGroupData(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.MemberSeedSignatures) > 0 {
		for iNdEx := len(m.MemberSeedSignatures) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MemberSeedSignatures[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEpochGroupData(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.LastBlockHeight != 0 {
		i = encodeVarintEpochGroupData(dAtA, i, uint64(m.LastBlockHeight))
		i--
		dAtA[i] = 0x28
	}
	if m.EffectiveBlockHeight != 0 {
		i = encodeVarintEpochGroupData(dAtA, i, uint64(m.EffectiveBlockHeight))
		i--
		dAtA[i] = 0x20
	}
	if len(m.EpochPolicy) > 0 {
		i -= len(m.EpochPolicy)
		copy(dAtA[i:], m.EpochPolicy)
		i = encodeVarintEpochGroupData(dAtA, i, uint64(len(m.EpochPolicy)))
		i--
		dAtA[i] = 0x1a
	}
	if m.EpochGroupId != 0 {
		i = encodeVarintEpochGroupData(dAtA, i, uint64(m.EpochGroupId))
		i--
		dAtA[i] = 0x10
	}
	if m.PocStartBlockHeight != 0 {
		i = encodeVarintEpochGroupData(dAtA, i, uint64(m.PocStartBlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ValidationWeight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidationWeight) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidationWeight) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MlNodes) > 0 {
		for iNdEx := len(m.MlNodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MlNodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEpochGroupData(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Reputation != 0 {
		i = encodeVarintEpochGroupData(dAtA, i, uint64(m.Reputation))
		i--
		dAtA[i] = 0x18
	}
	if m.Weight != 0 {
		i = encodeVarintEpochGroupData(dAtA, i, uint64(m.Weight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.MemberAddress) > 0 {
		i -= len(m.MemberAddress)
		copy(dAtA[i:], m.MemberAddress)
		i = encodeVarintEpochGroupData(dAtA, i, uint64(len(m.MemberAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SeedSignature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeedSignature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeedSignature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintEpochGroupData(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MemberAddress) > 0 {
		i -= len(m.MemberAddress)
		copy(dAtA[i:], m.MemberAddress)
		i = encodeVarintEpochGroupData(dAtA, i, uint64(len(m.MemberAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MLNodeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MLNodeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MLNodeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TimeslotAllocation) > 0 {
		for iNdEx := len(m.TimeslotAllocation) - 1; iNdEx >= 0; iNdEx-- {
			i--
			if m.TimeslotAllocation[iNdEx] {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
		}
		i = encodeVarintEpochGroupData(dAtA, i, uint64(len(m.TimeslotAllocation)))
		i--
		dAtA[i] = 0x22
	}
	if m.PocWeight != 0 {
		i = encodeVarintEpochGroupData(dAtA, i, uint64(m.PocWeight))
		i--
		dAtA[i] = 0x18
	}
	if m.Throughput != 0 {
		i = encodeVarintEpochGroupData(dAtA, i, uint64(m.Throughput))
		i--
		dAtA[i] = 0x10
	}
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintEpochGroupData(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEpochGroupData(dAtA []byte, offset int, v uint64) int {
	offset -= sovEpochGroupData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EpochGroupData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PocStartBlockHeight != 0 {
		n += 1 + sovEpochGroupData(uint64(m.PocStartBlockHeight))
	}
	if m.EpochGroupId != 0 {
		n += 1 + sovEpochGroupData(uint64(m.EpochGroupId))
	}
	l = len(m.EpochPolicy)
	if l > 0 {
		n += 1 + l + sovEpochGroupData(uint64(l))
	}
	if m.EffectiveBlockHeight != 0 {
		n += 1 + sovEpochGroupData(uint64(m.EffectiveBlockHeight))
	}
	if m.LastBlockHeight != 0 {
		n += 1 + sovEpochGroupData(uint64(m.LastBlockHeight))
	}
	if len(m.MemberSeedSignatures) > 0 {
		for _, e := range m.MemberSeedSignatures {
			l = e.Size()
			n += 1 + l + sovEpochGroupData(uint64(l))
		}
	}
	if len(m.ValidationWeights) > 0 {
		for _, e := range m.ValidationWeights {
			l = e.Size()
			n += 1 + l + sovEpochGroupData(uint64(l))
		}
	}
	if m.UnitOfComputePrice != 0 {
		n += 1 + sovEpochGroupData(uint64(m.UnitOfComputePrice))
	}
	if m.NumberOfRequests != 0 {
		n += 1 + sovEpochGroupData(uint64(m.NumberOfRequests))
	}
	if m.PreviousEpochRequests != 0 {
		n += 1 + sovEpochGroupData(uint64(m.PreviousEpochRequests))
	}
	if m.ValidationParams != nil {
		l = m.ValidationParams.Size()
		n += 1 + l + sovEpochGroupData(uint64(l))
	}
	if m.TotalWeight != 0 {
		n += 1 + sovEpochGroupData(uint64(m.TotalWeight))
	}
	l = len(m.ModelId)
	if l > 0 {
		n += 1 + l + sovEpochGroupData(uint64(l))
	}
	if len(m.SubGroupModels) > 0 {
		for _, s := range m.SubGroupModels {
			l = len(s)
			n += 1 + l + sovEpochGroupData(uint64(l))
		}
	}
	if m.EpochId != 0 {
		n += 2 + sovEpochGroupData(uint64(m.EpochId))
	}
	if m.ModelSnapshot != nil {
		l = m.ModelSnapshot.Size()
		n += 2 + l + sovEpochGroupData(uint64(l))
	}
	if m.TotalThroughput != 0 {
		n += 2 + sovEpochGroupData(uint64(m.TotalThroughput))
	}
	return n
}

func (m *ValidationWeight) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MemberAddress)
	if l > 0 {
		n += 1 + l + sovEpochGroupData(uint64(l))
	}
	if m.Weight != 0 {
		n += 1 + sovEpochGroupData(uint64(m.Weight))
	}
	if m.Reputation != 0 {
		n += 1 + sovEpochGroupData(uint64(m.Reputation))
	}
	if len(m.MlNodes) > 0 {
		for _, e := range m.MlNodes {
			l = e.Size()
			n += 1 + l + sovEpochGroupData(uint64(l))
		}
	}
	return n
}

func (m *SeedSignature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MemberAddress)
	if l > 0 {
		n += 1 + l + sovEpochGroupData(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovEpochGroupData(uint64(l))
	}
	return n
}

func (m *MLNodeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovEpochGroupData(uint64(l))
	}
	if m.Throughput != 0 {
		n += 1 + sovEpochGroupData(uint64(m.Throughput))
	}
	if m.PocWeight != 0 {
		n += 1 + sovEpochGroupData(uint64(m.PocWeight))
	}
	if len(m.TimeslotAllocation) > 0 {
		n += 1 + sovEpochGroupData(uint64(len(m.TimeslotAllocation))) + len(m.TimeslotAllocation)*1
	}
	return n
}

func sovEpochGroupData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEpochGroupData(x uint64) (n int) {
	return sovEpochGroupData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EpochGroupData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEpochGroupData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EpochGroupData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EpochGroupData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PocStartBlockHeight", wireType)
			}
			m.PocStartBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochGroupData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PocStartBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochGroupId", wireType)
			}
			m.EpochGroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochGroupData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochGroupId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochGroupData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEpochGroupData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEpochGroupData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochPolicy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveBlockHeight", wireType)
			}
			m.EffectiveBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochGroupData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EffectiveBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastBlockHeight", wireType)
			}
			m.LastBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochGroupData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberSeedSignatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochGroupData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEpochGroupData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEpochGroupData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberSeedSignatures = append(m.MemberSeedSignatures, &SeedSignature{})
			if err := m.MemberSeedSignatures[len(m.MemberSeedSignatures)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationWeights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochGroupData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEpochGroupData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEpochGroupData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidationWeights = append(m.ValidationWeights, &ValidationWeight{})
			if err := m.ValidationWeights[len(m.ValidationWeights)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitOfComputePrice", wireType)
			}
			m.UnitOfComputePrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochGroupData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnitOfComputePrice |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfRequests", wireType)
			}
			m.NumberOfRequests = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochGroupData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberOfRequests |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousEpochRequests", wireType)
			}
			m.PreviousEpochRequests = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochGroupData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreviousEpochRequests |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochGroupData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEpochGroupData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEpochGroupData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ValidationParams == nil {
				m.ValidationParams = &ValidationParams{}
			}
			if err := m.ValidationParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalWeight", wireType)
			}
			m.TotalWeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochGroupData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalWeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochGroupData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEpochGroupData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEpochGroupData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubGroupModels", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochGroupData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEpochGroupData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEpochGroupData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubGroupModels = append(m.SubGroupModels, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochId", wireType)
			}
			m.EpochId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochGroupData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelSnapshot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochGroupData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEpochGroupData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEpochGroupData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ModelSnapshot == nil {
				m.ModelSnapshot = &Model{}
			}
			if err := m.ModelSnapshot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalThroughput", wireType)
			}
			m.TotalThroughput = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochGroupData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalThroughput |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEpochGroupData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEpochGroupData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidationWeight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEpochGroupData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidationWeight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidationWeight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochGroupData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEpochGroupData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEpochGroupData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochGroupData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reputation", wireType)
			}
			m.Reputation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochGroupData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reputation |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MlNodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochGroupData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEpochGroupData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEpochGroupData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MlNodes = append(m.MlNodes, &MLNodeInfo{})
			if err := m.MlNodes[len(m.MlNodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEpochGroupData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEpochGroupData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeedSignature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEpochGroupData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeedSignature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeedSignature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochGroupData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEpochGroupData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEpochGroupData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochGroupData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEpochGroupData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEpochGroupData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEpochGroupData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEpochGroupData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MLNodeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEpochGroupData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MLNodeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MLNodeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochGroupData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEpochGroupData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEpochGroupData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Throughput", wireType)
			}
			m.Throughput = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochGroupData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Throughput |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PocWeight", wireType)
			}
			m.PocWeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochGroupData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PocWeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEpochGroupData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TimeslotAllocation = append(m.TimeslotAllocation, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEpochGroupData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEpochGroupData
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthEpochGroupData
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen
				if elementCount != 0 && len(m.TimeslotAllocation) == 0 {
					m.TimeslotAllocation = make([]bool, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEpochGroupData
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TimeslotAllocation = append(m.TimeslotAllocation, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeslotAllocation", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEpochGroupData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEpochGroupData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEpochGroupData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEpochGroupData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEpochGroupData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEpochGroupData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEpochGroupData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEpochGroupData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEpochGroupData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEpochGroupData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEpochGroupData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEpochGroupData = fmt.Errorf("proto: unexpected end of group")
)

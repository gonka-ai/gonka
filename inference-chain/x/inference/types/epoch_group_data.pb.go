// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: inference/inference/epoch_group_data.proto

package types

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EpochGroupData struct {
	PocStartBlockHeight  uint64              `protobuf:"varint,1,opt,name=pocStartBlockHeight,proto3" json:"pocStartBlockHeight,omitempty"`
	EpochGroupId         uint64              `protobuf:"varint,2,opt,name=epochGroupId,proto3" json:"epochGroupId,omitempty"`
	EpochPolicy          string              `protobuf:"bytes,3,opt,name=epochPolicy,proto3" json:"epochPolicy,omitempty"`
	EffectiveBlockHeight uint64              `protobuf:"varint,4,opt,name=effectiveBlockHeight,proto3" json:"effectiveBlockHeight,omitempty"`
	LastBlockHeight      uint64              `protobuf:"varint,5,opt,name=lastBlockHeight,proto3" json:"lastBlockHeight,omitempty"`
	MemberSeedSignatures []*SeedSignature    `protobuf:"bytes,6,rep,name=memberSeedSignatures,proto3" json:"memberSeedSignatures,omitempty"`
	FinishedInferences   []*InferenceDetail  `protobuf:"bytes,7,rep,name=finishedInferences,proto3" json:"finishedInferences,omitempty"`
	ValidationWeights    []*ValidationWeight `protobuf:"bytes,8,rep,name=validationWeights,proto3" json:"validationWeights,omitempty"`
	UnitOfComputePrice   uint64              `protobuf:"varint,9,opt,name=unitOfComputePrice,proto3" json:"unitOfComputePrice,omitempty"`
}

func (m *EpochGroupData) Reset()         { *m = EpochGroupData{} }
func (m *EpochGroupData) String() string { return proto.CompactTextString(m) }
func (*EpochGroupData) ProtoMessage()    {}
func (*EpochGroupData) Descriptor() ([]byte, []int) {
	return fileDescriptor_47040406f6377eb3, []int{0}
}
func (m *EpochGroupData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EpochGroupData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EpochGroupData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EpochGroupData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochGroupData.Merge(m, src)
}
func (m *EpochGroupData) XXX_Size() int {
	return m.Size()
}
func (m *EpochGroupData) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochGroupData.DiscardUnknown(m)
}

var xxx_messageInfo_EpochGroupData proto.InternalMessageInfo

func (m *EpochGroupData) GetPocStartBlockHeight() uint64 {
	if m != nil {
		return m.PocStartBlockHeight
	}
	return 0
}

func (m *EpochGroupData) GetEpochGroupId() uint64 {
	if m != nil {
		return m.EpochGroupId
	}
	return 0
}

func (m *EpochGroupData) GetEpochPolicy() string {
	if m != nil {
		return m.EpochPolicy
	}
	return ""
}

func (m *EpochGroupData) GetEffectiveBlockHeight() uint64 {
	if m != nil {
		return m.EffectiveBlockHeight
	}
	return 0
}

func (m *EpochGroupData) GetLastBlockHeight() uint64 {
	if m != nil {
		return m.LastBlockHeight
	}
	return 0
}

func (m *EpochGroupData) GetMemberSeedSignatures() []*SeedSignature {
	if m != nil {
		return m.MemberSeedSignatures
	}
	return nil
}

func (m *EpochGroupData) GetFinishedInferences() []*InferenceDetail {
	if m != nil {
		return m.FinishedInferences
	}
	return nil
}

func (m *EpochGroupData) GetValidationWeights() []*ValidationWeight {
	if m != nil {
		return m.ValidationWeights
	}
	return nil
}

func (m *EpochGroupData) GetUnitOfComputePrice() uint64 {
	if m != nil {
		return m.UnitOfComputePrice
	}
	return 0
}

type InferenceDetail struct {
	InferenceId        string  `protobuf:"bytes,1,opt,name=inferenceId,proto3" json:"inferenceId,omitempty"`
	Executor           string  `protobuf:"bytes,2,opt,name=executor,proto3" json:"executor,omitempty"`
	ExecutorReputation float32 `protobuf:"fixed32,3,opt,name=executorReputation,proto3" json:"executorReputation,omitempty"`
}

func (m *InferenceDetail) Reset()         { *m = InferenceDetail{} }
func (m *InferenceDetail) String() string { return proto.CompactTextString(m) }
func (*InferenceDetail) ProtoMessage()    {}
func (*InferenceDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_47040406f6377eb3, []int{1}
}
func (m *InferenceDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InferenceDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InferenceDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InferenceDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InferenceDetail.Merge(m, src)
}
func (m *InferenceDetail) XXX_Size() int {
	return m.Size()
}
func (m *InferenceDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_InferenceDetail.DiscardUnknown(m)
}

var xxx_messageInfo_InferenceDetail proto.InternalMessageInfo

func (m *InferenceDetail) GetInferenceId() string {
	if m != nil {
		return m.InferenceId
	}
	return ""
}

func (m *InferenceDetail) GetExecutor() string {
	if m != nil {
		return m.Executor
	}
	return ""
}

func (m *InferenceDetail) GetExecutorReputation() float32 {
	if m != nil {
		return m.ExecutorReputation
	}
	return 0
}

type ValidationWeight struct {
	MemberAddress string `protobuf:"bytes,1,opt,name=memberAddress,proto3" json:"memberAddress,omitempty"`
	Weight        int64  `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (m *ValidationWeight) Reset()         { *m = ValidationWeight{} }
func (m *ValidationWeight) String() string { return proto.CompactTextString(m) }
func (*ValidationWeight) ProtoMessage()    {}
func (*ValidationWeight) Descriptor() ([]byte, []int) {
	return fileDescriptor_47040406f6377eb3, []int{2}
}
func (m *ValidationWeight) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidationWeight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidationWeight.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidationWeight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidationWeight.Merge(m, src)
}
func (m *ValidationWeight) XXX_Size() int {
	return m.Size()
}
func (m *ValidationWeight) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidationWeight.DiscardUnknown(m)
}

var xxx_messageInfo_ValidationWeight proto.InternalMessageInfo

func (m *ValidationWeight) GetMemberAddress() string {
	if m != nil {
		return m.MemberAddress
	}
	return ""
}

func (m *ValidationWeight) GetWeight() int64 {
	if m != nil {
		return m.Weight
	}
	return 0
}

type SeedSignature struct {
	MemberAddress string `protobuf:"bytes,1,opt,name=memberAddress,proto3" json:"memberAddress,omitempty"`
	Signature     string `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *SeedSignature) Reset()         { *m = SeedSignature{} }
func (m *SeedSignature) String() string { return proto.CompactTextString(m) }
func (*SeedSignature) ProtoMessage()    {}
func (*SeedSignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_47040406f6377eb3, []int{3}
}
func (m *SeedSignature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeedSignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeedSignature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeedSignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeedSignature.Merge(m, src)
}
func (m *SeedSignature) XXX_Size() int {
	return m.Size()
}
func (m *SeedSignature) XXX_DiscardUnknown() {
	xxx_messageInfo_SeedSignature.DiscardUnknown(m)
}

var xxx_messageInfo_SeedSignature proto.InternalMessageInfo

func (m *SeedSignature) GetMemberAddress() string {
	if m != nil {
		return m.MemberAddress
	}
	return ""
}

func (m *SeedSignature) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func init() {
	proto.RegisterType((*EpochGroupData)(nil), "inference.inference.EpochGroupData")
	proto.RegisterType((*InferenceDetail)(nil), "inference.inference.InferenceDetail")
	proto.RegisterType((*ValidationWeight)(nil), "inference.inference.ValidationWeight")
	proto.RegisterType((*SeedSignature)(nil), "inference.inference.SeedSignature")
}

func init() {
	proto.RegisterFile("inference/inference/epoch_group_data.proto", fileDescriptor_47040406f6377eb3)
}

var fileDescriptor_47040406f6377eb3 = []byte{
	// 473 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x8d, 0x9b, 0x10, 0xea, 0x29, 0xa5, 0xb0, 0xad, 0x90, 0x85, 0x90, 0x15, 0x59, 0x45, 0x8a,
	0x38, 0xb8, 0xa8, 0x88, 0x0f, 0xa0, 0x14, 0x41, 0x4e, 0x8d, 0xd6, 0xa8, 0x48, 0x5c, 0xaa, 0xcd,
	0x7a, 0x9c, 0xac, 0x70, 0xbc, 0xd6, 0xee, 0xba, 0xb4, 0x27, 0x7e, 0x81, 0x2b, 0x7f, 0xc4, 0xb1,
	0x47, 0x8e, 0x28, 0xf9, 0x11, 0xe4, 0x6d, 0xe2, 0xc6, 0xc6, 0x87, 0xde, 0x66, 0xdf, 0xbc, 0x79,
	0xfb, 0x66, 0x67, 0x16, 0x5e, 0x89, 0x2c, 0x41, 0x85, 0x19, 0xc7, 0xa3, 0xbb, 0x08, 0x73, 0xc9,
	0x67, 0x17, 0x53, 0x25, 0x8b, 0xfc, 0x22, 0x66, 0x86, 0x85, 0xb9, 0x92, 0x46, 0x92, 0xfd, 0x8a,
	0x11, 0x56, 0x51, 0xf0, 0xab, 0x07, 0x8f, 0x3f, 0x94, 0xfc, 0x8f, 0x25, 0xfd, 0x94, 0x19, 0x46,
	0x5e, 0xc3, 0x7e, 0x2e, 0x79, 0x64, 0x98, 0x32, 0x27, 0xa9, 0xe4, 0xdf, 0x3e, 0xa1, 0x98, 0xce,
	0x8c, 0xe7, 0x0c, 0x9c, 0x61, 0x8f, 0xb6, 0xa5, 0x48, 0x00, 0x8f, 0xb0, 0xd2, 0x18, 0xc5, 0xde,
	0x96, 0xa5, 0xd6, 0x30, 0x32, 0x80, 0x1d, 0x7b, 0x1e, 0xcb, 0x54, 0xf0, 0x6b, 0xaf, 0x3b, 0x70,
	0x86, 0x2e, 0xdd, 0x84, 0xc8, 0x31, 0x1c, 0x60, 0x92, 0x20, 0x37, 0xe2, 0x12, 0x37, 0x2f, 0xee,
	0x59, 0xb5, 0xd6, 0x1c, 0x19, 0xc2, 0x5e, 0xca, 0x74, 0xcd, 0xe7, 0x03, 0x4b, 0x6f, 0xc2, 0xe4,
	0x1c, 0x0e, 0xe6, 0x38, 0x9f, 0xa0, 0x8a, 0x10, 0xe3, 0x48, 0x4c, 0x33, 0x66, 0x0a, 0x85, 0xda,
	0xeb, 0x0f, 0xba, 0xc3, 0x9d, 0xe3, 0x20, 0x6c, 0x79, 0x9c, 0xb0, 0x46, 0xa5, 0xad, 0xf5, 0xe4,
	0x33, 0x90, 0x44, 0x64, 0x42, 0xcf, 0x30, 0x1e, 0xad, 0x0b, 0xb5, 0xf7, 0xd0, 0xaa, 0x1e, 0xb6,
	0xaa, 0x56, 0xb4, 0x53, 0x34, 0x4c, 0xa4, 0xb4, 0xa5, 0x9e, 0x44, 0xf0, 0xf4, 0x92, 0xa5, 0x22,
	0x66, 0x46, 0xc8, 0xec, 0x8b, 0xed, 0x40, 0x7b, 0xdb, 0x56, 0xf4, 0x65, 0xab, 0xe8, 0x79, 0x83,
	0x4d, 0xff, 0xaf, 0x27, 0x21, 0x90, 0x22, 0x13, 0xe6, 0x2c, 0x79, 0x2f, 0xe7, 0x79, 0x61, 0x70,
	0xac, 0x04, 0x47, 0xcf, 0xb5, 0xef, 0xd5, 0x92, 0x09, 0x7e, 0xc0, 0x5e, 0xc3, 0x6b, 0x39, 0xc5,
	0xea, 0xce, 0x51, 0x6c, 0x77, 0xc2, 0xa5, 0x9b, 0x10, 0x79, 0x0e, 0xdb, 0x78, 0x85, 0xbc, 0x30,
	0x52, 0xd9, 0x3d, 0x70, 0x69, 0x75, 0x2e, 0x0d, 0xac, 0x63, 0x8a, 0x79, 0x61, 0xac, 0x3b, 0xbb,
	0x0a, 0x5b, 0xb4, 0x25, 0x13, 0x8c, 0xe1, 0x49, 0xb3, 0x2f, 0x72, 0x08, 0xbb, 0xb7, 0x73, 0x78,
	0x17, 0xc7, 0x0a, 0xb5, 0x5e, 0x79, 0xa8, 0x83, 0xe4, 0x19, 0xf4, 0xbf, 0xdf, 0xae, 0x43, 0xe9,
	0xa1, 0x4b, 0x57, 0xa7, 0x20, 0x82, 0xdd, 0xda, 0xfc, 0xee, 0x29, 0xf7, 0x02, 0x5c, 0xbd, 0x2e,
	0x59, 0x75, 0x75, 0x07, 0x9c, 0x9c, 0xfd, 0x5e, 0xf8, 0xce, 0xcd, 0xc2, 0x77, 0xfe, 0x2e, 0x7c,
	0xe7, 0xe7, 0xd2, 0xef, 0xdc, 0x2c, 0xfd, 0xce, 0x9f, 0xa5, 0xdf, 0xf9, 0xfa, 0x76, 0x2a, 0xcc,
	0xac, 0x98, 0x84, 0x5c, 0xce, 0x8f, 0x72, 0x25, 0xe3, 0x82, 0x1b, 0xcd, 0x45, 0xe3, 0xbb, 0x5e,
	0x6d, 0xc4, 0xe6, 0x3a, 0x47, 0x3d, 0xe9, 0xdb, 0x0f, 0xfb, 0xe6, 0x5f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x29, 0x28, 0x75, 0x43, 0xde, 0x03, 0x00, 0x00,
}

func (m *EpochGroupData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EpochGroupData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EpochGroupData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UnitOfComputePrice != 0 {
		i = encodeVarintEpochGroupData(dAtA, i, uint64(m.UnitOfComputePrice))
		i--
		dAtA[i] = 0x48
	}
	if len(m.ValidationWeights) > 0 {
		for iNdEx := len(m.ValidationWeights) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValidationWeights[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEpochGroupData(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.FinishedInferences) > 0 {
		for iNdEx := len(m.FinishedInferences) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FinishedInferences[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEpochGroupData(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.MemberSeedSignatures) > 0 {
		for iNdEx := len(m.MemberSeedSignatures) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MemberSeedSignatures[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEpochGroupData(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.LastBlockHeight != 0 {
		i = encodeVarintEpochGroupData(dAtA, i, uint64(m.LastBlockHeight))
		i--
		dAtA[i] = 0x28
	}
	if m.EffectiveBlockHeight != 0 {
		i = encodeVarintEpochGroupData(dAtA, i, uint64(m.EffectiveBlockHeight))
		i--
		dAtA[i] = 0x20
	}
	if len(m.EpochPolicy) > 0 {
		i -= len(m.EpochPolicy)
		copy(dAtA[i:], m.EpochPolicy)
		i = encodeVarintEpochGroupData(dAtA, i, uint64(len(m.EpochPolicy)))
		i--
		dAtA[i] = 0x1a
	}
	if m.EpochGroupId != 0 {
		i = encodeVarintEpochGroupData(dAtA, i, uint64(m.EpochGroupId))
		i--
		dAtA[i] = 0x10
	}
	if m.PocStartBlockHeight != 0 {
		i = encodeVarintEpochGroupData(dAtA, i, uint64(m.PocStartBlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InferenceDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InferenceDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InferenceDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExecutorReputation != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.ExecutorReputation))))
		i--
		dAtA[i] = 0x1d
	}
	if len(m.Executor) > 0 {
		i -= len(m.Executor)
		copy(dAtA[i:], m.Executor)
		i = encodeVarintEpochGroupData(dAtA, i, uint64(len(m.Executor)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.InferenceId) > 0 {
		i -= len(m.InferenceId)
		copy(dAtA[i:], m.InferenceId)
		i = encodeVarintEpochGroupData(dAtA, i, uint64(len(m.InferenceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidationWeight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidationWeight) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidationWeight) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Weight != 0 {
		i = encodeVarintEpochGroupData(dAtA, i, uint64(m.Weight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.MemberAddress) > 0 {
		i -= len(m.MemberAddress)
		copy(dAtA[i:], m.MemberAddress)
		i = encodeVarintEpochGroupData(dAtA, i, uint64(len(m.MemberAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SeedSignature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeedSignature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeedSignature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintEpochGroupData(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MemberAddress) > 0 {
		i -= len(m.MemberAddress)
		copy(dAtA[i:], m.MemberAddress)
		i = encodeVarintEpochGroupData(dAtA, i, uint64(len(m.MemberAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEpochGroupData(dAtA []byte, offset int, v uint64) int {
	offset -= sovEpochGroupData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EpochGroupData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PocStartBlockHeight != 0 {
		n += 1 + sovEpochGroupData(uint64(m.PocStartBlockHeight))
	}
	if m.EpochGroupId != 0 {
		n += 1 + sovEpochGroupData(uint64(m.EpochGroupId))
	}
	l = len(m.EpochPolicy)
	if l > 0 {
		n += 1 + l + sovEpochGroupData(uint64(l))
	}
	if m.EffectiveBlockHeight != 0 {
		n += 1 + sovEpochGroupData(uint64(m.EffectiveBlockHeight))
	}
	if m.LastBlockHeight != 0 {
		n += 1 + sovEpochGroupData(uint64(m.LastBlockHeight))
	}
	if len(m.MemberSeedSignatures) > 0 {
		for _, e := range m.MemberSeedSignatures {
			l = e.Size()
			n += 1 + l + sovEpochGroupData(uint64(l))
		}
	}
	if len(m.FinishedInferences) > 0 {
		for _, e := range m.FinishedInferences {
			l = e.Size()
			n += 1 + l + sovEpochGroupData(uint64(l))
		}
	}
	if len(m.ValidationWeights) > 0 {
		for _, e := range m.ValidationWeights {
			l = e.Size()
			n += 1 + l + sovEpochGroupData(uint64(l))
		}
	}
	if m.UnitOfComputePrice != 0 {
		n += 1 + sovEpochGroupData(uint64(m.UnitOfComputePrice))
	}
	return n
}

func (m *InferenceDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InferenceId)
	if l > 0 {
		n += 1 + l + sovEpochGroupData(uint64(l))
	}
	l = len(m.Executor)
	if l > 0 {
		n += 1 + l + sovEpochGroupData(uint64(l))
	}
	if m.ExecutorReputation != 0 {
		n += 5
	}
	return n
}

func (m *ValidationWeight) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MemberAddress)
	if l > 0 {
		n += 1 + l + sovEpochGroupData(uint64(l))
	}
	if m.Weight != 0 {
		n += 1 + sovEpochGroupData(uint64(m.Weight))
	}
	return n
}

func (m *SeedSignature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MemberAddress)
	if l > 0 {
		n += 1 + l + sovEpochGroupData(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovEpochGroupData(uint64(l))
	}
	return n
}

func sovEpochGroupData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEpochGroupData(x uint64) (n int) {
	return sovEpochGroupData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EpochGroupData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEpochGroupData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EpochGroupData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EpochGroupData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PocStartBlockHeight", wireType)
			}
			m.PocStartBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochGroupData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PocStartBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochGroupId", wireType)
			}
			m.EpochGroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochGroupData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochGroupId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochGroupData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEpochGroupData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEpochGroupData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochPolicy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveBlockHeight", wireType)
			}
			m.EffectiveBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochGroupData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EffectiveBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastBlockHeight", wireType)
			}
			m.LastBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochGroupData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberSeedSignatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochGroupData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEpochGroupData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEpochGroupData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberSeedSignatures = append(m.MemberSeedSignatures, &SeedSignature{})
			if err := m.MemberSeedSignatures[len(m.MemberSeedSignatures)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishedInferences", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochGroupData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEpochGroupData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEpochGroupData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FinishedInferences = append(m.FinishedInferences, &InferenceDetail{})
			if err := m.FinishedInferences[len(m.FinishedInferences)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationWeights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochGroupData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEpochGroupData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEpochGroupData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidationWeights = append(m.ValidationWeights, &ValidationWeight{})
			if err := m.ValidationWeights[len(m.ValidationWeights)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitOfComputePrice", wireType)
			}
			m.UnitOfComputePrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochGroupData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnitOfComputePrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEpochGroupData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEpochGroupData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InferenceDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEpochGroupData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InferenceDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InferenceDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InferenceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochGroupData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEpochGroupData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEpochGroupData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InferenceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochGroupData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEpochGroupData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEpochGroupData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Executor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutorReputation", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.ExecutorReputation = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipEpochGroupData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEpochGroupData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidationWeight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEpochGroupData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidationWeight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidationWeight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochGroupData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEpochGroupData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEpochGroupData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochGroupData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEpochGroupData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEpochGroupData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeedSignature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEpochGroupData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeedSignature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeedSignature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochGroupData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEpochGroupData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEpochGroupData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochGroupData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEpochGroupData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEpochGroupData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEpochGroupData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEpochGroupData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEpochGroupData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEpochGroupData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEpochGroupData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEpochGroupData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEpochGroupData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEpochGroupData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEpochGroupData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEpochGroupData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEpochGroupData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEpochGroupData = fmt.Errorf("proto: unexpected end of group")
)

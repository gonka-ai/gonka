// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: inference/inference/inference.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type InferenceStatus int32

const (
	InferenceStatus_STARTED     InferenceStatus = 0
	InferenceStatus_FINISHED    InferenceStatus = 1
	InferenceStatus_VALIDATED   InferenceStatus = 2
	InferenceStatus_INVALIDATED InferenceStatus = 3
	InferenceStatus_VOTING      InferenceStatus = 4
	InferenceStatus_EXPIRED     InferenceStatus = 5
)

var InferenceStatus_name = map[int32]string{
	0: "STARTED",
	1: "FINISHED",
	2: "VALIDATED",
	3: "INVALIDATED",
	4: "VOTING",
	5: "EXPIRED",
}

var InferenceStatus_value = map[string]int32{
	"STARTED":     0,
	"FINISHED":    1,
	"VALIDATED":   2,
	"INVALIDATED": 3,
	"VOTING":      4,
	"EXPIRED":     5,
}

func (x InferenceStatus) String() string {
	return proto.EnumName(InferenceStatus_name, int32(x))
}

func (InferenceStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ce060d6da7916311, []int{0}
}

type ProposalDetails struct {
	ReValidatePolicyId uint64 `protobuf:"varint,1,opt,name=re_validate_policy_id,json=reValidatePolicyId,proto3" json:"re_validate_policy_id,omitempty"`
	InvalidatePolicyId uint64 `protobuf:"varint,2,opt,name=invalidate_policy_id,json=invalidatePolicyId,proto3" json:"invalidate_policy_id,omitempty"`
	PolicyAddress      string `protobuf:"bytes,3,opt,name=policy_address,json=policyAddress,proto3" json:"policy_address,omitempty"`
}

func (m *ProposalDetails) Reset()         { *m = ProposalDetails{} }
func (m *ProposalDetails) String() string { return proto.CompactTextString(m) }
func (*ProposalDetails) ProtoMessage()    {}
func (*ProposalDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce060d6da7916311, []int{0}
}
func (m *ProposalDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalDetails.Merge(m, src)
}
func (m *ProposalDetails) XXX_Size() int {
	return m.Size()
}
func (m *ProposalDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalDetails.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalDetails proto.InternalMessageInfo

func (m *ProposalDetails) GetReValidatePolicyId() uint64 {
	if m != nil {
		return m.ReValidatePolicyId
	}
	return 0
}

func (m *ProposalDetails) GetInvalidatePolicyId() uint64 {
	if m != nil {
		return m.InvalidatePolicyId
	}
	return 0
}

func (m *ProposalDetails) GetPolicyAddress() string {
	if m != nil {
		return m.PolicyAddress
	}
	return ""
}

type Inference struct {
	Index                    string           `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	InferenceId              string           `protobuf:"bytes,2,opt,name=inference_id,json=inferenceId,proto3" json:"inference_id,omitempty"`
	PromptHash               string           `protobuf:"bytes,3,opt,name=prompt_hash,json=promptHash,proto3" json:"prompt_hash,omitempty"`
	PromptPayload            string           `protobuf:"bytes,4,opt,name=prompt_payload,json=promptPayload,proto3" json:"prompt_payload,omitempty"`
	ResponseHash             string           `protobuf:"bytes,5,opt,name=response_hash,json=responseHash,proto3" json:"response_hash,omitempty"`
	ResponsePayload          string           `protobuf:"bytes,6,opt,name=response_payload,json=responsePayload,proto3" json:"response_payload,omitempty"`
	PromptTokenCount         uint64           `protobuf:"varint,7,opt,name=prompt_token_count,json=promptTokenCount,proto3" json:"prompt_token_count,omitempty"`
	CompletionTokenCount     uint64           `protobuf:"varint,8,opt,name=completion_token_count,json=completionTokenCount,proto3" json:"completion_token_count,omitempty"`
	RequestedBy              string           `protobuf:"bytes,9,opt,name=requested_by,json=requestedBy,proto3" json:"requested_by,omitempty"`
	ExecutedBy               string           `protobuf:"bytes,10,opt,name=executed_by,json=executedBy,proto3" json:"executed_by,omitempty"`
	Status                   InferenceStatus  `protobuf:"varint,11,opt,name=status,proto3,enum=inference.inference.InferenceStatus" json:"status,omitempty"`
	StartBlockHeight         int64            `protobuf:"varint,12,opt,name=start_block_height,json=startBlockHeight,proto3" json:"start_block_height,omitempty"`
	EndBlockHeight           int64            `protobuf:"varint,13,opt,name=end_block_height,json=endBlockHeight,proto3" json:"end_block_height,omitempty"`
	StartBlockTimestamp      int64            `protobuf:"varint,14,opt,name=start_block_timestamp,json=startBlockTimestamp,proto3" json:"start_block_timestamp,omitempty"`
	EndBlockTimestamp        int64            `protobuf:"varint,15,opt,name=end_block_timestamp,json=endBlockTimestamp,proto3" json:"end_block_timestamp,omitempty"`
	Model                    string           `protobuf:"bytes,16,opt,name=model,proto3" json:"model,omitempty"`
	MaxTokens                uint64           `protobuf:"varint,17,opt,name=max_tokens,json=maxTokens,proto3" json:"max_tokens,omitempty"`
	ActualCost               int64            `protobuf:"varint,18,opt,name=actual_cost,json=actualCost,proto3" json:"actual_cost,omitempty"`
	EscrowAmount             int64            `protobuf:"varint,19,opt,name=escrow_amount,json=escrowAmount,proto3" json:"escrow_amount,omitempty"`
	ProposalDetails          *ProposalDetails `protobuf:"bytes,20,opt,name=proposal_details,json=proposalDetails,proto3" json:"proposal_details,omitempty"`
	EpochGroupId             uint64           `protobuf:"varint,21,opt,name=epoch_group_id,json=epochGroupId,proto3" json:"epoch_group_id,omitempty"`
	AssignedTo               string           `protobuf:"bytes,22,opt,name=assigned_to,json=assignedTo,proto3" json:"assigned_to,omitempty"`
	ValidatedBy              []string         `protobuf:"bytes,23,rep,name=validated_by,json=validatedBy,proto3" json:"validated_by,omitempty"`
	NodeVersion              string           `protobuf:"bytes,24,opt,name=node_version,json=nodeVersion,proto3" json:"node_version,omitempty"`
	EpochId                  uint64           `protobuf:"varint,25,opt,name=epoch_id,json=epochId,proto3" json:"epoch_id,omitempty"`
	EpochPocStartBlockHeight uint64           `protobuf:"varint,26,opt,name=epoch_poc_start_block_height,json=epochPocStartBlockHeight,proto3" json:"epoch_poc_start_block_height,omitempty"`
	TransferredBy            string           `protobuf:"bytes,27,opt,name=transferred_by,json=transferredBy,proto3" json:"transferred_by,omitempty"`
	RequestTimestamp         int64            `protobuf:"varint,28,opt,name=request_timestamp,json=requestTimestamp,proto3" json:"request_timestamp,omitempty"`
	TransferSignature        string           `protobuf:"bytes,29,opt,name=transfer_signature,json=transferSignature,proto3" json:"transfer_signature,omitempty"`
	ExecutionSignature       string           `protobuf:"bytes,30,opt,name=execution_signature,json=executionSignature,proto3" json:"execution_signature,omitempty"`
	OriginalPrompt           string           `protobuf:"bytes,31,opt,name=original_prompt,json=originalPrompt,proto3" json:"original_prompt,omitempty"`
	PerTokenPrice            uint64           `protobuf:"varint,32,opt,name=per_token_price,json=perTokenPrice,proto3" json:"per_token_price,omitempty"`
}

func (m *Inference) Reset()         { *m = Inference{} }
func (m *Inference) String() string { return proto.CompactTextString(m) }
func (*Inference) ProtoMessage()    {}
func (*Inference) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce060d6da7916311, []int{1}
}
func (m *Inference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Inference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Inference.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Inference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Inference.Merge(m, src)
}
func (m *Inference) XXX_Size() int {
	return m.Size()
}
func (m *Inference) XXX_DiscardUnknown() {
	xxx_messageInfo_Inference.DiscardUnknown(m)
}

var xxx_messageInfo_Inference proto.InternalMessageInfo

func (m *Inference) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *Inference) GetInferenceId() string {
	if m != nil {
		return m.InferenceId
	}
	return ""
}

func (m *Inference) GetPromptHash() string {
	if m != nil {
		return m.PromptHash
	}
	return ""
}

func (m *Inference) GetPromptPayload() string {
	if m != nil {
		return m.PromptPayload
	}
	return ""
}

func (m *Inference) GetResponseHash() string {
	if m != nil {
		return m.ResponseHash
	}
	return ""
}

func (m *Inference) GetResponsePayload() string {
	if m != nil {
		return m.ResponsePayload
	}
	return ""
}

func (m *Inference) GetPromptTokenCount() uint64 {
	if m != nil {
		return m.PromptTokenCount
	}
	return 0
}

func (m *Inference) GetCompletionTokenCount() uint64 {
	if m != nil {
		return m.CompletionTokenCount
	}
	return 0
}

func (m *Inference) GetRequestedBy() string {
	if m != nil {
		return m.RequestedBy
	}
	return ""
}

func (m *Inference) GetExecutedBy() string {
	if m != nil {
		return m.ExecutedBy
	}
	return ""
}

func (m *Inference) GetStatus() InferenceStatus {
	if m != nil {
		return m.Status
	}
	return InferenceStatus_STARTED
}

func (m *Inference) GetStartBlockHeight() int64 {
	if m != nil {
		return m.StartBlockHeight
	}
	return 0
}

func (m *Inference) GetEndBlockHeight() int64 {
	if m != nil {
		return m.EndBlockHeight
	}
	return 0
}

func (m *Inference) GetStartBlockTimestamp() int64 {
	if m != nil {
		return m.StartBlockTimestamp
	}
	return 0
}

func (m *Inference) GetEndBlockTimestamp() int64 {
	if m != nil {
		return m.EndBlockTimestamp
	}
	return 0
}

func (m *Inference) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *Inference) GetMaxTokens() uint64 {
	if m != nil {
		return m.MaxTokens
	}
	return 0
}

func (m *Inference) GetActualCost() int64 {
	if m != nil {
		return m.ActualCost
	}
	return 0
}

func (m *Inference) GetEscrowAmount() int64 {
	if m != nil {
		return m.EscrowAmount
	}
	return 0
}

func (m *Inference) GetProposalDetails() *ProposalDetails {
	if m != nil {
		return m.ProposalDetails
	}
	return nil
}

func (m *Inference) GetEpochGroupId() uint64 {
	if m != nil {
		return m.EpochGroupId
	}
	return 0
}

func (m *Inference) GetAssignedTo() string {
	if m != nil {
		return m.AssignedTo
	}
	return ""
}

func (m *Inference) GetValidatedBy() []string {
	if m != nil {
		return m.ValidatedBy
	}
	return nil
}

func (m *Inference) GetNodeVersion() string {
	if m != nil {
		return m.NodeVersion
	}
	return ""
}

func (m *Inference) GetEpochId() uint64 {
	if m != nil {
		return m.EpochId
	}
	return 0
}

func (m *Inference) GetEpochPocStartBlockHeight() uint64 {
	if m != nil {
		return m.EpochPocStartBlockHeight
	}
	return 0
}

func (m *Inference) GetTransferredBy() string {
	if m != nil {
		return m.TransferredBy
	}
	return ""
}

func (m *Inference) GetRequestTimestamp() int64 {
	if m != nil {
		return m.RequestTimestamp
	}
	return 0
}

func (m *Inference) GetTransferSignature() string {
	if m != nil {
		return m.TransferSignature
	}
	return ""
}

func (m *Inference) GetExecutionSignature() string {
	if m != nil {
		return m.ExecutionSignature
	}
	return ""
}

func (m *Inference) GetOriginalPrompt() string {
	if m != nil {
		return m.OriginalPrompt
	}
	return ""
}

func (m *Inference) GetPerTokenPrice() uint64 {
	if m != nil {
		return m.PerTokenPrice
	}
	return 0
}

func init() {
	proto.RegisterEnum("inference.inference.InferenceStatus", InferenceStatus_name, InferenceStatus_value)
	proto.RegisterType((*ProposalDetails)(nil), "inference.inference.ProposalDetails")
	proto.RegisterType((*Inference)(nil), "inference.inference.Inference")
}

func init() {
	proto.RegisterFile("inference/inference/inference.proto", fileDescriptor_ce060d6da7916311)
}

var fileDescriptor_ce060d6da7916311 = []byte{
	// 896 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x55, 0xdb, 0x6e, 0xdb, 0xc6,
	0x16, 0x35, 0xe3, 0xab, 0xb6, 0xae, 0x1e, 0xc9, 0x39, 0x93, 0xd3, 0x44, 0x51, 0x6e, 0xad, 0x7a,
	0x93, 0xdb, 0xb4, 0x7d, 0x2b, 0x0a, 0x48, 0x91, 0x1b, 0x13, 0x28, 0x6c, 0x41, 0x12, 0x8c, 0xa2,
	0x2f, 0xc4, 0x98, 0x9c, 0x48, 0x44, 0x28, 0x0e, 0x3b, 0x33, 0x4a, 0xa5, 0xbf, 0xe8, 0x0f, 0xf4,
	0x3b, 0xfa, 0x0b, 0x7d, 0xcc, 0x63, 0x1f, 0x0b, 0xfb, 0x47, 0x8a, 0xd9, 0xc3, 0x8b, 0x22, 0xb8,
	0x6f, 0xe4, 0x5a, 0x6b, 0xef, 0xd9, 0xdc, 0xb3, 0x16, 0x08, 0xcf, 0xc2, 0xf8, 0x0d, 0x97, 0x3c,
	0xf6, 0xf9, 0xe9, 0x1d, 0x4f, 0xbd, 0x44, 0x0a, 0x2d, 0x48, 0xb3, 0x00, 0xf2, 0xa7, 0xa7, 0x7f,
	0x38, 0x50, 0x1f, 0x49, 0x91, 0x08, 0xc5, 0xa2, 0x21, 0xd7, 0x2c, 0x8c, 0x14, 0xf9, 0x1a, 0x4e,
	0x24, 0xf7, 0xde, 0xb1, 0x28, 0x0c, 0x98, 0xe6, 0x5e, 0x22, 0xa2, 0xd0, 0x5f, 0x7b, 0x61, 0x40,
	0x9d, 0x8e, 0xd3, 0xdd, 0x1b, 0x13, 0xc9, 0xaf, 0x52, 0x6e, 0x84, 0x94, 0x1b, 0x90, 0xaf, 0xa0,
	0x15, 0xc6, 0x77, 0x54, 0xdc, 0xb3, 0x15, 0x05, 0x97, 0x57, 0xbc, 0x80, 0x5a, 0x2a, 0x63, 0x41,
	0x20, 0xb9, 0x52, 0x74, 0xb7, 0xe3, 0x74, 0x4b, 0xe3, 0xaa, 0x45, 0xfb, 0x16, 0x7c, 0xfa, 0x27,
	0x40, 0xc9, 0xcd, 0xa6, 0x25, 0x2d, 0xd8, 0x0f, 0xe3, 0x80, 0xaf, 0x70, 0x92, 0xd2, 0xd8, 0xbe,
	0x90, 0x27, 0x50, 0xc9, 0x3f, 0x28, 0x3b, 0xb4, 0x34, 0x2e, 0xe7, 0x98, 0x1b, 0x90, 0xc7, 0x50,
	0x4e, 0xa4, 0x58, 0x24, 0xda, 0x9b, 0x33, 0x35, 0x4f, 0x8f, 0x02, 0x0b, 0x9d, 0x33, 0x35, 0xc7,
	0x71, 0xac, 0x20, 0x61, 0xeb, 0x48, 0xb0, 0x80, 0xee, 0xa5, 0xe3, 0x20, 0x3a, 0xb2, 0x20, 0x79,
	0x06, 0x55, 0xc9, 0x55, 0x22, 0x62, 0xc5, 0x6d, 0xa7, 0x7d, 0x54, 0x55, 0x32, 0x10, 0x7b, 0x7d,
	0x0a, 0x8d, 0x5c, 0x94, 0x75, 0x3b, 0x40, 0x5d, 0x3d, 0xc3, 0xb3, 0x7e, 0x5f, 0x00, 0x49, 0x8f,
	0xd5, 0xe2, 0x2d, 0x8f, 0x3d, 0x5f, 0x2c, 0x63, 0x4d, 0x0f, 0x71, 0x6b, 0x0d, 0xcb, 0x4c, 0x0d,
	0xf1, 0xca, 0xe0, 0xe4, 0x5b, 0xb8, 0xef, 0x8b, 0x45, 0x12, 0x71, 0x1d, 0x8a, 0xf8, 0x83, 0x8a,
	0x23, 0xac, 0x68, 0x15, 0xec, 0x46, 0xd5, 0x13, 0xa8, 0x48, 0xfe, 0xeb, 0x92, 0x2b, 0xcd, 0x03,
	0xef, 0x7a, 0x4d, 0x4b, 0x76, 0x3d, 0x39, 0x36, 0x58, 0x9b, 0xf5, 0xf0, 0x15, 0xf7, 0x97, 0xa9,
	0x02, 0xec, 0x7a, 0x32, 0x68, 0xb0, 0x26, 0xdf, 0xc3, 0x81, 0xd2, 0x4c, 0x2f, 0x15, 0x2d, 0x77,
	0x9c, 0x6e, 0xed, 0xe5, 0xf3, 0xde, 0x1d, 0x66, 0xea, 0xe5, 0x17, 0x35, 0x41, 0xed, 0x38, 0xad,
	0x31, 0x5f, 0xa9, 0x34, 0x93, 0xda, 0xbb, 0x8e, 0x84, 0xff, 0xd6, 0x9b, 0xf3, 0x70, 0x36, 0xd7,
	0xb4, 0xd2, 0x71, 0xba, 0xbb, 0xe3, 0x06, 0x32, 0x03, 0x43, 0x9c, 0x23, 0x4e, 0xba, 0xd0, 0xe0,
	0x71, 0xf0, 0xa1, 0xb6, 0x8a, 0xda, 0x1a, 0x8f, 0x83, 0x4d, 0xe5, 0x4b, 0x38, 0xd9, 0xec, 0xab,
	0xc3, 0x05, 0x57, 0x9a, 0x2d, 0x12, 0x5a, 0x43, 0x79, 0xb3, 0x68, 0x3d, 0xcd, 0x28, 0xd2, 0x83,
	0x66, 0xd1, 0xbd, 0xa8, 0xa8, 0x63, 0xc5, 0x71, 0x76, 0x40, 0xa1, 0x6f, 0xc1, 0xfe, 0x42, 0x04,
	0x3c, 0xa2, 0x0d, 0x6b, 0x39, 0x7c, 0x21, 0x8f, 0x00, 0x16, 0x6c, 0x65, 0xaf, 0x40, 0xd1, 0x63,
	0xdc, 0x7e, 0x69, 0xc1, 0x56, 0xb8, 0x76, 0x65, 0xf6, 0xc9, 0x7c, 0xbd, 0x64, 0x91, 0xe7, 0x0b,
	0xa5, 0x29, 0xc1, 0xe6, 0x60, 0xa1, 0x57, 0x42, 0x69, 0xe3, 0x23, 0xae, 0x7c, 0x29, 0x7e, 0xf3,
	0xd8, 0x02, 0x2f, 0xb0, 0x89, 0x92, 0x8a, 0x05, 0xfb, 0x88, 0x91, 0x4b, 0x30, 0x16, 0xc0, 0x68,
	0x7a, 0x81, 0xcd, 0x26, 0x6d, 0x75, 0x9c, 0x6e, 0xf9, 0x3f, 0xd6, 0xbf, 0x95, 0xe3, 0x71, 0x3d,
	0xd9, 0x0a, 0xf6, 0x73, 0xa8, 0xf1, 0x44, 0xf8, 0x73, 0x6f, 0x26, 0xc5, 0x32, 0x31, 0x51, 0x39,
	0xc1, 0xc9, 0x2b, 0x88, 0xbe, 0x36, 0xa0, 0xcd, 0x0a, 0x53, 0x2a, 0x9c, 0xc5, 0x3c, 0xf0, 0xb4,
	0xa0, 0xf7, 0xad, 0x19, 0x32, 0x68, 0x2a, 0x8c, 0xa1, 0xb2, 0x38, 0xa3, 0x5d, 0xfe, 0xd7, 0xd9,
	0x35, 0x86, 0xca, 0xb1, 0xc1, 0xda, 0x48, 0x62, 0x11, 0x70, 0xef, 0x1d, 0x97, 0x2a, 0x14, 0x31,
	0xa5, 0xd6, 0x73, 0x06, 0xbb, 0xb2, 0x10, 0x79, 0x00, 0x47, 0x76, 0x98, 0x30, 0xa0, 0x0f, 0x70,
	0x8c, 0x43, 0x7c, 0x77, 0x03, 0xf2, 0x03, 0x3c, 0xb4, 0x54, 0x22, 0x7c, 0xef, 0x0e, 0xe7, 0xfc,
	0x1f, 0xe5, 0x14, 0x35, 0x23, 0xe1, 0x4f, 0xb6, 0x1d, 0xf4, 0x02, 0x6a, 0x5a, 0xb2, 0x58, 0xbd,
	0xe1, 0x52, 0xda, 0x11, 0x3f, 0xb2, 0x61, 0xde, 0x40, 0x07, 0x6b, 0xf2, 0x39, 0x1c, 0xa7, 0x21,
	0xd8, 0x30, 0xc2, 0x43, 0xeb, 0xca, 0x94, 0x28, 0x7c, 0xf0, 0x25, 0x90, 0xac, 0xda, 0x33, 0x9b,
	0x60, 0x7a, 0x29, 0x39, 0x7d, 0x84, 0x7d, 0x8f, 0x33, 0x66, 0x92, 0x11, 0xe4, 0x14, 0x9a, 0x36,
	0x3e, 0x26, 0xa9, 0x85, 0xbe, 0x8d, 0x7a, 0x92, 0x53, 0x45, 0xc1, 0x27, 0x50, 0x17, 0x32, 0x9c,
	0x85, 0x31, 0x8b, 0x3c, 0x1b, 0x7c, 0xfa, 0x18, 0xc5, 0xb5, 0x0c, 0x1e, 0x21, 0x4a, 0x3e, 0x86,
	0x7a, 0xc2, 0x65, 0x9a, 0xfe, 0x44, 0x86, 0x3e, 0xa7, 0x1d, 0xdc, 0x47, 0x35, 0xe1, 0x12, 0xfd,
	0x37, 0x32, 0xe0, 0x67, 0x1c, 0xea, 0x5b, 0x79, 0x24, 0x65, 0x38, 0x9c, 0x4c, 0xfb, 0xe3, 0xe9,
	0xd9, 0xb0, 0xb1, 0x43, 0x2a, 0x70, 0xf4, 0xa3, 0x7b, 0xe1, 0x4e, 0xce, 0xcf, 0x86, 0x0d, 0x87,
	0x54, 0xa1, 0x74, 0xd5, 0xff, 0xc9, 0x1d, 0xf6, 0x0d, 0x79, 0x8f, 0xd4, 0xa1, 0xec, 0x5e, 0x14,
	0xc0, 0x2e, 0x01, 0x38, 0xb8, 0xba, 0x9c, 0xba, 0x17, 0xaf, 0x1b, 0x7b, 0xa6, 0xcd, 0xd9, 0xcf,
	0x23, 0x77, 0x7c, 0x36, 0x6c, 0xec, 0x0f, 0x2e, 0xff, 0xba, 0x69, 0x3b, 0xef, 0x6f, 0xda, 0xce,
	0x3f, 0x37, 0x6d, 0xe7, 0xf7, 0xdb, 0xf6, 0xce, 0xfb, 0xdb, 0xf6, 0xce, 0xdf, 0xb7, 0xed, 0x9d,
	0x5f, 0xbe, 0x9b, 0x85, 0x7a, 0xbe, 0xbc, 0xee, 0xf9, 0x62, 0x71, 0x9a, 0x48, 0x11, 0x2c, 0x7d,
	0xad, 0xfc, 0x70, 0xeb, 0x27, 0xb5, 0xda, 0x78, 0xd6, 0xeb, 0x84, 0xab, 0xeb, 0x03, 0xfc, 0x5b,
	0x7d, 0xf3, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb4, 0x1f, 0x5d, 0xa2, 0xd4, 0x06, 0x00, 0x00,
}

func (m *ProposalDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PolicyAddress) > 0 {
		i -= len(m.PolicyAddress)
		copy(dAtA[i:], m.PolicyAddress)
		i = encodeVarintInference(dAtA, i, uint64(len(m.PolicyAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.InvalidatePolicyId != 0 {
		i = encodeVarintInference(dAtA, i, uint64(m.InvalidatePolicyId))
		i--
		dAtA[i] = 0x10
	}
	if m.ReValidatePolicyId != 0 {
		i = encodeVarintInference(dAtA, i, uint64(m.ReValidatePolicyId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Inference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Inference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Inference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PerTokenPrice != 0 {
		i = encodeVarintInference(dAtA, i, uint64(m.PerTokenPrice))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x80
	}
	if len(m.OriginalPrompt) > 0 {
		i -= len(m.OriginalPrompt)
		copy(dAtA[i:], m.OriginalPrompt)
		i = encodeVarintInference(dAtA, i, uint64(len(m.OriginalPrompt)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	if len(m.ExecutionSignature) > 0 {
		i -= len(m.ExecutionSignature)
		copy(dAtA[i:], m.ExecutionSignature)
		i = encodeVarintInference(dAtA, i, uint64(len(m.ExecutionSignature)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	if len(m.TransferSignature) > 0 {
		i -= len(m.TransferSignature)
		copy(dAtA[i:], m.TransferSignature)
		i = encodeVarintInference(dAtA, i, uint64(len(m.TransferSignature)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	if m.RequestTimestamp != 0 {
		i = encodeVarintInference(dAtA, i, uint64(m.RequestTimestamp))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe0
	}
	if len(m.TransferredBy) > 0 {
		i -= len(m.TransferredBy)
		copy(dAtA[i:], m.TransferredBy)
		i = encodeVarintInference(dAtA, i, uint64(len(m.TransferredBy)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if m.EpochPocStartBlockHeight != 0 {
		i = encodeVarintInference(dAtA, i, uint64(m.EpochPocStartBlockHeight))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if m.EpochId != 0 {
		i = encodeVarintInference(dAtA, i, uint64(m.EpochId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if len(m.NodeVersion) > 0 {
		i -= len(m.NodeVersion)
		copy(dAtA[i:], m.NodeVersion)
		i = encodeVarintInference(dAtA, i, uint64(len(m.NodeVersion)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if len(m.ValidatedBy) > 0 {
		for iNdEx := len(m.ValidatedBy) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ValidatedBy[iNdEx])
			copy(dAtA[i:], m.ValidatedBy[iNdEx])
			i = encodeVarintInference(dAtA, i, uint64(len(m.ValidatedBy[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xba
		}
	}
	if len(m.AssignedTo) > 0 {
		i -= len(m.AssignedTo)
		copy(dAtA[i:], m.AssignedTo)
		i = encodeVarintInference(dAtA, i, uint64(len(m.AssignedTo)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.EpochGroupId != 0 {
		i = encodeVarintInference(dAtA, i, uint64(m.EpochGroupId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.ProposalDetails != nil {
		{
			size, err := m.ProposalDetails.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInference(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.EscrowAmount != 0 {
		i = encodeVarintInference(dAtA, i, uint64(m.EscrowAmount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.ActualCost != 0 {
		i = encodeVarintInference(dAtA, i, uint64(m.ActualCost))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.MaxTokens != 0 {
		i = encodeVarintInference(dAtA, i, uint64(m.MaxTokens))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.Model) > 0 {
		i -= len(m.Model)
		copy(dAtA[i:], m.Model)
		i = encodeVarintInference(dAtA, i, uint64(len(m.Model)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.EndBlockTimestamp != 0 {
		i = encodeVarintInference(dAtA, i, uint64(m.EndBlockTimestamp))
		i--
		dAtA[i] = 0x78
	}
	if m.StartBlockTimestamp != 0 {
		i = encodeVarintInference(dAtA, i, uint64(m.StartBlockTimestamp))
		i--
		dAtA[i] = 0x70
	}
	if m.EndBlockHeight != 0 {
		i = encodeVarintInference(dAtA, i, uint64(m.EndBlockHeight))
		i--
		dAtA[i] = 0x68
	}
	if m.StartBlockHeight != 0 {
		i = encodeVarintInference(dAtA, i, uint64(m.StartBlockHeight))
		i--
		dAtA[i] = 0x60
	}
	if m.Status != 0 {
		i = encodeVarintInference(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x58
	}
	if len(m.ExecutedBy) > 0 {
		i -= len(m.ExecutedBy)
		copy(dAtA[i:], m.ExecutedBy)
		i = encodeVarintInference(dAtA, i, uint64(len(m.ExecutedBy)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.RequestedBy) > 0 {
		i -= len(m.RequestedBy)
		copy(dAtA[i:], m.RequestedBy)
		i = encodeVarintInference(dAtA, i, uint64(len(m.RequestedBy)))
		i--
		dAtA[i] = 0x4a
	}
	if m.CompletionTokenCount != 0 {
		i = encodeVarintInference(dAtA, i, uint64(m.CompletionTokenCount))
		i--
		dAtA[i] = 0x40
	}
	if m.PromptTokenCount != 0 {
		i = encodeVarintInference(dAtA, i, uint64(m.PromptTokenCount))
		i--
		dAtA[i] = 0x38
	}
	if len(m.ResponsePayload) > 0 {
		i -= len(m.ResponsePayload)
		copy(dAtA[i:], m.ResponsePayload)
		i = encodeVarintInference(dAtA, i, uint64(len(m.ResponsePayload)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ResponseHash) > 0 {
		i -= len(m.ResponseHash)
		copy(dAtA[i:], m.ResponseHash)
		i = encodeVarintInference(dAtA, i, uint64(len(m.ResponseHash)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PromptPayload) > 0 {
		i -= len(m.PromptPayload)
		copy(dAtA[i:], m.PromptPayload)
		i = encodeVarintInference(dAtA, i, uint64(len(m.PromptPayload)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PromptHash) > 0 {
		i -= len(m.PromptHash)
		copy(dAtA[i:], m.PromptHash)
		i = encodeVarintInference(dAtA, i, uint64(len(m.PromptHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.InferenceId) > 0 {
		i -= len(m.InferenceId)
		copy(dAtA[i:], m.InferenceId)
		i = encodeVarintInference(dAtA, i, uint64(len(m.InferenceId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintInference(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintInference(dAtA []byte, offset int, v uint64) int {
	offset -= sovInference(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ProposalDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReValidatePolicyId != 0 {
		n += 1 + sovInference(uint64(m.ReValidatePolicyId))
	}
	if m.InvalidatePolicyId != 0 {
		n += 1 + sovInference(uint64(m.InvalidatePolicyId))
	}
	l = len(m.PolicyAddress)
	if l > 0 {
		n += 1 + l + sovInference(uint64(l))
	}
	return n
}

func (m *Inference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovInference(uint64(l))
	}
	l = len(m.InferenceId)
	if l > 0 {
		n += 1 + l + sovInference(uint64(l))
	}
	l = len(m.PromptHash)
	if l > 0 {
		n += 1 + l + sovInference(uint64(l))
	}
	l = len(m.PromptPayload)
	if l > 0 {
		n += 1 + l + sovInference(uint64(l))
	}
	l = len(m.ResponseHash)
	if l > 0 {
		n += 1 + l + sovInference(uint64(l))
	}
	l = len(m.ResponsePayload)
	if l > 0 {
		n += 1 + l + sovInference(uint64(l))
	}
	if m.PromptTokenCount != 0 {
		n += 1 + sovInference(uint64(m.PromptTokenCount))
	}
	if m.CompletionTokenCount != 0 {
		n += 1 + sovInference(uint64(m.CompletionTokenCount))
	}
	l = len(m.RequestedBy)
	if l > 0 {
		n += 1 + l + sovInference(uint64(l))
	}
	l = len(m.ExecutedBy)
	if l > 0 {
		n += 1 + l + sovInference(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovInference(uint64(m.Status))
	}
	if m.StartBlockHeight != 0 {
		n += 1 + sovInference(uint64(m.StartBlockHeight))
	}
	if m.EndBlockHeight != 0 {
		n += 1 + sovInference(uint64(m.EndBlockHeight))
	}
	if m.StartBlockTimestamp != 0 {
		n += 1 + sovInference(uint64(m.StartBlockTimestamp))
	}
	if m.EndBlockTimestamp != 0 {
		n += 1 + sovInference(uint64(m.EndBlockTimestamp))
	}
	l = len(m.Model)
	if l > 0 {
		n += 2 + l + sovInference(uint64(l))
	}
	if m.MaxTokens != 0 {
		n += 2 + sovInference(uint64(m.MaxTokens))
	}
	if m.ActualCost != 0 {
		n += 2 + sovInference(uint64(m.ActualCost))
	}
	if m.EscrowAmount != 0 {
		n += 2 + sovInference(uint64(m.EscrowAmount))
	}
	if m.ProposalDetails != nil {
		l = m.ProposalDetails.Size()
		n += 2 + l + sovInference(uint64(l))
	}
	if m.EpochGroupId != 0 {
		n += 2 + sovInference(uint64(m.EpochGroupId))
	}
	l = len(m.AssignedTo)
	if l > 0 {
		n += 2 + l + sovInference(uint64(l))
	}
	if len(m.ValidatedBy) > 0 {
		for _, s := range m.ValidatedBy {
			l = len(s)
			n += 2 + l + sovInference(uint64(l))
		}
	}
	l = len(m.NodeVersion)
	if l > 0 {
		n += 2 + l + sovInference(uint64(l))
	}
	if m.EpochId != 0 {
		n += 2 + sovInference(uint64(m.EpochId))
	}
	if m.EpochPocStartBlockHeight != 0 {
		n += 2 + sovInference(uint64(m.EpochPocStartBlockHeight))
	}
	l = len(m.TransferredBy)
	if l > 0 {
		n += 2 + l + sovInference(uint64(l))
	}
	if m.RequestTimestamp != 0 {
		n += 2 + sovInference(uint64(m.RequestTimestamp))
	}
	l = len(m.TransferSignature)
	if l > 0 {
		n += 2 + l + sovInference(uint64(l))
	}
	l = len(m.ExecutionSignature)
	if l > 0 {
		n += 2 + l + sovInference(uint64(l))
	}
	l = len(m.OriginalPrompt)
	if l > 0 {
		n += 2 + l + sovInference(uint64(l))
	}
	if m.PerTokenPrice != 0 {
		n += 2 + sovInference(uint64(m.PerTokenPrice))
	}
	return n
}

func sovInference(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozInference(x uint64) (n int) {
	return sovInference(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProposalDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInference
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReValidatePolicyId", wireType)
			}
			m.ReValidatePolicyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReValidatePolicyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidatePolicyId", wireType)
			}
			m.InvalidatePolicyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvalidatePolicyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInference
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInference
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInference(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInference
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Inference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInference
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Inference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Inference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInference
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInference
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InferenceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInference
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInference
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InferenceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromptHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInference
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInference
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PromptHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromptPayload", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInference
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInference
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PromptPayload = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInference
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInference
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponsePayload", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInference
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInference
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponsePayload = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromptTokenCount", wireType)
			}
			m.PromptTokenCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PromptTokenCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletionTokenCount", wireType)
			}
			m.CompletionTokenCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompletionTokenCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInference
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInference
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInference
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInference
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecutedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= InferenceStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartBlockHeight", wireType)
			}
			m.StartBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndBlockHeight", wireType)
			}
			m.EndBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartBlockTimestamp", wireType)
			}
			m.StartBlockTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartBlockTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndBlockTimestamp", wireType)
			}
			m.EndBlockTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndBlockTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInference
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInference
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Model = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTokens", wireType)
			}
			m.MaxTokens = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTokens |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualCost", wireType)
			}
			m.ActualCost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActualCost |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowAmount", wireType)
			}
			m.EscrowAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EscrowAmount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInference
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInference
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProposalDetails == nil {
				m.ProposalDetails = &ProposalDetails{}
			}
			if err := m.ProposalDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochGroupId", wireType)
			}
			m.EpochGroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochGroupId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssignedTo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInference
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInference
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssignedTo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInference
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInference
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatedBy = append(m.ValidatedBy, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInference
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInference
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochId", wireType)
			}
			m.EpochId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochPocStartBlockHeight", wireType)
			}
			m.EpochPocStartBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochPocStartBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferredBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInference
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInference
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransferredBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestTimestamp", wireType)
			}
			m.RequestTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferSignature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInference
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInference
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransferSignature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionSignature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInference
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInference
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecutionSignature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalPrompt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInference
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInference
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalPrompt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerTokenPrice", wireType)
			}
			m.PerTokenPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PerTokenPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInference(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInference
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInference(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInference
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInference
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInference
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInference
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupInference
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthInference
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthInference        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInference          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupInference = fmt.Errorf("proto: unexpected end of group")
)

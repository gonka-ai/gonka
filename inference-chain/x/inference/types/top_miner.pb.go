// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: inference/inference/v1/top_miner.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TopMiner struct {
	Address               string  `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	LastQualifiedStarted  int64   `protobuf:"varint,2,opt,name=last_qualified_started,json=lastQualifiedStarted,proto3" json:"last_qualified_started,omitempty"`
	RewardsPaidCount      int32   `protobuf:"varint,3,opt,name=rewards_paid_count,json=rewardsPaidCount,proto3" json:"rewards_paid_count,omitempty"`
	RewardsPaid           []int64 `protobuf:"varint,4,rep,packed,name=rewards_paid,json=rewardsPaid,proto3" json:"rewards_paid,omitempty"`
	QualifiedPeriods      int32   `protobuf:"varint,5,opt,name=qualified_periods,json=qualifiedPeriods,proto3" json:"qualified_periods,omitempty"`
	MissedPeriods         int32   `protobuf:"varint,6,opt,name=missed_periods,json=missedPeriods,proto3" json:"missed_periods,omitempty"`
	QualifiedTime         int64   `protobuf:"varint,7,opt,name=qualified_time,json=qualifiedTime,proto3" json:"qualified_time,omitempty"`
	MissedTime            int64   `protobuf:"varint,8,opt,name=missed_time,json=missedTime,proto3" json:"missed_time,omitempty"`
	LastUpdatedTime       int64   `protobuf:"varint,9,opt,name=last_updated_time,json=lastUpdatedTime,proto3" json:"last_updated_time,omitempty"`
	FirstQualifiedStarted int64   `protobuf:"varint,10,opt,name=first_qualified_started,json=firstQualifiedStarted,proto3" json:"first_qualified_started,omitempty"`
	InitialPower          int64   `protobuf:"varint,11,opt,name=initial_power,json=initialPower,proto3" json:"initial_power,omitempty"`
	InitialOrder          int32   `protobuf:"varint,12,opt,name=initial_order,json=initialOrder,proto3" json:"initial_order,omitempty"`
}

func (m *TopMiner) Reset()         { *m = TopMiner{} }
func (m *TopMiner) String() string { return proto.CompactTextString(m) }
func (*TopMiner) ProtoMessage()    {}
func (*TopMiner) Descriptor() ([]byte, []int) {
	return fileDescriptor_a730f8c4647e1fe1, []int{0}
}
func (m *TopMiner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopMiner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopMiner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopMiner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopMiner.Merge(m, src)
}
func (m *TopMiner) XXX_Size() int {
	return m.Size()
}
func (m *TopMiner) XXX_DiscardUnknown() {
	xxx_messageInfo_TopMiner.DiscardUnknown(m)
}

var xxx_messageInfo_TopMiner proto.InternalMessageInfo

func (m *TopMiner) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *TopMiner) GetLastQualifiedStarted() int64 {
	if m != nil {
		return m.LastQualifiedStarted
	}
	return 0
}

func (m *TopMiner) GetRewardsPaidCount() int32 {
	if m != nil {
		return m.RewardsPaidCount
	}
	return 0
}

func (m *TopMiner) GetRewardsPaid() []int64 {
	if m != nil {
		return m.RewardsPaid
	}
	return nil
}

func (m *TopMiner) GetQualifiedPeriods() int32 {
	if m != nil {
		return m.QualifiedPeriods
	}
	return 0
}

func (m *TopMiner) GetMissedPeriods() int32 {
	if m != nil {
		return m.MissedPeriods
	}
	return 0
}

func (m *TopMiner) GetQualifiedTime() int64 {
	if m != nil {
		return m.QualifiedTime
	}
	return 0
}

func (m *TopMiner) GetMissedTime() int64 {
	if m != nil {
		return m.MissedTime
	}
	return 0
}

func (m *TopMiner) GetLastUpdatedTime() int64 {
	if m != nil {
		return m.LastUpdatedTime
	}
	return 0
}

func (m *TopMiner) GetFirstQualifiedStarted() int64 {
	if m != nil {
		return m.FirstQualifiedStarted
	}
	return 0
}

func (m *TopMiner) GetInitialPower() int64 {
	if m != nil {
		return m.InitialPower
	}
	return 0
}

func (m *TopMiner) GetInitialOrder() int32 {
	if m != nil {
		return m.InitialOrder
	}
	return 0
}

func init() {
	proto.RegisterType((*TopMiner)(nil), "inference.inference.TopMiner")
}

func init() {
	proto.RegisterFile("inference/inference/v1/top_miner.proto", fileDescriptor_a730f8c4647e1fe1)
}

var fileDescriptor_a730f8c4647e1fe1 = []byte{
	// 426 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xcb, 0x8e, 0xd3, 0x30,
	0x14, 0x86, 0x1b, 0x32, 0x57, 0xb7, 0x05, 0xc6, 0x0c, 0x60, 0xcd, 0x22, 0x13, 0x81, 0x80, 0x08,
	0x50, 0xa3, 0x11, 0x97, 0x07, 0x18, 0xd6, 0x68, 0x4a, 0x18, 0x36, 0x6c, 0x22, 0x27, 0x76, 0xcb,
	0x91, 0x9a, 0xd8, 0xd8, 0x0e, 0x03, 0x6f, 0xc1, 0x63, 0xcd, 0xb2, 0x4b, 0x56, 0x08, 0xb5, 0x8f,
	0xc1, 0x06, 0xd9, 0x6e, 0xd2, 0x08, 0xd8, 0xfd, 0xf9, 0xfe, 0xcf, 0x47, 0xf1, 0x91, 0xd1, 0x63,
	0xa8, 0x67, 0x5c, 0xf1, 0xba, 0xe4, 0xe9, 0x36, 0x7d, 0x39, 0x4b, 0x8d, 0x90, 0x79, 0x05, 0x35,
	0x57, 0x13, 0xa9, 0x84, 0x11, 0xf8, 0x4e, 0xd7, 0x4e, 0xba, 0x74, 0x12, 0x95, 0x42, 0x57, 0x42,
	0xa7, 0x05, 0xd5, 0xf6, 0x50, 0xc1, 0x0d, 0x3d, 0x4b, 0x4b, 0x01, 0xb5, 0x3f, 0x74, 0x72, 0x3c,
	0x17, 0x73, 0xe1, 0x62, 0x6a, 0x93, 0xa7, 0x0f, 0x7e, 0x87, 0xe8, 0xe0, 0x52, 0xc8, 0xb7, 0x76,
	0x3a, 0x26, 0x68, 0x9f, 0x32, 0xa6, 0xb8, 0xd6, 0x24, 0x88, 0x83, 0xe4, 0x30, 0x6b, 0x3f, 0xf1,
	0x4b, 0x74, 0x6f, 0x41, 0xb5, 0xc9, 0x3f, 0x37, 0x74, 0x01, 0x33, 0xe0, 0x2c, 0xd7, 0x86, 0x2a,
	0xc3, 0x19, 0xb9, 0x11, 0x07, 0x49, 0x98, 0x1d, 0xdb, 0xf6, 0x5d, 0x5b, 0xbe, 0xf7, 0x1d, 0x7e,
	0x8e, 0xb0, 0xe2, 0x57, 0x54, 0x31, 0x9d, 0x4b, 0x0a, 0x2c, 0x2f, 0x45, 0x53, 0x1b, 0x12, 0xc6,
	0x41, 0xb2, 0x9b, 0xdd, 0xde, 0x34, 0x53, 0x0a, 0xec, 0x8d, 0xe5, 0xf8, 0x09, 0x1a, 0xf5, 0x6d,
	0xb2, 0x13, 0x87, 0x49, 0x78, 0xbe, 0x73, 0xfd, 0xf3, 0x74, 0x90, 0x0d, 0x7b, 0x36, 0x7e, 0x86,
	0x8e, 0xb6, 0xff, 0x21, 0xb9, 0x02, 0xc1, 0x34, 0xd9, 0xf5, 0x53, 0xbb, 0x62, 0xea, 0x39, 0x7e,
	0x84, 0x6e, 0x56, 0xa0, 0x75, 0xcf, 0xdc, 0x73, 0xe6, 0xd8, 0xd3, 0x9e, 0xb6, 0x9d, 0x69, 0xa0,
	0xe2, 0x64, 0xdf, 0x5d, 0x6c, 0xdc, 0xd1, 0x4b, 0xa8, 0x38, 0x3e, 0x45, 0xc3, 0xcd, 0x34, 0xe7,
	0x1c, 0x38, 0x07, 0x79, 0xe4, 0x84, 0xa7, 0xe8, 0xc8, 0x2d, 0xaa, 0x91, 0x8c, 0x9a, 0x56, 0x3b,
	0x74, 0xda, 0x2d, 0x5b, 0x7c, 0xf0, 0xdc, 0xb9, 0xaf, 0xd1, 0xfd, 0x19, 0xa8, 0xff, 0x6e, 0x15,
	0xb9, 0x13, 0x77, 0x5d, 0xfd, 0xcf, 0x5a, 0x1f, 0xa2, 0x31, 0xd4, 0x60, 0x80, 0x2e, 0x72, 0x29,
	0xae, 0xb8, 0x22, 0x43, 0x67, 0x8f, 0x36, 0x70, 0x6a, 0x59, 0x5f, 0x12, 0x8a, 0x71, 0x45, 0x46,
	0xee, 0xda, 0xad, 0x74, 0x61, 0xd9, 0xf9, 0xc5, 0xf5, 0x2a, 0x0a, 0x96, 0xab, 0x28, 0xf8, 0xb5,
	0x8a, 0x82, 0xef, 0xeb, 0x68, 0xb0, 0x5c, 0x47, 0x83, 0x1f, 0xeb, 0x68, 0xf0, 0xf1, 0xd5, 0x1c,
	0xcc, 0xa7, 0xa6, 0x98, 0x94, 0xa2, 0x4a, 0xa5, 0x12, 0xac, 0x29, 0x8d, 0x2e, 0xe1, 0xaf, 0xa7,
	0xf9, 0xb5, 0x97, 0xcd, 0x37, 0xc9, 0x75, 0xb1, 0xe7, 0x5e, 0xd5, 0x8b, 0x3f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x8d, 0x6f, 0x69, 0x57, 0xca, 0x02, 0x00, 0x00,
}

func (m *TopMiner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopMiner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopMiner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InitialOrder != 0 {
		i = encodeVarintTopMiner(dAtA, i, uint64(m.InitialOrder))
		i--
		dAtA[i] = 0x60
	}
	if m.InitialPower != 0 {
		i = encodeVarintTopMiner(dAtA, i, uint64(m.InitialPower))
		i--
		dAtA[i] = 0x58
	}
	if m.FirstQualifiedStarted != 0 {
		i = encodeVarintTopMiner(dAtA, i, uint64(m.FirstQualifiedStarted))
		i--
		dAtA[i] = 0x50
	}
	if m.LastUpdatedTime != 0 {
		i = encodeVarintTopMiner(dAtA, i, uint64(m.LastUpdatedTime))
		i--
		dAtA[i] = 0x48
	}
	if m.MissedTime != 0 {
		i = encodeVarintTopMiner(dAtA, i, uint64(m.MissedTime))
		i--
		dAtA[i] = 0x40
	}
	if m.QualifiedTime != 0 {
		i = encodeVarintTopMiner(dAtA, i, uint64(m.QualifiedTime))
		i--
		dAtA[i] = 0x38
	}
	if m.MissedPeriods != 0 {
		i = encodeVarintTopMiner(dAtA, i, uint64(m.MissedPeriods))
		i--
		dAtA[i] = 0x30
	}
	if m.QualifiedPeriods != 0 {
		i = encodeVarintTopMiner(dAtA, i, uint64(m.QualifiedPeriods))
		i--
		dAtA[i] = 0x28
	}
	if len(m.RewardsPaid) > 0 {
		dAtA2 := make([]byte, len(m.RewardsPaid)*10)
		var j1 int
		for _, num1 := range m.RewardsPaid {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintTopMiner(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x22
	}
	if m.RewardsPaidCount != 0 {
		i = encodeVarintTopMiner(dAtA, i, uint64(m.RewardsPaidCount))
		i--
		dAtA[i] = 0x18
	}
	if m.LastQualifiedStarted != 0 {
		i = encodeVarintTopMiner(dAtA, i, uint64(m.LastQualifiedStarted))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTopMiner(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTopMiner(dAtA []byte, offset int, v uint64) int {
	offset -= sovTopMiner(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TopMiner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTopMiner(uint64(l))
	}
	if m.LastQualifiedStarted != 0 {
		n += 1 + sovTopMiner(uint64(m.LastQualifiedStarted))
	}
	if m.RewardsPaidCount != 0 {
		n += 1 + sovTopMiner(uint64(m.RewardsPaidCount))
	}
	if len(m.RewardsPaid) > 0 {
		l = 0
		for _, e := range m.RewardsPaid {
			l += sovTopMiner(uint64(e))
		}
		n += 1 + sovTopMiner(uint64(l)) + l
	}
	if m.QualifiedPeriods != 0 {
		n += 1 + sovTopMiner(uint64(m.QualifiedPeriods))
	}
	if m.MissedPeriods != 0 {
		n += 1 + sovTopMiner(uint64(m.MissedPeriods))
	}
	if m.QualifiedTime != 0 {
		n += 1 + sovTopMiner(uint64(m.QualifiedTime))
	}
	if m.MissedTime != 0 {
		n += 1 + sovTopMiner(uint64(m.MissedTime))
	}
	if m.LastUpdatedTime != 0 {
		n += 1 + sovTopMiner(uint64(m.LastUpdatedTime))
	}
	if m.FirstQualifiedStarted != 0 {
		n += 1 + sovTopMiner(uint64(m.FirstQualifiedStarted))
	}
	if m.InitialPower != 0 {
		n += 1 + sovTopMiner(uint64(m.InitialPower))
	}
	if m.InitialOrder != 0 {
		n += 1 + sovTopMiner(uint64(m.InitialOrder))
	}
	return n
}

func sovTopMiner(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTopMiner(x uint64) (n int) {
	return sovTopMiner(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TopMiner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopMiner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopMiner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopMiner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopMiner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopMiner
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTopMiner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastQualifiedStarted", wireType)
			}
			m.LastQualifiedStarted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopMiner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastQualifiedStarted |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardsPaidCount", wireType)
			}
			m.RewardsPaidCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopMiner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardsPaidCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTopMiner
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RewardsPaid = append(m.RewardsPaid, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTopMiner
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTopMiner
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTopMiner
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RewardsPaid) == 0 {
					m.RewardsPaid = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTopMiner
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RewardsPaid = append(m.RewardsPaid, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardsPaid", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QualifiedPeriods", wireType)
			}
			m.QualifiedPeriods = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopMiner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QualifiedPeriods |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissedPeriods", wireType)
			}
			m.MissedPeriods = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopMiner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MissedPeriods |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QualifiedTime", wireType)
			}
			m.QualifiedTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopMiner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QualifiedTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissedTime", wireType)
			}
			m.MissedTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopMiner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MissedTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdatedTime", wireType)
			}
			m.LastUpdatedTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopMiner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastUpdatedTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstQualifiedStarted", wireType)
			}
			m.FirstQualifiedStarted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopMiner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstQualifiedStarted |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialPower", wireType)
			}
			m.InitialPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopMiner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitialPower |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialOrder", wireType)
			}
			m.InitialOrder = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopMiner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitialOrder |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTopMiner(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTopMiner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTopMiner(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTopMiner
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTopMiner
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTopMiner
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTopMiner
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTopMiner
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTopMiner
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTopMiner        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTopMiner          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTopMiner = fmt.Errorf("proto: unexpected end of group")
)

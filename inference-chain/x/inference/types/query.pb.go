// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: inference/inference/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetInferenceRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetInferenceRequest) Reset()         { *m = QueryGetInferenceRequest{} }
func (m *QueryGetInferenceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetInferenceRequest) ProtoMessage()    {}
func (*QueryGetInferenceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{2}
}
func (m *QueryGetInferenceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetInferenceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetInferenceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetInferenceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetInferenceRequest.Merge(m, src)
}
func (m *QueryGetInferenceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetInferenceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetInferenceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetInferenceRequest proto.InternalMessageInfo

func (m *QueryGetInferenceRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetInferenceResponse struct {
	Inference Inference `protobuf:"bytes,1,opt,name=inference,proto3" json:"inference"`
}

func (m *QueryGetInferenceResponse) Reset()         { *m = QueryGetInferenceResponse{} }
func (m *QueryGetInferenceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetInferenceResponse) ProtoMessage()    {}
func (*QueryGetInferenceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{3}
}
func (m *QueryGetInferenceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetInferenceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetInferenceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetInferenceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetInferenceResponse.Merge(m, src)
}
func (m *QueryGetInferenceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetInferenceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetInferenceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetInferenceResponse proto.InternalMessageInfo

func (m *QueryGetInferenceResponse) GetInference() Inference {
	if m != nil {
		return m.Inference
	}
	return Inference{}
}

type QueryAllInferenceRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllInferenceRequest) Reset()         { *m = QueryAllInferenceRequest{} }
func (m *QueryAllInferenceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllInferenceRequest) ProtoMessage()    {}
func (*QueryAllInferenceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{4}
}
func (m *QueryAllInferenceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllInferenceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllInferenceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllInferenceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllInferenceRequest.Merge(m, src)
}
func (m *QueryAllInferenceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllInferenceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllInferenceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllInferenceRequest proto.InternalMessageInfo

func (m *QueryAllInferenceRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllInferenceResponse struct {
	Inference  []Inference         `protobuf:"bytes,1,rep,name=inference,proto3" json:"inference"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllInferenceResponse) Reset()         { *m = QueryAllInferenceResponse{} }
func (m *QueryAllInferenceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllInferenceResponse) ProtoMessage()    {}
func (*QueryAllInferenceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{5}
}
func (m *QueryAllInferenceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllInferenceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllInferenceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllInferenceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllInferenceResponse.Merge(m, src)
}
func (m *QueryAllInferenceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllInferenceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllInferenceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllInferenceResponse proto.InternalMessageInfo

func (m *QueryAllInferenceResponse) GetInference() []Inference {
	if m != nil {
		return m.Inference
	}
	return nil
}

func (m *QueryAllInferenceResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetParticipantRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetParticipantRequest) Reset()         { *m = QueryGetParticipantRequest{} }
func (m *QueryGetParticipantRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetParticipantRequest) ProtoMessage()    {}
func (*QueryGetParticipantRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{6}
}
func (m *QueryGetParticipantRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetParticipantRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetParticipantRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetParticipantRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetParticipantRequest.Merge(m, src)
}
func (m *QueryGetParticipantRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetParticipantRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetParticipantRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetParticipantRequest proto.InternalMessageInfo

func (m *QueryGetParticipantRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetParticipantResponse struct {
	Participant Participant `protobuf:"bytes,1,opt,name=participant,proto3" json:"participant"`
}

func (m *QueryGetParticipantResponse) Reset()         { *m = QueryGetParticipantResponse{} }
func (m *QueryGetParticipantResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetParticipantResponse) ProtoMessage()    {}
func (*QueryGetParticipantResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{7}
}
func (m *QueryGetParticipantResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetParticipantResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetParticipantResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetParticipantResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetParticipantResponse.Merge(m, src)
}
func (m *QueryGetParticipantResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetParticipantResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetParticipantResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetParticipantResponse proto.InternalMessageInfo

func (m *QueryGetParticipantResponse) GetParticipant() Participant {
	if m != nil {
		return m.Participant
	}
	return Participant{}
}

type QueryAllParticipantRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllParticipantRequest) Reset()         { *m = QueryAllParticipantRequest{} }
func (m *QueryAllParticipantRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllParticipantRequest) ProtoMessage()    {}
func (*QueryAllParticipantRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{8}
}
func (m *QueryAllParticipantRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllParticipantRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllParticipantRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllParticipantRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllParticipantRequest.Merge(m, src)
}
func (m *QueryAllParticipantRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllParticipantRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllParticipantRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllParticipantRequest proto.InternalMessageInfo

func (m *QueryAllParticipantRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllParticipantResponse struct {
	Participant []Participant       `protobuf:"bytes,1,rep,name=participant,proto3" json:"participant"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	BlockHeight int64               `protobuf:"varint,3,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *QueryAllParticipantResponse) Reset()         { *m = QueryAllParticipantResponse{} }
func (m *QueryAllParticipantResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllParticipantResponse) ProtoMessage()    {}
func (*QueryAllParticipantResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{9}
}
func (m *QueryAllParticipantResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllParticipantResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllParticipantResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllParticipantResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllParticipantResponse.Merge(m, src)
}
func (m *QueryAllParticipantResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllParticipantResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllParticipantResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllParticipantResponse proto.InternalMessageInfo

func (m *QueryAllParticipantResponse) GetParticipant() []Participant {
	if m != nil {
		return m.Participant
	}
	return nil
}

func (m *QueryAllParticipantResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryAllParticipantResponse) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type QueryInferenceParticipantRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryInferenceParticipantRequest) Reset()         { *m = QueryInferenceParticipantRequest{} }
func (m *QueryInferenceParticipantRequest) String() string { return proto.CompactTextString(m) }
func (*QueryInferenceParticipantRequest) ProtoMessage()    {}
func (*QueryInferenceParticipantRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{10}
}
func (m *QueryInferenceParticipantRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInferenceParticipantRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInferenceParticipantRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInferenceParticipantRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInferenceParticipantRequest.Merge(m, src)
}
func (m *QueryInferenceParticipantRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryInferenceParticipantRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInferenceParticipantRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInferenceParticipantRequest proto.InternalMessageInfo

func (m *QueryInferenceParticipantRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryInferenceParticipantResponse struct {
	Pubkey  string `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Balance int64  `protobuf:"varint,2,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (m *QueryInferenceParticipantResponse) Reset()         { *m = QueryInferenceParticipantResponse{} }
func (m *QueryInferenceParticipantResponse) String() string { return proto.CompactTextString(m) }
func (*QueryInferenceParticipantResponse) ProtoMessage()    {}
func (*QueryInferenceParticipantResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{11}
}
func (m *QueryInferenceParticipantResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInferenceParticipantResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInferenceParticipantResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInferenceParticipantResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInferenceParticipantResponse.Merge(m, src)
}
func (m *QueryInferenceParticipantResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryInferenceParticipantResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInferenceParticipantResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInferenceParticipantResponse proto.InternalMessageInfo

func (m *QueryInferenceParticipantResponse) GetPubkey() string {
	if m != nil {
		return m.Pubkey
	}
	return ""
}

func (m *QueryInferenceParticipantResponse) GetBalance() int64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

type QueryGetRandomExecutorRequest struct {
	Model string `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
}

func (m *QueryGetRandomExecutorRequest) Reset()         { *m = QueryGetRandomExecutorRequest{} }
func (m *QueryGetRandomExecutorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRandomExecutorRequest) ProtoMessage()    {}
func (*QueryGetRandomExecutorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{12}
}
func (m *QueryGetRandomExecutorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRandomExecutorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRandomExecutorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRandomExecutorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRandomExecutorRequest.Merge(m, src)
}
func (m *QueryGetRandomExecutorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRandomExecutorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRandomExecutorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRandomExecutorRequest proto.InternalMessageInfo

func (m *QueryGetRandomExecutorRequest) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

type QueryGetRandomExecutorResponse struct {
	Executor Participant `protobuf:"bytes,1,opt,name=executor,proto3" json:"executor"`
}

func (m *QueryGetRandomExecutorResponse) Reset()         { *m = QueryGetRandomExecutorResponse{} }
func (m *QueryGetRandomExecutorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRandomExecutorResponse) ProtoMessage()    {}
func (*QueryGetRandomExecutorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{13}
}
func (m *QueryGetRandomExecutorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRandomExecutorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRandomExecutorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRandomExecutorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRandomExecutorResponse.Merge(m, src)
}
func (m *QueryGetRandomExecutorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRandomExecutorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRandomExecutorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRandomExecutorResponse proto.InternalMessageInfo

func (m *QueryGetRandomExecutorResponse) GetExecutor() Participant {
	if m != nil {
		return m.Executor
	}
	return Participant{}
}

type QueryGetEpochGroupDataRequest struct {
	PocStartBlockHeight uint64 `protobuf:"varint,1,opt,name=poc_start_block_height,json=pocStartBlockHeight,proto3" json:"poc_start_block_height,omitempty"`
	ModelId             string `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
}

func (m *QueryGetEpochGroupDataRequest) Reset()         { *m = QueryGetEpochGroupDataRequest{} }
func (m *QueryGetEpochGroupDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetEpochGroupDataRequest) ProtoMessage()    {}
func (*QueryGetEpochGroupDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{14}
}
func (m *QueryGetEpochGroupDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEpochGroupDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEpochGroupDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEpochGroupDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEpochGroupDataRequest.Merge(m, src)
}
func (m *QueryGetEpochGroupDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEpochGroupDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEpochGroupDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEpochGroupDataRequest proto.InternalMessageInfo

func (m *QueryGetEpochGroupDataRequest) GetPocStartBlockHeight() uint64 {
	if m != nil {
		return m.PocStartBlockHeight
	}
	return 0
}

func (m *QueryGetEpochGroupDataRequest) GetModelId() string {
	if m != nil {
		return m.ModelId
	}
	return ""
}

type QueryGetEpochGroupDataResponse struct {
	EpochGroupData EpochGroupData `protobuf:"bytes,1,opt,name=epoch_group_data,json=epochGroupData,proto3" json:"epoch_group_data"`
}

func (m *QueryGetEpochGroupDataResponse) Reset()         { *m = QueryGetEpochGroupDataResponse{} }
func (m *QueryGetEpochGroupDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetEpochGroupDataResponse) ProtoMessage()    {}
func (*QueryGetEpochGroupDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{15}
}
func (m *QueryGetEpochGroupDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEpochGroupDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEpochGroupDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEpochGroupDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEpochGroupDataResponse.Merge(m, src)
}
func (m *QueryGetEpochGroupDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEpochGroupDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEpochGroupDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEpochGroupDataResponse proto.InternalMessageInfo

func (m *QueryGetEpochGroupDataResponse) GetEpochGroupData() EpochGroupData {
	if m != nil {
		return m.EpochGroupData
	}
	return EpochGroupData{}
}

type QueryAllEpochGroupDataRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllEpochGroupDataRequest) Reset()         { *m = QueryAllEpochGroupDataRequest{} }
func (m *QueryAllEpochGroupDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllEpochGroupDataRequest) ProtoMessage()    {}
func (*QueryAllEpochGroupDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{16}
}
func (m *QueryAllEpochGroupDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllEpochGroupDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllEpochGroupDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllEpochGroupDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllEpochGroupDataRequest.Merge(m, src)
}
func (m *QueryAllEpochGroupDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllEpochGroupDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllEpochGroupDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllEpochGroupDataRequest proto.InternalMessageInfo

func (m *QueryAllEpochGroupDataRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllEpochGroupDataResponse struct {
	EpochGroupData []EpochGroupData    `protobuf:"bytes,1,rep,name=epoch_group_data,json=epochGroupData,proto3" json:"epoch_group_data"`
	Pagination     *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllEpochGroupDataResponse) Reset()         { *m = QueryAllEpochGroupDataResponse{} }
func (m *QueryAllEpochGroupDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllEpochGroupDataResponse) ProtoMessage()    {}
func (*QueryAllEpochGroupDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{17}
}
func (m *QueryAllEpochGroupDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllEpochGroupDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllEpochGroupDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllEpochGroupDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllEpochGroupDataResponse.Merge(m, src)
}
func (m *QueryAllEpochGroupDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllEpochGroupDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllEpochGroupDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllEpochGroupDataResponse proto.InternalMessageInfo

func (m *QueryAllEpochGroupDataResponse) GetEpochGroupData() []EpochGroupData {
	if m != nil {
		return m.EpochGroupData
	}
	return nil
}

func (m *QueryAllEpochGroupDataResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetSettleAmountRequest struct {
	Participant string `protobuf:"bytes,1,opt,name=participant,proto3" json:"participant,omitempty"`
}

func (m *QueryGetSettleAmountRequest) Reset()         { *m = QueryGetSettleAmountRequest{} }
func (m *QueryGetSettleAmountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSettleAmountRequest) ProtoMessage()    {}
func (*QueryGetSettleAmountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{18}
}
func (m *QueryGetSettleAmountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSettleAmountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSettleAmountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSettleAmountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSettleAmountRequest.Merge(m, src)
}
func (m *QueryGetSettleAmountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSettleAmountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSettleAmountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSettleAmountRequest proto.InternalMessageInfo

func (m *QueryGetSettleAmountRequest) GetParticipant() string {
	if m != nil {
		return m.Participant
	}
	return ""
}

type QueryGetSettleAmountResponse struct {
	SettleAmount SettleAmount `protobuf:"bytes,1,opt,name=settle_amount,json=settleAmount,proto3" json:"settle_amount"`
}

func (m *QueryGetSettleAmountResponse) Reset()         { *m = QueryGetSettleAmountResponse{} }
func (m *QueryGetSettleAmountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSettleAmountResponse) ProtoMessage()    {}
func (*QueryGetSettleAmountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{19}
}
func (m *QueryGetSettleAmountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSettleAmountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSettleAmountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSettleAmountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSettleAmountResponse.Merge(m, src)
}
func (m *QueryGetSettleAmountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSettleAmountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSettleAmountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSettleAmountResponse proto.InternalMessageInfo

func (m *QueryGetSettleAmountResponse) GetSettleAmount() SettleAmount {
	if m != nil {
		return m.SettleAmount
	}
	return SettleAmount{}
}

type QueryAllSettleAmountRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSettleAmountRequest) Reset()         { *m = QueryAllSettleAmountRequest{} }
func (m *QueryAllSettleAmountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllSettleAmountRequest) ProtoMessage()    {}
func (*QueryAllSettleAmountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{20}
}
func (m *QueryAllSettleAmountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSettleAmountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSettleAmountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSettleAmountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSettleAmountRequest.Merge(m, src)
}
func (m *QueryAllSettleAmountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSettleAmountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSettleAmountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSettleAmountRequest proto.InternalMessageInfo

func (m *QueryAllSettleAmountRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllSettleAmountResponse struct {
	SettleAmount []SettleAmount      `protobuf:"bytes,1,rep,name=settle_amount,json=settleAmount,proto3" json:"settle_amount"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSettleAmountResponse) Reset()         { *m = QueryAllSettleAmountResponse{} }
func (m *QueryAllSettleAmountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllSettleAmountResponse) ProtoMessage()    {}
func (*QueryAllSettleAmountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{21}
}
func (m *QueryAllSettleAmountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSettleAmountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSettleAmountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSettleAmountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSettleAmountResponse.Merge(m, src)
}
func (m *QueryAllSettleAmountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSettleAmountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSettleAmountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSettleAmountResponse proto.InternalMessageInfo

func (m *QueryAllSettleAmountResponse) GetSettleAmount() []SettleAmount {
	if m != nil {
		return m.SettleAmount
	}
	return nil
}

func (m *QueryAllSettleAmountResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetEpochGroupValidationsRequest struct {
	Participant         string `protobuf:"bytes,1,opt,name=participant,proto3" json:"participant,omitempty"`
	PocStartBlockHeight uint64 `protobuf:"varint,2,opt,name=poc_start_block_height,json=pocStartBlockHeight,proto3" json:"poc_start_block_height,omitempty"`
}

func (m *QueryGetEpochGroupValidationsRequest) Reset()         { *m = QueryGetEpochGroupValidationsRequest{} }
func (m *QueryGetEpochGroupValidationsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetEpochGroupValidationsRequest) ProtoMessage()    {}
func (*QueryGetEpochGroupValidationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{22}
}
func (m *QueryGetEpochGroupValidationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEpochGroupValidationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEpochGroupValidationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEpochGroupValidationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEpochGroupValidationsRequest.Merge(m, src)
}
func (m *QueryGetEpochGroupValidationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEpochGroupValidationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEpochGroupValidationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEpochGroupValidationsRequest proto.InternalMessageInfo

func (m *QueryGetEpochGroupValidationsRequest) GetParticipant() string {
	if m != nil {
		return m.Participant
	}
	return ""
}

func (m *QueryGetEpochGroupValidationsRequest) GetPocStartBlockHeight() uint64 {
	if m != nil {
		return m.PocStartBlockHeight
	}
	return 0
}

type QueryGetEpochGroupValidationsResponse struct {
	EpochGroupValidations EpochGroupValidations `protobuf:"bytes,1,opt,name=epoch_group_validations,json=epochGroupValidations,proto3" json:"epoch_group_validations"`
}

func (m *QueryGetEpochGroupValidationsResponse) Reset()         { *m = QueryGetEpochGroupValidationsResponse{} }
func (m *QueryGetEpochGroupValidationsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetEpochGroupValidationsResponse) ProtoMessage()    {}
func (*QueryGetEpochGroupValidationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{23}
}
func (m *QueryGetEpochGroupValidationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEpochGroupValidationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEpochGroupValidationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEpochGroupValidationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEpochGroupValidationsResponse.Merge(m, src)
}
func (m *QueryGetEpochGroupValidationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEpochGroupValidationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEpochGroupValidationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEpochGroupValidationsResponse proto.InternalMessageInfo

func (m *QueryGetEpochGroupValidationsResponse) GetEpochGroupValidations() EpochGroupValidations {
	if m != nil {
		return m.EpochGroupValidations
	}
	return EpochGroupValidations{}
}

type QueryAllEpochGroupValidationsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllEpochGroupValidationsRequest) Reset()         { *m = QueryAllEpochGroupValidationsRequest{} }
func (m *QueryAllEpochGroupValidationsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllEpochGroupValidationsRequest) ProtoMessage()    {}
func (*QueryAllEpochGroupValidationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{24}
}
func (m *QueryAllEpochGroupValidationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllEpochGroupValidationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllEpochGroupValidationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllEpochGroupValidationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllEpochGroupValidationsRequest.Merge(m, src)
}
func (m *QueryAllEpochGroupValidationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllEpochGroupValidationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllEpochGroupValidationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllEpochGroupValidationsRequest proto.InternalMessageInfo

func (m *QueryAllEpochGroupValidationsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllEpochGroupValidationsResponse struct {
	EpochGroupValidations []EpochGroupValidations `protobuf:"bytes,1,rep,name=epoch_group_validations,json=epochGroupValidations,proto3" json:"epoch_group_validations"`
	Pagination            *query.PageResponse     `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllEpochGroupValidationsResponse) Reset()         { *m = QueryAllEpochGroupValidationsResponse{} }
func (m *QueryAllEpochGroupValidationsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllEpochGroupValidationsResponse) ProtoMessage()    {}
func (*QueryAllEpochGroupValidationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{25}
}
func (m *QueryAllEpochGroupValidationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllEpochGroupValidationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllEpochGroupValidationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllEpochGroupValidationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllEpochGroupValidationsResponse.Merge(m, src)
}
func (m *QueryAllEpochGroupValidationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllEpochGroupValidationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllEpochGroupValidationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllEpochGroupValidationsResponse proto.InternalMessageInfo

func (m *QueryAllEpochGroupValidationsResponse) GetEpochGroupValidations() []EpochGroupValidations {
	if m != nil {
		return m.EpochGroupValidations
	}
	return nil
}

func (m *QueryAllEpochGroupValidationsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryPocBatchesForStageRequest struct {
	BlockHeight int64 `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *QueryPocBatchesForStageRequest) Reset()         { *m = QueryPocBatchesForStageRequest{} }
func (m *QueryPocBatchesForStageRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPocBatchesForStageRequest) ProtoMessage()    {}
func (*QueryPocBatchesForStageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{26}
}
func (m *QueryPocBatchesForStageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPocBatchesForStageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPocBatchesForStageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPocBatchesForStageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPocBatchesForStageRequest.Merge(m, src)
}
func (m *QueryPocBatchesForStageRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPocBatchesForStageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPocBatchesForStageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPocBatchesForStageRequest proto.InternalMessageInfo

func (m *QueryPocBatchesForStageRequest) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type QueryPocBatchesForStageResponse struct {
	PocBatch []PoCBatchesWithParticipants `protobuf:"bytes,1,rep,name=poc_batch,json=pocBatch,proto3" json:"poc_batch"`
}

func (m *QueryPocBatchesForStageResponse) Reset()         { *m = QueryPocBatchesForStageResponse{} }
func (m *QueryPocBatchesForStageResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPocBatchesForStageResponse) ProtoMessage()    {}
func (*QueryPocBatchesForStageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{27}
}
func (m *QueryPocBatchesForStageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPocBatchesForStageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPocBatchesForStageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPocBatchesForStageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPocBatchesForStageResponse.Merge(m, src)
}
func (m *QueryPocBatchesForStageResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPocBatchesForStageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPocBatchesForStageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPocBatchesForStageResponse proto.InternalMessageInfo

func (m *QueryPocBatchesForStageResponse) GetPocBatch() []PoCBatchesWithParticipants {
	if m != nil {
		return m.PocBatch
	}
	return nil
}

type PoCBatchesWithParticipants struct {
	Participant string     `protobuf:"bytes,1,opt,name=participant,proto3" json:"participant,omitempty"`
	PubKey      string     `protobuf:"bytes,2,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	HexPubKey   string     `protobuf:"bytes,3,opt,name=hex_pub_key,json=hexPubKey,proto3" json:"hex_pub_key,omitempty"`
	PocBatch    []PoCBatch `protobuf:"bytes,4,rep,name=poc_batch,json=pocBatch,proto3" json:"poc_batch"`
}

func (m *PoCBatchesWithParticipants) Reset()         { *m = PoCBatchesWithParticipants{} }
func (m *PoCBatchesWithParticipants) String() string { return proto.CompactTextString(m) }
func (*PoCBatchesWithParticipants) ProtoMessage()    {}
func (*PoCBatchesWithParticipants) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{28}
}
func (m *PoCBatchesWithParticipants) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoCBatchesWithParticipants) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoCBatchesWithParticipants.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoCBatchesWithParticipants) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoCBatchesWithParticipants.Merge(m, src)
}
func (m *PoCBatchesWithParticipants) XXX_Size() int {
	return m.Size()
}
func (m *PoCBatchesWithParticipants) XXX_DiscardUnknown() {
	xxx_messageInfo_PoCBatchesWithParticipants.DiscardUnknown(m)
}

var xxx_messageInfo_PoCBatchesWithParticipants proto.InternalMessageInfo

func (m *PoCBatchesWithParticipants) GetParticipant() string {
	if m != nil {
		return m.Participant
	}
	return ""
}

func (m *PoCBatchesWithParticipants) GetPubKey() string {
	if m != nil {
		return m.PubKey
	}
	return ""
}

func (m *PoCBatchesWithParticipants) GetHexPubKey() string {
	if m != nil {
		return m.HexPubKey
	}
	return ""
}

func (m *PoCBatchesWithParticipants) GetPocBatch() []PoCBatch {
	if m != nil {
		return m.PocBatch
	}
	return nil
}

type QueryGetCurrentEpochRequest struct {
}

func (m *QueryGetCurrentEpochRequest) Reset()         { *m = QueryGetCurrentEpochRequest{} }
func (m *QueryGetCurrentEpochRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCurrentEpochRequest) ProtoMessage()    {}
func (*QueryGetCurrentEpochRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{29}
}
func (m *QueryGetCurrentEpochRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCurrentEpochRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCurrentEpochRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCurrentEpochRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCurrentEpochRequest.Merge(m, src)
}
func (m *QueryGetCurrentEpochRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCurrentEpochRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCurrentEpochRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCurrentEpochRequest proto.InternalMessageInfo

// DEPRECATED: ambiguous query, re-check what it expect as epoch: id, poc_start_block_height, or epoch_group_id
type QueryGetCurrentEpochResponse struct {
	Epoch uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (m *QueryGetCurrentEpochResponse) Reset()         { *m = QueryGetCurrentEpochResponse{} }
func (m *QueryGetCurrentEpochResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCurrentEpochResponse) ProtoMessage()    {}
func (*QueryGetCurrentEpochResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{30}
}
func (m *QueryGetCurrentEpochResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCurrentEpochResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCurrentEpochResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCurrentEpochResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCurrentEpochResponse.Merge(m, src)
}
func (m *QueryGetCurrentEpochResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCurrentEpochResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCurrentEpochResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCurrentEpochResponse proto.InternalMessageInfo

func (m *QueryGetCurrentEpochResponse) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

type QueryGetTokenomicsDataRequest struct {
}

func (m *QueryGetTokenomicsDataRequest) Reset()         { *m = QueryGetTokenomicsDataRequest{} }
func (m *QueryGetTokenomicsDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTokenomicsDataRequest) ProtoMessage()    {}
func (*QueryGetTokenomicsDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{31}
}
func (m *QueryGetTokenomicsDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTokenomicsDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTokenomicsDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTokenomicsDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTokenomicsDataRequest.Merge(m, src)
}
func (m *QueryGetTokenomicsDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTokenomicsDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTokenomicsDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTokenomicsDataRequest proto.InternalMessageInfo

type QueryGetTokenomicsDataResponse struct {
	TokenomicsData TokenomicsData `protobuf:"bytes,1,opt,name=tokenomics_data,json=tokenomicsData,proto3" json:"tokenomics_data"`
}

func (m *QueryGetTokenomicsDataResponse) Reset()         { *m = QueryGetTokenomicsDataResponse{} }
func (m *QueryGetTokenomicsDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTokenomicsDataResponse) ProtoMessage()    {}
func (*QueryGetTokenomicsDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{32}
}
func (m *QueryGetTokenomicsDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTokenomicsDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTokenomicsDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTokenomicsDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTokenomicsDataResponse.Merge(m, src)
}
func (m *QueryGetTokenomicsDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTokenomicsDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTokenomicsDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTokenomicsDataResponse proto.InternalMessageInfo

func (m *QueryGetTokenomicsDataResponse) GetTokenomicsData() TokenomicsData {
	if m != nil {
		return m.TokenomicsData
	}
	return TokenomicsData{}
}

type QueryGetUnitOfComputePriceProposalRequest struct {
	Participant string `protobuf:"bytes,1,opt,name=participant,proto3" json:"participant,omitempty"`
}

func (m *QueryGetUnitOfComputePriceProposalRequest) Reset() {
	*m = QueryGetUnitOfComputePriceProposalRequest{}
}
func (m *QueryGetUnitOfComputePriceProposalRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetUnitOfComputePriceProposalRequest) ProtoMessage() {}
func (*QueryGetUnitOfComputePriceProposalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{33}
}
func (m *QueryGetUnitOfComputePriceProposalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetUnitOfComputePriceProposalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetUnitOfComputePriceProposalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetUnitOfComputePriceProposalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetUnitOfComputePriceProposalRequest.Merge(m, src)
}
func (m *QueryGetUnitOfComputePriceProposalRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetUnitOfComputePriceProposalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetUnitOfComputePriceProposalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetUnitOfComputePriceProposalRequest proto.InternalMessageInfo

func (m *QueryGetUnitOfComputePriceProposalRequest) GetParticipant() string {
	if m != nil {
		return m.Participant
	}
	return ""
}

type QueryGetUnitOfComputePriceProposalResponse struct {
	Proposal *UnitOfComputePriceProposal `protobuf:"bytes,1,opt,name=proposal,proto3" json:"proposal,omitempty"`
	Default  uint64                      `protobuf:"varint,2,opt,name=default,proto3" json:"default,omitempty"`
}

func (m *QueryGetUnitOfComputePriceProposalResponse) Reset() {
	*m = QueryGetUnitOfComputePriceProposalResponse{}
}
func (m *QueryGetUnitOfComputePriceProposalResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetUnitOfComputePriceProposalResponse) ProtoMessage() {}
func (*QueryGetUnitOfComputePriceProposalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{34}
}
func (m *QueryGetUnitOfComputePriceProposalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetUnitOfComputePriceProposalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetUnitOfComputePriceProposalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetUnitOfComputePriceProposalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetUnitOfComputePriceProposalResponse.Merge(m, src)
}
func (m *QueryGetUnitOfComputePriceProposalResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetUnitOfComputePriceProposalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetUnitOfComputePriceProposalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetUnitOfComputePriceProposalResponse proto.InternalMessageInfo

func (m *QueryGetUnitOfComputePriceProposalResponse) GetProposal() *UnitOfComputePriceProposal {
	if m != nil {
		return m.Proposal
	}
	return nil
}

func (m *QueryGetUnitOfComputePriceProposalResponse) GetDefault() uint64 {
	if m != nil {
		return m.Default
	}
	return 0
}

type QueryCurrentEpochGroupDataRequest struct {
}

func (m *QueryCurrentEpochGroupDataRequest) Reset()         { *m = QueryCurrentEpochGroupDataRequest{} }
func (m *QueryCurrentEpochGroupDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCurrentEpochGroupDataRequest) ProtoMessage()    {}
func (*QueryCurrentEpochGroupDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{35}
}
func (m *QueryCurrentEpochGroupDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCurrentEpochGroupDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCurrentEpochGroupDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCurrentEpochGroupDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCurrentEpochGroupDataRequest.Merge(m, src)
}
func (m *QueryCurrentEpochGroupDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCurrentEpochGroupDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCurrentEpochGroupDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCurrentEpochGroupDataRequest proto.InternalMessageInfo

type QueryCurrentEpochGroupDataResponse struct {
	EpochGroupData EpochGroupData `protobuf:"bytes,1,opt,name=epoch_group_data,json=epochGroupData,proto3" json:"epoch_group_data"`
}

func (m *QueryCurrentEpochGroupDataResponse) Reset()         { *m = QueryCurrentEpochGroupDataResponse{} }
func (m *QueryCurrentEpochGroupDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCurrentEpochGroupDataResponse) ProtoMessage()    {}
func (*QueryCurrentEpochGroupDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{36}
}
func (m *QueryCurrentEpochGroupDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCurrentEpochGroupDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCurrentEpochGroupDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCurrentEpochGroupDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCurrentEpochGroupDataResponse.Merge(m, src)
}
func (m *QueryCurrentEpochGroupDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCurrentEpochGroupDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCurrentEpochGroupDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCurrentEpochGroupDataResponse proto.InternalMessageInfo

func (m *QueryCurrentEpochGroupDataResponse) GetEpochGroupData() EpochGroupData {
	if m != nil {
		return m.EpochGroupData
	}
	return EpochGroupData{}
}

type QueryPreviousEpochGroupDataRequest struct {
}

func (m *QueryPreviousEpochGroupDataRequest) Reset()         { *m = QueryPreviousEpochGroupDataRequest{} }
func (m *QueryPreviousEpochGroupDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPreviousEpochGroupDataRequest) ProtoMessage()    {}
func (*QueryPreviousEpochGroupDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{37}
}
func (m *QueryPreviousEpochGroupDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPreviousEpochGroupDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPreviousEpochGroupDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPreviousEpochGroupDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPreviousEpochGroupDataRequest.Merge(m, src)
}
func (m *QueryPreviousEpochGroupDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPreviousEpochGroupDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPreviousEpochGroupDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPreviousEpochGroupDataRequest proto.InternalMessageInfo

type QueryPreviousEpochGroupDataResponse struct {
	EpochGroupData EpochGroupData `protobuf:"bytes,1,opt,name=epoch_group_data,json=epochGroupData,proto3" json:"epoch_group_data"`
}

func (m *QueryPreviousEpochGroupDataResponse) Reset()         { *m = QueryPreviousEpochGroupDataResponse{} }
func (m *QueryPreviousEpochGroupDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPreviousEpochGroupDataResponse) ProtoMessage()    {}
func (*QueryPreviousEpochGroupDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{38}
}
func (m *QueryPreviousEpochGroupDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPreviousEpochGroupDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPreviousEpochGroupDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPreviousEpochGroupDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPreviousEpochGroupDataResponse.Merge(m, src)
}
func (m *QueryPreviousEpochGroupDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPreviousEpochGroupDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPreviousEpochGroupDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPreviousEpochGroupDataResponse proto.InternalMessageInfo

func (m *QueryPreviousEpochGroupDataResponse) GetEpochGroupData() EpochGroupData {
	if m != nil {
		return m.EpochGroupData
	}
	return EpochGroupData{}
}

type QueryModelsAllRequest struct {
}

func (m *QueryModelsAllRequest) Reset()         { *m = QueryModelsAllRequest{} }
func (m *QueryModelsAllRequest) String() string { return proto.CompactTextString(m) }
func (*QueryModelsAllRequest) ProtoMessage()    {}
func (*QueryModelsAllRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{39}
}
func (m *QueryModelsAllRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryModelsAllRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryModelsAllRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryModelsAllRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryModelsAllRequest.Merge(m, src)
}
func (m *QueryModelsAllRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryModelsAllRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryModelsAllRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryModelsAllRequest proto.InternalMessageInfo

type QueryModelsAllResponse struct {
	Model []Model `protobuf:"bytes,1,rep,name=model,proto3" json:"model"`
}

func (m *QueryModelsAllResponse) Reset()         { *m = QueryModelsAllResponse{} }
func (m *QueryModelsAllResponse) String() string { return proto.CompactTextString(m) }
func (*QueryModelsAllResponse) ProtoMessage()    {}
func (*QueryModelsAllResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{40}
}
func (m *QueryModelsAllResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryModelsAllResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryModelsAllResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryModelsAllResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryModelsAllResponse.Merge(m, src)
}
func (m *QueryModelsAllResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryModelsAllResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryModelsAllResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryModelsAllResponse proto.InternalMessageInfo

func (m *QueryModelsAllResponse) GetModel() []Model {
	if m != nil {
		return m.Model
	}
	return nil
}

type QueryGetTopMinerRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetTopMinerRequest) Reset()         { *m = QueryGetTopMinerRequest{} }
func (m *QueryGetTopMinerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTopMinerRequest) ProtoMessage()    {}
func (*QueryGetTopMinerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{41}
}
func (m *QueryGetTopMinerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTopMinerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTopMinerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTopMinerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTopMinerRequest.Merge(m, src)
}
func (m *QueryGetTopMinerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTopMinerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTopMinerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTopMinerRequest proto.InternalMessageInfo

func (m *QueryGetTopMinerRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryGetTopMinerResponse struct {
	TopMiner TopMiner `protobuf:"bytes,1,opt,name=top_miner,json=topMiner,proto3" json:"top_miner"`
}

func (m *QueryGetTopMinerResponse) Reset()         { *m = QueryGetTopMinerResponse{} }
func (m *QueryGetTopMinerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTopMinerResponse) ProtoMessage()    {}
func (*QueryGetTopMinerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{42}
}
func (m *QueryGetTopMinerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTopMinerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTopMinerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTopMinerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTopMinerResponse.Merge(m, src)
}
func (m *QueryGetTopMinerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTopMinerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTopMinerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTopMinerResponse proto.InternalMessageInfo

func (m *QueryGetTopMinerResponse) GetTopMiner() TopMiner {
	if m != nil {
		return m.TopMiner
	}
	return TopMiner{}
}

type QueryAllTopMinerRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTopMinerRequest) Reset()         { *m = QueryAllTopMinerRequest{} }
func (m *QueryAllTopMinerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllTopMinerRequest) ProtoMessage()    {}
func (*QueryAllTopMinerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{43}
}
func (m *QueryAllTopMinerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTopMinerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTopMinerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTopMinerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTopMinerRequest.Merge(m, src)
}
func (m *QueryAllTopMinerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTopMinerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTopMinerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTopMinerRequest proto.InternalMessageInfo

func (m *QueryAllTopMinerRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllTopMinerResponse struct {
	TopMiner   []TopMiner          `protobuf:"bytes,1,rep,name=top_miner,json=topMiner,proto3" json:"top_miner"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTopMinerResponse) Reset()         { *m = QueryAllTopMinerResponse{} }
func (m *QueryAllTopMinerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllTopMinerResponse) ProtoMessage()    {}
func (*QueryAllTopMinerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{44}
}
func (m *QueryAllTopMinerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTopMinerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTopMinerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTopMinerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTopMinerResponse.Merge(m, src)
}
func (m *QueryAllTopMinerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTopMinerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTopMinerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTopMinerResponse proto.InternalMessageInfo

func (m *QueryAllTopMinerResponse) GetTopMiner() []TopMiner {
	if m != nil {
		return m.TopMiner
	}
	return nil
}

func (m *QueryAllTopMinerResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetInferenceTimeoutRequest struct {
	ExpirationHeight uint64 `protobuf:"varint,1,opt,name=expirationHeight,proto3" json:"expirationHeight,omitempty"`
	InferenceId      string `protobuf:"bytes,2,opt,name=inferenceId,proto3" json:"inferenceId,omitempty"`
}

func (m *QueryGetInferenceTimeoutRequest) Reset()         { *m = QueryGetInferenceTimeoutRequest{} }
func (m *QueryGetInferenceTimeoutRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetInferenceTimeoutRequest) ProtoMessage()    {}
func (*QueryGetInferenceTimeoutRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{45}
}
func (m *QueryGetInferenceTimeoutRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetInferenceTimeoutRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetInferenceTimeoutRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetInferenceTimeoutRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetInferenceTimeoutRequest.Merge(m, src)
}
func (m *QueryGetInferenceTimeoutRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetInferenceTimeoutRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetInferenceTimeoutRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetInferenceTimeoutRequest proto.InternalMessageInfo

func (m *QueryGetInferenceTimeoutRequest) GetExpirationHeight() uint64 {
	if m != nil {
		return m.ExpirationHeight
	}
	return 0
}

func (m *QueryGetInferenceTimeoutRequest) GetInferenceId() string {
	if m != nil {
		return m.InferenceId
	}
	return ""
}

type QueryGetInferenceTimeoutResponse struct {
	InferenceTimeout InferenceTimeout `protobuf:"bytes,1,opt,name=inference_timeout,json=inferenceTimeout,proto3" json:"inference_timeout"`
}

func (m *QueryGetInferenceTimeoutResponse) Reset()         { *m = QueryGetInferenceTimeoutResponse{} }
func (m *QueryGetInferenceTimeoutResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetInferenceTimeoutResponse) ProtoMessage()    {}
func (*QueryGetInferenceTimeoutResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{46}
}
func (m *QueryGetInferenceTimeoutResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetInferenceTimeoutResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetInferenceTimeoutResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetInferenceTimeoutResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetInferenceTimeoutResponse.Merge(m, src)
}
func (m *QueryGetInferenceTimeoutResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetInferenceTimeoutResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetInferenceTimeoutResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetInferenceTimeoutResponse proto.InternalMessageInfo

func (m *QueryGetInferenceTimeoutResponse) GetInferenceTimeout() InferenceTimeout {
	if m != nil {
		return m.InferenceTimeout
	}
	return InferenceTimeout{}
}

type QueryAllInferenceTimeoutRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllInferenceTimeoutRequest) Reset()         { *m = QueryAllInferenceTimeoutRequest{} }
func (m *QueryAllInferenceTimeoutRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllInferenceTimeoutRequest) ProtoMessage()    {}
func (*QueryAllInferenceTimeoutRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{47}
}
func (m *QueryAllInferenceTimeoutRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllInferenceTimeoutRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllInferenceTimeoutRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllInferenceTimeoutRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllInferenceTimeoutRequest.Merge(m, src)
}
func (m *QueryAllInferenceTimeoutRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllInferenceTimeoutRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllInferenceTimeoutRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllInferenceTimeoutRequest proto.InternalMessageInfo

func (m *QueryAllInferenceTimeoutRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllInferenceTimeoutResponse struct {
	InferenceTimeout []InferenceTimeout  `protobuf:"bytes,1,rep,name=inference_timeout,json=inferenceTimeout,proto3" json:"inference_timeout"`
	Pagination       *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllInferenceTimeoutResponse) Reset()         { *m = QueryAllInferenceTimeoutResponse{} }
func (m *QueryAllInferenceTimeoutResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllInferenceTimeoutResponse) ProtoMessage()    {}
func (*QueryAllInferenceTimeoutResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{48}
}
func (m *QueryAllInferenceTimeoutResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllInferenceTimeoutResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllInferenceTimeoutResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllInferenceTimeoutResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllInferenceTimeoutResponse.Merge(m, src)
}
func (m *QueryAllInferenceTimeoutResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllInferenceTimeoutResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllInferenceTimeoutResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllInferenceTimeoutResponse proto.InternalMessageInfo

func (m *QueryAllInferenceTimeoutResponse) GetInferenceTimeout() []InferenceTimeout {
	if m != nil {
		return m.InferenceTimeout
	}
	return nil
}

func (m *QueryAllInferenceTimeoutResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetInferenceValidationDetailsRequest struct {
	EpochId     uint64 `protobuf:"varint,1,opt,name=epochId,proto3" json:"epochId,omitempty"`
	InferenceId string `protobuf:"bytes,2,opt,name=inferenceId,proto3" json:"inferenceId,omitempty"`
}

func (m *QueryGetInferenceValidationDetailsRequest) Reset() {
	*m = QueryGetInferenceValidationDetailsRequest{}
}
func (m *QueryGetInferenceValidationDetailsRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetInferenceValidationDetailsRequest) ProtoMessage() {}
func (*QueryGetInferenceValidationDetailsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{49}
}
func (m *QueryGetInferenceValidationDetailsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetInferenceValidationDetailsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetInferenceValidationDetailsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetInferenceValidationDetailsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetInferenceValidationDetailsRequest.Merge(m, src)
}
func (m *QueryGetInferenceValidationDetailsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetInferenceValidationDetailsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetInferenceValidationDetailsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetInferenceValidationDetailsRequest proto.InternalMessageInfo

func (m *QueryGetInferenceValidationDetailsRequest) GetEpochId() uint64 {
	if m != nil {
		return m.EpochId
	}
	return 0
}

func (m *QueryGetInferenceValidationDetailsRequest) GetInferenceId() string {
	if m != nil {
		return m.InferenceId
	}
	return ""
}

type QueryGetInferenceValidationDetailsResponse struct {
	InferenceValidationDetails InferenceValidationDetails `protobuf:"bytes,1,opt,name=inferenceValidationDetails,proto3" json:"inferenceValidationDetails"`
}

func (m *QueryGetInferenceValidationDetailsResponse) Reset() {
	*m = QueryGetInferenceValidationDetailsResponse{}
}
func (m *QueryGetInferenceValidationDetailsResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetInferenceValidationDetailsResponse) ProtoMessage() {}
func (*QueryGetInferenceValidationDetailsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{50}
}
func (m *QueryGetInferenceValidationDetailsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetInferenceValidationDetailsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetInferenceValidationDetailsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetInferenceValidationDetailsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetInferenceValidationDetailsResponse.Merge(m, src)
}
func (m *QueryGetInferenceValidationDetailsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetInferenceValidationDetailsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetInferenceValidationDetailsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetInferenceValidationDetailsResponse proto.InternalMessageInfo

func (m *QueryGetInferenceValidationDetailsResponse) GetInferenceValidationDetails() InferenceValidationDetails {
	if m != nil {
		return m.InferenceValidationDetails
	}
	return InferenceValidationDetails{}
}

type QueryAllInferenceValidationDetailsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllInferenceValidationDetailsRequest) Reset() {
	*m = QueryAllInferenceValidationDetailsRequest{}
}
func (m *QueryAllInferenceValidationDetailsRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllInferenceValidationDetailsRequest) ProtoMessage() {}
func (*QueryAllInferenceValidationDetailsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{51}
}
func (m *QueryAllInferenceValidationDetailsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllInferenceValidationDetailsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllInferenceValidationDetailsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllInferenceValidationDetailsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllInferenceValidationDetailsRequest.Merge(m, src)
}
func (m *QueryAllInferenceValidationDetailsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllInferenceValidationDetailsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllInferenceValidationDetailsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllInferenceValidationDetailsRequest proto.InternalMessageInfo

func (m *QueryAllInferenceValidationDetailsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllInferenceValidationDetailsResponse struct {
	InferenceValidationDetails []InferenceValidationDetails `protobuf:"bytes,1,rep,name=inferenceValidationDetails,proto3" json:"inferenceValidationDetails"`
	Pagination                 *query.PageResponse          `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllInferenceValidationDetailsResponse) Reset() {
	*m = QueryAllInferenceValidationDetailsResponse{}
}
func (m *QueryAllInferenceValidationDetailsResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllInferenceValidationDetailsResponse) ProtoMessage() {}
func (*QueryAllInferenceValidationDetailsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{52}
}
func (m *QueryAllInferenceValidationDetailsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllInferenceValidationDetailsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllInferenceValidationDetailsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllInferenceValidationDetailsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllInferenceValidationDetailsResponse.Merge(m, src)
}
func (m *QueryAllInferenceValidationDetailsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllInferenceValidationDetailsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllInferenceValidationDetailsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllInferenceValidationDetailsResponse proto.InternalMessageInfo

func (m *QueryAllInferenceValidationDetailsResponse) GetInferenceValidationDetails() []InferenceValidationDetails {
	if m != nil {
		return m.InferenceValidationDetails
	}
	return nil
}

func (m *QueryAllInferenceValidationDetailsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetInferenceValidationParametersRequest struct {
	Ids       []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	Requester string   `protobuf:"bytes,2,opt,name=requester,proto3" json:"requester,omitempty"`
}

func (m *QueryGetInferenceValidationParametersRequest) Reset() {
	*m = QueryGetInferenceValidationParametersRequest{}
}
func (m *QueryGetInferenceValidationParametersRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetInferenceValidationParametersRequest) ProtoMessage() {}
func (*QueryGetInferenceValidationParametersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{53}
}
func (m *QueryGetInferenceValidationParametersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetInferenceValidationParametersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetInferenceValidationParametersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetInferenceValidationParametersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetInferenceValidationParametersRequest.Merge(m, src)
}
func (m *QueryGetInferenceValidationParametersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetInferenceValidationParametersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetInferenceValidationParametersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetInferenceValidationParametersRequest proto.InternalMessageInfo

func (m *QueryGetInferenceValidationParametersRequest) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *QueryGetInferenceValidationParametersRequest) GetRequester() string {
	if m != nil {
		return m.Requester
	}
	return ""
}

type QueryGetInferenceValidationParametersResponse struct {
	ValidatorPower uint64                        `protobuf:"varint,1,opt,name=validator_power,json=validatorPower,proto3" json:"validator_power,omitempty"`
	CurrentHeight  uint64                        `protobuf:"varint,2,opt,name=current_height,json=currentHeight,proto3" json:"current_height,omitempty"`
	Details        []*InferenceValidationDetails `protobuf:"bytes,3,rep,name=details,proto3" json:"details,omitempty"`
	Parameters     *ValidationParams             `protobuf:"bytes,4,opt,name=parameters,proto3" json:"parameters,omitempty"`
}

func (m *QueryGetInferenceValidationParametersResponse) Reset() {
	*m = QueryGetInferenceValidationParametersResponse{}
}
func (m *QueryGetInferenceValidationParametersResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetInferenceValidationParametersResponse) ProtoMessage() {}
func (*QueryGetInferenceValidationParametersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{54}
}
func (m *QueryGetInferenceValidationParametersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetInferenceValidationParametersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetInferenceValidationParametersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetInferenceValidationParametersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetInferenceValidationParametersResponse.Merge(m, src)
}
func (m *QueryGetInferenceValidationParametersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetInferenceValidationParametersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetInferenceValidationParametersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetInferenceValidationParametersResponse proto.InternalMessageInfo

func (m *QueryGetInferenceValidationParametersResponse) GetValidatorPower() uint64 {
	if m != nil {
		return m.ValidatorPower
	}
	return 0
}

func (m *QueryGetInferenceValidationParametersResponse) GetCurrentHeight() uint64 {
	if m != nil {
		return m.CurrentHeight
	}
	return 0
}

func (m *QueryGetInferenceValidationParametersResponse) GetDetails() []*InferenceValidationDetails {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *QueryGetInferenceValidationParametersResponse) GetParameters() *ValidationParams {
	if m != nil {
		return m.Parameters
	}
	return nil
}

type QueryGetEpochPerformanceSummaryRequest struct {
	EpochStartHeight uint64 `protobuf:"varint,1,opt,name=epochStartHeight,proto3" json:"epochStartHeight,omitempty"`
	ParticipantId    string `protobuf:"bytes,2,opt,name=participantId,proto3" json:"participantId,omitempty"`
}

func (m *QueryGetEpochPerformanceSummaryRequest) Reset() {
	*m = QueryGetEpochPerformanceSummaryRequest{}
}
func (m *QueryGetEpochPerformanceSummaryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetEpochPerformanceSummaryRequest) ProtoMessage()    {}
func (*QueryGetEpochPerformanceSummaryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{55}
}
func (m *QueryGetEpochPerformanceSummaryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEpochPerformanceSummaryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEpochPerformanceSummaryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEpochPerformanceSummaryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEpochPerformanceSummaryRequest.Merge(m, src)
}
func (m *QueryGetEpochPerformanceSummaryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEpochPerformanceSummaryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEpochPerformanceSummaryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEpochPerformanceSummaryRequest proto.InternalMessageInfo

func (m *QueryGetEpochPerformanceSummaryRequest) GetEpochStartHeight() uint64 {
	if m != nil {
		return m.EpochStartHeight
	}
	return 0
}

func (m *QueryGetEpochPerformanceSummaryRequest) GetParticipantId() string {
	if m != nil {
		return m.ParticipantId
	}
	return ""
}

type QueryGetEpochPerformanceSummaryResponse struct {
	EpochPerformanceSummary EpochPerformanceSummary `protobuf:"bytes,1,opt,name=epochPerformanceSummary,proto3" json:"epochPerformanceSummary"`
}

func (m *QueryGetEpochPerformanceSummaryResponse) Reset() {
	*m = QueryGetEpochPerformanceSummaryResponse{}
}
func (m *QueryGetEpochPerformanceSummaryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetEpochPerformanceSummaryResponse) ProtoMessage()    {}
func (*QueryGetEpochPerformanceSummaryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{56}
}
func (m *QueryGetEpochPerformanceSummaryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEpochPerformanceSummaryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEpochPerformanceSummaryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEpochPerformanceSummaryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEpochPerformanceSummaryResponse.Merge(m, src)
}
func (m *QueryGetEpochPerformanceSummaryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEpochPerformanceSummaryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEpochPerformanceSummaryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEpochPerformanceSummaryResponse proto.InternalMessageInfo

func (m *QueryGetEpochPerformanceSummaryResponse) GetEpochPerformanceSummary() EpochPerformanceSummary {
	if m != nil {
		return m.EpochPerformanceSummary
	}
	return EpochPerformanceSummary{}
}

type QueryAllEpochPerformanceSummaryRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllEpochPerformanceSummaryRequest) Reset() {
	*m = QueryAllEpochPerformanceSummaryRequest{}
}
func (m *QueryAllEpochPerformanceSummaryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllEpochPerformanceSummaryRequest) ProtoMessage()    {}
func (*QueryAllEpochPerformanceSummaryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{57}
}
func (m *QueryAllEpochPerformanceSummaryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllEpochPerformanceSummaryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllEpochPerformanceSummaryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllEpochPerformanceSummaryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllEpochPerformanceSummaryRequest.Merge(m, src)
}
func (m *QueryAllEpochPerformanceSummaryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllEpochPerformanceSummaryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllEpochPerformanceSummaryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllEpochPerformanceSummaryRequest proto.InternalMessageInfo

func (m *QueryAllEpochPerformanceSummaryRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllEpochPerformanceSummaryResponse struct {
	EpochPerformanceSummary []EpochPerformanceSummary `protobuf:"bytes,1,rep,name=epochPerformanceSummary,proto3" json:"epochPerformanceSummary"`
	Pagination              *query.PageResponse       `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllEpochPerformanceSummaryResponse) Reset() {
	*m = QueryAllEpochPerformanceSummaryResponse{}
}
func (m *QueryAllEpochPerformanceSummaryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllEpochPerformanceSummaryResponse) ProtoMessage()    {}
func (*QueryAllEpochPerformanceSummaryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{58}
}
func (m *QueryAllEpochPerformanceSummaryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllEpochPerformanceSummaryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllEpochPerformanceSummaryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllEpochPerformanceSummaryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllEpochPerformanceSummaryResponse.Merge(m, src)
}
func (m *QueryAllEpochPerformanceSummaryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllEpochPerformanceSummaryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllEpochPerformanceSummaryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllEpochPerformanceSummaryResponse proto.InternalMessageInfo

func (m *QueryAllEpochPerformanceSummaryResponse) GetEpochPerformanceSummary() []EpochPerformanceSummary {
	if m != nil {
		return m.EpochPerformanceSummary
	}
	return nil
}

func (m *QueryAllEpochPerformanceSummaryResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryTrainingTaskRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryTrainingTaskRequest) Reset()         { *m = QueryTrainingTaskRequest{} }
func (m *QueryTrainingTaskRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTrainingTaskRequest) ProtoMessage()    {}
func (*QueryTrainingTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{59}
}
func (m *QueryTrainingTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTrainingTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTrainingTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTrainingTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTrainingTaskRequest.Merge(m, src)
}
func (m *QueryTrainingTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTrainingTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTrainingTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTrainingTaskRequest proto.InternalMessageInfo

func (m *QueryTrainingTaskRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryTrainingTaskResponse struct {
	Task *TrainingTask `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
}

func (m *QueryTrainingTaskResponse) Reset()         { *m = QueryTrainingTaskResponse{} }
func (m *QueryTrainingTaskResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTrainingTaskResponse) ProtoMessage()    {}
func (*QueryTrainingTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{60}
}
func (m *QueryTrainingTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTrainingTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTrainingTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTrainingTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTrainingTaskResponse.Merge(m, src)
}
func (m *QueryTrainingTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTrainingTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTrainingTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTrainingTaskResponse proto.InternalMessageInfo

func (m *QueryTrainingTaskResponse) GetTask() *TrainingTask {
	if m != nil {
		return m.Task
	}
	return nil
}

type QueryHardwareNodesRequest struct {
	Participant string `protobuf:"bytes,1,opt,name=participant,proto3" json:"participant,omitempty"`
}

func (m *QueryHardwareNodesRequest) Reset()         { *m = QueryHardwareNodesRequest{} }
func (m *QueryHardwareNodesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryHardwareNodesRequest) ProtoMessage()    {}
func (*QueryHardwareNodesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{61}
}
func (m *QueryHardwareNodesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHardwareNodesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHardwareNodesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHardwareNodesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHardwareNodesRequest.Merge(m, src)
}
func (m *QueryHardwareNodesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryHardwareNodesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHardwareNodesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHardwareNodesRequest proto.InternalMessageInfo

func (m *QueryHardwareNodesRequest) GetParticipant() string {
	if m != nil {
		return m.Participant
	}
	return ""
}

type QueryHardwareNodesResponse struct {
	Nodes *HardwareNodes `protobuf:"bytes,1,opt,name=nodes,proto3" json:"nodes,omitempty"`
}

func (m *QueryHardwareNodesResponse) Reset()         { *m = QueryHardwareNodesResponse{} }
func (m *QueryHardwareNodesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryHardwareNodesResponse) ProtoMessage()    {}
func (*QueryHardwareNodesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{62}
}
func (m *QueryHardwareNodesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHardwareNodesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHardwareNodesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHardwareNodesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHardwareNodesResponse.Merge(m, src)
}
func (m *QueryHardwareNodesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryHardwareNodesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHardwareNodesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHardwareNodesResponse proto.InternalMessageInfo

func (m *QueryHardwareNodesResponse) GetNodes() *HardwareNodes {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type QueryHardwareNodesAllRequest struct {
}

func (m *QueryHardwareNodesAllRequest) Reset()         { *m = QueryHardwareNodesAllRequest{} }
func (m *QueryHardwareNodesAllRequest) String() string { return proto.CompactTextString(m) }
func (*QueryHardwareNodesAllRequest) ProtoMessage()    {}
func (*QueryHardwareNodesAllRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{63}
}
func (m *QueryHardwareNodesAllRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHardwareNodesAllRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHardwareNodesAllRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHardwareNodesAllRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHardwareNodesAllRequest.Merge(m, src)
}
func (m *QueryHardwareNodesAllRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryHardwareNodesAllRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHardwareNodesAllRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHardwareNodesAllRequest proto.InternalMessageInfo

type QueryHardwareNodesAllResponse struct {
	Nodes []*HardwareNodes `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (m *QueryHardwareNodesAllResponse) Reset()         { *m = QueryHardwareNodesAllResponse{} }
func (m *QueryHardwareNodesAllResponse) String() string { return proto.CompactTextString(m) }
func (*QueryHardwareNodesAllResponse) ProtoMessage()    {}
func (*QueryHardwareNodesAllResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{64}
}
func (m *QueryHardwareNodesAllResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHardwareNodesAllResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHardwareNodesAllResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHardwareNodesAllResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHardwareNodesAllResponse.Merge(m, src)
}
func (m *QueryHardwareNodesAllResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryHardwareNodesAllResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHardwareNodesAllResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHardwareNodesAllResponse proto.InternalMessageInfo

func (m *QueryHardwareNodesAllResponse) GetNodes() []*HardwareNodes {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type QueryQueuedTrainingTasksRequest struct {
}

func (m *QueryQueuedTrainingTasksRequest) Reset()         { *m = QueryQueuedTrainingTasksRequest{} }
func (m *QueryQueuedTrainingTasksRequest) String() string { return proto.CompactTextString(m) }
func (*QueryQueuedTrainingTasksRequest) ProtoMessage()    {}
func (*QueryQueuedTrainingTasksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{65}
}
func (m *QueryQueuedTrainingTasksRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQueuedTrainingTasksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQueuedTrainingTasksRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQueuedTrainingTasksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQueuedTrainingTasksRequest.Merge(m, src)
}
func (m *QueryQueuedTrainingTasksRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryQueuedTrainingTasksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQueuedTrainingTasksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQueuedTrainingTasksRequest proto.InternalMessageInfo

type QueryQueuedTrainingTasksResponse struct {
	Tasks []*TrainingTask `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
}

func (m *QueryQueuedTrainingTasksResponse) Reset()         { *m = QueryQueuedTrainingTasksResponse{} }
func (m *QueryQueuedTrainingTasksResponse) String() string { return proto.CompactTextString(m) }
func (*QueryQueuedTrainingTasksResponse) ProtoMessage()    {}
func (*QueryQueuedTrainingTasksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{66}
}
func (m *QueryQueuedTrainingTasksResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQueuedTrainingTasksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQueuedTrainingTasksResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQueuedTrainingTasksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQueuedTrainingTasksResponse.Merge(m, src)
}
func (m *QueryQueuedTrainingTasksResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryQueuedTrainingTasksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQueuedTrainingTasksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQueuedTrainingTasksResponse proto.InternalMessageInfo

func (m *QueryQueuedTrainingTasksResponse) GetTasks() []*TrainingTask {
	if m != nil {
		return m.Tasks
	}
	return nil
}

type QueryTrainingTaskAllRequest struct {
}

func (m *QueryTrainingTaskAllRequest) Reset()         { *m = QueryTrainingTaskAllRequest{} }
func (m *QueryTrainingTaskAllRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTrainingTaskAllRequest) ProtoMessage()    {}
func (*QueryTrainingTaskAllRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{67}
}
func (m *QueryTrainingTaskAllRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTrainingTaskAllRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTrainingTaskAllRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTrainingTaskAllRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTrainingTaskAllRequest.Merge(m, src)
}
func (m *QueryTrainingTaskAllRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTrainingTaskAllRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTrainingTaskAllRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTrainingTaskAllRequest proto.InternalMessageInfo

type QueryTrainingTaskAllResponse struct {
	Tasks []*TrainingTask `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
}

func (m *QueryTrainingTaskAllResponse) Reset()         { *m = QueryTrainingTaskAllResponse{} }
func (m *QueryTrainingTaskAllResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTrainingTaskAllResponse) ProtoMessage()    {}
func (*QueryTrainingTaskAllResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{68}
}
func (m *QueryTrainingTaskAllResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTrainingTaskAllResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTrainingTaskAllResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTrainingTaskAllResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTrainingTaskAllResponse.Merge(m, src)
}
func (m *QueryTrainingTaskAllResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTrainingTaskAllResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTrainingTaskAllResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTrainingTaskAllResponse proto.InternalMessageInfo

func (m *QueryTrainingTaskAllResponse) GetTasks() []*TrainingTask {
	if m != nil {
		return m.Tasks
	}
	return nil
}

type QueryGetParticipantCurrentStatsRequest struct {
	ParticipantId string `protobuf:"bytes,1,opt,name=participantId,proto3" json:"participantId,omitempty"`
}

func (m *QueryGetParticipantCurrentStatsRequest) Reset() {
	*m = QueryGetParticipantCurrentStatsRequest{}
}
func (m *QueryGetParticipantCurrentStatsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetParticipantCurrentStatsRequest) ProtoMessage()    {}
func (*QueryGetParticipantCurrentStatsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{69}
}
func (m *QueryGetParticipantCurrentStatsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetParticipantCurrentStatsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetParticipantCurrentStatsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetParticipantCurrentStatsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetParticipantCurrentStatsRequest.Merge(m, src)
}
func (m *QueryGetParticipantCurrentStatsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetParticipantCurrentStatsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetParticipantCurrentStatsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetParticipantCurrentStatsRequest proto.InternalMessageInfo

func (m *QueryGetParticipantCurrentStatsRequest) GetParticipantId() string {
	if m != nil {
		return m.ParticipantId
	}
	return ""
}

type QueryGetParticipantCurrentStatsResponse struct {
	Weight     uint64 `protobuf:"varint,1,opt,name=weight,proto3" json:"weight,omitempty"`
	Reputation int32  `protobuf:"varint,2,opt,name=reputation,proto3" json:"reputation,omitempty"`
}

func (m *QueryGetParticipantCurrentStatsResponse) Reset() {
	*m = QueryGetParticipantCurrentStatsResponse{}
}
func (m *QueryGetParticipantCurrentStatsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetParticipantCurrentStatsResponse) ProtoMessage()    {}
func (*QueryGetParticipantCurrentStatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{70}
}
func (m *QueryGetParticipantCurrentStatsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetParticipantCurrentStatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetParticipantCurrentStatsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetParticipantCurrentStatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetParticipantCurrentStatsResponse.Merge(m, src)
}
func (m *QueryGetParticipantCurrentStatsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetParticipantCurrentStatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetParticipantCurrentStatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetParticipantCurrentStatsResponse proto.InternalMessageInfo

func (m *QueryGetParticipantCurrentStatsResponse) GetWeight() uint64 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *QueryGetParticipantCurrentStatsResponse) GetReputation() int32 {
	if m != nil {
		return m.Reputation
	}
	return 0
}

type QueryGetAllParticipantCurrentStatsRequest struct {
}

func (m *QueryGetAllParticipantCurrentStatsRequest) Reset() {
	*m = QueryGetAllParticipantCurrentStatsRequest{}
}
func (m *QueryGetAllParticipantCurrentStatsRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetAllParticipantCurrentStatsRequest) ProtoMessage() {}
func (*QueryGetAllParticipantCurrentStatsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{71}
}
func (m *QueryGetAllParticipantCurrentStatsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllParticipantCurrentStatsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllParticipantCurrentStatsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllParticipantCurrentStatsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllParticipantCurrentStatsRequest.Merge(m, src)
}
func (m *QueryGetAllParticipantCurrentStatsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllParticipantCurrentStatsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllParticipantCurrentStatsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllParticipantCurrentStatsRequest proto.InternalMessageInfo

type QueryGetAllParticipantCurrentStatsResponse struct {
	ParticipantCurrentStats []*ParticipantCurrentStats `protobuf:"bytes,1,rep,name=participant_current_stats,json=participantCurrentStats,proto3" json:"participant_current_stats,omitempty"`
	BlockHeight             int64                      `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	EpochId                 int64                      `protobuf:"varint,3,opt,name=epoch_id,json=epochId,proto3" json:"epoch_id,omitempty"`
}

func (m *QueryGetAllParticipantCurrentStatsResponse) Reset() {
	*m = QueryGetAllParticipantCurrentStatsResponse{}
}
func (m *QueryGetAllParticipantCurrentStatsResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetAllParticipantCurrentStatsResponse) ProtoMessage() {}
func (*QueryGetAllParticipantCurrentStatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{72}
}
func (m *QueryGetAllParticipantCurrentStatsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllParticipantCurrentStatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllParticipantCurrentStatsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllParticipantCurrentStatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllParticipantCurrentStatsResponse.Merge(m, src)
}
func (m *QueryGetAllParticipantCurrentStatsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllParticipantCurrentStatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllParticipantCurrentStatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllParticipantCurrentStatsResponse proto.InternalMessageInfo

func (m *QueryGetAllParticipantCurrentStatsResponse) GetParticipantCurrentStats() []*ParticipantCurrentStats {
	if m != nil {
		return m.ParticipantCurrentStats
	}
	return nil
}

func (m *QueryGetAllParticipantCurrentStatsResponse) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *QueryGetAllParticipantCurrentStatsResponse) GetEpochId() int64 {
	if m != nil {
		return m.EpochId
	}
	return 0
}

type ParticipantCurrentStats struct {
	ParticipantId string `protobuf:"bytes,1,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`
	Weight        uint64 `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
	Reputation    int32  `protobuf:"varint,3,opt,name=reputation,proto3" json:"reputation,omitempty"`
}

func (m *ParticipantCurrentStats) Reset()         { *m = ParticipantCurrentStats{} }
func (m *ParticipantCurrentStats) String() string { return proto.CompactTextString(m) }
func (*ParticipantCurrentStats) ProtoMessage()    {}
func (*ParticipantCurrentStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{73}
}
func (m *ParticipantCurrentStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParticipantCurrentStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParticipantCurrentStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParticipantCurrentStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParticipantCurrentStats.Merge(m, src)
}
func (m *ParticipantCurrentStats) XXX_Size() int {
	return m.Size()
}
func (m *ParticipantCurrentStats) XXX_DiscardUnknown() {
	xxx_messageInfo_ParticipantCurrentStats.DiscardUnknown(m)
}

var xxx_messageInfo_ParticipantCurrentStats proto.InternalMessageInfo

func (m *ParticipantCurrentStats) GetParticipantId() string {
	if m != nil {
		return m.ParticipantId
	}
	return ""
}

func (m *ParticipantCurrentStats) GetWeight() uint64 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *ParticipantCurrentStats) GetReputation() int32 {
	if m != nil {
		return m.Reputation
	}
	return 0
}

type ParticipantFullStats struct {
	AccountAddress           string `protobuf:"bytes,1,opt,name=account_address,json=accountAddress,proto3" json:"account_address,omitempty"`
	OperatorAddress          string `protobuf:"bytes,2,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
	Reputation               int32  `protobuf:"varint,3,opt,name=reputation,proto3" json:"reputation,omitempty"`
	EarnedCoinsCurrentEpoch  uint64 `protobuf:"varint,4,opt,name=earned_coins_current_epoch,json=earnedCoinsCurrentEpoch,proto3" json:"earned_coins_current_epoch,omitempty"`
	RewardedCoinsLatestEpoch uint64 `protobuf:"varint,5,opt,name=rewarded_coins_latest_epoch,json=rewardedCoinsLatestEpoch,proto3" json:"rewarded_coins_latest_epoch,omitempty"`
	EpochsCompleted          uint32 `protobuf:"varint,6,opt,name=epochs_completed,json=epochsCompleted,proto3" json:"epochs_completed,omitempty"`
}

func (m *ParticipantFullStats) Reset()         { *m = ParticipantFullStats{} }
func (m *ParticipantFullStats) String() string { return proto.CompactTextString(m) }
func (*ParticipantFullStats) ProtoMessage()    {}
func (*ParticipantFullStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{74}
}
func (m *ParticipantFullStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParticipantFullStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParticipantFullStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParticipantFullStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParticipantFullStats.Merge(m, src)
}
func (m *ParticipantFullStats) XXX_Size() int {
	return m.Size()
}
func (m *ParticipantFullStats) XXX_DiscardUnknown() {
	xxx_messageInfo_ParticipantFullStats.DiscardUnknown(m)
}

var xxx_messageInfo_ParticipantFullStats proto.InternalMessageInfo

func (m *ParticipantFullStats) GetAccountAddress() string {
	if m != nil {
		return m.AccountAddress
	}
	return ""
}

func (m *ParticipantFullStats) GetOperatorAddress() string {
	if m != nil {
		return m.OperatorAddress
	}
	return ""
}

func (m *ParticipantFullStats) GetReputation() int32 {
	if m != nil {
		return m.Reputation
	}
	return 0
}

func (m *ParticipantFullStats) GetEarnedCoinsCurrentEpoch() uint64 {
	if m != nil {
		return m.EarnedCoinsCurrentEpoch
	}
	return 0
}

func (m *ParticipantFullStats) GetRewardedCoinsLatestEpoch() uint64 {
	if m != nil {
		return m.RewardedCoinsLatestEpoch
	}
	return 0
}

func (m *ParticipantFullStats) GetEpochsCompleted() uint32 {
	if m != nil {
		return m.EpochsCompleted
	}
	return 0
}

type QueryParticipantsFullStatsRequest struct {
}

func (m *QueryParticipantsFullStatsRequest) Reset()         { *m = QueryParticipantsFullStatsRequest{} }
func (m *QueryParticipantsFullStatsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParticipantsFullStatsRequest) ProtoMessage()    {}
func (*QueryParticipantsFullStatsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{75}
}
func (m *QueryParticipantsFullStatsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParticipantsFullStatsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParticipantsFullStatsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParticipantsFullStatsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParticipantsFullStatsRequest.Merge(m, src)
}
func (m *QueryParticipantsFullStatsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParticipantsFullStatsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParticipantsFullStatsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParticipantsFullStatsRequest proto.InternalMessageInfo

type QueryParticipantsFullStatsResponse struct {
	ParticipantsStats []*ParticipantFullStats `protobuf:"bytes,1,rep,name=participants_stats,json=participantsStats,proto3" json:"participants_stats,omitempty"`
}

func (m *QueryParticipantsFullStatsResponse) Reset()         { *m = QueryParticipantsFullStatsResponse{} }
func (m *QueryParticipantsFullStatsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParticipantsFullStatsResponse) ProtoMessage()    {}
func (*QueryParticipantsFullStatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{76}
}
func (m *QueryParticipantsFullStatsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParticipantsFullStatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParticipantsFullStatsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParticipantsFullStatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParticipantsFullStatsResponse.Merge(m, src)
}
func (m *QueryParticipantsFullStatsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParticipantsFullStatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParticipantsFullStatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParticipantsFullStatsResponse proto.InternalMessageInfo

func (m *QueryParticipantsFullStatsResponse) GetParticipantsStats() []*ParticipantFullStats {
	if m != nil {
		return m.ParticipantsStats
	}
	return nil
}

type QueryStatsByTimePeriodByDeveloperRequest struct {
	Developer string `protobuf:"bytes,1,opt,name=developer,proto3" json:"developer,omitempty"`
	TimeFrom  int64  `protobuf:"varint,2,opt,name=time_from,json=timeFrom,proto3" json:"time_from,omitempty"`
	TimeTo    int64  `protobuf:"varint,3,opt,name=time_to,json=timeTo,proto3" json:"time_to,omitempty"`
}

func (m *QueryStatsByTimePeriodByDeveloperRequest) Reset() {
	*m = QueryStatsByTimePeriodByDeveloperRequest{}
}
func (m *QueryStatsByTimePeriodByDeveloperRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStatsByTimePeriodByDeveloperRequest) ProtoMessage()    {}
func (*QueryStatsByTimePeriodByDeveloperRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{77}
}
func (m *QueryStatsByTimePeriodByDeveloperRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStatsByTimePeriodByDeveloperRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStatsByTimePeriodByDeveloperRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStatsByTimePeriodByDeveloperRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStatsByTimePeriodByDeveloperRequest.Merge(m, src)
}
func (m *QueryStatsByTimePeriodByDeveloperRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStatsByTimePeriodByDeveloperRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStatsByTimePeriodByDeveloperRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStatsByTimePeriodByDeveloperRequest proto.InternalMessageInfo

func (m *QueryStatsByTimePeriodByDeveloperRequest) GetDeveloper() string {
	if m != nil {
		return m.Developer
	}
	return ""
}

func (m *QueryStatsByTimePeriodByDeveloperRequest) GetTimeFrom() int64 {
	if m != nil {
		return m.TimeFrom
	}
	return 0
}

func (m *QueryStatsByTimePeriodByDeveloperRequest) GetTimeTo() int64 {
	if m != nil {
		return m.TimeTo
	}
	return 0
}

type QueryStatsByTimePeriodByDeveloperResponse struct {
	Stats []*DeveloperStatsByTime `protobuf:"bytes,1,rep,name=stats,proto3" json:"stats,omitempty"`
}

func (m *QueryStatsByTimePeriodByDeveloperResponse) Reset() {
	*m = QueryStatsByTimePeriodByDeveloperResponse{}
}
func (m *QueryStatsByTimePeriodByDeveloperResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryStatsByTimePeriodByDeveloperResponse) ProtoMessage() {}
func (*QueryStatsByTimePeriodByDeveloperResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{78}
}
func (m *QueryStatsByTimePeriodByDeveloperResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStatsByTimePeriodByDeveloperResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStatsByTimePeriodByDeveloperResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStatsByTimePeriodByDeveloperResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStatsByTimePeriodByDeveloperResponse.Merge(m, src)
}
func (m *QueryStatsByTimePeriodByDeveloperResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStatsByTimePeriodByDeveloperResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStatsByTimePeriodByDeveloperResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStatsByTimePeriodByDeveloperResponse proto.InternalMessageInfo

func (m *QueryStatsByTimePeriodByDeveloperResponse) GetStats() []*DeveloperStatsByTime {
	if m != nil {
		return m.Stats
	}
	return nil
}

type QueryStatsByDeveloperAndEpochBackwardsRequest struct {
	Developer string `protobuf:"bytes,1,opt,name=developer,proto3" json:"developer,omitempty"`
	EpochsN   int32  `protobuf:"varint,2,opt,name=epochs_n,json=epochsN,proto3" json:"epochs_n,omitempty"`
}

func (m *QueryStatsByDeveloperAndEpochBackwardsRequest) Reset() {
	*m = QueryStatsByDeveloperAndEpochBackwardsRequest{}
}
func (m *QueryStatsByDeveloperAndEpochBackwardsRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryStatsByDeveloperAndEpochBackwardsRequest) ProtoMessage() {}
func (*QueryStatsByDeveloperAndEpochBackwardsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{79}
}
func (m *QueryStatsByDeveloperAndEpochBackwardsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStatsByDeveloperAndEpochBackwardsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStatsByDeveloperAndEpochBackwardsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStatsByDeveloperAndEpochBackwardsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStatsByDeveloperAndEpochBackwardsRequest.Merge(m, src)
}
func (m *QueryStatsByDeveloperAndEpochBackwardsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStatsByDeveloperAndEpochBackwardsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStatsByDeveloperAndEpochBackwardsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStatsByDeveloperAndEpochBackwardsRequest proto.InternalMessageInfo

func (m *QueryStatsByDeveloperAndEpochBackwardsRequest) GetDeveloper() string {
	if m != nil {
		return m.Developer
	}
	return ""
}

func (m *QueryStatsByDeveloperAndEpochBackwardsRequest) GetEpochsN() int32 {
	if m != nil {
		return m.EpochsN
	}
	return 0
}

type QueryInferencesAndTokensStatsByEpochsBackwardsRequest struct {
	EpochsN int32 `protobuf:"varint,1,opt,name=epochs_n,json=epochsN,proto3" json:"epochs_n,omitempty"`
}

func (m *QueryInferencesAndTokensStatsByEpochsBackwardsRequest) Reset() {
	*m = QueryInferencesAndTokensStatsByEpochsBackwardsRequest{}
}
func (m *QueryInferencesAndTokensStatsByEpochsBackwardsRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryInferencesAndTokensStatsByEpochsBackwardsRequest) ProtoMessage() {}
func (*QueryInferencesAndTokensStatsByEpochsBackwardsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{80}
}
func (m *QueryInferencesAndTokensStatsByEpochsBackwardsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInferencesAndTokensStatsByEpochsBackwardsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInferencesAndTokensStatsByEpochsBackwardsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInferencesAndTokensStatsByEpochsBackwardsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInferencesAndTokensStatsByEpochsBackwardsRequest.Merge(m, src)
}
func (m *QueryInferencesAndTokensStatsByEpochsBackwardsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryInferencesAndTokensStatsByEpochsBackwardsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInferencesAndTokensStatsByEpochsBackwardsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInferencesAndTokensStatsByEpochsBackwardsRequest proto.InternalMessageInfo

func (m *QueryInferencesAndTokensStatsByEpochsBackwardsRequest) GetEpochsN() int32 {
	if m != nil {
		return m.EpochsN
	}
	return 0
}

type QueryInferencesAndTokensStatsByTimePeriodRequest struct {
	TimeFrom int64 `protobuf:"varint,2,opt,name=time_from,json=timeFrom,proto3" json:"time_from,omitempty"`
	TimeTo   int64 `protobuf:"varint,3,opt,name=time_to,json=timeTo,proto3" json:"time_to,omitempty"`
}

func (m *QueryInferencesAndTokensStatsByTimePeriodRequest) Reset() {
	*m = QueryInferencesAndTokensStatsByTimePeriodRequest{}
}
func (m *QueryInferencesAndTokensStatsByTimePeriodRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryInferencesAndTokensStatsByTimePeriodRequest) ProtoMessage() {}
func (*QueryInferencesAndTokensStatsByTimePeriodRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{81}
}
func (m *QueryInferencesAndTokensStatsByTimePeriodRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInferencesAndTokensStatsByTimePeriodRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInferencesAndTokensStatsByTimePeriodRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInferencesAndTokensStatsByTimePeriodRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInferencesAndTokensStatsByTimePeriodRequest.Merge(m, src)
}
func (m *QueryInferencesAndTokensStatsByTimePeriodRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryInferencesAndTokensStatsByTimePeriodRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInferencesAndTokensStatsByTimePeriodRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInferencesAndTokensStatsByTimePeriodRequest proto.InternalMessageInfo

func (m *QueryInferencesAndTokensStatsByTimePeriodRequest) GetTimeFrom() int64 {
	if m != nil {
		return m.TimeFrom
	}
	return 0
}

func (m *QueryInferencesAndTokensStatsByTimePeriodRequest) GetTimeTo() int64 {
	if m != nil {
		return m.TimeTo
	}
	return 0
}

type QueryInferencesAndTokensStatsByModelsRequest struct {
	TimeFrom int64 `protobuf:"varint,2,opt,name=time_from,json=timeFrom,proto3" json:"time_from,omitempty"`
	TimeTo   int64 `protobuf:"varint,3,opt,name=time_to,json=timeTo,proto3" json:"time_to,omitempty"`
}

func (m *QueryInferencesAndTokensStatsByModelsRequest) Reset() {
	*m = QueryInferencesAndTokensStatsByModelsRequest{}
}
func (m *QueryInferencesAndTokensStatsByModelsRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryInferencesAndTokensStatsByModelsRequest) ProtoMessage() {}
func (*QueryInferencesAndTokensStatsByModelsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{82}
}
func (m *QueryInferencesAndTokensStatsByModelsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInferencesAndTokensStatsByModelsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInferencesAndTokensStatsByModelsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInferencesAndTokensStatsByModelsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInferencesAndTokensStatsByModelsRequest.Merge(m, src)
}
func (m *QueryInferencesAndTokensStatsByModelsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryInferencesAndTokensStatsByModelsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInferencesAndTokensStatsByModelsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInferencesAndTokensStatsByModelsRequest proto.InternalMessageInfo

func (m *QueryInferencesAndTokensStatsByModelsRequest) GetTimeFrom() int64 {
	if m != nil {
		return m.TimeFrom
	}
	return 0
}

func (m *QueryInferencesAndTokensStatsByModelsRequest) GetTimeTo() int64 {
	if m != nil {
		return m.TimeTo
	}
	return 0
}

type ModelStats struct {
	Model      string `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
	AiTokens   int64  `protobuf:"varint,2,opt,name=ai_tokens,json=aiTokens,proto3" json:"ai_tokens,omitempty"`
	Inferences int32  `protobuf:"varint,3,opt,name=inferences,proto3" json:"inferences,omitempty"`
}

func (m *ModelStats) Reset()         { *m = ModelStats{} }
func (m *ModelStats) String() string { return proto.CompactTextString(m) }
func (*ModelStats) ProtoMessage()    {}
func (*ModelStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{83}
}
func (m *ModelStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModelStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModelStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModelStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModelStats.Merge(m, src)
}
func (m *ModelStats) XXX_Size() int {
	return m.Size()
}
func (m *ModelStats) XXX_DiscardUnknown() {
	xxx_messageInfo_ModelStats.DiscardUnknown(m)
}

var xxx_messageInfo_ModelStats proto.InternalMessageInfo

func (m *ModelStats) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *ModelStats) GetAiTokens() int64 {
	if m != nil {
		return m.AiTokens
	}
	return 0
}

func (m *ModelStats) GetInferences() int32 {
	if m != nil {
		return m.Inferences
	}
	return 0
}

type QueryInferencesAndTokensStatsByModelsResponse struct {
	StatsModels []*ModelStats `protobuf:"bytes,1,rep,name=stats_models,json=statsModels,proto3" json:"stats_models,omitempty"`
}

func (m *QueryInferencesAndTokensStatsByModelsResponse) Reset() {
	*m = QueryInferencesAndTokensStatsByModelsResponse{}
}
func (m *QueryInferencesAndTokensStatsByModelsResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryInferencesAndTokensStatsByModelsResponse) ProtoMessage() {}
func (*QueryInferencesAndTokensStatsByModelsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{84}
}
func (m *QueryInferencesAndTokensStatsByModelsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInferencesAndTokensStatsByModelsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInferencesAndTokensStatsByModelsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInferencesAndTokensStatsByModelsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInferencesAndTokensStatsByModelsResponse.Merge(m, src)
}
func (m *QueryInferencesAndTokensStatsByModelsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryInferencesAndTokensStatsByModelsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInferencesAndTokensStatsByModelsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInferencesAndTokensStatsByModelsResponse proto.InternalMessageInfo

func (m *QueryInferencesAndTokensStatsByModelsResponse) GetStatsModels() []*ModelStats {
	if m != nil {
		return m.StatsModels
	}
	return nil
}

type QueryInferencesAndTokensStatsResponse struct {
	AiTokens             int64 `protobuf:"varint,1,opt,name=ai_tokens,json=aiTokens,proto3" json:"ai_tokens,omitempty"`
	Inferences           int32 `protobuf:"varint,2,opt,name=inferences,proto3" json:"inferences,omitempty"`
	ActualInferencesCost int64 `protobuf:"varint,3,opt,name=actual_inferences_cost,json=actualInferencesCost,proto3" json:"actual_inferences_cost,omitempty"`
}

func (m *QueryInferencesAndTokensStatsResponse) Reset()         { *m = QueryInferencesAndTokensStatsResponse{} }
func (m *QueryInferencesAndTokensStatsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryInferencesAndTokensStatsResponse) ProtoMessage()    {}
func (*QueryInferencesAndTokensStatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{85}
}
func (m *QueryInferencesAndTokensStatsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInferencesAndTokensStatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInferencesAndTokensStatsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInferencesAndTokensStatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInferencesAndTokensStatsResponse.Merge(m, src)
}
func (m *QueryInferencesAndTokensStatsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryInferencesAndTokensStatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInferencesAndTokensStatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInferencesAndTokensStatsResponse proto.InternalMessageInfo

func (m *QueryInferencesAndTokensStatsResponse) GetAiTokens() int64 {
	if m != nil {
		return m.AiTokens
	}
	return 0
}

func (m *QueryInferencesAndTokensStatsResponse) GetInferences() int32 {
	if m != nil {
		return m.Inferences
	}
	return 0
}

func (m *QueryInferencesAndTokensStatsResponse) GetActualInferencesCost() int64 {
	if m != nil {
		return m.ActualInferencesCost
	}
	return 0
}

type QueryCountAllParticipantsRequest struct {
}

func (m *QueryCountAllParticipantsRequest) Reset()         { *m = QueryCountAllParticipantsRequest{} }
func (m *QueryCountAllParticipantsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCountAllParticipantsRequest) ProtoMessage()    {}
func (*QueryCountAllParticipantsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{86}
}
func (m *QueryCountAllParticipantsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCountAllParticipantsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCountAllParticipantsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCountAllParticipantsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCountAllParticipantsRequest.Merge(m, src)
}
func (m *QueryCountAllParticipantsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCountAllParticipantsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCountAllParticipantsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCountAllParticipantsRequest proto.InternalMessageInfo

type QueryCountAllParticipantsResponse struct {
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
}

func (m *QueryCountAllParticipantsResponse) Reset()         { *m = QueryCountAllParticipantsResponse{} }
func (m *QueryCountAllParticipantsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCountAllParticipantsResponse) ProtoMessage()    {}
func (*QueryCountAllParticipantsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{87}
}
func (m *QueryCountAllParticipantsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCountAllParticipantsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCountAllParticipantsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCountAllParticipantsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCountAllParticipantsResponse.Merge(m, src)
}
func (m *QueryCountAllParticipantsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCountAllParticipantsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCountAllParticipantsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCountAllParticipantsResponse proto.InternalMessageInfo

func (m *QueryCountAllParticipantsResponse) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

type QueryDebugStatsRequest struct {
}

func (m *QueryDebugStatsRequest) Reset()         { *m = QueryDebugStatsRequest{} }
func (m *QueryDebugStatsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDebugStatsRequest) ProtoMessage()    {}
func (*QueryDebugStatsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{88}
}
func (m *QueryDebugStatsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDebugStatsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDebugStatsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDebugStatsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDebugStatsRequest.Merge(m, src)
}
func (m *QueryDebugStatsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDebugStatsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDebugStatsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDebugStatsRequest proto.InternalMessageInfo

type QueryDebugStatsResponse struct {
	StatsByTime  []*QueryDebugStatsResponse_TemporaryTimeStat  `protobuf:"bytes,1,rep,name=stats_by_time,json=statsByTime,proto3" json:"stats_by_time,omitempty"`
	StatsByEpoch []*QueryDebugStatsResponse_TemporaryEpochStat `protobuf:"bytes,2,rep,name=stats_by_epoch,json=statsByEpoch,proto3" json:"stats_by_epoch,omitempty"`
}

func (m *QueryDebugStatsResponse) Reset()         { *m = QueryDebugStatsResponse{} }
func (m *QueryDebugStatsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDebugStatsResponse) ProtoMessage()    {}
func (*QueryDebugStatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{89}
}
func (m *QueryDebugStatsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDebugStatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDebugStatsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDebugStatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDebugStatsResponse.Merge(m, src)
}
func (m *QueryDebugStatsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDebugStatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDebugStatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDebugStatsResponse proto.InternalMessageInfo

func (m *QueryDebugStatsResponse) GetStatsByTime() []*QueryDebugStatsResponse_TemporaryTimeStat {
	if m != nil {
		return m.StatsByTime
	}
	return nil
}

func (m *QueryDebugStatsResponse) GetStatsByEpoch() []*QueryDebugStatsResponse_TemporaryEpochStat {
	if m != nil {
		return m.StatsByEpoch
	}
	return nil
}

type QueryDebugStatsResponse_TemporaryTimeStat struct {
	Developer string                  `protobuf:"bytes,1,opt,name=developer,proto3" json:"developer,omitempty"`
	Stats     []*DeveloperStatsByTime `protobuf:"bytes,2,rep,name=stats,proto3" json:"stats,omitempty"`
}

func (m *QueryDebugStatsResponse_TemporaryTimeStat) Reset() {
	*m = QueryDebugStatsResponse_TemporaryTimeStat{}
}
func (m *QueryDebugStatsResponse_TemporaryTimeStat) String() string {
	return proto.CompactTextString(m)
}
func (*QueryDebugStatsResponse_TemporaryTimeStat) ProtoMessage() {}
func (*QueryDebugStatsResponse_TemporaryTimeStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{89, 0}
}
func (m *QueryDebugStatsResponse_TemporaryTimeStat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDebugStatsResponse_TemporaryTimeStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDebugStatsResponse_TemporaryTimeStat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDebugStatsResponse_TemporaryTimeStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDebugStatsResponse_TemporaryTimeStat.Merge(m, src)
}
func (m *QueryDebugStatsResponse_TemporaryTimeStat) XXX_Size() int {
	return m.Size()
}
func (m *QueryDebugStatsResponse_TemporaryTimeStat) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDebugStatsResponse_TemporaryTimeStat.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDebugStatsResponse_TemporaryTimeStat proto.InternalMessageInfo

func (m *QueryDebugStatsResponse_TemporaryTimeStat) GetDeveloper() string {
	if m != nil {
		return m.Developer
	}
	return ""
}

func (m *QueryDebugStatsResponse_TemporaryTimeStat) GetStats() []*DeveloperStatsByTime {
	if m != nil {
		return m.Stats
	}
	return nil
}

type QueryDebugStatsResponse_TemporaryEpochStat struct {
	Developer string                   `protobuf:"bytes,1,opt,name=developer,proto3" json:"developer,omitempty"`
	Stats     []*DeveloperStatsByEpoch `protobuf:"bytes,2,rep,name=stats,proto3" json:"stats,omitempty"`
}

func (m *QueryDebugStatsResponse_TemporaryEpochStat) Reset() {
	*m = QueryDebugStatsResponse_TemporaryEpochStat{}
}
func (m *QueryDebugStatsResponse_TemporaryEpochStat) String() string {
	return proto.CompactTextString(m)
}
func (*QueryDebugStatsResponse_TemporaryEpochStat) ProtoMessage() {}
func (*QueryDebugStatsResponse_TemporaryEpochStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{89, 1}
}
func (m *QueryDebugStatsResponse_TemporaryEpochStat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDebugStatsResponse_TemporaryEpochStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDebugStatsResponse_TemporaryEpochStat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDebugStatsResponse_TemporaryEpochStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDebugStatsResponse_TemporaryEpochStat.Merge(m, src)
}
func (m *QueryDebugStatsResponse_TemporaryEpochStat) XXX_Size() int {
	return m.Size()
}
func (m *QueryDebugStatsResponse_TemporaryEpochStat) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDebugStatsResponse_TemporaryEpochStat.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDebugStatsResponse_TemporaryEpochStat proto.InternalMessageInfo

func (m *QueryDebugStatsResponse_TemporaryEpochStat) GetDeveloper() string {
	if m != nil {
		return m.Developer
	}
	return ""
}

func (m *QueryDebugStatsResponse_TemporaryEpochStat) GetStats() []*DeveloperStatsByEpoch {
	if m != nil {
		return m.Stats
	}
	return nil
}

type QueryGetMinimumValidationAverageRequest struct {
}

func (m *QueryGetMinimumValidationAverageRequest) Reset() {
	*m = QueryGetMinimumValidationAverageRequest{}
}
func (m *QueryGetMinimumValidationAverageRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetMinimumValidationAverageRequest) ProtoMessage()    {}
func (*QueryGetMinimumValidationAverageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{90}
}
func (m *QueryGetMinimumValidationAverageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMinimumValidationAverageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMinimumValidationAverageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMinimumValidationAverageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMinimumValidationAverageRequest.Merge(m, src)
}
func (m *QueryGetMinimumValidationAverageRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMinimumValidationAverageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMinimumValidationAverageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMinimumValidationAverageRequest proto.InternalMessageInfo

type QueryGetMinimumValidationAverageResponse struct {
	TrafficBasis             uint64 `protobuf:"varint,1,opt,name=traffic_basis,json=trafficBasis,proto3" json:"traffic_basis,omitempty"`
	MinimumValidationAverage string `protobuf:"bytes,2,opt,name=minimum_validation_average,json=minimumValidationAverage,proto3" json:"minimum_validation_average,omitempty"`
	BlockHeight              uint64 `protobuf:"varint,3,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *QueryGetMinimumValidationAverageResponse) Reset() {
	*m = QueryGetMinimumValidationAverageResponse{}
}
func (m *QueryGetMinimumValidationAverageResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetMinimumValidationAverageResponse) ProtoMessage()    {}
func (*QueryGetMinimumValidationAverageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{91}
}
func (m *QueryGetMinimumValidationAverageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMinimumValidationAverageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMinimumValidationAverageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMinimumValidationAverageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMinimumValidationAverageResponse.Merge(m, src)
}
func (m *QueryGetMinimumValidationAverageResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMinimumValidationAverageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMinimumValidationAverageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMinimumValidationAverageResponse proto.InternalMessageInfo

func (m *QueryGetMinimumValidationAverageResponse) GetTrafficBasis() uint64 {
	if m != nil {
		return m.TrafficBasis
	}
	return 0
}

func (m *QueryGetMinimumValidationAverageResponse) GetMinimumValidationAverage() string {
	if m != nil {
		return m.MinimumValidationAverage
	}
	return ""
}

func (m *QueryGetMinimumValidationAverageResponse) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type QueryInProgressTrainingTasksRequest struct {
}

func (m *QueryInProgressTrainingTasksRequest) Reset()         { *m = QueryInProgressTrainingTasksRequest{} }
func (m *QueryInProgressTrainingTasksRequest) String() string { return proto.CompactTextString(m) }
func (*QueryInProgressTrainingTasksRequest) ProtoMessage()    {}
func (*QueryInProgressTrainingTasksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{92}
}
func (m *QueryInProgressTrainingTasksRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInProgressTrainingTasksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInProgressTrainingTasksRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInProgressTrainingTasksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInProgressTrainingTasksRequest.Merge(m, src)
}
func (m *QueryInProgressTrainingTasksRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryInProgressTrainingTasksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInProgressTrainingTasksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInProgressTrainingTasksRequest proto.InternalMessageInfo

type QueryInProgressTrainingTasksResponse struct {
	Tasks []*TrainingTask `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
}

func (m *QueryInProgressTrainingTasksResponse) Reset()         { *m = QueryInProgressTrainingTasksResponse{} }
func (m *QueryInProgressTrainingTasksResponse) String() string { return proto.CompactTextString(m) }
func (*QueryInProgressTrainingTasksResponse) ProtoMessage()    {}
func (*QueryInProgressTrainingTasksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{93}
}
func (m *QueryInProgressTrainingTasksResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInProgressTrainingTasksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInProgressTrainingTasksResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInProgressTrainingTasksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInProgressTrainingTasksResponse.Merge(m, src)
}
func (m *QueryInProgressTrainingTasksResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryInProgressTrainingTasksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInProgressTrainingTasksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInProgressTrainingTasksResponse proto.InternalMessageInfo

func (m *QueryInProgressTrainingTasksResponse) GetTasks() []*TrainingTask {
	if m != nil {
		return m.Tasks
	}
	return nil
}

type QueryGetPartialUpgradeRequest struct {
	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryGetPartialUpgradeRequest) Reset()         { *m = QueryGetPartialUpgradeRequest{} }
func (m *QueryGetPartialUpgradeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPartialUpgradeRequest) ProtoMessage()    {}
func (*QueryGetPartialUpgradeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{94}
}
func (m *QueryGetPartialUpgradeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPartialUpgradeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPartialUpgradeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPartialUpgradeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPartialUpgradeRequest.Merge(m, src)
}
func (m *QueryGetPartialUpgradeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPartialUpgradeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPartialUpgradeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPartialUpgradeRequest proto.InternalMessageInfo

func (m *QueryGetPartialUpgradeRequest) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type QueryGetPartialUpgradeResponse struct {
	PartialUpgrade PartialUpgrade `protobuf:"bytes,1,opt,name=partialUpgrade,proto3" json:"partialUpgrade"`
}

func (m *QueryGetPartialUpgradeResponse) Reset()         { *m = QueryGetPartialUpgradeResponse{} }
func (m *QueryGetPartialUpgradeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPartialUpgradeResponse) ProtoMessage()    {}
func (*QueryGetPartialUpgradeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{95}
}
func (m *QueryGetPartialUpgradeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPartialUpgradeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPartialUpgradeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPartialUpgradeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPartialUpgradeResponse.Merge(m, src)
}
func (m *QueryGetPartialUpgradeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPartialUpgradeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPartialUpgradeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPartialUpgradeResponse proto.InternalMessageInfo

func (m *QueryGetPartialUpgradeResponse) GetPartialUpgrade() PartialUpgrade {
	if m != nil {
		return m.PartialUpgrade
	}
	return PartialUpgrade{}
}

type QueryAllPartialUpgradeRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPartialUpgradeRequest) Reset()         { *m = QueryAllPartialUpgradeRequest{} }
func (m *QueryAllPartialUpgradeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPartialUpgradeRequest) ProtoMessage()    {}
func (*QueryAllPartialUpgradeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{96}
}
func (m *QueryAllPartialUpgradeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPartialUpgradeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPartialUpgradeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPartialUpgradeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPartialUpgradeRequest.Merge(m, src)
}
func (m *QueryAllPartialUpgradeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPartialUpgradeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPartialUpgradeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPartialUpgradeRequest proto.InternalMessageInfo

func (m *QueryAllPartialUpgradeRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPartialUpgradeResponse struct {
	PartialUpgrade []PartialUpgrade    `protobuf:"bytes,1,rep,name=partialUpgrade,proto3" json:"partialUpgrade"`
	Pagination     *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPartialUpgradeResponse) Reset()         { *m = QueryAllPartialUpgradeResponse{} }
func (m *QueryAllPartialUpgradeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPartialUpgradeResponse) ProtoMessage()    {}
func (*QueryAllPartialUpgradeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{97}
}
func (m *QueryAllPartialUpgradeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPartialUpgradeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPartialUpgradeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPartialUpgradeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPartialUpgradeResponse.Merge(m, src)
}
func (m *QueryAllPartialUpgradeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPartialUpgradeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPartialUpgradeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPartialUpgradeResponse proto.InternalMessageInfo

func (m *QueryAllPartialUpgradeResponse) GetPartialUpgrade() []PartialUpgrade {
	if m != nil {
		return m.PartialUpgrade
	}
	return nil
}

func (m *QueryAllPartialUpgradeResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryTrainingKvRecordRequest struct {
	TaskId uint64 `protobuf:"varint,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	Key    string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *QueryTrainingKvRecordRequest) Reset()         { *m = QueryTrainingKvRecordRequest{} }
func (m *QueryTrainingKvRecordRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTrainingKvRecordRequest) ProtoMessage()    {}
func (*QueryTrainingKvRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{98}
}
func (m *QueryTrainingKvRecordRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTrainingKvRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTrainingKvRecordRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTrainingKvRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTrainingKvRecordRequest.Merge(m, src)
}
func (m *QueryTrainingKvRecordRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTrainingKvRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTrainingKvRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTrainingKvRecordRequest proto.InternalMessageInfo

func (m *QueryTrainingKvRecordRequest) GetTaskId() uint64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *QueryTrainingKvRecordRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type QueryTrainingKvRecordResponse struct {
	Record *TrainingTaskKVRecord `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
}

func (m *QueryTrainingKvRecordResponse) Reset()         { *m = QueryTrainingKvRecordResponse{} }
func (m *QueryTrainingKvRecordResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTrainingKvRecordResponse) ProtoMessage()    {}
func (*QueryTrainingKvRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{99}
}
func (m *QueryTrainingKvRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTrainingKvRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTrainingKvRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTrainingKvRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTrainingKvRecordResponse.Merge(m, src)
}
func (m *QueryTrainingKvRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTrainingKvRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTrainingKvRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTrainingKvRecordResponse proto.InternalMessageInfo

func (m *QueryTrainingKvRecordResponse) GetRecord() *TrainingTaskKVRecord {
	if m != nil {
		return m.Record
	}
	return nil
}

type QueryListTrainingKvRecordKeysRequest struct {
	TaskId uint64 `protobuf:"varint,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (m *QueryListTrainingKvRecordKeysRequest) Reset()         { *m = QueryListTrainingKvRecordKeysRequest{} }
func (m *QueryListTrainingKvRecordKeysRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListTrainingKvRecordKeysRequest) ProtoMessage()    {}
func (*QueryListTrainingKvRecordKeysRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{100}
}
func (m *QueryListTrainingKvRecordKeysRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListTrainingKvRecordKeysRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListTrainingKvRecordKeysRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListTrainingKvRecordKeysRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListTrainingKvRecordKeysRequest.Merge(m, src)
}
func (m *QueryListTrainingKvRecordKeysRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListTrainingKvRecordKeysRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListTrainingKvRecordKeysRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListTrainingKvRecordKeysRequest proto.InternalMessageInfo

func (m *QueryListTrainingKvRecordKeysRequest) GetTaskId() uint64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

type QueryListTrainingKvRecordKeysResponse struct {
	Keys []string `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (m *QueryListTrainingKvRecordKeysResponse) Reset()         { *m = QueryListTrainingKvRecordKeysResponse{} }
func (m *QueryListTrainingKvRecordKeysResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListTrainingKvRecordKeysResponse) ProtoMessage()    {}
func (*QueryListTrainingKvRecordKeysResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{101}
}
func (m *QueryListTrainingKvRecordKeysResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListTrainingKvRecordKeysResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListTrainingKvRecordKeysResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListTrainingKvRecordKeysResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListTrainingKvRecordKeysResponse.Merge(m, src)
}
func (m *QueryListTrainingKvRecordKeysResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListTrainingKvRecordKeysResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListTrainingKvRecordKeysResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListTrainingKvRecordKeysResponse proto.InternalMessageInfo

func (m *QueryListTrainingKvRecordKeysResponse) GetKeys() []string {
	if m != nil {
		return m.Keys
	}
	return nil
}

type QueryTrainingBarrierRequest struct {
	Req *GetBarrierStatusRequest `protobuf:"bytes,1,opt,name=req,proto3" json:"req,omitempty"`
}

func (m *QueryTrainingBarrierRequest) Reset()         { *m = QueryTrainingBarrierRequest{} }
func (m *QueryTrainingBarrierRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTrainingBarrierRequest) ProtoMessage()    {}
func (*QueryTrainingBarrierRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{102}
}
func (m *QueryTrainingBarrierRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTrainingBarrierRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTrainingBarrierRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTrainingBarrierRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTrainingBarrierRequest.Merge(m, src)
}
func (m *QueryTrainingBarrierRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTrainingBarrierRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTrainingBarrierRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTrainingBarrierRequest proto.InternalMessageInfo

func (m *QueryTrainingBarrierRequest) GetReq() *GetBarrierStatusRequest {
	if m != nil {
		return m.Req
	}
	return nil
}

type QueryTrainingBarrierResponse struct {
	Resp *GetBarrierStatusResponse `protobuf:"bytes,2,opt,name=resp,proto3" json:"resp,omitempty"`
}

func (m *QueryTrainingBarrierResponse) Reset()         { *m = QueryTrainingBarrierResponse{} }
func (m *QueryTrainingBarrierResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTrainingBarrierResponse) ProtoMessage()    {}
func (*QueryTrainingBarrierResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{103}
}
func (m *QueryTrainingBarrierResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTrainingBarrierResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTrainingBarrierResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTrainingBarrierResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTrainingBarrierResponse.Merge(m, src)
}
func (m *QueryTrainingBarrierResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTrainingBarrierResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTrainingBarrierResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTrainingBarrierResponse proto.InternalMessageInfo

func (m *QueryTrainingBarrierResponse) GetResp() *GetBarrierStatusResponse {
	if m != nil {
		return m.Resp
	}
	return nil
}

type QueryTrainingAliveNodesRequest struct {
	Req *GetAliveNodesRequest `protobuf:"bytes,1,opt,name=req,proto3" json:"req,omitempty"`
}

func (m *QueryTrainingAliveNodesRequest) Reset()         { *m = QueryTrainingAliveNodesRequest{} }
func (m *QueryTrainingAliveNodesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTrainingAliveNodesRequest) ProtoMessage()    {}
func (*QueryTrainingAliveNodesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{104}
}
func (m *QueryTrainingAliveNodesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTrainingAliveNodesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTrainingAliveNodesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTrainingAliveNodesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTrainingAliveNodesRequest.Merge(m, src)
}
func (m *QueryTrainingAliveNodesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTrainingAliveNodesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTrainingAliveNodesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTrainingAliveNodesRequest proto.InternalMessageInfo

func (m *QueryTrainingAliveNodesRequest) GetReq() *GetAliveNodesRequest {
	if m != nil {
		return m.Req
	}
	return nil
}

type QueryTrainingAliveNodesResponse struct {
	Resp *GetAliveNodesResponse `protobuf:"bytes,2,opt,name=resp,proto3" json:"resp,omitempty"`
}

func (m *QueryTrainingAliveNodesResponse) Reset()         { *m = QueryTrainingAliveNodesResponse{} }
func (m *QueryTrainingAliveNodesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTrainingAliveNodesResponse) ProtoMessage()    {}
func (*QueryTrainingAliveNodesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{105}
}
func (m *QueryTrainingAliveNodesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTrainingAliveNodesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTrainingAliveNodesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTrainingAliveNodesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTrainingAliveNodesResponse.Merge(m, src)
}
func (m *QueryTrainingAliveNodesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTrainingAliveNodesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTrainingAliveNodesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTrainingAliveNodesResponse proto.InternalMessageInfo

func (m *QueryTrainingAliveNodesResponse) GetResp() *GetAliveNodesResponse {
	if m != nil {
		return m.Resp
	}
	return nil
}

type QueryGetBridgeTransactionRequest struct {
	OriginChain  string `protobuf:"bytes,1,opt,name=origin_chain,json=originChain,proto3" json:"origin_chain,omitempty"`
	BlockNumber  string `protobuf:"bytes,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	ReceiptIndex string `protobuf:"bytes,3,opt,name=receipt_index,json=receiptIndex,proto3" json:"receipt_index,omitempty"`
}

func (m *QueryGetBridgeTransactionRequest) Reset()         { *m = QueryGetBridgeTransactionRequest{} }
func (m *QueryGetBridgeTransactionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetBridgeTransactionRequest) ProtoMessage()    {}
func (*QueryGetBridgeTransactionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{106}
}
func (m *QueryGetBridgeTransactionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBridgeTransactionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBridgeTransactionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBridgeTransactionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBridgeTransactionRequest.Merge(m, src)
}
func (m *QueryGetBridgeTransactionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBridgeTransactionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBridgeTransactionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBridgeTransactionRequest proto.InternalMessageInfo

func (m *QueryGetBridgeTransactionRequest) GetOriginChain() string {
	if m != nil {
		return m.OriginChain
	}
	return ""
}

func (m *QueryGetBridgeTransactionRequest) GetBlockNumber() string {
	if m != nil {
		return m.BlockNumber
	}
	return ""
}

func (m *QueryGetBridgeTransactionRequest) GetReceiptIndex() string {
	if m != nil {
		return m.ReceiptIndex
	}
	return ""
}

type QueryGetBridgeTransactionResponse struct {
	BridgeTransaction BridgeTransaction `protobuf:"bytes,1,opt,name=bridgeTransaction,proto3" json:"bridgeTransaction"`
}

func (m *QueryGetBridgeTransactionResponse) Reset()         { *m = QueryGetBridgeTransactionResponse{} }
func (m *QueryGetBridgeTransactionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetBridgeTransactionResponse) ProtoMessage()    {}
func (*QueryGetBridgeTransactionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{107}
}
func (m *QueryGetBridgeTransactionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBridgeTransactionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBridgeTransactionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBridgeTransactionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBridgeTransactionResponse.Merge(m, src)
}
func (m *QueryGetBridgeTransactionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBridgeTransactionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBridgeTransactionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBridgeTransactionResponse proto.InternalMessageInfo

func (m *QueryGetBridgeTransactionResponse) GetBridgeTransaction() BridgeTransaction {
	if m != nil {
		return m.BridgeTransaction
	}
	return BridgeTransaction{}
}

type QueryAllBridgeTransactionsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBridgeTransactionsRequest) Reset()         { *m = QueryAllBridgeTransactionsRequest{} }
func (m *QueryAllBridgeTransactionsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllBridgeTransactionsRequest) ProtoMessage()    {}
func (*QueryAllBridgeTransactionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{108}
}
func (m *QueryAllBridgeTransactionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBridgeTransactionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBridgeTransactionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBridgeTransactionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBridgeTransactionsRequest.Merge(m, src)
}
func (m *QueryAllBridgeTransactionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBridgeTransactionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBridgeTransactionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBridgeTransactionsRequest proto.InternalMessageInfo

func (m *QueryAllBridgeTransactionsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllBridgeTransactionsResponse struct {
	BridgeTransactions []BridgeTransaction `protobuf:"bytes,1,rep,name=bridgeTransactions,proto3" json:"bridgeTransactions"`
	Pagination         *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBridgeTransactionsResponse) Reset()         { *m = QueryAllBridgeTransactionsResponse{} }
func (m *QueryAllBridgeTransactionsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllBridgeTransactionsResponse) ProtoMessage()    {}
func (*QueryAllBridgeTransactionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{109}
}
func (m *QueryAllBridgeTransactionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBridgeTransactionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBridgeTransactionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBridgeTransactionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBridgeTransactionsResponse.Merge(m, src)
}
func (m *QueryAllBridgeTransactionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBridgeTransactionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBridgeTransactionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBridgeTransactionsResponse proto.InternalMessageInfo

func (m *QueryAllBridgeTransactionsResponse) GetBridgeTransactions() []BridgeTransaction {
	if m != nil {
		return m.BridgeTransactions
	}
	return nil
}

func (m *QueryAllBridgeTransactionsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryEpochInfoRequest struct {
}

func (m *QueryEpochInfoRequest) Reset()         { *m = QueryEpochInfoRequest{} }
func (m *QueryEpochInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEpochInfoRequest) ProtoMessage()    {}
func (*QueryEpochInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{110}
}
func (m *QueryEpochInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEpochInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEpochInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEpochInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEpochInfoRequest.Merge(m, src)
}
func (m *QueryEpochInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEpochInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEpochInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEpochInfoRequest proto.InternalMessageInfo

type QueryEpochInfoResponse struct {
	BlockHeight int64  `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	Params      Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
	LatestEpoch Epoch  `protobuf:"bytes,3,opt,name=latest_epoch,json=latestEpoch,proto3" json:"latest_epoch"`
}

func (m *QueryEpochInfoResponse) Reset()         { *m = QueryEpochInfoResponse{} }
func (m *QueryEpochInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEpochInfoResponse) ProtoMessage()    {}
func (*QueryEpochInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{111}
}
func (m *QueryEpochInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEpochInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEpochInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEpochInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEpochInfoResponse.Merge(m, src)
}
func (m *QueryEpochInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEpochInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEpochInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEpochInfoResponse proto.InternalMessageInfo

func (m *QueryEpochInfoResponse) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *QueryEpochInfoResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *QueryEpochInfoResponse) GetLatestEpoch() Epoch {
	if m != nil {
		return m.LatestEpoch
	}
	return Epoch{}
}

// Dynamic pricing query messages
type QueryGetModelPerTokenPriceRequest struct {
	ModelId string `protobuf:"bytes,1,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
}

func (m *QueryGetModelPerTokenPriceRequest) Reset()         { *m = QueryGetModelPerTokenPriceRequest{} }
func (m *QueryGetModelPerTokenPriceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetModelPerTokenPriceRequest) ProtoMessage()    {}
func (*QueryGetModelPerTokenPriceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{112}
}
func (m *QueryGetModelPerTokenPriceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetModelPerTokenPriceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetModelPerTokenPriceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetModelPerTokenPriceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetModelPerTokenPriceRequest.Merge(m, src)
}
func (m *QueryGetModelPerTokenPriceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetModelPerTokenPriceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetModelPerTokenPriceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetModelPerTokenPriceRequest proto.InternalMessageInfo

func (m *QueryGetModelPerTokenPriceRequest) GetModelId() string {
	if m != nil {
		return m.ModelId
	}
	return ""
}

type QueryGetModelPerTokenPriceResponse struct {
	Price uint64 `protobuf:"varint,1,opt,name=price,proto3" json:"price,omitempty"`
	Found bool   `protobuf:"varint,2,opt,name=found,proto3" json:"found,omitempty"`
}

func (m *QueryGetModelPerTokenPriceResponse) Reset()         { *m = QueryGetModelPerTokenPriceResponse{} }
func (m *QueryGetModelPerTokenPriceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetModelPerTokenPriceResponse) ProtoMessage()    {}
func (*QueryGetModelPerTokenPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{113}
}
func (m *QueryGetModelPerTokenPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetModelPerTokenPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetModelPerTokenPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetModelPerTokenPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetModelPerTokenPriceResponse.Merge(m, src)
}
func (m *QueryGetModelPerTokenPriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetModelPerTokenPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetModelPerTokenPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetModelPerTokenPriceResponse proto.InternalMessageInfo

func (m *QueryGetModelPerTokenPriceResponse) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *QueryGetModelPerTokenPriceResponse) GetFound() bool {
	if m != nil {
		return m.Found
	}
	return false
}

type QueryGetAllModelPerTokenPricesRequest struct {
}

func (m *QueryGetAllModelPerTokenPricesRequest) Reset()         { *m = QueryGetAllModelPerTokenPricesRequest{} }
func (m *QueryGetAllModelPerTokenPricesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllModelPerTokenPricesRequest) ProtoMessage()    {}
func (*QueryGetAllModelPerTokenPricesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{114}
}
func (m *QueryGetAllModelPerTokenPricesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllModelPerTokenPricesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllModelPerTokenPricesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllModelPerTokenPricesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllModelPerTokenPricesRequest.Merge(m, src)
}
func (m *QueryGetAllModelPerTokenPricesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllModelPerTokenPricesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllModelPerTokenPricesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllModelPerTokenPricesRequest proto.InternalMessageInfo

type ModelPrice struct {
	ModelId string `protobuf:"bytes,1,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	Price   uint64 `protobuf:"varint,2,opt,name=price,proto3" json:"price,omitempty"`
}

func (m *ModelPrice) Reset()         { *m = ModelPrice{} }
func (m *ModelPrice) String() string { return proto.CompactTextString(m) }
func (*ModelPrice) ProtoMessage()    {}
func (*ModelPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{115}
}
func (m *ModelPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModelPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModelPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModelPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModelPrice.Merge(m, src)
}
func (m *ModelPrice) XXX_Size() int {
	return m.Size()
}
func (m *ModelPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_ModelPrice.DiscardUnknown(m)
}

var xxx_messageInfo_ModelPrice proto.InternalMessageInfo

func (m *ModelPrice) GetModelId() string {
	if m != nil {
		return m.ModelId
	}
	return ""
}

func (m *ModelPrice) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

type QueryGetAllModelPerTokenPricesResponse struct {
	ModelPrices []ModelPrice `protobuf:"bytes,1,rep,name=model_prices,json=modelPrices,proto3" json:"model_prices"`
}

func (m *QueryGetAllModelPerTokenPricesResponse) Reset() {
	*m = QueryGetAllModelPerTokenPricesResponse{}
}
func (m *QueryGetAllModelPerTokenPricesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllModelPerTokenPricesResponse) ProtoMessage()    {}
func (*QueryGetAllModelPerTokenPricesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{116}
}
func (m *QueryGetAllModelPerTokenPricesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllModelPerTokenPricesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllModelPerTokenPricesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllModelPerTokenPricesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllModelPerTokenPricesResponse.Merge(m, src)
}
func (m *QueryGetAllModelPerTokenPricesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllModelPerTokenPricesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllModelPerTokenPricesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllModelPerTokenPricesResponse proto.InternalMessageInfo

func (m *QueryGetAllModelPerTokenPricesResponse) GetModelPrices() []ModelPrice {
	if m != nil {
		return m.ModelPrices
	}
	return nil
}

type QueryGetModelCapacityRequest struct {
	ModelId string `protobuf:"bytes,1,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
}

func (m *QueryGetModelCapacityRequest) Reset()         { *m = QueryGetModelCapacityRequest{} }
func (m *QueryGetModelCapacityRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetModelCapacityRequest) ProtoMessage()    {}
func (*QueryGetModelCapacityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{117}
}
func (m *QueryGetModelCapacityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetModelCapacityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetModelCapacityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetModelCapacityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetModelCapacityRequest.Merge(m, src)
}
func (m *QueryGetModelCapacityRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetModelCapacityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetModelCapacityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetModelCapacityRequest proto.InternalMessageInfo

func (m *QueryGetModelCapacityRequest) GetModelId() string {
	if m != nil {
		return m.ModelId
	}
	return ""
}

type QueryGetModelCapacityResponse struct {
	Capacity uint64 `protobuf:"varint,1,opt,name=capacity,proto3" json:"capacity,omitempty"`
	Found    bool   `protobuf:"varint,2,opt,name=found,proto3" json:"found,omitempty"`
}

func (m *QueryGetModelCapacityResponse) Reset()         { *m = QueryGetModelCapacityResponse{} }
func (m *QueryGetModelCapacityResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetModelCapacityResponse) ProtoMessage()    {}
func (*QueryGetModelCapacityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{118}
}
func (m *QueryGetModelCapacityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetModelCapacityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetModelCapacityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetModelCapacityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetModelCapacityResponse.Merge(m, src)
}
func (m *QueryGetModelCapacityResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetModelCapacityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetModelCapacityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetModelCapacityResponse proto.InternalMessageInfo

func (m *QueryGetModelCapacityResponse) GetCapacity() uint64 {
	if m != nil {
		return m.Capacity
	}
	return 0
}

func (m *QueryGetModelCapacityResponse) GetFound() bool {
	if m != nil {
		return m.Found
	}
	return false
}

type QueryGetAllModelCapacitiesRequest struct {
}

func (m *QueryGetAllModelCapacitiesRequest) Reset()         { *m = QueryGetAllModelCapacitiesRequest{} }
func (m *QueryGetAllModelCapacitiesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllModelCapacitiesRequest) ProtoMessage()    {}
func (*QueryGetAllModelCapacitiesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{119}
}
func (m *QueryGetAllModelCapacitiesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllModelCapacitiesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllModelCapacitiesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllModelCapacitiesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllModelCapacitiesRequest.Merge(m, src)
}
func (m *QueryGetAllModelCapacitiesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllModelCapacitiesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllModelCapacitiesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllModelCapacitiesRequest proto.InternalMessageInfo

type QueryGetAllModelCapacitiesResponse struct {
	ModelCapacities []ModelCapacity `protobuf:"bytes,1,rep,name=model_capacities,json=modelCapacities,proto3" json:"model_capacities"`
}

func (m *QueryGetAllModelCapacitiesResponse) Reset()         { *m = QueryGetAllModelCapacitiesResponse{} }
func (m *QueryGetAllModelCapacitiesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllModelCapacitiesResponse) ProtoMessage()    {}
func (*QueryGetAllModelCapacitiesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{120}
}
func (m *QueryGetAllModelCapacitiesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllModelCapacitiesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllModelCapacitiesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllModelCapacitiesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllModelCapacitiesResponse.Merge(m, src)
}
func (m *QueryGetAllModelCapacitiesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllModelCapacitiesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllModelCapacitiesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllModelCapacitiesResponse proto.InternalMessageInfo

func (m *QueryGetAllModelCapacitiesResponse) GetModelCapacities() []ModelCapacity {
	if m != nil {
		return m.ModelCapacities
	}
	return nil
}

type ModelCapacity struct {
	ModelId  string `protobuf:"bytes,1,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	Capacity uint64 `protobuf:"varint,2,opt,name=capacity,proto3" json:"capacity,omitempty"`
}

func (m *ModelCapacity) Reset()         { *m = ModelCapacity{} }
func (m *ModelCapacity) String() string { return proto.CompactTextString(m) }
func (*ModelCapacity) ProtoMessage()    {}
func (*ModelCapacity) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{121}
}
func (m *ModelCapacity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModelCapacity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModelCapacity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModelCapacity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModelCapacity.Merge(m, src)
}
func (m *ModelCapacity) XXX_Size() int {
	return m.Size()
}
func (m *ModelCapacity) XXX_DiscardUnknown() {
	xxx_messageInfo_ModelCapacity.DiscardUnknown(m)
}

var xxx_messageInfo_ModelCapacity proto.InternalMessageInfo

func (m *ModelCapacity) GetModelId() string {
	if m != nil {
		return m.ModelId
	}
	return ""
}

func (m *ModelCapacity) GetCapacity() uint64 {
	if m != nil {
		return m.Capacity
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "inference.inference.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "inference.inference.QueryParamsResponse")
	proto.RegisterType((*QueryGetInferenceRequest)(nil), "inference.inference.QueryGetInferenceRequest")
	proto.RegisterType((*QueryGetInferenceResponse)(nil), "inference.inference.QueryGetInferenceResponse")
	proto.RegisterType((*QueryAllInferenceRequest)(nil), "inference.inference.QueryAllInferenceRequest")
	proto.RegisterType((*QueryAllInferenceResponse)(nil), "inference.inference.QueryAllInferenceResponse")
	proto.RegisterType((*QueryGetParticipantRequest)(nil), "inference.inference.QueryGetParticipantRequest")
	proto.RegisterType((*QueryGetParticipantResponse)(nil), "inference.inference.QueryGetParticipantResponse")
	proto.RegisterType((*QueryAllParticipantRequest)(nil), "inference.inference.QueryAllParticipantRequest")
	proto.RegisterType((*QueryAllParticipantResponse)(nil), "inference.inference.QueryAllParticipantResponse")
	proto.RegisterType((*QueryInferenceParticipantRequest)(nil), "inference.inference.QueryInferenceParticipantRequest")
	proto.RegisterType((*QueryInferenceParticipantResponse)(nil), "inference.inference.QueryInferenceParticipantResponse")
	proto.RegisterType((*QueryGetRandomExecutorRequest)(nil), "inference.inference.QueryGetRandomExecutorRequest")
	proto.RegisterType((*QueryGetRandomExecutorResponse)(nil), "inference.inference.QueryGetRandomExecutorResponse")
	proto.RegisterType((*QueryGetEpochGroupDataRequest)(nil), "inference.inference.QueryGetEpochGroupDataRequest")
	proto.RegisterType((*QueryGetEpochGroupDataResponse)(nil), "inference.inference.QueryGetEpochGroupDataResponse")
	proto.RegisterType((*QueryAllEpochGroupDataRequest)(nil), "inference.inference.QueryAllEpochGroupDataRequest")
	proto.RegisterType((*QueryAllEpochGroupDataResponse)(nil), "inference.inference.QueryAllEpochGroupDataResponse")
	proto.RegisterType((*QueryGetSettleAmountRequest)(nil), "inference.inference.QueryGetSettleAmountRequest")
	proto.RegisterType((*QueryGetSettleAmountResponse)(nil), "inference.inference.QueryGetSettleAmountResponse")
	proto.RegisterType((*QueryAllSettleAmountRequest)(nil), "inference.inference.QueryAllSettleAmountRequest")
	proto.RegisterType((*QueryAllSettleAmountResponse)(nil), "inference.inference.QueryAllSettleAmountResponse")
	proto.RegisterType((*QueryGetEpochGroupValidationsRequest)(nil), "inference.inference.QueryGetEpochGroupValidationsRequest")
	proto.RegisterType((*QueryGetEpochGroupValidationsResponse)(nil), "inference.inference.QueryGetEpochGroupValidationsResponse")
	proto.RegisterType((*QueryAllEpochGroupValidationsRequest)(nil), "inference.inference.QueryAllEpochGroupValidationsRequest")
	proto.RegisterType((*QueryAllEpochGroupValidationsResponse)(nil), "inference.inference.QueryAllEpochGroupValidationsResponse")
	proto.RegisterType((*QueryPocBatchesForStageRequest)(nil), "inference.inference.QueryPocBatchesForStageRequest")
	proto.RegisterType((*QueryPocBatchesForStageResponse)(nil), "inference.inference.QueryPocBatchesForStageResponse")
	proto.RegisterType((*PoCBatchesWithParticipants)(nil), "inference.inference.PoCBatchesWithParticipants")
	proto.RegisterType((*QueryGetCurrentEpochRequest)(nil), "inference.inference.QueryGetCurrentEpochRequest")
	proto.RegisterType((*QueryGetCurrentEpochResponse)(nil), "inference.inference.QueryGetCurrentEpochResponse")
	proto.RegisterType((*QueryGetTokenomicsDataRequest)(nil), "inference.inference.QueryGetTokenomicsDataRequest")
	proto.RegisterType((*QueryGetTokenomicsDataResponse)(nil), "inference.inference.QueryGetTokenomicsDataResponse")
	proto.RegisterType((*QueryGetUnitOfComputePriceProposalRequest)(nil), "inference.inference.QueryGetUnitOfComputePriceProposalRequest")
	proto.RegisterType((*QueryGetUnitOfComputePriceProposalResponse)(nil), "inference.inference.QueryGetUnitOfComputePriceProposalResponse")
	proto.RegisterType((*QueryCurrentEpochGroupDataRequest)(nil), "inference.inference.QueryCurrentEpochGroupDataRequest")
	proto.RegisterType((*QueryCurrentEpochGroupDataResponse)(nil), "inference.inference.QueryCurrentEpochGroupDataResponse")
	proto.RegisterType((*QueryPreviousEpochGroupDataRequest)(nil), "inference.inference.QueryPreviousEpochGroupDataRequest")
	proto.RegisterType((*QueryPreviousEpochGroupDataResponse)(nil), "inference.inference.QueryPreviousEpochGroupDataResponse")
	proto.RegisterType((*QueryModelsAllRequest)(nil), "inference.inference.QueryModelsAllRequest")
	proto.RegisterType((*QueryModelsAllResponse)(nil), "inference.inference.QueryModelsAllResponse")
	proto.RegisterType((*QueryGetTopMinerRequest)(nil), "inference.inference.QueryGetTopMinerRequest")
	proto.RegisterType((*QueryGetTopMinerResponse)(nil), "inference.inference.QueryGetTopMinerResponse")
	proto.RegisterType((*QueryAllTopMinerRequest)(nil), "inference.inference.QueryAllTopMinerRequest")
	proto.RegisterType((*QueryAllTopMinerResponse)(nil), "inference.inference.QueryAllTopMinerResponse")
	proto.RegisterType((*QueryGetInferenceTimeoutRequest)(nil), "inference.inference.QueryGetInferenceTimeoutRequest")
	proto.RegisterType((*QueryGetInferenceTimeoutResponse)(nil), "inference.inference.QueryGetInferenceTimeoutResponse")
	proto.RegisterType((*QueryAllInferenceTimeoutRequest)(nil), "inference.inference.QueryAllInferenceTimeoutRequest")
	proto.RegisterType((*QueryAllInferenceTimeoutResponse)(nil), "inference.inference.QueryAllInferenceTimeoutResponse")
	proto.RegisterType((*QueryGetInferenceValidationDetailsRequest)(nil), "inference.inference.QueryGetInferenceValidationDetailsRequest")
	proto.RegisterType((*QueryGetInferenceValidationDetailsResponse)(nil), "inference.inference.QueryGetInferenceValidationDetailsResponse")
	proto.RegisterType((*QueryAllInferenceValidationDetailsRequest)(nil), "inference.inference.QueryAllInferenceValidationDetailsRequest")
	proto.RegisterType((*QueryAllInferenceValidationDetailsResponse)(nil), "inference.inference.QueryAllInferenceValidationDetailsResponse")
	proto.RegisterType((*QueryGetInferenceValidationParametersRequest)(nil), "inference.inference.QueryGetInferenceValidationParametersRequest")
	proto.RegisterType((*QueryGetInferenceValidationParametersResponse)(nil), "inference.inference.QueryGetInferenceValidationParametersResponse")
	proto.RegisterType((*QueryGetEpochPerformanceSummaryRequest)(nil), "inference.inference.QueryGetEpochPerformanceSummaryRequest")
	proto.RegisterType((*QueryGetEpochPerformanceSummaryResponse)(nil), "inference.inference.QueryGetEpochPerformanceSummaryResponse")
	proto.RegisterType((*QueryAllEpochPerformanceSummaryRequest)(nil), "inference.inference.QueryAllEpochPerformanceSummaryRequest")
	proto.RegisterType((*QueryAllEpochPerformanceSummaryResponse)(nil), "inference.inference.QueryAllEpochPerformanceSummaryResponse")
	proto.RegisterType((*QueryTrainingTaskRequest)(nil), "inference.inference.QueryTrainingTaskRequest")
	proto.RegisterType((*QueryTrainingTaskResponse)(nil), "inference.inference.QueryTrainingTaskResponse")
	proto.RegisterType((*QueryHardwareNodesRequest)(nil), "inference.inference.QueryHardwareNodesRequest")
	proto.RegisterType((*QueryHardwareNodesResponse)(nil), "inference.inference.QueryHardwareNodesResponse")
	proto.RegisterType((*QueryHardwareNodesAllRequest)(nil), "inference.inference.QueryHardwareNodesAllRequest")
	proto.RegisterType((*QueryHardwareNodesAllResponse)(nil), "inference.inference.QueryHardwareNodesAllResponse")
	proto.RegisterType((*QueryQueuedTrainingTasksRequest)(nil), "inference.inference.QueryQueuedTrainingTasksRequest")
	proto.RegisterType((*QueryQueuedTrainingTasksResponse)(nil), "inference.inference.QueryQueuedTrainingTasksResponse")
	proto.RegisterType((*QueryTrainingTaskAllRequest)(nil), "inference.inference.QueryTrainingTaskAllRequest")
	proto.RegisterType((*QueryTrainingTaskAllResponse)(nil), "inference.inference.QueryTrainingTaskAllResponse")
	proto.RegisterType((*QueryGetParticipantCurrentStatsRequest)(nil), "inference.inference.QueryGetParticipantCurrentStatsRequest")
	proto.RegisterType((*QueryGetParticipantCurrentStatsResponse)(nil), "inference.inference.QueryGetParticipantCurrentStatsResponse")
	proto.RegisterType((*QueryGetAllParticipantCurrentStatsRequest)(nil), "inference.inference.QueryGetAllParticipantCurrentStatsRequest")
	proto.RegisterType((*QueryGetAllParticipantCurrentStatsResponse)(nil), "inference.inference.QueryGetAllParticipantCurrentStatsResponse")
	proto.RegisterType((*ParticipantCurrentStats)(nil), "inference.inference.ParticipantCurrentStats")
	proto.RegisterType((*ParticipantFullStats)(nil), "inference.inference.ParticipantFullStats")
	proto.RegisterType((*QueryParticipantsFullStatsRequest)(nil), "inference.inference.QueryParticipantsFullStatsRequest")
	proto.RegisterType((*QueryParticipantsFullStatsResponse)(nil), "inference.inference.QueryParticipantsFullStatsResponse")
	proto.RegisterType((*QueryStatsByTimePeriodByDeveloperRequest)(nil), "inference.inference.QueryStatsByTimePeriodByDeveloperRequest")
	proto.RegisterType((*QueryStatsByTimePeriodByDeveloperResponse)(nil), "inference.inference.QueryStatsByTimePeriodByDeveloperResponse")
	proto.RegisterType((*QueryStatsByDeveloperAndEpochBackwardsRequest)(nil), "inference.inference.QueryStatsByDeveloperAndEpochBackwardsRequest")
	proto.RegisterType((*QueryInferencesAndTokensStatsByEpochsBackwardsRequest)(nil), "inference.inference.QueryInferencesAndTokensStatsByEpochsBackwardsRequest")
	proto.RegisterType((*QueryInferencesAndTokensStatsByTimePeriodRequest)(nil), "inference.inference.QueryInferencesAndTokensStatsByTimePeriodRequest")
	proto.RegisterType((*QueryInferencesAndTokensStatsByModelsRequest)(nil), "inference.inference.QueryInferencesAndTokensStatsByModelsRequest")
	proto.RegisterType((*ModelStats)(nil), "inference.inference.ModelStats")
	proto.RegisterType((*QueryInferencesAndTokensStatsByModelsResponse)(nil), "inference.inference.QueryInferencesAndTokensStatsByModelsResponse")
	proto.RegisterType((*QueryInferencesAndTokensStatsResponse)(nil), "inference.inference.QueryInferencesAndTokensStatsResponse")
	proto.RegisterType((*QueryCountAllParticipantsRequest)(nil), "inference.inference.QueryCountAllParticipantsRequest")
	proto.RegisterType((*QueryCountAllParticipantsResponse)(nil), "inference.inference.QueryCountAllParticipantsResponse")
	proto.RegisterType((*QueryDebugStatsRequest)(nil), "inference.inference.QueryDebugStatsRequest")
	proto.RegisterType((*QueryDebugStatsResponse)(nil), "inference.inference.QueryDebugStatsResponse")
	proto.RegisterType((*QueryDebugStatsResponse_TemporaryTimeStat)(nil), "inference.inference.QueryDebugStatsResponse.TemporaryTimeStat")
	proto.RegisterType((*QueryDebugStatsResponse_TemporaryEpochStat)(nil), "inference.inference.QueryDebugStatsResponse.TemporaryEpochStat")
	proto.RegisterType((*QueryGetMinimumValidationAverageRequest)(nil), "inference.inference.QueryGetMinimumValidationAverageRequest")
	proto.RegisterType((*QueryGetMinimumValidationAverageResponse)(nil), "inference.inference.QueryGetMinimumValidationAverageResponse")
	proto.RegisterType((*QueryInProgressTrainingTasksRequest)(nil), "inference.inference.QueryInProgressTrainingTasksRequest")
	proto.RegisterType((*QueryInProgressTrainingTasksResponse)(nil), "inference.inference.QueryInProgressTrainingTasksResponse")
	proto.RegisterType((*QueryGetPartialUpgradeRequest)(nil), "inference.inference.QueryGetPartialUpgradeRequest")
	proto.RegisterType((*QueryGetPartialUpgradeResponse)(nil), "inference.inference.QueryGetPartialUpgradeResponse")
	proto.RegisterType((*QueryAllPartialUpgradeRequest)(nil), "inference.inference.QueryAllPartialUpgradeRequest")
	proto.RegisterType((*QueryAllPartialUpgradeResponse)(nil), "inference.inference.QueryAllPartialUpgradeResponse")
	proto.RegisterType((*QueryTrainingKvRecordRequest)(nil), "inference.inference.QueryTrainingKvRecordRequest")
	proto.RegisterType((*QueryTrainingKvRecordResponse)(nil), "inference.inference.QueryTrainingKvRecordResponse")
	proto.RegisterType((*QueryListTrainingKvRecordKeysRequest)(nil), "inference.inference.QueryListTrainingKvRecordKeysRequest")
	proto.RegisterType((*QueryListTrainingKvRecordKeysResponse)(nil), "inference.inference.QueryListTrainingKvRecordKeysResponse")
	proto.RegisterType((*QueryTrainingBarrierRequest)(nil), "inference.inference.QueryTrainingBarrierRequest")
	proto.RegisterType((*QueryTrainingBarrierResponse)(nil), "inference.inference.QueryTrainingBarrierResponse")
	proto.RegisterType((*QueryTrainingAliveNodesRequest)(nil), "inference.inference.QueryTrainingAliveNodesRequest")
	proto.RegisterType((*QueryTrainingAliveNodesResponse)(nil), "inference.inference.QueryTrainingAliveNodesResponse")
	proto.RegisterType((*QueryGetBridgeTransactionRequest)(nil), "inference.inference.QueryGetBridgeTransactionRequest")
	proto.RegisterType((*QueryGetBridgeTransactionResponse)(nil), "inference.inference.QueryGetBridgeTransactionResponse")
	proto.RegisterType((*QueryAllBridgeTransactionsRequest)(nil), "inference.inference.QueryAllBridgeTransactionsRequest")
	proto.RegisterType((*QueryAllBridgeTransactionsResponse)(nil), "inference.inference.QueryAllBridgeTransactionsResponse")
	proto.RegisterType((*QueryEpochInfoRequest)(nil), "inference.inference.QueryEpochInfoRequest")
	proto.RegisterType((*QueryEpochInfoResponse)(nil), "inference.inference.QueryEpochInfoResponse")
	proto.RegisterType((*QueryGetModelPerTokenPriceRequest)(nil), "inference.inference.QueryGetModelPerTokenPriceRequest")
	proto.RegisterType((*QueryGetModelPerTokenPriceResponse)(nil), "inference.inference.QueryGetModelPerTokenPriceResponse")
	proto.RegisterType((*QueryGetAllModelPerTokenPricesRequest)(nil), "inference.inference.QueryGetAllModelPerTokenPricesRequest")
	proto.RegisterType((*ModelPrice)(nil), "inference.inference.ModelPrice")
	proto.RegisterType((*QueryGetAllModelPerTokenPricesResponse)(nil), "inference.inference.QueryGetAllModelPerTokenPricesResponse")
	proto.RegisterType((*QueryGetModelCapacityRequest)(nil), "inference.inference.QueryGetModelCapacityRequest")
	proto.RegisterType((*QueryGetModelCapacityResponse)(nil), "inference.inference.QueryGetModelCapacityResponse")
	proto.RegisterType((*QueryGetAllModelCapacitiesRequest)(nil), "inference.inference.QueryGetAllModelCapacitiesRequest")
	proto.RegisterType((*QueryGetAllModelCapacitiesResponse)(nil), "inference.inference.QueryGetAllModelCapacitiesResponse")
	proto.RegisterType((*ModelCapacity)(nil), "inference.inference.ModelCapacity")
}

func init() { proto.RegisterFile("inference/inference/query.proto", fileDescriptor_cf0cfe3b0e1cc5bd) }

var fileDescriptor_cf0cfe3b0e1cc5bd = []byte{
	// 5242 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x5d, 0x5f, 0x8c, 0x1c, 0x47,
	0x5a, 0x4f, 0xcf, 0xac, 0x1d, 0x6f, 0x79, 0x6d, 0xef, 0x56, 0x6c, 0xef, 0x7a, 0x6c, 0xaf, 0x9d,
	0x72, 0x1c, 0xdb, 0x1b, 0x7b, 0xc7, 0xff, 0x1d, 0xc7, 0xf6, 0xda, 0xbb, 0xeb, 0x7f, 0x1b, 0xc7,
	0xce, 0x7a, 0x6c, 0xe7, 0xef, 0xe5, 0xfa, 0x7a, 0x66, 0x6a, 0x67, 0x9b, 0xed, 0x99, 0x9e, 0x74,
	0xf7, 0xd8, 0xde, 0x5b, 0xf6, 0x10, 0x88, 0x47, 0x10, 0x9c, 0xee, 0x01, 0x09, 0xf1, 0x82, 0x00,
	0x29, 0x48, 0x3c, 0xdc, 0x49, 0x1c, 0x28, 0x47, 0xf8, 0x73, 0x48, 0x27, 0x45, 0x9c, 0x74, 0x0a,
	0x1c, 0x8a, 0x10, 0x42, 0xe1, 0x48, 0x4e, 0x80, 0x00, 0x01, 0xe2, 0x91, 0x07, 0x38, 0x75, 0xf5,
	0x57, 0xfd, 0xb7, 0xba, 0xba, 0x7b, 0x76, 0xf2, 0x62, 0x6d, 0x57, 0xd7, 0xf7, 0xe7, 0xf7, 0x55,
	0xf5, 0x57, 0x5f, 0x55, 0x7d, 0xdf, 0x18, 0x1d, 0xd0, 0x3b, 0x4b, 0xd4, 0xa2, 0x9d, 0x06, 0xad,
	0x06, 0x7f, 0xbd, 0xdf, 0xa3, 0xd6, 0xea, 0x74, 0xd7, 0x32, 0x1d, 0x13, 0x3f, 0xe7, 0x37, 0x4f,
	0xfb, 0x7f, 0x55, 0xc6, 0xb4, 0xb6, 0xde, 0x31, 0xab, 0xec, 0x5f, 0xaf, 0x5f, 0x65, 0x67, 0xcb,
	0x6c, 0x99, 0xec, 0xcf, 0xaa, 0xfb, 0x17, 0xb4, 0xee, 0x6b, 0x99, 0x66, 0xcb, 0xa0, 0x55, 0xad,
	0xab, 0x57, 0xb5, 0x4e, 0xc7, 0x74, 0x34, 0x47, 0x37, 0x3b, 0x36, 0xbc, 0x9d, 0x6a, 0x98, 0x76,
	0xdb, 0xb4, 0xab, 0x75, 0xcd, 0x06, 0xa1, 0xd5, 0xc7, 0xa7, 0xea, 0xd4, 0xd1, 0x4e, 0x55, 0xbb,
	0x5a, 0x4b, 0xef, 0xb0, 0xce, 0xd0, 0xf7, 0xa0, 0x48, 0xd1, 0xae, 0x66, 0x69, 0x6d, 0xce, 0xed,
	0x90, 0xa8, 0x47, 0xa0, 0xbd, 0xd7, 0xe9, 0x70, 0x0a, 0x1b, 0x47, 0x6f, 0xe8, 0x5d, 0xad, 0xe3,
	0x70, 0xcd, 0x44, 0xdd, 0x68, 0xd7, 0x6c, 0x2c, 0xab, 0x2d, 0xcb, 0xec, 0x75, 0xd5, 0xa6, 0xe6,
	0x68, 0xd0, 0xf7, 0x88, 0xa8, 0xaf, 0x4d, 0x1d, 0xc7, 0xa0, 0xaa, 0xd6, 0x36, 0x7b, 0x3e, 0xd3,
	0x53, 0x59, 0x4c, 0x1f, 0x6b, 0x86, 0xde, 0x8c, 0x58, 0x88, 0x08, 0xd5, 0x35, 0x1b, 0x75, 0xcd,
	0x69, 0x2c, 0x43, 0x9f, 0x63, 0xa2, 0x3e, 0x8e, 0xb9, 0x42, 0x3b, 0x66, 0x5b, 0x6f, 0xd8, 0x61,
	0x55, 0x85, 0x5d, 0x7b, 0x1d, 0xdd, 0x51, 0xcd, 0x25, 0xb5, 0x61, 0xb6, 0xbb, 0x3d, 0x87, 0x1b,
	0x4a, 0x38, 0x31, 0xda, 0x66, 0x93, 0x1a, 0x32, 0x73, 0x3b, 0x66, 0x57, 0x6d, 0xeb, 0x1d, 0x6a,
	0x41, 0xa7, 0xc9, 0xf0, 0x08, 0xf3, 0xb1, 0x6d, 0x98, 0x3a, 0x1f, 0xd5, 0x97, 0xa4, 0x63, 0xa6,
	0x3a, 0x7a, 0x9b, 0x9a, 0x3d, 0x6e, 0xbf, 0xf3, 0xf2, 0xce, 0x81, 0xf5, 0xd4, 0x26, 0x75, 0x34,
	0xdd, 0xe0, 0x46, 0x3c, 0x93, 0x6e, 0xf7, 0x2e, 0xb5, 0x96, 0x4c, 0xab, 0xad, 0xb9, 0xf4, 0x76,
	0xaf, 0xdd, 0xd6, 0xf8, 0xbc, 0x17, 0x8f, 0xaa, 0x63, 0x69, 0x7a, 0x47, 0xef, 0xb4, 0x54, 0x47,
	0xb3, 0x57, 0xa0, 0xe3, 0xf1, 0xcc, 0x8e, 0xaa, 0xbd, 0xda, 0x69, 0xc8, 0xd8, 0x2e, 0x6b, 0x56,
	0xf3, 0x89, 0x66, 0x51, 0xb5, 0x63, 0x36, 0xa9, 0x6c, 0xa8, 0xd8, 0x44, 0xd5, 0x0c, 0xb5, 0xd7,
	0x6d, 0x59, 0x9a, 0xdf, 0xf5, 0x45, 0x51, 0xd7, 0x0e, 0x75, 0x9e, 0x98, 0xd6, 0x4a, 0x98, 0xa5,
	0x50, 0xd3, 0xba, 0xa5, 0x37, 0x5b, 0x54, 0x75, 0x2c, 0xad, 0x63, 0x6b, 0x8d, 0xd0, 0x07, 0x27,
	0x54, 0xc0, 0x76, 0x34, 0xc7, 0x56, 0x9b, 0xf4, 0x31, 0x35, 0xcc, 0xae, 0x3f, 0xca, 0x07, 0x52,
	0x0d, 0xec, 0x75, 0x20, 0x3b, 0x11, 0xbe, 0xef, 0x7e, 0xde, 0x8b, 0xec, 0x7b, 0xad, 0xd1, 0xf7,
	0x7b, 0xd4, 0x76, 0xc8, 0x23, 0xf4, 0x5c, 0xa4, 0xd5, 0xee, 0x9a, 0x1d, 0x9b, 0xe2, 0x19, 0xb4,
	0xd9, 0xfb, 0xae, 0x27, 0x94, 0x83, 0xca, 0xd1, 0xad, 0xa7, 0xf7, 0x4e, 0x0b, 0x5c, 0xd0, 0xb4,
	0x47, 0x34, 0x37, 0xfc, 0xf1, 0x67, 0x07, 0x9e, 0xf9, 0xe0, 0x5f, 0xbe, 0x3d, 0xa5, 0xd4, 0x80,
	0x8a, 0x9c, 0x44, 0x13, 0x8c, 0xed, 0x2d, 0xea, 0x2c, 0xf0, 0xee, 0x20, 0x12, 0xef, 0x44, 0x9b,
	0xf4, 0x4e, 0x93, 0x3e, 0x65, 0xac, 0x87, 0x6b, 0xde, 0x03, 0x51, 0xd1, 0x1e, 0x01, 0x05, 0xa8,
	0x33, 0x87, 0x86, 0x7d, 0xa9, 0xa0, 0xd1, 0xa4, 0x50, 0x23, 0x9f, 0x74, 0x6e, 0xc8, 0x55, 0xaa,
	0x16, 0x90, 0x91, 0x3a, 0xa8, 0x34, 0x6b, 0x18, 0x09, 0x95, 0x6e, 0x22, 0x14, 0x38, 0x3b, 0x10,
	0xf0, 0xe2, 0xb4, 0xf7, 0xdd, 0x4c, 0xbb, 0xdf, 0xcd, 0xb4, 0xe7, 0x8e, 0xe1, 0xeb, 0x99, 0x5e,
	0xd4, 0x5a, 0x9c, 0xb6, 0x16, 0xa2, 0x24, 0x1f, 0x28, 0x80, 0x22, 0x2a, 0x44, 0x8c, 0xa2, 0xdc,
	0x07, 0x0a, 0x7c, 0x2b, 0xa2, 0x69, 0x89, 0x69, 0x7a, 0x24, 0x53, 0x53, 0x4f, 0x81, 0x88, 0xaa,
	0xa7, 0x51, 0x85, 0xdb, 0x7b, 0x31, 0x70, 0xbd, 0xf2, 0x31, 0x6a, 0xa1, 0xbd, 0x42, 0x1a, 0xc0,
	0x77, 0x1b, 0x6d, 0x0d, 0x79, 0x71, 0x30, 0xe3, 0xc1, 0xb4, 0x99, 0xc3, 0xfb, 0x01, 0xc6, 0x30,
	0x29, 0x69, 0x82, 0x72, 0xb3, 0x86, 0x21, 0x50, 0x6e, 0x50, 0xa3, 0xf5, 0x63, 0x05, 0xf0, 0xc4,
	0xc5, 0xa4, 0xe1, 0x29, 0xf7, 0x89, 0x67, 0x60, 0xa3, 0x86, 0x9f, 0x47, 0x23, 0x75, 0xc3, 0x6c,
	0xac, 0xa8, 0xcb, 0x54, 0x6f, 0x2d, 0x3b, 0x13, 0xe5, 0x83, 0xca, 0xd1, 0x72, 0x6d, 0x2b, 0x6b,
	0xbb, 0xcd, 0x9a, 0xc8, 0x65, 0x74, 0x90, 0x81, 0xf2, 0x27, 0x91, 0xc0, 0x82, 0x13, 0xe8, 0x59,
	0xad, 0xd9, 0xb4, 0xa8, 0x6d, 0xc3, 0x00, 0xf3, 0x47, 0xf2, 0x08, 0x3d, 0x2f, 0xa1, 0x06, 0xc3,
	0xec, 0x46, 0x9b, 0xbb, 0xbd, 0xfa, 0x0a, 0x5d, 0x05, 0x6a, 0x78, 0x72, 0xd9, 0xd6, 0x35, 0xc3,
	0x75, 0xe4, 0x0c, 0x63, 0xb9, 0xc6, 0x1f, 0xc9, 0x39, 0xb4, 0x9f, 0xcf, 0x9c, 0x9a, 0xd6, 0x69,
	0x9a, 0xed, 0x1b, 0x4f, 0x69, 0xa3, 0xe7, 0x98, 0x56, 0x68, 0xc2, 0xb1, 0x85, 0x8d, 0x4f, 0x38,
	0xf6, 0x40, 0x9a, 0x68, 0x32, 0x8d, 0xcc, 0xff, 0xa6, 0xb6, 0x50, 0x68, 0x2b, 0x38, 0xe1, 0x7c,
	0x3a, 0x62, 0x06, 0xca, 0xdd, 0x70, 0x1d, 0xe6, 0x2d, 0x37, 0x10, 0xb8, 0xae, 0x39, 0x1a, 0x57,
	0xee, 0x0c, 0xda, 0xdd, 0x35, 0x1b, 0xaa, 0xed, 0x68, 0x96, 0xa3, 0x46, 0xec, 0xef, 0x8a, 0x1c,
	0xaa, 0x3d, 0xd7, 0x35, 0x1b, 0x0f, 0xdc, 0x97, 0x73, 0xc1, 0x38, 0xe0, 0x3d, 0x68, 0x0b, 0x03,
	0xa1, 0xea, 0x4d, 0x66, 0x8d, 0xe1, 0xda, 0xb3, 0xec, 0x79, 0xa1, 0x49, 0x7a, 0x01, 0xac, 0xb8,
	0x40, 0x80, 0xf5, 0x00, 0x8d, 0xc6, 0x23, 0x1d, 0x80, 0x77, 0x48, 0x08, 0x2f, 0xca, 0x06, 0x10,
	0x6e, 0xa7, 0x91, 0x56, 0xd2, 0x02, 0x9c, 0xb3, 0x86, 0x21, 0xc6, 0x39, 0xa8, 0x0f, 0xeb, 0xcf,
	0x14, 0x00, 0x28, 0x90, 0x24, 0x05, 0x58, 0xde, 0x10, 0xc0, 0xc1, 0x39, 0xc7, 0xab, 0x81, 0xa3,
	0x7b, 0xc0, 0x82, 0xc8, 0x59, 0x16, 0x43, 0x72, 0x3b, 0x1d, 0x4c, 0x3a, 0xba, 0xe1, 0xa8, 0x03,
	0x33, 0xd0, 0x3e, 0x31, 0x03, 0x80, 0xff, 0x1a, 0xda, 0x16, 0x89, 0x4e, 0xc1, 0xd8, 0xcf, 0x0b,
	0xb1, 0x87, 0x39, 0x00, 0xf2, 0x11, 0x3b, 0xd4, 0x46, 0x68, 0xe0, 0xc7, 0x44, 0xea, 0x0e, 0x6a,
	0x58, 0xbf, 0xab, 0x00, 0xaa, 0x84, 0x9c, 0x74, 0x54, 0xe5, 0xbe, 0x51, 0x0d, 0x6e, 0x34, 0xd7,
	0xd1, 0x0b, 0xc9, 0xcf, 0xed, 0x8d, 0x20, 0xce, 0xcf, 0x3d, 0xac, 0x12, 0x47, 0x50, 0x4a, 0x75,
	0x04, 0xe4, 0x9b, 0x0a, 0x3a, 0x9c, 0x21, 0x1f, 0xec, 0xb7, 0x8c, 0xc6, 0x53, 0xb6, 0x22, 0x30,
	0x6a, 0x53, 0x19, 0xdf, 0x46, 0x88, 0x29, 0x98, 0x74, 0x17, 0x15, 0xbd, 0x24, 0x1d, 0x30, 0x49,
	0xe4, 0x03, 0x15, 0x98, 0x64, 0x50, 0x53, 0xe7, 0xef, 0xb9, 0x0d, 0xd2, 0x05, 0xe6, 0xb1, 0x41,
	0x79, 0x80, 0x36, 0x18, 0xdc, 0xfc, 0x9a, 0x07, 0x6f, 0xb7, 0x68, 0x36, 0xe6, 0xdc, 0x3d, 0x21,
	0xb5, 0x6f, 0x9a, 0xd6, 0x03, 0x27, 0x30, 0x45, 0x62, 0xd9, 0x56, 0x92, 0xcb, 0x76, 0x0f, 0x1d,
	0x48, 0x65, 0x02, 0xa6, 0xa9, 0xa1, 0x61, 0x77, 0xf6, 0xb1, 0x7d, 0x27, 0x18, 0xa3, 0x2a, 0x5e,
	0xec, 0xcc, 0x79, 0xe0, 0xf1, 0xa6, 0xee, 0x2c, 0x87, 0x96, 0x3e, 0x6e, 0x91, 0x2d, 0x5d, 0x90,
	0x42, 0x3e, 0x54, 0x50, 0x25, 0xbd, 0x7b, 0x8e, 0x4f, 0x62, 0x1c, 0x3d, 0xdb, 0xed, 0xd5, 0x55,
	0x37, 0x18, 0x28, 0xf9, 0xc1, 0xc0, 0x1d, 0xba, 0x8a, 0x27, 0xd1, 0xd6, 0x65, 0xfa, 0x54, 0xe5,
	0x2f, 0xcb, 0xec, 0xe5, 0xf0, 0x32, 0x7d, 0xba, 0xe8, 0xbd, 0xbf, 0x16, 0x46, 0x33, 0xc4, 0xd0,
	0xec, 0x97, 0xa2, 0x49, 0xe8, 0xbe, 0x3f, 0xf0, 0xd2, 0xf3, 0x3d, 0xcb, 0xa2, 0x1d, 0xef, 0xf3,
	0xe2, 0x5b, 0x9b, 0xb3, 0x81, 0x0f, 0x8e, 0xbe, 0x06, 0x73, 0xee, 0x44, 0x9b, 0xd8, 0xc4, 0x80,
	0x45, 0xdc, 0x7b, 0x20, 0x07, 0x82, 0x60, 0xe0, 0xa1, 0xbf, 0x7f, 0x0f, 0x2d, 0x92, 0xc4, 0x09,
	0x16, 0xef, 0x78, 0x07, 0x7f, 0x9c, 0x76, 0xc4, 0xb6, 0xfe, 0xd2, 0xb5, 0x3b, 0xca, 0x85, 0x2f,
	0x6d, 0x4e, 0xa4, 0x95, 0xdc, 0x45, 0xc7, 0xb8, 0xd4, 0x47, 0x1d, 0xdd, 0x79, 0x7d, 0x69, 0xde,
	0x3b, 0x29, 0x58, 0xb4, 0xf4, 0x06, 0x5d, 0xb4, 0xcc, 0xae, 0x69, 0x6b, 0x46, 0xfe, 0xf5, 0xe9,
	0x5b, 0x0a, 0x9a, 0xca, 0xc3, 0x0f, 0x10, 0xdd, 0x41, 0x5b, 0xba, 0xd0, 0x06, 0x50, 0xc4, 0x13,
	0x4f, 0xc2, 0xca, 0x67, 0xe0, 0x46, 0x89, 0x4d, 0xba, 0xa4, 0xf5, 0x0c, 0xee, 0x35, 0xf9, 0x23,
	0x39, 0x04, 0xc1, 0x67, 0x78, 0xb8, 0xe2, 0x41, 0x0a, 0x59, 0x45, 0x44, 0xd6, 0xe9, 0xcb, 0x0c,
	0xa0, 0x5e, 0x00, 0xd1, 0x8b, 0x16, 0x7d, 0xac, 0x9b, 0x3d, 0x5b, 0xac, 0xe0, 0xd7, 0xd1, 0x21,
	0x69, 0xaf, 0x2f, 0x53, 0xc3, 0x71, 0xb4, 0x8b, 0xc9, 0xbe, 0xeb, 0x46, 0x9a, 0xf6, 0xac, 0xc1,
	0xa7, 0x04, 0x59, 0x44, 0xbb, 0xe3, 0x2f, 0x40, 0x8f, 0xf3, 0x41, 0xe4, 0xed, 0x7e, 0x83, 0x15,
	0xa1, 0x70, 0x46, 0x06, 0x32, 0x21, 0x36, 0x3f, 0x83, 0xc6, 0x83, 0xef, 0xa0, 0x7b, 0x57, 0xef,
	0x50, 0x2b, 0x7b, 0x7b, 0xf1, 0x95, 0xe0, 0x5c, 0x20, 0x20, 0x02, 0x45, 0xae, 0xa1, 0x61, 0xff,
	0xe8, 0x0a, 0x2c, 0xb1, 0x3f, 0xe5, 0x83, 0xf1, 0x28, 0xb9, 0x43, 0x70, 0xe0, 0x99, 0x68, 0xa0,
	0xd2, 0xac, 0x61, 0xc4, 0x55, 0x1a, 0xd4, 0x42, 0xf6, 0x7b, 0x4a, 0x70, 0x8c, 0x90, 0x85, 0xa0,
	0x5c, 0x18, 0xc1, 0xe0, 0xd6, 0x24, 0x13, 0x96, 0x93, 0xf0, 0x71, 0xca, 0x43, 0xef, 0x24, 0x8f,
	0x9b, 0x64, 0x0a, 0x8d, 0xd2, 0xa7, 0x5d, 0xdd, 0x62, 0x04, 0xb7, 0xc3, 0xfb, 0x99, 0x44, 0xbb,
	0xeb, 0x51, 0x7c, 0xed, 0x17, 0xf8, 0x7e, 0x26, 0xdc, 0x44, 0x7e, 0x1e, 0xb6, 0x9d, 0x42, 0x81,
	0x60, 0x9f, 0xb7, 0xd0, 0x58, 0xe2, 0x5c, 0x11, 0xc6, 0xe2, 0xb0, 0xfc, 0x20, 0x04, 0x38, 0x81,
	0xbd, 0x46, 0xf5, 0x58, 0x3b, 0xd1, 0x01, 0x6e, 0xf8, 0xdc, 0x25, 0x06, 0x77, 0x50, 0x33, 0xe0,
	0x07, 0x0a, 0x20, 0x15, 0xca, 0x92, 0x23, 0x2d, 0x6f, 0x18, 0xe9, 0xe0, 0x66, 0x48, 0x2b, 0x58,
	0x51, 0x7c, 0xe1, 0x41, 0x78, 0x74, 0xdd, 0x3b, 0xbd, 0x0d, 0x7d, 0xd1, 0xcc, 0xd3, 0x2c, 0x34,
	0x61, 0x8a, 0xf0, 0xc7, 0x1c, 0x33, 0xe3, 0x77, 0x42, 0x6b, 0x8d, 0x4c, 0x12, 0x98, 0xae, 0x87,
	0x2a, 0x7a, 0x6a, 0x2f, 0xe9, 0xea, 0x93, 0xce, 0x1c, 0xac, 0x29, 0x61, 0x4c, 0x6c, 0x30, 0x47,
	0x78, 0x54, 0x53, 0xcd, 0x31, 0xa8, 0xb9, 0xf4, 0x1f, 0xdc, 0x34, 0x19, 0x52, 0x73, 0x9a, 0xa6,
	0xfc, 0xa5, 0x98, 0x66, 0x70, 0x53, 0xee, 0xab, 0xe8, 0xb8, 0x64, 0x22, 0xb0, 0xd3, 0x64, 0xea,
	0x50, 0xcb, 0x37, 0xf3, 0x28, 0x2a, 0xeb, 0x4d, 0x0f, 0xd8, 0x70, 0xcd, 0xfd, 0x13, 0xef, 0x43,
	0xc3, 0x96, 0xf7, 0x92, 0x5a, 0x30, 0xd7, 0x82, 0x06, 0xf2, 0xcd, 0x12, 0x3a, 0x91, 0x53, 0x00,
	0x58, 0xf4, 0x08, 0xda, 0x01, 0x3b, 0x0c, 0xd3, 0x52, 0xbb, 0xe6, 0x13, 0x58, 0x79, 0x86, 0x6a,
	0xdb, 0xfd, 0xe6, 0x45, 0xb7, 0x15, 0x1f, 0x46, 0xdb, 0x1b, 0x5e, 0xc0, 0x11, 0xdd, 0xf1, 0x6d,
	0x83, 0x56, 0xf0, 0x93, 0x0b, 0x6e, 0x6c, 0xe3, 0x0d, 0x47, 0xb9, 0xaf, 0xe1, 0xa8, 0x71, 0x7a,
	0x7c, 0xc3, 0xb5, 0x3a, 0x57, 0x78, 0x62, 0x48, 0xe2, 0x25, 0x63, 0x08, 0xed, 0x5a, 0x88, 0x90,
	0x7c, 0x1d, 0xbd, 0x18, 0xd9, 0x7c, 0x2e, 0x06, 0xb7, 0x2d, 0x0f, 0xbc, 0xcb, 0x96, 0xf0, 0x7a,
	0xe0, 0xf6, 0x60, 0x1b, 0xd8, 0xd8, 0x7a, 0x10, 0x6b, 0xc7, 0x2f, 0xa0, 0x6d, 0xa1, 0x70, 0xd2,
	0xff, 0xee, 0xa3, 0x8d, 0xe4, 0x37, 0x14, 0x74, 0x24, 0x53, 0x38, 0x8c, 0x84, 0x01, 0xfb, 0xbe,
	0x64, 0x17, 0xf8, 0xbe, 0x8e, 0xa7, 0x47, 0x45, 0x49, 0x1a, 0x98, 0xd5, 0x69, 0x2c, 0x49, 0x17,
	0xac, 0xc2, 0xb7, 0xa3, 0xe9, 0x56, 0x19, 0xd4, 0xa7, 0xfe, 0x13, 0x6e, 0x0b, 0x99, 0xc8, 0x3c,
	0xb6, 0x28, 0x0f, 0xd8, 0x16, 0x83, 0xfb, 0xbc, 0xa7, 0x20, 0x34, 0x7a, 0x08, 0x17, 0x6f, 0x0f,
	0x35, 0x7b, 0x85, 0x9b, 0x71, 0x3b, 0x2a, 0xe9, 0x7c, 0xed, 0x28, 0xe9, 0x4d, 0x52, 0x83, 0x8b,
	0x92, 0x68, 0x5f, 0xc0, 0x7f, 0x0e, 0x0d, 0x39, 0x9a, 0xbd, 0x22, 0x3d, 0x14, 0x8b, 0x10, 0xb2,
	0xee, 0xe4, 0x0a, 0xf0, 0xbc, 0x0d, 0x57, 0x79, 0xf7, 0xcc, 0x26, 0xcd, 0x7f, 0xb8, 0x43, 0xde,
	0x80, 0x4b, 0x87, 0x18, 0x39, 0xe8, 0xf4, 0x32, 0xda, 0xd4, 0x71, 0x1b, 0x40, 0x29, 0x22, 0x54,
	0x2a, 0x4a, 0xea, 0x11, 0x90, 0x49, 0xd8, 0x87, 0x46, 0x5e, 0x86, 0x42, 0xf3, 0xb7, 0x61, 0xc7,
	0x99, 0x7c, 0x9f, 0x14, 0x5d, 0x2e, 0x26, 0xfa, 0x79, 0x08, 0x8b, 0xee, 0xf7, 0x68, 0x8f, 0x36,
	0xc3, 0x26, 0xf3, 0x2f, 0x00, 0xdf, 0x85, 0x68, 0x46, 0xd8, 0x05, 0x14, 0xb8, 0x80, 0x36, 0xb9,
	0x06, 0xb6, 0xa5, 0xe7, 0x79, 0x91, 0x01, 0xf1, 0xfa, 0xfb, 0x3b, 0xf4, 0xf0, 0xbb, 0x10, 0xf2,
	0x37, 0xc1, 0x32, 0x89, 0xd7, 0x1b, 0x95, 0x7b, 0x2f, 0x70, 0x7a, 0xa1, 0xe3, 0x0c, 0xd8, 0x31,
	0x3e, 0x70, 0x34, 0xc7, 0x9f, 0x16, 0x09, 0x47, 0xa6, 0x88, 0x1c, 0x99, 0x16, 0xf8, 0xb1, 0x54,
	0x7e, 0xc1, 0xdd, 0xc8, 0x93, 0xb0, 0xef, 0x84, 0x27, 0x3c, 0x89, 0x90, 0x45, 0xbb, 0x3d, 0x27,
	0xf8, 0xca, 0x36, 0xd5, 0x42, 0x2d, 0xe4, 0xa5, 0x20, 0x1c, 0x8b, 0x5e, 0x47, 0x09, 0xb4, 0x26,
	0x7f, 0x1b, 0x0a, 0xa9, 0x64, 0xbd, 0xfd, 0x33, 0xb5, 0x3d, 0x21, 0x3c, 0x2a, 0x5f, 0xc8, 0xd8,
	0x45, 0xb2, 0xd4, 0xa3, 0xa4, 0x31, 0x1e, 0xef, 0x8a, 0x5f, 0x24, 0x0e, 0xba, 0x4a, 0x89, 0x83,
	0x2e, 0xbc, 0x07, 0x6d, 0xf1, 0xf6, 0xbd, 0x7a, 0x13, 0xae, 0xaf, 0x78, 0x2c, 0x49, 0x9e, 0xa2,
	0xf1, 0x14, 0x89, 0xee, 0xfa, 0x1b, 0x86, 0xa0, 0x8b, 0x07, 0x2a, 0x64, 0xfd, 0x92, 0xc4, 0xfa,
	0xe5, 0x84, 0xf5, 0xbf, 0x53, 0x42, 0x3b, 0x43, 0xa2, 0x6f, 0xf6, 0x0c, 0xc3, 0x93, 0x7b, 0x04,
	0xed, 0xd0, 0x1a, 0x0d, 0xb3, 0xd7, 0x71, 0xd4, 0xe8, 0x96, 0x76, 0x3b, 0x34, 0xcf, 0x7a, 0xad,
	0xf8, 0x18, 0x1a, 0x35, 0xbb, 0xd4, 0x62, 0x81, 0x04, 0xef, 0xe9, 0x2d, 0x8a, 0x3b, 0x78, 0x3b,
	0xef, 0x9a, 0xa1, 0x0c, 0xbe, 0x84, 0x2a, 0x54, 0xb3, 0x3a, 0xb4, 0xa9, 0x36, 0x4c, 0xbd, 0x63,
	0xfb, 0xe3, 0xe5, 0x9d, 0x56, 0x0d, 0x31, 0x60, 0xe3, 0x5e, 0x8f, 0x79, 0xb7, 0x43, 0xf8, 0x24,
	0x04, 0x5f, 0x41, 0x7b, 0x2d, 0xfa, 0x44, 0xb3, 0x9a, 0x3e, 0xb9, 0xa1, 0x39, 0xd4, 0xe6, 0xd4,
	0x9b, 0x18, 0xf5, 0x04, 0xef, 0xc2, 0xe8, 0x5f, 0x63, 0x1d, 0x3c, 0xf2, 0x63, 0x10, 0x04, 0xd8,
	0x2c, 0x15, 0xc5, 0xa0, 0x0e, 0x6d, 0x4e, 0x6c, 0x3e, 0xa8, 0x1c, 0xdd, 0x56, 0xdb, 0xe1, 0xb5,
	0xcf, 0xf3, 0x66, 0xff, 0xb4, 0x26, 0x7c, 0x60, 0xe8, 0x1b, 0x8e, 0xcf, 0xd4, 0x6f, 0xf0, 0x23,
	0x13, 0x71, 0x27, 0x7f, 0xbb, 0x84, 0x43, 0xe3, 0x68, 0x47, 0x66, 0xe6, 0xb1, 0xac, 0x99, 0x19,
	0xb0, 0x1b, 0x0b, 0x33, 0x61, 0x4d, 0xe4, 0x1b, 0xe8, 0x28, 0x93, 0xcf, 0x9e, 0xe6, 0x56, 0xdd,
	0x5d, 0xd4, 0x22, 0xb5, 0x74, 0xb3, 0x39, 0xb7, 0x7a, 0x9d, 0x67, 0x50, 0x70, 0x5f, 0xb0, 0x0f,
	0x0d, 0xfb, 0x59, 0x15, 0x30, 0xca, 0x41, 0x03, 0xde, 0x8b, 0x86, 0xdd, 0x8d, 0x9c, 0xba, 0x64,
	0x99, 0x6d, 0x98, 0xd7, 0x5b, 0xdc, 0x86, 0x9b, 0x96, 0xd9, 0xc6, 0xe3, 0xe8, 0x59, 0xf6, 0xd2,
	0x31, 0x61, 0x4e, 0x6f, 0x76, 0x1f, 0x1f, 0x9a, 0xc4, 0x80, 0xcf, 0x5a, 0x2e, 0x1f, 0xcc, 0x70,
	0x15, 0x6d, 0xca, 0x46, 0xee, 0x93, 0x85, 0x58, 0xd6, 0x3c, 0x3a, 0xb2, 0x0c, 0xf1, 0x2f, 0xbc,
	0xf2, 0xbb, 0xce, 0x76, 0x9a, 0x6c, 0x78, 0xe7, 0xb4, 0xc6, 0x8a, 0x3b, 0xf0, 0x76, 0x3e, 0xc8,
	0xfc, 0x53, 0xb5, 0x55, 0xee, 0xb1, 0xbc, 0x4f, 0xd5, 0xbe, 0x47, 0x6a, 0xe8, 0x5c, 0xf4, 0x9e,
	0xd8, 0x9e, 0xed, 0x34, 0xd9, 0x49, 0xa6, 0x0d, 0xc2, 0x99, 0x40, 0x3b, 0x21, 0x31, 0xcc, 0x53,
	0x89, 0xf2, 0x5c, 0x46, 0x27, 0x33, 0x78, 0x06, 0xe6, 0xe3, 0xec, 0xfa, 0x1b, 0x95, 0x26, 0x6c,
	0x44, 0xd2, 0x25, 0x79, 0xe7, 0x64, 0x1b, 0x93, 0xa2, 0x22, 0xc4, 0xd8, 0x78, 0x9e, 0x44, 0x78,
	0xc3, 0xed, 0x72, 0xd6, 0x74, 0x95, 0x1d, 0xf6, 0xda, 0x9c, 0xb3, 0xa6, 0x7b, 0xaa, 0xb8, 0x8e,
	0xc2, 0x1f, 0x77, 0x9b, 0x3b, 0x8a, 0xa0, 0x85, 0xd8, 0x30, 0xdc, 0xd9, 0x30, 0xfc, 0xdb, 0xf2,
	0x11, 0x2f, 0x7b, 0x88, 0x09, 0xe7, 0xf3, 0xec, 0x40, 0xfa, 0x91, 0x9f, 0xf7, 0x5d, 0x6d, 0x65,
	0x44, 0x1e, 0x2f, 0xf2, 0x9b, 0xfc, 0x2a, 0x27, 0x4d, 0xaa, 0x2f, 0x2d, 0x82, 0x4d, 0x91, 0x62,
	0x2b, 0xc5, 0xb1, 0xe1, 0xb3, 0x68, 0xb7, 0xd6, 0x70, 0x7a, 0x9a, 0xa1, 0x06, 0x8d, 0x6a, 0xc3,
	0xb4, 0x79, 0xce, 0xc3, 0x4e, 0xef, 0x6d, 0xa0, 0xc4, 0xbc, 0x69, 0x3b, 0x84, 0x40, 0x34, 0x33,
	0xcf, 0x5c, 0x73, 0x64, 0x65, 0xf4, 0x5d, 0xd2, 0x45, 0x7e, 0xca, 0x2c, 0xec, 0x13, 0x5c, 0x0e,
	0x38, 0xa6, 0x03, 0xc7, 0xdd, 0xe5, 0x9a, 0xf7, 0x40, 0x26, 0xe0, 0x14, 0xf5, 0x3a, 0xad, 0xf7,
	0x5a, 0x11, 0x3f, 0xf7, 0xa3, 0x32, 0x9c, 0x3d, 0x86, 0x5f, 0x01, 0xaf, 0x3a, 0xda, 0xe6, 0x59,
	0xbd, 0xbe, 0xca, 0xce, 0x82, 0xc0, 0xec, 0x33, 0x42, 0xb3, 0xa7, 0x30, 0x99, 0x7e, 0x48, 0xdb,
	0x5d, 0xd3, 0xd2, 0x2c, 0xf6, 0x0d, 0xb8, 0xaf, 0x60, 0x54, 0xbc, 0x8f, 0x02, 0x53, 0xb4, 0xdd,
	0x97, 0xe1, 0x79, 0xfa, 0x12, 0x13, 0x72, 0xb5, 0x3f, 0x21, 0x37, 0x60, 0xc3, 0xe7, 0xd4, 0x46,
	0xec, 0xd0, 0xe7, 0x5c, 0xb1, 0xd0, 0x58, 0x42, 0x91, 0x0c, 0x27, 0xe2, 0x3b, 0xb5, 0x52, 0x7f,
	0x4e, 0xad, 0xe2, 0x20, 0x9c, 0xd4, 0x2b, 0x43, 0xe8, 0xb5, 0xa8, 0xd0, 0xa9, 0x5c, 0x42, 0xbd,
	0xeb, 0x21, 0x70, 0xa5, 0xc7, 0x82, 0x90, 0xef, 0xae, 0xde, 0xd1, 0xdb, 0xbd, 0x76, 0xb0, 0xcd,
	0x9e, 0x7d, 0x4c, 0xad, 0x60, 0x9b, 0x47, 0xbe, 0xad, 0xc0, 0x22, 0x23, 0xed, 0x0b, 0x93, 0xe1,
	0x10, 0xda, 0xe6, 0x58, 0xda, 0xd2, 0x92, 0xde, 0x50, 0xeb, 0x9a, 0xad, 0xdb, 0x10, 0x26, 0x8e,
	0x40, 0xe3, 0x9c, 0xdb, 0x86, 0x2f, 0xa3, 0x4a, 0xdb, 0x63, 0x14, 0xce, 0xa8, 0xd4, 0x3c, 0x56,
	0x10, 0x56, 0x4c, 0xb4, 0x53, 0x44, 0x09, 0x93, 0x84, 0x86, 0xa2, 0xb7, 0x8d, 0x87, 0xe1, 0x8e,
	0x62, 0xa1, 0xb3, 0x68, 0x99, 0x2d, 0x37, 0x2a, 0x11, 0x6e, 0x0e, 0x54, 0xb8, 0x26, 0x4e, 0xed,
	0xb6, 0xd1, 0x40, 0xfd, 0x42, 0x70, 0xdb, 0xb6, 0xe8, 0xe5, 0x55, 0x3e, 0xf2, 0xd2, 0x2a, 0xb9,
	0xe7, 0xdd, 0x8d, 0x36, 0x47, 0x52, 0x6d, 0xe0, 0x89, 0xd8, 0xc1, 0x2d, 0x5c, 0x9c, 0x10, 0x74,
	0xba, 0x0f, 0x11, 0xa3, 0xff, 0x46, 0x7a, 0xbb, 0x12, 0x65, 0xc2, 0x6f, 0x57, 0xa2, 0x0c, 0xc2,
	0x09, 0x34, 0x62, 0x6d, 0x07, 0x75, 0x58, 0xf0, 0x51, 0x28, 0x81, 0xa6, 0x00, 0xbc, 0xf2, 0x86,
	0xe0, 0x0d, 0xee, 0x20, 0xe0, 0x76, 0x6c, 0x5f, 0x77, 0xe7, 0x71, 0x8d, 0x36, 0x4c, 0xab, 0x19,
	0x1a, 0x54, 0x77, 0xf8, 0xfd, 0xc3, 0x64, 0x78, 0xc2, 0xa3, 0xa8, 0x1c, 0xdc, 0x23, 0xbb, 0x7f,
	0x92, 0x3a, 0x58, 0x3c, 0xc9, 0x09, 0xcc, 0x30, 0x8b, 0x36, 0x5b, 0xac, 0x05, 0xac, 0x7d, 0x2c,
	0x73, 0xea, 0xdd, 0x79, 0x03, 0x58, 0x00, 0x21, 0x99, 0x81, 0x49, 0xfe, 0x9a, 0x6e, 0x3b, 0x71,
	0x39, 0x77, 0xe8, 0xaa, 0x9d, 0xa1, 0x35, 0xb9, 0x04, 0xeb, 0x61, 0x3a, 0x3d, 0xe8, 0x8a, 0xd1,
	0xd0, 0x0a, 0x5d, 0xe5, 0xe7, 0x99, 0xec, 0x6f, 0xf2, 0x5e, 0x6c, 0x87, 0x3c, 0xa7, 0x59, 0x96,
	0x1e, 0x84, 0xa4, 0x33, 0xa8, 0x6c, 0xd1, 0xf7, 0xa5, 0x27, 0x60, 0xb7, 0xa8, 0x03, 0x44, 0xae,
	0x1b, 0xeb, 0x71, 0x75, 0x6b, 0x2e, 0x21, 0xd1, 0x62, 0x23, 0xe1, 0xb3, 0xf7, 0xcd, 0x37, 0x64,
	0x51, 0xbb, 0x0b, 0x83, 0x7d, 0x22, 0xa7, 0x00, 0x18, 0x72, 0x46, 0x4a, 0xde, 0x83, 0xa9, 0xca,
	0x45, 0xcc, 0x1a, 0xfa, 0xe3, 0xe8, 0xd1, 0xcb, 0xa5, 0x30, 0x88, 0x63, 0x69, 0x32, 0x12, 0x74,
	0x1c, 0xc1, 0x81, 0x54, 0xf6, 0x7e, 0xb2, 0x72, 0x18, 0xc4, 0x54, 0x1e, 0x01, 0x11, 0x04, 0xbf,
	0xaa, 0x04, 0x77, 0x57, 0x73, 0x2c, 0x15, 0xfb, 0x61, 0x90, 0x89, 0x1d, 0x4a, 0xe1, 0x30, 0x2d,
	0xbd, 0xa5, 0x77, 0xd4, 0xc6, 0xb2, 0xa6, 0x77, 0xf8, 0x01, 0x92, 0xd7, 0x36, 0xef, 0x36, 0x05,
	0x7e, 0xb7, 0xd3, 0x6b, 0xd7, 0xfd, 0xf3, 0x69, 0xcf, 0xef, 0xde, 0x63, 0x4d, 0xae, 0xf7, 0xb7,
	0x68, 0x83, 0xea, 0x5d, 0x47, 0xf5, 0xf2, 0x6b, 0xbd, 0xb4, 0x88, 0x11, 0x68, 0x5c, 0x60, 0x69,
	0xb6, 0xbf, 0x00, 0x01, 0x8a, 0x58, 0x1d, 0x00, 0xfd, 0x0e, 0x1a, 0xab, 0xc7, 0x5f, 0xfa, 0x1e,
	0x47, 0x64, 0x81, 0x04, 0x2b, 0xf0, 0x02, 0x49, 0x36, 0x64, 0x05, 0x14, 0x98, 0x35, 0x8c, 0x04,
	0xd5, 0xc0, 0xef, 0x40, 0x7e, 0xa8, 0xc0, 0x16, 0x31, 0x45, 0x1a, 0xe0, 0xfd, 0x0a, 0xc2, 0x09,
	0x45, 0xf9, 0x7a, 0x53, 0x0c, 0xb0, 0x80, 0xcf, 0xe0, 0x5c, 0x1f, 0xbf, 0x80, 0x67, 0xb1, 0xc4,
	0x42, 0x67, 0xc9, 0xe4, 0x4b, 0xe9, 0x9f, 0x28, 0x10, 0x3b, 0x86, 0xde, 0x00, 0xb4, 0xec, 0xec,
	0x20, 0x7c, 0xd1, 0xcf, 0xc7, 0x2f, 0x65, 0xe7, 0xe3, 0x7b, 0x30, 0x81, 0x00, 0xcf, 0xa3, 0x91,
	0xc8, 0x09, 0x40, 0x99, 0x31, 0xa8, 0xa4, 0x9f, 0x20, 0xf3, 0x04, 0x66, 0x23, 0x38, 0x16, 0x20,
	0x33, 0xc1, 0x94, 0x64, 0xdb, 0x80, 0x45, 0x6a, 0xb1, 0x38, 0x9e, 0xe5, 0x78, 0x84, 0xb6, 0x76,
	0x7e, 0xc6, 0xab, 0x12, 0xcd, 0x78, 0x5d, 0x84, 0x31, 0x4e, 0xa1, 0x0f, 0x82, 0xee, 0xae, 0xdb,
	0xc0, 0x33, 0x72, 0xd8, 0x83, 0xdb, 0xba, 0x64, 0xf6, 0x3a, 0xde, 0x1d, 0xc3, 0x96, 0x9a, 0xf7,
	0x40, 0x8e, 0x04, 0x49, 0x75, 0xb3, 0x86, 0x91, 0x64, 0xea, 0xc7, 0x30, 0x57, 0x60, 0x17, 0xc6,
	0x5a, 0x25, 0x3a, 0x06, 0xd2, 0x4b, 0x21, 0xe9, 0xc4, 0x0a, 0x8e, 0x12, 0xd3, 0xe4, 0xf8, 0xe9,
	0xe2, 0x23, 0x1e, 0x6b, 0x46, 0x98, 0x63, 0x73, 0xc5, 0xe8, 0xb9, 0xb5, 0xdb, 0x7e, 0x8b, 0x4d,
	0x2e, 0x06, 0x99, 0x4b, 0xac, 0xe3, 0xbc, 0xd6, 0xd5, 0x1a, 0xba, 0xb3, 0x9a, 0xc3, 0xd0, 0xf7,
	0x83, 0x80, 0x2a, 0x46, 0x0a, 0x5a, 0x56, 0xd0, 0x96, 0x06, 0xb4, 0x81, 0x99, 0xfd, 0xe7, 0x14,
	0x4b, 0x1f, 0x0a, 0xc6, 0x9e, 0x5b, 0x00, 0xb8, 0xea, 0x81, 0x95, 0x57, 0x83, 0x01, 0x16, 0x75,
	0x0a, 0x72, 0x5e, 0x3c, 0xc5, 0x1b, 0xfe, 0x3b, 0xe9, 0xa1, 0x76, 0x04, 0x02, 0x58, 0x6a, 0x47,
	0x3b, 0xca, 0x9c, 0xdc, 0x44, 0xdb, 0x22, 0xfd, 0x64, 0x63, 0x1c, 0x46, 0x5f, 0x8a, 0xa2, 0x3f,
	0xfd, 0xd9, 0x7b, 0x68, 0x13, 0xc3, 0x80, 0x7f, 0x4d, 0x41, 0x9b, 0xbd, 0x6f, 0x09, 0x1f, 0x49,
	0xdf, 0x3f, 0x45, 0x0a, 0x69, 0x2a, 0x47, 0xb3, 0x3b, 0x7a, 0x46, 0x20, 0xa7, 0x7f, 0xe9, 0xc7,
	0x3f, 0xfd, 0x56, 0xe9, 0x38, 0x9e, 0xaa, 0x76, 0x2d, 0xb3, 0xd9, 0x6b, 0x38, 0x76, 0x43, 0x4f,
	0x2b, 0xa8, 0x82, 0xea, 0x3a, 0xfc, 0xfb, 0x0a, 0x1a, 0xf6, 0xb7, 0xba, 0xf8, 0x44, 0xba, 0x2c,
	0x41, 0xc1, 0x4d, 0x65, 0x3a, 0x6f, 0x77, 0x50, 0xf0, 0x0a, 0x53, 0xf0, 0x02, 0x3e, 0x97, 0x47,
	0xc1, 0xe0, 0xaf, 0x35, 0xb6, 0xa2, 0xad, 0xe3, 0xdf, 0x55, 0xd0, 0x88, 0xcf, 0x74, 0xd6, 0x30,
	0x64, 0xea, 0x0a, 0x8a, 0x71, 0x64, 0xea, 0x8a, 0xca, 0x6a, 0xc8, 0x39, 0xa6, 0x6e, 0x15, 0x9f,
	0x28, 0xa4, 0x2e, 0xfe, 0x8e, 0x82, 0xb6, 0x86, 0xb6, 0xfe, 0xb8, 0x2a, 0xb5, 0x52, 0xb2, 0x88,
	0xa2, 0x72, 0x32, 0x3f, 0x01, 0x68, 0x7a, 0x95, 0x69, 0x7a, 0x11, 0x5f, 0xc8, 0x39, 0xf2, 0x9c,
	0x81, 0x6f, 0xda, 0x3f, 0x50, 0xd0, 0xf6, 0x10, 0x63, 0xd7, 0xb8, 0x55, 0xa9, 0xb5, 0x8a, 0xa9,
	0x2d, 0xae, 0x83, 0x21, 0x17, 0x98, 0xda, 0xa7, 0x70, 0xb5, 0xa0, 0xda, 0xf8, 0x6f, 0x14, 0xb4,
	0x53, 0x54, 0x48, 0x82, 0xcf, 0xa5, 0xeb, 0x20, 0x29, 0x5b, 0xa9, 0x9c, 0x2f, 0x4a, 0x06, 0x00,
	0xee, 0x30, 0x00, 0x37, 0xf0, 0x7c, 0xa1, 0x19, 0xa2, 0x46, 0x46, 0x00, 0xce, 0xf4, 0xd7, 0xf1,
	0x9f, 0x2a, 0x68, 0x2c, 0x51, 0x8f, 0x82, 0x4f, 0x4b, 0x27, 0x83, 0xb0, 0xe6, 0xa5, 0x72, 0xa6,
	0x10, 0x4d, 0x3f, 0x73, 0xa8, 0x45, 0x1d, 0xd5, 0x62, 0x7c, 0x54, 0x5e, 0xed, 0x82, 0x3f, 0x51,
	0xd0, 0xf6, 0x68, 0x2e, 0x61, 0x86, 0xf2, 0xc2, 0x2c, 0xc7, 0x0c, 0xe5, 0xc5, 0x39, 0x8f, 0xe4,
	0x11, 0x53, 0xfe, 0x75, 0x7c, 0x37, 0x8f, 0xf2, 0xf1, 0xec, 0xc8, 0xea, 0x9a, 0x38, 0xf7, 0x7e,
	0x1d, 0x7f, 0x4f, 0x41, 0x63, 0x51, 0x89, 0xee, 0x97, 0x71, 0x5a, 0x3a, 0xd1, 0x0b, 0xa3, 0x4a,
	0xad, 0x65, 0x21, 0x97, 0x19, 0xaa, 0xf3, 0xf8, 0x6c, 0x3f, 0xa8, 0xf0, 0x47, 0x0a, 0x1a, 0x09,
	0xd7, 0x42, 0x60, 0xb9, 0x5f, 0x11, 0x14, 0x78, 0x54, 0x4e, 0x15, 0xa0, 0x00, 0x9d, 0x6f, 0x31,
	0x9d, 0x67, 0xf1, 0xd5, 0x3c, 0x3a, 0x47, 0x8a, 0x3a, 0xaa, 0x6b, 0xa1, 0xef, 0x62, 0xdd, 0x75,
	0xa3, 0x3b, 0xc2, 0x12, 0x5c, 0xcb, 0xcb, 0x5d, 0x4c, 0x41, 0x04, 0x29, 0xc5, 0x26, 0xe4, 0x22,
	0x43, 0x70, 0x06, 0x9f, 0x2a, 0x8c, 0x00, 0xff, 0xaf, 0x82, 0x76, 0x09, 0x0b, 0x06, 0xf0, 0xc5,
	0x9c, 0xb3, 0x3a, 0x59, 0x2a, 0x51, 0x79, 0xa5, 0x1f, 0x52, 0xc0, 0xf2, 0x73, 0x0c, 0x4b, 0x13,
	0xd7, 0x8b, 0xce, 0xa0, 0x50, 0x79, 0x44, 0x74, 0x5c, 0xd2, 0x3f, 0x96, 0x4f, 0x15, 0x34, 0x21,
	0xd4, 0xc6, 0x1d, 0xb9, 0x8b, 0x39, 0xe7, 0x7f, 0x31, 0xfc, 0x59, 0x45, 0x1f, 0x64, 0x9e, 0xe1,
	0xbf, 0x82, 0x2f, 0x6d, 0x00, 0x3f, 0xfe, 0x6b, 0x05, 0xe1, 0x64, 0xf5, 0x04, 0x96, 0x7c, 0xd2,
	0xa9, 0x05, 0x1b, 0x95, 0xb3, 0xc5, 0x88, 0x00, 0xc6, 0x22, 0x83, 0xf1, 0x2a, 0xbe, 0x9d, 0x6b,
	0xa1, 0xe4, 0xc5, 0x0f, 0xd4, 0x56, 0x97, 0x4c, 0xcb, 0x1d, 0xab, 0x16, 0xad, 0xae, 0x45, 0x07,
	0xeb, 0xbb, 0x0a, 0xda, 0x11, 0xab, 0x5f, 0xc8, 0xf0, 0x0f, 0x82, 0x4a, 0x88, 0x0c, 0xff, 0x20,
	0x2a, 0x8e, 0x28, 0x16, 0x03, 0xba, 0xcb, 0x4c, 0xe4, 0x92, 0x1a, 0xff, 0x91, 0x82, 0xb6, 0x47,
	0xeb, 0x1a, 0x32, 0x16, 0x19, 0x61, 0xad, 0x45, 0xc6, 0x22, 0x23, 0x2e, 0xbf, 0x20, 0x97, 0x98,
	0xea, 0xe7, 0xf0, 0x99, 0x3c, 0xaa, 0xc7, 0x0a, 0x35, 0xf0, 0x7f, 0x2b, 0x68, 0xbf, 0xb4, 0x26,
	0x02, 0xcf, 0x48, 0x75, 0xca, 0x2c, 0xce, 0xa8, 0x5c, 0xed, 0x9b, 0x1e, 0xf0, 0xdd, 0x63, 0xf8,
	0x6e, 0xe3, 0x9b, 0x79, 0x87, 0x26, 0xf6, 0xe3, 0x12, 0xde, 0xfe, 0x54, 0xf5, 0xeb, 0x31, 0x7e,
	0xa4, 0xa0, 0x5d, 0xc2, 0x62, 0x0a, 0x2c, 0x89, 0xb7, 0x64, 0x25, 0x1a, 0x95, 0x0b, 0x85, 0xe9,
	0x00, 0xda, 0x75, 0x06, 0x6d, 0x06, 0x5f, 0xce, 0x03, 0x2d, 0x32, 0xe3, 0xc2, 0x2b, 0xea, 0x6f,
	0x29, 0x68, 0xd8, 0xaf, 0x73, 0xc0, 0x53, 0xe9, 0xca, 0xc4, 0xab, 0x24, 0x2a, 0x2f, 0xe5, 0xea,
	0x0b, 0xca, 0x9e, 0x67, 0xca, 0x9e, 0xc4, 0xd3, 0x79, 0x94, 0xf5, 0x2e, 0x5c, 0x55, 0xcd, 0x30,
	0xf0, 0x07, 0x0a, 0xda, 0xc2, 0x0b, 0x00, 0xf0, 0xf1, 0x8c, 0x19, 0x1e, 0xa9, 0x62, 0xa8, 0x9c,
	0xc8, 0xd9, 0xbb, 0x9f, 0x58, 0xd1, 0xaf, 0x5c, 0x08, 0xc5, 0xba, 0xbf, 0xad, 0xa0, 0xad, 0x9c,
	0xab, 0x6b, 0xcb, 0xe3, 0x52, 0x1f, 0x5f, 0x40, 0x5b, 0x41, 0xf5, 0x44, 0xb1, 0x7d, 0x9c, 0xaf,
	0x2d, 0xfe, 0x47, 0x05, 0x8d, 0xc6, 0xb3, 0xe7, 0xf1, 0xd9, 0x7c, 0x5b, 0xde, 0x68, 0x89, 0x40,
	0xe5, 0x5c, 0x41, 0x2a, 0x50, 0xfc, 0xab, 0x4c, 0xf1, 0xb7, 0xf0, 0x1b, 0xc5, 0xb6, 0x17, 0x50,
	0x16, 0x50, 0x5d, 0x8b, 0x57, 0x5b, 0xac, 0xbb, 0xfb, 0x3d, 0x3f, 0x7f, 0x7e, 0x1d, 0x7f, 0x5f,
	0x41, 0xcf, 0xc5, 0x85, 0xbb, 0xa3, 0x71, 0x36, 0xdf, 0x46, 0x39, 0x3f, 0x48, 0x49, 0x45, 0x43,
	0x9f, 0x87, 0x02, 0x1c, 0x24, 0xfe, 0x7f, 0x05, 0x55, 0xd2, 0xb3, 0x9e, 0x33, 0x9c, 0x6a, 0x66,
	0x42, 0x7e, 0x86, 0x53, 0xcd, 0x4e, 0xad, 0x27, 0x5f, 0x63, 0xf0, 0xde, 0xc1, 0x6f, 0x15, 0x83,
	0x97, 0xfc, 0xbd, 0x9b, 0xea, 0x1a, 0x64, 0xb3, 0xc5, 0x47, 0xf1, 0xdf, 0x14, 0xb4, 0x3f, 0x5d,
	0x11, 0x77, 0x3c, 0x67, 0xf2, 0x8d, 0x4c, 0x3f, 0x46, 0xc8, 0x55, 0x5f, 0x40, 0x6e, 0x33, 0x23,
	0xcc, 0xe1, 0x6b, 0x1b, 0x35, 0x02, 0xfe, 0x95, 0x12, 0x3a, 0x98, 0x95, 0x84, 0x8f, 0x67, 0x8b,
	0x0e, 0x5a, 0xa2, 0x42, 0xa0, 0x32, 0xb7, 0x11, 0x16, 0x80, 0x5a, 0x63, 0xa8, 0xdf, 0xc5, 0x6f,
	0xe7, 0x5d, 0x4f, 0x85, 0xc8, 0x83, 0x94, 0xfb, 0xea, 0x9a, 0xde, 0xb4, 0xd7, 0xab, 0x6b, 0x7e,
	0x5d, 0xc2, 0x3a, 0xfe, 0x3f, 0x05, 0x8d, 0xa7, 0x64, 0x67, 0xe3, 0x4b, 0xd9, 0xfb, 0x86, 0xd4,
	0xec, 0xf4, 0xca, 0xe5, 0xfe, 0x88, 0x01, 0xf9, 0x32, 0x43, 0x5e, 0xc7, 0x5f, 0xcb, 0x1f, 0x76,
	0x0b, 0x7e, 0xac, 0x09, 0x66, 0x7c, 0xa8, 0x3c, 0x60, 0x3d, 0xb2, 0x17, 0x71, 0x27, 0xff, 0x67,
	0x0a, 0xaa, 0xa4, 0x68, 0xe3, 0xce, 0xfc, 0x4b, 0xd9, 0x7b, 0x87, 0xbe, 0x6c, 0x90, 0x9d, 0x6b,
	0x4f, 0x6e, 0x30, 0x1b, 0x5c, 0xc5, 0x57, 0x36, 0x64, 0x03, 0x77, 0x51, 0x1f, 0x09, 0xdf, 0x32,
	0xcb, 0x0e, 0x3d, 0x05, 0xf9, 0xf1, 0xb2, 0x43, 0x4f, 0x51, 0x8a, 0x7c, 0xb1, 0xdd, 0x6f, 0xe4,
	0x97, 0xb0, 0xf0, 0xf7, 0x14, 0xb4, 0x2d, 0x92, 0x2d, 0x8e, 0x25, 0xc2, 0x45, 0xb9, 0xf4, 0x95,
	0x6a, 0xee, 0xfe, 0xfd, 0x38, 0x96, 0xc8, 0x2f, 0x71, 0xc5, 0xb6, 0xb5, 0xf8, 0x43, 0x05, 0x8d,
	0xc6, 0x13, 0xe5, 0xf1, 0xa9, 0x9c, 0xfa, 0x84, 0x22, 0xbd, 0xd3, 0x45, 0x48, 0x00, 0xc5, 0x0c,
	0x43, 0xf1, 0x32, 0x3e, 0x5f, 0x1c, 0x05, 0x0b, 0xfc, 0x7e, 0xa0, 0xb0, 0x1f, 0xdb, 0x8a, 0xa7,
	0xd9, 0xcb, 0xd6, 0xf1, 0xf4, 0xc4, 0x7d, 0xd9, 0x3a, 0x2e, 0xc9, 0xe5, 0x27, 0xb3, 0x0c, 0xc4,
	0x25, 0x7c, 0x31, 0x0f, 0x88, 0xf7, 0x19, 0x23, 0x35, 0x32, 0x7f, 0x6c, 0xb6, 0x29, 0x8d, 0xa5,
	0xec, 0xcb, 0x36, 0xa5, 0xe2, 0xe4, 0x7f, 0xd9, 0xa6, 0x34, 0xa5, 0x1e, 0xa0, 0x58, 0x0c, 0x12,
	0xfd, 0xf9, 0x37, 0xd7, 0xfe, 0xff, 0xa3, 0xa0, 0x4a, 0x7a, 0x06, 0x7f, 0x86, 0x23, 0x96, 0x67,
	0xe4, 0x67, 0x38, 0xe2, 0x8c, 0x04, 0x7d, 0xf2, 0x36, 0x03, 0xf6, 0x00, 0xdf, 0xcf, 0xbb, 0x04,
	0xa5, 0xa6, 0xf3, 0x27, 0x3c, 0xef, 0x7f, 0x79, 0x1b, 0xda, 0xf4, 0x2a, 0x81, 0x8c, 0xd8, 0x2b,
	0xb3, 0x18, 0x21, 0x23, 0xf6, 0xca, 0x2e, 0x4f, 0x20, 0x77, 0x19, 0xfa, 0x5b, 0xf8, 0x46, 0x5e,
	0xf4, 0x9a, 0x61, 0xa4, 0x5b, 0x00, 0xff, 0x50, 0x41, 0x13, 0x51, 0x9b, 0x07, 0x19, 0xe7, 0xb2,
	0x2d, 0xad, 0x2c, 0x8f, 0x5d, 0xb6, 0xa5, 0x95, 0xa6, 0xb6, 0x17, 0x73, 0x1a, 0xc9, 0x24, 0x78,
	0xfc, 0x9f, 0x0a, 0xda, 0x27, 0x4b, 0x1e, 0xc7, 0x57, 0xd2, 0x35, 0xcb, 0x91, 0xf4, 0x5e, 0x99,
	0xe9, 0x97, 0x1c, 0xf0, 0xbd, 0xce, 0xf0, 0x2d, 0xe0, 0x5b, 0x79, 0xf0, 0xf9, 0x09, 0x9a, 0xd5,
	0x35, 0xff, 0xcf, 0xf5, 0x6a, 0x24, 0x39, 0x16, 0xff, 0x62, 0x09, 0x91, 0xb4, 0xfc, 0xf5, 0x20,
	0x9d, 0x1c, 0xcf, 0x65, 0xea, 0x9d, 0x99, 0xfd, 0x2e, 0x3b, 0xb2, 0xcc, 0x4a, 0x6e, 0x26, 0xef,
	0x32, 0xdc, 0x8f, 0xf0, 0x83, 0x01, 0xe0, 0x86, 0x84, 0xf8, 0xba, 0x0f, 0xee, 0x2f, 0x15, 0x34,
	0xc6, 0xd2, 0x93, 0x23, 0x3f, 0xc6, 0x22, 0xf1, 0xf8, 0x92, 0x7c, 0x67, 0xd9, 0xad, 0x99, 0x2c,
	0x05, 0xba, 0xff, 0x99, 0x5b, 0x65, 0x85, 0x31, 0xf8, 0x23, 0x05, 0x4d, 0x04, 0x39, 0xc6, 0xd1,
	0x64, 0x5b, 0xfc, 0x52, 0xbe, 0xbc, 0x64, 0x0f, 0xc1, 0xf1, 0x22, 0x49, 0xcc, 0xc5, 0x22, 0xba,
	0xa6, 0x4b, 0x1f, 0x1a, 0x1f, 0xd7, 0xb5, 0x78, 0x1f, 0xde, 0x2f, 0x97, 0xd0, 0xb1, 0xdc, 0xd5,
	0x0d, 0xf8, 0xd5, 0xe2, 0x53, 0x29, 0xad, 0x44, 0x62, 0x43, 0xd3, 0xb2, 0xcf, 0xcf, 0x31, 0x7d,
	0x2a, 0xfe, 0xab, 0x82, 0x5e, 0xc8, 0x53, 0x90, 0x81, 0x6f, 0xf4, 0x63, 0x81, 0x44, 0x41, 0xc7,
	0x86, 0xc0, 0x17, 0x8a, 0x0f, 0xfc, 0x91, 0xf6, 0x3d, 0xcf, 0xbf, 0x2b, 0xe8, 0x60, 0x56, 0x29,
	0x85, 0x6c, 0xd3, 0x9a, 0xb3, 0x9a, 0x44, 0xb6, 0x69, 0xcd, 0x5b, 0xc9, 0x41, 0xae, 0x31, 0xa8,
	0xaf, 0xe0, 0x97, 0x0b, 0x1c, 0x3e, 0x46, 0xd1, 0xfe, 0xb3, 0x82, 0xf6, 0x4a, 0x12, 0xd6, 0xb1,
	0x3c, 0xa2, 0xc9, 0xc8, 0x89, 0xaf, 0x5c, 0xe9, 0x93, 0x1a, 0xe0, 0xbd, 0xca, 0xe0, 0x5d, 0xc7,
	0x73, 0x79, 0x43, 0x82, 0xf4, 0x74, 0x79, 0xfc, 0xa9, 0x82, 0xc6, 0x53, 0x12, 0xd8, 0xf1, 0xcb,
	0xb2, 0xa1, 0x90, 0xa5, 0xc6, 0x57, 0x2e, 0xf6, 0x41, 0x09, 0xe0, 0x6e, 0x32, 0x70, 0xd7, 0xf0,
	0x4c, 0xbe, 0x63, 0x16, 0xb5, 0x0b, 0xdc, 0xe2, 0x71, 0xf8, 0x9f, 0xf3, 0x6c, 0x90, 0x20, 0x85,
	0xfb, 0x74, 0x76, 0x18, 0x1a, 0x4f, 0x5a, 0xcf, 0xb8, 0x64, 0x11, 0xa7, 0x9f, 0x17, 0x3b, 0xa9,
	0x8f, 0xfd, 0x64, 0x72, 0x75, 0x8d, 0x5f, 0x6f, 0x7d, 0xa8, 0xa0, 0xb1, 0xa8, 0x80, 0xec, 0x8b,
	0xfb, 0xc2, 0x20, 0x52, 0x73, 0xe8, 0x8b, 0xdd, 0x14, 0xc5, 0x40, 0xe0, 0x7f, 0x52, 0xd0, 0x58,
	0x22, 0xc5, 0x14, 0xcb, 0x8f, 0x90, 0xd3, 0xb2, 0x8b, 0x65, 0x6b, 0xb4, 0x2c, 0x0b, 0x98, 0xbc,
	0xc7, 0x10, 0xbc, 0x89, 0x1f, 0x55, 0xf3, 0xfd, 0xae, 0x74, 0x75, 0x2d, 0x9c, 0xc4, 0xbc, 0xce,
	0xaf, 0x1b, 0xbd, 0x84, 0x65, 0x76, 0x66, 0x15, 0x4a, 0x4e, 0x5e, 0xc7, 0x7f, 0xac, 0x20, 0x9c,
	0xcc, 0xc9, 0x95, 0x05, 0xd1, 0xb2, 0x94, 0x61, 0x59, 0x10, 0x2d, 0x4d, 0xfe, 0x25, 0x27, 0x19,
	0xcc, 0x29, 0x7c, 0x34, 0x27, 0x4c, 0x1b, 0x7f, 0xac, 0xa0, 0xd1, 0x78, 0x32, 0x3e, 0xce, 0xb1,
	0xe5, 0x8c, 0x95, 0x2a, 0xc8, 0xce, 0x09, 0xd2, 0x6a, 0x12, 0x8a, 0xed, 0x67, 0xfc, 0x6f, 0x7a,
	0xe5, 0xb1, 0xea, 0x15, 0x24, 0x54, 0xd7, 0xbc, 0xc2, 0x82, 0xf5, 0xea, 0xda, 0x0a, 0x5d, 0x5d,
	0xc7, 0x3f, 0x55, 0xd0, 0x44, 0x5a, 0x6d, 0x81, 0xec, 0xc2, 0x3e, 0xa3, 0x9e, 0x41, 0xb6, 0xd2,
	0x66, 0x95, 0x32, 0x90, 0xfb, 0x0c, 0xe2, 0x1d, 0xbc, 0x90, 0x07, 0xa2, 0xa1, 0xdb, 0x8e, 0x9a,
	0xc4, 0xa9, 0xae, 0xd0, 0x55, 0xdb, 0x07, 0x8b, 0xff, 0x30, 0x74, 0xaa, 0x00, 0xf5, 0x06, 0x79,
	0x4e, 0x15, 0xa2, 0x05, 0x13, 0x79, 0x4e, 0x15, 0x62, 0x35, 0x10, 0xc5, 0xd2, 0x77, 0x7c, 0x18,
	0x75, 0x50, 0xf1, 0xfb, 0x0a, 0xc2, 0xc9, 0xda, 0x04, 0x59, 0xd6, 0x41, 0x6a, 0xa1, 0x84, 0x2c,
	0xeb, 0x20, 0xbd, 0xfc, 0xa1, 0x58, 0x28, 0xe0, 0xeb, 0xaf, 0xb9, 0x8c, 0xbc, 0xc3, 0x29, 0x76,
	0x61, 0xea, 0xa7, 0xa5, 0xcb, 0x2e, 0x4c, 0xe3, 0x59, 0xed, 0xb2, 0x0b, 0xd3, 0x44, 0x9e, 0x7b,
	0xb1, 0x0b, 0x53, 0xf8, 0x8d, 0x00, 0x57, 0xa1, 0x4f, 0x15, 0xb4, 0x4b, 0x98, 0x38, 0x8e, 0xe5,
	0x6e, 0x33, 0x35, 0x53, 0x5d, 0xe6, 0x88, 0xa4, 0x19, 0xea, 0xe4, 0x35, 0x06, 0xe1, 0x26, 0xbe,
	0x9e, 0x3b, 0xec, 0x52, 0xbb, 0xd4, 0xf2, 0x6a, 0x60, 0xbd, 0x7b, 0xf7, 0xea, 0x1a, 0xcf, 0x4d,
	0x5e, 0xc7, 0xff, 0xa0, 0xa0, 0x3d, 0xa9, 0x79, 0xe5, 0xf8, 0x95, 0xac, 0x73, 0x95, 0xf4, 0xa4,
	0xf7, 0xca, 0xa5, 0xbe, 0x68, 0xfb, 0x89, 0x4f, 0xdc, 0x30, 0x5a, 0x08, 0xd4, 0xc6, 0x7f, 0xa1,
	0xa0, 0xd1, 0x78, 0x1e, 0x3a, 0x3e, 0x95, 0x6d, 0xfa, 0x58, 0xba, 0x7b, 0xe5, 0x74, 0x11, 0x92,
	0x7e, 0x36, 0x81, 0x91, 0x9c, 0xf4, 0xd5, 0xf0, 0x08, 0xfd, 0x95, 0x37, 0xf5, 0x92, 0x29, 0xed,
	0x19, 0x53, 0x2f, 0x35, 0x51, 0x3e, 0x63, 0xea, 0xa5, 0xe7, 0xce, 0x17, 0xfb, 0xcc, 0x83, 0x51,
	0x09, 0x32, 0xed, 0xe7, 0x5e, 0xff, 0xf8, 0xf3, 0x49, 0xe5, 0x93, 0xcf, 0x27, 0x95, 0x9f, 0x7c,
	0x3e, 0xa9, 0xfc, 0xfa, 0x17, 0x93, 0xcf, 0x7c, 0xf2, 0xc5, 0xe4, 0x33, 0x7f, 0xf7, 0xc5, 0xe4,
	0x33, 0xef, 0x9c, 0x6b, 0xe9, 0xce, 0x72, 0xaf, 0x3e, 0xdd, 0x30, 0xdb, 0xe9, 0xdc, 0x9f, 0x86,
	0xdd, 0xc8, 0x6a, 0x97, 0xda, 0xf5, 0xcd, 0xec, 0x7f, 0x96, 0x38, 0xf3, 0xb3, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xcf, 0xb7, 0xb1, 0x60, 0xc1, 0x66, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of Inference items.
	Inference(ctx context.Context, in *QueryGetInferenceRequest, opts ...grpc.CallOption) (*QueryGetInferenceResponse, error)
	InferenceAll(ctx context.Context, in *QueryAllInferenceRequest, opts ...grpc.CallOption) (*QueryAllInferenceResponse, error)
	// Queries a list of Participant items.
	Participant(ctx context.Context, in *QueryGetParticipantRequest, opts ...grpc.CallOption) (*QueryGetParticipantResponse, error)
	ParticipantAll(ctx context.Context, in *QueryAllParticipantRequest, opts ...grpc.CallOption) (*QueryAllParticipantResponse, error)
	// Queries a list of InferenceParticipant items.
	InferenceParticipant(ctx context.Context, in *QueryInferenceParticipantRequest, opts ...grpc.CallOption) (*QueryInferenceParticipantResponse, error)
	// Queries a list of GetRandomExecutor items.
	GetRandomExecutor(ctx context.Context, in *QueryGetRandomExecutorRequest, opts ...grpc.CallOption) (*QueryGetRandomExecutorResponse, error)
	// Queries a list of EpochGroupData items.
	EpochGroupData(ctx context.Context, in *QueryGetEpochGroupDataRequest, opts ...grpc.CallOption) (*QueryGetEpochGroupDataResponse, error)
	EpochGroupDataAll(ctx context.Context, in *QueryAllEpochGroupDataRequest, opts ...grpc.CallOption) (*QueryAllEpochGroupDataResponse, error)
	// Queries a list of SettleAmount items.
	SettleAmount(ctx context.Context, in *QueryGetSettleAmountRequest, opts ...grpc.CallOption) (*QueryGetSettleAmountResponse, error)
	SettleAmountAll(ctx context.Context, in *QueryAllSettleAmountRequest, opts ...grpc.CallOption) (*QueryAllSettleAmountResponse, error)
	// Queries a list of EpochGroupValidations items.
	EpochGroupValidations(ctx context.Context, in *QueryGetEpochGroupValidationsRequest, opts ...grpc.CallOption) (*QueryGetEpochGroupValidationsResponse, error)
	EpochGroupValidationsAll(ctx context.Context, in *QueryAllEpochGroupValidationsRequest, opts ...grpc.CallOption) (*QueryAllEpochGroupValidationsResponse, error)
	// Queries a list of PocBatchesForStage items.
	PocBatchesForStage(ctx context.Context, in *QueryPocBatchesForStageRequest, opts ...grpc.CallOption) (*QueryPocBatchesForStageResponse, error)
	// Queries a list of GetCurrentEpoch items.
	GetCurrentEpoch(ctx context.Context, in *QueryGetCurrentEpochRequest, opts ...grpc.CallOption) (*QueryGetCurrentEpochResponse, error)
	// Queries a TokenomicsData by index.
	TokenomicsData(ctx context.Context, in *QueryGetTokenomicsDataRequest, opts ...grpc.CallOption) (*QueryGetTokenomicsDataResponse, error)
	// Queries a list of GetUnitOfComputePriceProposal items.
	GetUnitOfComputePriceProposal(ctx context.Context, in *QueryGetUnitOfComputePriceProposalRequest, opts ...grpc.CallOption) (*QueryGetUnitOfComputePriceProposalResponse, error)
	// Queries a list of CurrentEpochGroupData items.
	CurrentEpochGroupData(ctx context.Context, in *QueryCurrentEpochGroupDataRequest, opts ...grpc.CallOption) (*QueryCurrentEpochGroupDataResponse, error)
	// Queries a list of ModelsAll items.
	ModelsAll(ctx context.Context, in *QueryModelsAllRequest, opts ...grpc.CallOption) (*QueryModelsAllResponse, error)
	// Queries a list of TopMiner items.
	TopMiner(ctx context.Context, in *QueryGetTopMinerRequest, opts ...grpc.CallOption) (*QueryGetTopMinerResponse, error)
	TopMinerAll(ctx context.Context, in *QueryAllTopMinerRequest, opts ...grpc.CallOption) (*QueryAllTopMinerResponse, error)
	// Queries a list of InferenceTimeout items.
	InferenceTimeout(ctx context.Context, in *QueryGetInferenceTimeoutRequest, opts ...grpc.CallOption) (*QueryGetInferenceTimeoutResponse, error)
	InferenceTimeoutAll(ctx context.Context, in *QueryAllInferenceTimeoutRequest, opts ...grpc.CallOption) (*QueryAllInferenceTimeoutResponse, error)
	// BE CAREFUL, epoch_id in the request body meand epoch_group_id!!
	InferenceValidationDetails(ctx context.Context, in *QueryGetInferenceValidationDetailsRequest, opts ...grpc.CallOption) (*QueryGetInferenceValidationDetailsResponse, error)
	// Queries a list of InferenceValidationDetails items.
	InferenceValidationDetailsAll(ctx context.Context, in *QueryAllInferenceValidationDetailsRequest, opts ...grpc.CallOption) (*QueryAllInferenceValidationDetailsResponse, error)
	// Queries a list of GetInferenceValidationParameters items.
	GetInferenceValidationParameters(ctx context.Context, in *QueryGetInferenceValidationParametersRequest, opts ...grpc.CallOption) (*QueryGetInferenceValidationParametersResponse, error)
	// Queries a list of EpochPerformanceSummary items.
	EpochPerformanceSummary(ctx context.Context, in *QueryGetEpochPerformanceSummaryRequest, opts ...grpc.CallOption) (*QueryGetEpochPerformanceSummaryResponse, error)
	EpochPerformanceSummaryAll(ctx context.Context, in *QueryAllEpochPerformanceSummaryRequest, opts ...grpc.CallOption) (*QueryAllEpochPerformanceSummaryResponse, error)
	// Queries a list of TrainingTask items.
	TrainingTask(ctx context.Context, in *QueryTrainingTaskRequest, opts ...grpc.CallOption) (*QueryTrainingTaskResponse, error)
	// Queries a list of HardwareNodes items.
	HardwareNodes(ctx context.Context, in *QueryHardwareNodesRequest, opts ...grpc.CallOption) (*QueryHardwareNodesResponse, error)
	// Queries a list of HardwareNodesAll items.
	HardwareNodesAll(ctx context.Context, in *QueryHardwareNodesAllRequest, opts ...grpc.CallOption) (*QueryHardwareNodesAllResponse, error)
	// Queries a list of QueuedTrainingTasks items.
	QueuedTrainingTasks(ctx context.Context, in *QueryQueuedTrainingTasksRequest, opts ...grpc.CallOption) (*QueryQueuedTrainingTasksResponse, error)
	// Queries a list of TrainingTaskAll items.
	TrainingTaskAll(ctx context.Context, in *QueryTrainingTaskAllRequest, opts ...grpc.CallOption) (*QueryTrainingTaskAllResponse, error)
	// Queries a list of GetParticipantCurrentStats items.
	GetParticipantCurrentStats(ctx context.Context, in *QueryGetParticipantCurrentStatsRequest, opts ...grpc.CallOption) (*QueryGetParticipantCurrentStatsResponse, error)
	// Queries a list of GetAllParticipantCurrentStats items.
	GetAllParticipantCurrentStats(ctx context.Context, in *QueryGetAllParticipantCurrentStatsRequest, opts ...grpc.CallOption) (*QueryGetAllParticipantCurrentStatsResponse, error)
	GetParticipantsFullStats(ctx context.Context, in *QueryParticipantsFullStatsRequest, opts ...grpc.CallOption) (*QueryParticipantsFullStatsResponse, error)
	StatsByTimePeriodByDeveloper(ctx context.Context, in *QueryStatsByTimePeriodByDeveloperRequest, opts ...grpc.CallOption) (*QueryStatsByTimePeriodByDeveloperResponse, error)
	StatsByDeveloperAndEpochsBackwards(ctx context.Context, in *QueryStatsByDeveloperAndEpochBackwardsRequest, opts ...grpc.CallOption) (*QueryInferencesAndTokensStatsResponse, error)
	CountParticipants(ctx context.Context, in *QueryCountAllParticipantsRequest, opts ...grpc.CallOption) (*QueryCountAllParticipantsResponse, error)
	DebugStatsDeveloperStats(ctx context.Context, in *QueryDebugStatsRequest, opts ...grpc.CallOption) (*QueryDebugStatsResponse, error)
	InferencesAndTokensStatsByEpochsBackwards(ctx context.Context, in *QueryInferencesAndTokensStatsByEpochsBackwardsRequest, opts ...grpc.CallOption) (*QueryInferencesAndTokensStatsResponse, error)
	InferencesAndTokensStatsByTimePeriod(ctx context.Context, in *QueryInferencesAndTokensStatsByTimePeriodRequest, opts ...grpc.CallOption) (*QueryInferencesAndTokensStatsResponse, error)
	InferencesAndTokensStatsByModels(ctx context.Context, in *QueryInferencesAndTokensStatsByModelsRequest, opts ...grpc.CallOption) (*QueryInferencesAndTokensStatsByModelsResponse, error)
	// Queries a list of GetMinimumValidationAverage items.
	GetMinimumValidationAverage(ctx context.Context, in *QueryGetMinimumValidationAverageRequest, opts ...grpc.CallOption) (*QueryGetMinimumValidationAverageResponse, error)
	// Queries a list of InProgressTrainingTasks items.
	InProgressTrainingTasks(ctx context.Context, in *QueryInProgressTrainingTasksRequest, opts ...grpc.CallOption) (*QueryInProgressTrainingTasksResponse, error)
	// Queries a list of PartialUpgrade items.
	PartialUpgrade(ctx context.Context, in *QueryGetPartialUpgradeRequest, opts ...grpc.CallOption) (*QueryGetPartialUpgradeResponse, error)
	PartialUpgradeAll(ctx context.Context, in *QueryAllPartialUpgradeRequest, opts ...grpc.CallOption) (*QueryAllPartialUpgradeResponse, error)
	// Queries a bridge transaction by its composite key
	BridgeTransaction(ctx context.Context, in *QueryGetBridgeTransactionRequest, opts ...grpc.CallOption) (*QueryGetBridgeTransactionResponse, error)
	// Queries all bridge transactions
	BridgeTransactions(ctx context.Context, in *QueryAllBridgeTransactionsRequest, opts ...grpc.CallOption) (*QueryAllBridgeTransactionsResponse, error)
	// Queries a list of TrainingKvRecord items.
	TrainingKvRecord(ctx context.Context, in *QueryTrainingKvRecordRequest, opts ...grpc.CallOption) (*QueryTrainingKvRecordResponse, error)
	// Queries a list of ListTrainingKvRecordKeys items.
	ListTrainingKvRecordKeys(ctx context.Context, in *QueryListTrainingKvRecordKeysRequest, opts ...grpc.CallOption) (*QueryListTrainingKvRecordKeysResponse, error)
	// Queries a list of TrainingBarrier items.
	TrainingBarrier(ctx context.Context, in *QueryTrainingBarrierRequest, opts ...grpc.CallOption) (*QueryTrainingBarrierResponse, error)
	// Queries a list of TrainingAliveNodes items.
	TrainingAliveNodes(ctx context.Context, in *QueryTrainingAliveNodesRequest, opts ...grpc.CallOption) (*QueryTrainingAliveNodesResponse, error)
	// Queries a list of EpochInfo items.
	EpochInfo(ctx context.Context, in *QueryEpochInfoRequest, opts ...grpc.CallOption) (*QueryEpochInfoResponse, error)
	// Dynamic pricing queries (Task 7.1)
	GetModelPerTokenPrice(ctx context.Context, in *QueryGetModelPerTokenPriceRequest, opts ...grpc.CallOption) (*QueryGetModelPerTokenPriceResponse, error)
	GetAllModelPerTokenPrices(ctx context.Context, in *QueryGetAllModelPerTokenPricesRequest, opts ...grpc.CallOption) (*QueryGetAllModelPerTokenPricesResponse, error)
	GetModelCapacity(ctx context.Context, in *QueryGetModelCapacityRequest, opts ...grpc.CallOption) (*QueryGetModelCapacityResponse, error)
	GetAllModelCapacities(ctx context.Context, in *QueryGetAllModelCapacitiesRequest, opts ...grpc.CallOption) (*QueryGetAllModelCapacitiesResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Inference(ctx context.Context, in *QueryGetInferenceRequest, opts ...grpc.CallOption) (*QueryGetInferenceResponse, error) {
	out := new(QueryGetInferenceResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/Inference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InferenceAll(ctx context.Context, in *QueryAllInferenceRequest, opts ...grpc.CallOption) (*QueryAllInferenceResponse, error) {
	out := new(QueryAllInferenceResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/InferenceAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Participant(ctx context.Context, in *QueryGetParticipantRequest, opts ...grpc.CallOption) (*QueryGetParticipantResponse, error) {
	out := new(QueryGetParticipantResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/Participant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ParticipantAll(ctx context.Context, in *QueryAllParticipantRequest, opts ...grpc.CallOption) (*QueryAllParticipantResponse, error) {
	out := new(QueryAllParticipantResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/ParticipantAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InferenceParticipant(ctx context.Context, in *QueryInferenceParticipantRequest, opts ...grpc.CallOption) (*QueryInferenceParticipantResponse, error) {
	out := new(QueryInferenceParticipantResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/InferenceParticipant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetRandomExecutor(ctx context.Context, in *QueryGetRandomExecutorRequest, opts ...grpc.CallOption) (*QueryGetRandomExecutorResponse, error) {
	out := new(QueryGetRandomExecutorResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/GetRandomExecutor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EpochGroupData(ctx context.Context, in *QueryGetEpochGroupDataRequest, opts ...grpc.CallOption) (*QueryGetEpochGroupDataResponse, error) {
	out := new(QueryGetEpochGroupDataResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/EpochGroupData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EpochGroupDataAll(ctx context.Context, in *QueryAllEpochGroupDataRequest, opts ...grpc.CallOption) (*QueryAllEpochGroupDataResponse, error) {
	out := new(QueryAllEpochGroupDataResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/EpochGroupDataAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SettleAmount(ctx context.Context, in *QueryGetSettleAmountRequest, opts ...grpc.CallOption) (*QueryGetSettleAmountResponse, error) {
	out := new(QueryGetSettleAmountResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/SettleAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SettleAmountAll(ctx context.Context, in *QueryAllSettleAmountRequest, opts ...grpc.CallOption) (*QueryAllSettleAmountResponse, error) {
	out := new(QueryAllSettleAmountResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/SettleAmountAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EpochGroupValidations(ctx context.Context, in *QueryGetEpochGroupValidationsRequest, opts ...grpc.CallOption) (*QueryGetEpochGroupValidationsResponse, error) {
	out := new(QueryGetEpochGroupValidationsResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/EpochGroupValidations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EpochGroupValidationsAll(ctx context.Context, in *QueryAllEpochGroupValidationsRequest, opts ...grpc.CallOption) (*QueryAllEpochGroupValidationsResponse, error) {
	out := new(QueryAllEpochGroupValidationsResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/EpochGroupValidationsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PocBatchesForStage(ctx context.Context, in *QueryPocBatchesForStageRequest, opts ...grpc.CallOption) (*QueryPocBatchesForStageResponse, error) {
	out := new(QueryPocBatchesForStageResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/PocBatchesForStage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetCurrentEpoch(ctx context.Context, in *QueryGetCurrentEpochRequest, opts ...grpc.CallOption) (*QueryGetCurrentEpochResponse, error) {
	out := new(QueryGetCurrentEpochResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/GetCurrentEpoch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenomicsData(ctx context.Context, in *QueryGetTokenomicsDataRequest, opts ...grpc.CallOption) (*QueryGetTokenomicsDataResponse, error) {
	out := new(QueryGetTokenomicsDataResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/TokenomicsData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetUnitOfComputePriceProposal(ctx context.Context, in *QueryGetUnitOfComputePriceProposalRequest, opts ...grpc.CallOption) (*QueryGetUnitOfComputePriceProposalResponse, error) {
	out := new(QueryGetUnitOfComputePriceProposalResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/GetUnitOfComputePriceProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CurrentEpochGroupData(ctx context.Context, in *QueryCurrentEpochGroupDataRequest, opts ...grpc.CallOption) (*QueryCurrentEpochGroupDataResponse, error) {
	out := new(QueryCurrentEpochGroupDataResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/CurrentEpochGroupData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ModelsAll(ctx context.Context, in *QueryModelsAllRequest, opts ...grpc.CallOption) (*QueryModelsAllResponse, error) {
	out := new(QueryModelsAllResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/ModelsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TopMiner(ctx context.Context, in *QueryGetTopMinerRequest, opts ...grpc.CallOption) (*QueryGetTopMinerResponse, error) {
	out := new(QueryGetTopMinerResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/TopMiner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TopMinerAll(ctx context.Context, in *QueryAllTopMinerRequest, opts ...grpc.CallOption) (*QueryAllTopMinerResponse, error) {
	out := new(QueryAllTopMinerResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/TopMinerAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InferenceTimeout(ctx context.Context, in *QueryGetInferenceTimeoutRequest, opts ...grpc.CallOption) (*QueryGetInferenceTimeoutResponse, error) {
	out := new(QueryGetInferenceTimeoutResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/InferenceTimeout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InferenceTimeoutAll(ctx context.Context, in *QueryAllInferenceTimeoutRequest, opts ...grpc.CallOption) (*QueryAllInferenceTimeoutResponse, error) {
	out := new(QueryAllInferenceTimeoutResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/InferenceTimeoutAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InferenceValidationDetails(ctx context.Context, in *QueryGetInferenceValidationDetailsRequest, opts ...grpc.CallOption) (*QueryGetInferenceValidationDetailsResponse, error) {
	out := new(QueryGetInferenceValidationDetailsResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/InferenceValidationDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InferenceValidationDetailsAll(ctx context.Context, in *QueryAllInferenceValidationDetailsRequest, opts ...grpc.CallOption) (*QueryAllInferenceValidationDetailsResponse, error) {
	out := new(QueryAllInferenceValidationDetailsResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/InferenceValidationDetailsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetInferenceValidationParameters(ctx context.Context, in *QueryGetInferenceValidationParametersRequest, opts ...grpc.CallOption) (*QueryGetInferenceValidationParametersResponse, error) {
	out := new(QueryGetInferenceValidationParametersResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/GetInferenceValidationParameters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EpochPerformanceSummary(ctx context.Context, in *QueryGetEpochPerformanceSummaryRequest, opts ...grpc.CallOption) (*QueryGetEpochPerformanceSummaryResponse, error) {
	out := new(QueryGetEpochPerformanceSummaryResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/EpochPerformanceSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EpochPerformanceSummaryAll(ctx context.Context, in *QueryAllEpochPerformanceSummaryRequest, opts ...grpc.CallOption) (*QueryAllEpochPerformanceSummaryResponse, error) {
	out := new(QueryAllEpochPerformanceSummaryResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/EpochPerformanceSummaryAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TrainingTask(ctx context.Context, in *QueryTrainingTaskRequest, opts ...grpc.CallOption) (*QueryTrainingTaskResponse, error) {
	out := new(QueryTrainingTaskResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/TrainingTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HardwareNodes(ctx context.Context, in *QueryHardwareNodesRequest, opts ...grpc.CallOption) (*QueryHardwareNodesResponse, error) {
	out := new(QueryHardwareNodesResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/HardwareNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HardwareNodesAll(ctx context.Context, in *QueryHardwareNodesAllRequest, opts ...grpc.CallOption) (*QueryHardwareNodesAllResponse, error) {
	out := new(QueryHardwareNodesAllResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/HardwareNodesAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueuedTrainingTasks(ctx context.Context, in *QueryQueuedTrainingTasksRequest, opts ...grpc.CallOption) (*QueryQueuedTrainingTasksResponse, error) {
	out := new(QueryQueuedTrainingTasksResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/QueuedTrainingTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TrainingTaskAll(ctx context.Context, in *QueryTrainingTaskAllRequest, opts ...grpc.CallOption) (*QueryTrainingTaskAllResponse, error) {
	out := new(QueryTrainingTaskAllResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/TrainingTaskAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetParticipantCurrentStats(ctx context.Context, in *QueryGetParticipantCurrentStatsRequest, opts ...grpc.CallOption) (*QueryGetParticipantCurrentStatsResponse, error) {
	out := new(QueryGetParticipantCurrentStatsResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/GetParticipantCurrentStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAllParticipantCurrentStats(ctx context.Context, in *QueryGetAllParticipantCurrentStatsRequest, opts ...grpc.CallOption) (*QueryGetAllParticipantCurrentStatsResponse, error) {
	out := new(QueryGetAllParticipantCurrentStatsResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/GetAllParticipantCurrentStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetParticipantsFullStats(ctx context.Context, in *QueryParticipantsFullStatsRequest, opts ...grpc.CallOption) (*QueryParticipantsFullStatsResponse, error) {
	out := new(QueryParticipantsFullStatsResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/GetParticipantsFullStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StatsByTimePeriodByDeveloper(ctx context.Context, in *QueryStatsByTimePeriodByDeveloperRequest, opts ...grpc.CallOption) (*QueryStatsByTimePeriodByDeveloperResponse, error) {
	out := new(QueryStatsByTimePeriodByDeveloperResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/StatsByTimePeriodByDeveloper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StatsByDeveloperAndEpochsBackwards(ctx context.Context, in *QueryStatsByDeveloperAndEpochBackwardsRequest, opts ...grpc.CallOption) (*QueryInferencesAndTokensStatsResponse, error) {
	out := new(QueryInferencesAndTokensStatsResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/StatsByDeveloperAndEpochsBackwards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CountParticipants(ctx context.Context, in *QueryCountAllParticipantsRequest, opts ...grpc.CallOption) (*QueryCountAllParticipantsResponse, error) {
	out := new(QueryCountAllParticipantsResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/CountParticipants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DebugStatsDeveloperStats(ctx context.Context, in *QueryDebugStatsRequest, opts ...grpc.CallOption) (*QueryDebugStatsResponse, error) {
	out := new(QueryDebugStatsResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/DebugStatsDeveloperStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InferencesAndTokensStatsByEpochsBackwards(ctx context.Context, in *QueryInferencesAndTokensStatsByEpochsBackwardsRequest, opts ...grpc.CallOption) (*QueryInferencesAndTokensStatsResponse, error) {
	out := new(QueryInferencesAndTokensStatsResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/InferencesAndTokensStatsByEpochsBackwards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InferencesAndTokensStatsByTimePeriod(ctx context.Context, in *QueryInferencesAndTokensStatsByTimePeriodRequest, opts ...grpc.CallOption) (*QueryInferencesAndTokensStatsResponse, error) {
	out := new(QueryInferencesAndTokensStatsResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/InferencesAndTokensStatsByTimePeriod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InferencesAndTokensStatsByModels(ctx context.Context, in *QueryInferencesAndTokensStatsByModelsRequest, opts ...grpc.CallOption) (*QueryInferencesAndTokensStatsByModelsResponse, error) {
	out := new(QueryInferencesAndTokensStatsByModelsResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/InferencesAndTokensStatsByModels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetMinimumValidationAverage(ctx context.Context, in *QueryGetMinimumValidationAverageRequest, opts ...grpc.CallOption) (*QueryGetMinimumValidationAverageResponse, error) {
	out := new(QueryGetMinimumValidationAverageResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/GetMinimumValidationAverage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InProgressTrainingTasks(ctx context.Context, in *QueryInProgressTrainingTasksRequest, opts ...grpc.CallOption) (*QueryInProgressTrainingTasksResponse, error) {
	out := new(QueryInProgressTrainingTasksResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/InProgressTrainingTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PartialUpgrade(ctx context.Context, in *QueryGetPartialUpgradeRequest, opts ...grpc.CallOption) (*QueryGetPartialUpgradeResponse, error) {
	out := new(QueryGetPartialUpgradeResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/PartialUpgrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PartialUpgradeAll(ctx context.Context, in *QueryAllPartialUpgradeRequest, opts ...grpc.CallOption) (*QueryAllPartialUpgradeResponse, error) {
	out := new(QueryAllPartialUpgradeResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/PartialUpgradeAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BridgeTransaction(ctx context.Context, in *QueryGetBridgeTransactionRequest, opts ...grpc.CallOption) (*QueryGetBridgeTransactionResponse, error) {
	out := new(QueryGetBridgeTransactionResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/BridgeTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BridgeTransactions(ctx context.Context, in *QueryAllBridgeTransactionsRequest, opts ...grpc.CallOption) (*QueryAllBridgeTransactionsResponse, error) {
	out := new(QueryAllBridgeTransactionsResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/BridgeTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TrainingKvRecord(ctx context.Context, in *QueryTrainingKvRecordRequest, opts ...grpc.CallOption) (*QueryTrainingKvRecordResponse, error) {
	out := new(QueryTrainingKvRecordResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/TrainingKvRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListTrainingKvRecordKeys(ctx context.Context, in *QueryListTrainingKvRecordKeysRequest, opts ...grpc.CallOption) (*QueryListTrainingKvRecordKeysResponse, error) {
	out := new(QueryListTrainingKvRecordKeysResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/ListTrainingKvRecordKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TrainingBarrier(ctx context.Context, in *QueryTrainingBarrierRequest, opts ...grpc.CallOption) (*QueryTrainingBarrierResponse, error) {
	out := new(QueryTrainingBarrierResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/TrainingBarrier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TrainingAliveNodes(ctx context.Context, in *QueryTrainingAliveNodesRequest, opts ...grpc.CallOption) (*QueryTrainingAliveNodesResponse, error) {
	out := new(QueryTrainingAliveNodesResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/TrainingAliveNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EpochInfo(ctx context.Context, in *QueryEpochInfoRequest, opts ...grpc.CallOption) (*QueryEpochInfoResponse, error) {
	out := new(QueryEpochInfoResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/EpochInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetModelPerTokenPrice(ctx context.Context, in *QueryGetModelPerTokenPriceRequest, opts ...grpc.CallOption) (*QueryGetModelPerTokenPriceResponse, error) {
	out := new(QueryGetModelPerTokenPriceResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/GetModelPerTokenPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAllModelPerTokenPrices(ctx context.Context, in *QueryGetAllModelPerTokenPricesRequest, opts ...grpc.CallOption) (*QueryGetAllModelPerTokenPricesResponse, error) {
	out := new(QueryGetAllModelPerTokenPricesResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/GetAllModelPerTokenPrices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetModelCapacity(ctx context.Context, in *QueryGetModelCapacityRequest, opts ...grpc.CallOption) (*QueryGetModelCapacityResponse, error) {
	out := new(QueryGetModelCapacityResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/GetModelCapacity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAllModelCapacities(ctx context.Context, in *QueryGetAllModelCapacitiesRequest, opts ...grpc.CallOption) (*QueryGetAllModelCapacitiesResponse, error) {
	out := new(QueryGetAllModelCapacitiesResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/GetAllModelCapacities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of Inference items.
	Inference(context.Context, *QueryGetInferenceRequest) (*QueryGetInferenceResponse, error)
	InferenceAll(context.Context, *QueryAllInferenceRequest) (*QueryAllInferenceResponse, error)
	// Queries a list of Participant items.
	Participant(context.Context, *QueryGetParticipantRequest) (*QueryGetParticipantResponse, error)
	ParticipantAll(context.Context, *QueryAllParticipantRequest) (*QueryAllParticipantResponse, error)
	// Queries a list of InferenceParticipant items.
	InferenceParticipant(context.Context, *QueryInferenceParticipantRequest) (*QueryInferenceParticipantResponse, error)
	// Queries a list of GetRandomExecutor items.
	GetRandomExecutor(context.Context, *QueryGetRandomExecutorRequest) (*QueryGetRandomExecutorResponse, error)
	// Queries a list of EpochGroupData items.
	EpochGroupData(context.Context, *QueryGetEpochGroupDataRequest) (*QueryGetEpochGroupDataResponse, error)
	EpochGroupDataAll(context.Context, *QueryAllEpochGroupDataRequest) (*QueryAllEpochGroupDataResponse, error)
	// Queries a list of SettleAmount items.
	SettleAmount(context.Context, *QueryGetSettleAmountRequest) (*QueryGetSettleAmountResponse, error)
	SettleAmountAll(context.Context, *QueryAllSettleAmountRequest) (*QueryAllSettleAmountResponse, error)
	// Queries a list of EpochGroupValidations items.
	EpochGroupValidations(context.Context, *QueryGetEpochGroupValidationsRequest) (*QueryGetEpochGroupValidationsResponse, error)
	EpochGroupValidationsAll(context.Context, *QueryAllEpochGroupValidationsRequest) (*QueryAllEpochGroupValidationsResponse, error)
	// Queries a list of PocBatchesForStage items.
	PocBatchesForStage(context.Context, *QueryPocBatchesForStageRequest) (*QueryPocBatchesForStageResponse, error)
	// Queries a list of GetCurrentEpoch items.
	GetCurrentEpoch(context.Context, *QueryGetCurrentEpochRequest) (*QueryGetCurrentEpochResponse, error)
	// Queries a TokenomicsData by index.
	TokenomicsData(context.Context, *QueryGetTokenomicsDataRequest) (*QueryGetTokenomicsDataResponse, error)
	// Queries a list of GetUnitOfComputePriceProposal items.
	GetUnitOfComputePriceProposal(context.Context, *QueryGetUnitOfComputePriceProposalRequest) (*QueryGetUnitOfComputePriceProposalResponse, error)
	// Queries a list of CurrentEpochGroupData items.
	CurrentEpochGroupData(context.Context, *QueryCurrentEpochGroupDataRequest) (*QueryCurrentEpochGroupDataResponse, error)
	// Queries a list of ModelsAll items.
	ModelsAll(context.Context, *QueryModelsAllRequest) (*QueryModelsAllResponse, error)
	// Queries a list of TopMiner items.
	TopMiner(context.Context, *QueryGetTopMinerRequest) (*QueryGetTopMinerResponse, error)
	TopMinerAll(context.Context, *QueryAllTopMinerRequest) (*QueryAllTopMinerResponse, error)
	// Queries a list of InferenceTimeout items.
	InferenceTimeout(context.Context, *QueryGetInferenceTimeoutRequest) (*QueryGetInferenceTimeoutResponse, error)
	InferenceTimeoutAll(context.Context, *QueryAllInferenceTimeoutRequest) (*QueryAllInferenceTimeoutResponse, error)
	// BE CAREFUL, epoch_id in the request body meand epoch_group_id!!
	InferenceValidationDetails(context.Context, *QueryGetInferenceValidationDetailsRequest) (*QueryGetInferenceValidationDetailsResponse, error)
	// Queries a list of InferenceValidationDetails items.
	InferenceValidationDetailsAll(context.Context, *QueryAllInferenceValidationDetailsRequest) (*QueryAllInferenceValidationDetailsResponse, error)
	// Queries a list of GetInferenceValidationParameters items.
	GetInferenceValidationParameters(context.Context, *QueryGetInferenceValidationParametersRequest) (*QueryGetInferenceValidationParametersResponse, error)
	// Queries a list of EpochPerformanceSummary items.
	EpochPerformanceSummary(context.Context, *QueryGetEpochPerformanceSummaryRequest) (*QueryGetEpochPerformanceSummaryResponse, error)
	EpochPerformanceSummaryAll(context.Context, *QueryAllEpochPerformanceSummaryRequest) (*QueryAllEpochPerformanceSummaryResponse, error)
	// Queries a list of TrainingTask items.
	TrainingTask(context.Context, *QueryTrainingTaskRequest) (*QueryTrainingTaskResponse, error)
	// Queries a list of HardwareNodes items.
	HardwareNodes(context.Context, *QueryHardwareNodesRequest) (*QueryHardwareNodesResponse, error)
	// Queries a list of HardwareNodesAll items.
	HardwareNodesAll(context.Context, *QueryHardwareNodesAllRequest) (*QueryHardwareNodesAllResponse, error)
	// Queries a list of QueuedTrainingTasks items.
	QueuedTrainingTasks(context.Context, *QueryQueuedTrainingTasksRequest) (*QueryQueuedTrainingTasksResponse, error)
	// Queries a list of TrainingTaskAll items.
	TrainingTaskAll(context.Context, *QueryTrainingTaskAllRequest) (*QueryTrainingTaskAllResponse, error)
	// Queries a list of GetParticipantCurrentStats items.
	GetParticipantCurrentStats(context.Context, *QueryGetParticipantCurrentStatsRequest) (*QueryGetParticipantCurrentStatsResponse, error)
	// Queries a list of GetAllParticipantCurrentStats items.
	GetAllParticipantCurrentStats(context.Context, *QueryGetAllParticipantCurrentStatsRequest) (*QueryGetAllParticipantCurrentStatsResponse, error)
	GetParticipantsFullStats(context.Context, *QueryParticipantsFullStatsRequest) (*QueryParticipantsFullStatsResponse, error)
	StatsByTimePeriodByDeveloper(context.Context, *QueryStatsByTimePeriodByDeveloperRequest) (*QueryStatsByTimePeriodByDeveloperResponse, error)
	StatsByDeveloperAndEpochsBackwards(context.Context, *QueryStatsByDeveloperAndEpochBackwardsRequest) (*QueryInferencesAndTokensStatsResponse, error)
	CountParticipants(context.Context, *QueryCountAllParticipantsRequest) (*QueryCountAllParticipantsResponse, error)
	DebugStatsDeveloperStats(context.Context, *QueryDebugStatsRequest) (*QueryDebugStatsResponse, error)
	InferencesAndTokensStatsByEpochsBackwards(context.Context, *QueryInferencesAndTokensStatsByEpochsBackwardsRequest) (*QueryInferencesAndTokensStatsResponse, error)
	InferencesAndTokensStatsByTimePeriod(context.Context, *QueryInferencesAndTokensStatsByTimePeriodRequest) (*QueryInferencesAndTokensStatsResponse, error)
	InferencesAndTokensStatsByModels(context.Context, *QueryInferencesAndTokensStatsByModelsRequest) (*QueryInferencesAndTokensStatsByModelsResponse, error)
	// Queries a list of GetMinimumValidationAverage items.
	GetMinimumValidationAverage(context.Context, *QueryGetMinimumValidationAverageRequest) (*QueryGetMinimumValidationAverageResponse, error)
	// Queries a list of InProgressTrainingTasks items.
	InProgressTrainingTasks(context.Context, *QueryInProgressTrainingTasksRequest) (*QueryInProgressTrainingTasksResponse, error)
	// Queries a list of PartialUpgrade items.
	PartialUpgrade(context.Context, *QueryGetPartialUpgradeRequest) (*QueryGetPartialUpgradeResponse, error)
	PartialUpgradeAll(context.Context, *QueryAllPartialUpgradeRequest) (*QueryAllPartialUpgradeResponse, error)
	// Queries a bridge transaction by its composite key
	BridgeTransaction(context.Context, *QueryGetBridgeTransactionRequest) (*QueryGetBridgeTransactionResponse, error)
	// Queries all bridge transactions
	BridgeTransactions(context.Context, *QueryAllBridgeTransactionsRequest) (*QueryAllBridgeTransactionsResponse, error)
	// Queries a list of TrainingKvRecord items.
	TrainingKvRecord(context.Context, *QueryTrainingKvRecordRequest) (*QueryTrainingKvRecordResponse, error)
	// Queries a list of ListTrainingKvRecordKeys items.
	ListTrainingKvRecordKeys(context.Context, *QueryListTrainingKvRecordKeysRequest) (*QueryListTrainingKvRecordKeysResponse, error)
	// Queries a list of TrainingBarrier items.
	TrainingBarrier(context.Context, *QueryTrainingBarrierRequest) (*QueryTrainingBarrierResponse, error)
	// Queries a list of TrainingAliveNodes items.
	TrainingAliveNodes(context.Context, *QueryTrainingAliveNodesRequest) (*QueryTrainingAliveNodesResponse, error)
	// Queries a list of EpochInfo items.
	EpochInfo(context.Context, *QueryEpochInfoRequest) (*QueryEpochInfoResponse, error)
	// Dynamic pricing queries (Task 7.1)
	GetModelPerTokenPrice(context.Context, *QueryGetModelPerTokenPriceRequest) (*QueryGetModelPerTokenPriceResponse, error)
	GetAllModelPerTokenPrices(context.Context, *QueryGetAllModelPerTokenPricesRequest) (*QueryGetAllModelPerTokenPricesResponse, error)
	GetModelCapacity(context.Context, *QueryGetModelCapacityRequest) (*QueryGetModelCapacityResponse, error)
	GetAllModelCapacities(context.Context, *QueryGetAllModelCapacitiesRequest) (*QueryGetAllModelCapacitiesResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Inference(ctx context.Context, req *QueryGetInferenceRequest) (*QueryGetInferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inference not implemented")
}
func (*UnimplementedQueryServer) InferenceAll(ctx context.Context, req *QueryAllInferenceRequest) (*QueryAllInferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InferenceAll not implemented")
}
func (*UnimplementedQueryServer) Participant(ctx context.Context, req *QueryGetParticipantRequest) (*QueryGetParticipantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Participant not implemented")
}
func (*UnimplementedQueryServer) ParticipantAll(ctx context.Context, req *QueryAllParticipantRequest) (*QueryAllParticipantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParticipantAll not implemented")
}
func (*UnimplementedQueryServer) InferenceParticipant(ctx context.Context, req *QueryInferenceParticipantRequest) (*QueryInferenceParticipantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InferenceParticipant not implemented")
}
func (*UnimplementedQueryServer) GetRandomExecutor(ctx context.Context, req *QueryGetRandomExecutorRequest) (*QueryGetRandomExecutorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandomExecutor not implemented")
}
func (*UnimplementedQueryServer) EpochGroupData(ctx context.Context, req *QueryGetEpochGroupDataRequest) (*QueryGetEpochGroupDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EpochGroupData not implemented")
}
func (*UnimplementedQueryServer) EpochGroupDataAll(ctx context.Context, req *QueryAllEpochGroupDataRequest) (*QueryAllEpochGroupDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EpochGroupDataAll not implemented")
}
func (*UnimplementedQueryServer) SettleAmount(ctx context.Context, req *QueryGetSettleAmountRequest) (*QueryGetSettleAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SettleAmount not implemented")
}
func (*UnimplementedQueryServer) SettleAmountAll(ctx context.Context, req *QueryAllSettleAmountRequest) (*QueryAllSettleAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SettleAmountAll not implemented")
}
func (*UnimplementedQueryServer) EpochGroupValidations(ctx context.Context, req *QueryGetEpochGroupValidationsRequest) (*QueryGetEpochGroupValidationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EpochGroupValidations not implemented")
}
func (*UnimplementedQueryServer) EpochGroupValidationsAll(ctx context.Context, req *QueryAllEpochGroupValidationsRequest) (*QueryAllEpochGroupValidationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EpochGroupValidationsAll not implemented")
}
func (*UnimplementedQueryServer) PocBatchesForStage(ctx context.Context, req *QueryPocBatchesForStageRequest) (*QueryPocBatchesForStageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PocBatchesForStage not implemented")
}
func (*UnimplementedQueryServer) GetCurrentEpoch(ctx context.Context, req *QueryGetCurrentEpochRequest) (*QueryGetCurrentEpochResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentEpoch not implemented")
}
func (*UnimplementedQueryServer) TokenomicsData(ctx context.Context, req *QueryGetTokenomicsDataRequest) (*QueryGetTokenomicsDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenomicsData not implemented")
}
func (*UnimplementedQueryServer) GetUnitOfComputePriceProposal(ctx context.Context, req *QueryGetUnitOfComputePriceProposalRequest) (*QueryGetUnitOfComputePriceProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnitOfComputePriceProposal not implemented")
}
func (*UnimplementedQueryServer) CurrentEpochGroupData(ctx context.Context, req *QueryCurrentEpochGroupDataRequest) (*QueryCurrentEpochGroupDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentEpochGroupData not implemented")
}
func (*UnimplementedQueryServer) ModelsAll(ctx context.Context, req *QueryModelsAllRequest) (*QueryModelsAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModelsAll not implemented")
}
func (*UnimplementedQueryServer) TopMiner(ctx context.Context, req *QueryGetTopMinerRequest) (*QueryGetTopMinerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopMiner not implemented")
}
func (*UnimplementedQueryServer) TopMinerAll(ctx context.Context, req *QueryAllTopMinerRequest) (*QueryAllTopMinerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopMinerAll not implemented")
}
func (*UnimplementedQueryServer) InferenceTimeout(ctx context.Context, req *QueryGetInferenceTimeoutRequest) (*QueryGetInferenceTimeoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InferenceTimeout not implemented")
}
func (*UnimplementedQueryServer) InferenceTimeoutAll(ctx context.Context, req *QueryAllInferenceTimeoutRequest) (*QueryAllInferenceTimeoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InferenceTimeoutAll not implemented")
}
func (*UnimplementedQueryServer) InferenceValidationDetails(ctx context.Context, req *QueryGetInferenceValidationDetailsRequest) (*QueryGetInferenceValidationDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InferenceValidationDetails not implemented")
}
func (*UnimplementedQueryServer) InferenceValidationDetailsAll(ctx context.Context, req *QueryAllInferenceValidationDetailsRequest) (*QueryAllInferenceValidationDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InferenceValidationDetailsAll not implemented")
}
func (*UnimplementedQueryServer) GetInferenceValidationParameters(ctx context.Context, req *QueryGetInferenceValidationParametersRequest) (*QueryGetInferenceValidationParametersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInferenceValidationParameters not implemented")
}
func (*UnimplementedQueryServer) EpochPerformanceSummary(ctx context.Context, req *QueryGetEpochPerformanceSummaryRequest) (*QueryGetEpochPerformanceSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EpochPerformanceSummary not implemented")
}
func (*UnimplementedQueryServer) EpochPerformanceSummaryAll(ctx context.Context, req *QueryAllEpochPerformanceSummaryRequest) (*QueryAllEpochPerformanceSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EpochPerformanceSummaryAll not implemented")
}
func (*UnimplementedQueryServer) TrainingTask(ctx context.Context, req *QueryTrainingTaskRequest) (*QueryTrainingTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrainingTask not implemented")
}
func (*UnimplementedQueryServer) HardwareNodes(ctx context.Context, req *QueryHardwareNodesRequest) (*QueryHardwareNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HardwareNodes not implemented")
}
func (*UnimplementedQueryServer) HardwareNodesAll(ctx context.Context, req *QueryHardwareNodesAllRequest) (*QueryHardwareNodesAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HardwareNodesAll not implemented")
}
func (*UnimplementedQueryServer) QueuedTrainingTasks(ctx context.Context, req *QueryQueuedTrainingTasksRequest) (*QueryQueuedTrainingTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueuedTrainingTasks not implemented")
}
func (*UnimplementedQueryServer) TrainingTaskAll(ctx context.Context, req *QueryTrainingTaskAllRequest) (*QueryTrainingTaskAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrainingTaskAll not implemented")
}
func (*UnimplementedQueryServer) GetParticipantCurrentStats(ctx context.Context, req *QueryGetParticipantCurrentStatsRequest) (*QueryGetParticipantCurrentStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParticipantCurrentStats not implemented")
}
func (*UnimplementedQueryServer) GetAllParticipantCurrentStats(ctx context.Context, req *QueryGetAllParticipantCurrentStatsRequest) (*QueryGetAllParticipantCurrentStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllParticipantCurrentStats not implemented")
}
func (*UnimplementedQueryServer) GetParticipantsFullStats(ctx context.Context, req *QueryParticipantsFullStatsRequest) (*QueryParticipantsFullStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParticipantsFullStats not implemented")
}
func (*UnimplementedQueryServer) StatsByTimePeriodByDeveloper(ctx context.Context, req *QueryStatsByTimePeriodByDeveloperRequest) (*QueryStatsByTimePeriodByDeveloperResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatsByTimePeriodByDeveloper not implemented")
}
func (*UnimplementedQueryServer) StatsByDeveloperAndEpochsBackwards(ctx context.Context, req *QueryStatsByDeveloperAndEpochBackwardsRequest) (*QueryInferencesAndTokensStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatsByDeveloperAndEpochsBackwards not implemented")
}
func (*UnimplementedQueryServer) CountParticipants(ctx context.Context, req *QueryCountAllParticipantsRequest) (*QueryCountAllParticipantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountParticipants not implemented")
}
func (*UnimplementedQueryServer) DebugStatsDeveloperStats(ctx context.Context, req *QueryDebugStatsRequest) (*QueryDebugStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DebugStatsDeveloperStats not implemented")
}
func (*UnimplementedQueryServer) InferencesAndTokensStatsByEpochsBackwards(ctx context.Context, req *QueryInferencesAndTokensStatsByEpochsBackwardsRequest) (*QueryInferencesAndTokensStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InferencesAndTokensStatsByEpochsBackwards not implemented")
}
func (*UnimplementedQueryServer) InferencesAndTokensStatsByTimePeriod(ctx context.Context, req *QueryInferencesAndTokensStatsByTimePeriodRequest) (*QueryInferencesAndTokensStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InferencesAndTokensStatsByTimePeriod not implemented")
}
func (*UnimplementedQueryServer) InferencesAndTokensStatsByModels(ctx context.Context, req *QueryInferencesAndTokensStatsByModelsRequest) (*QueryInferencesAndTokensStatsByModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InferencesAndTokensStatsByModels not implemented")
}
func (*UnimplementedQueryServer) GetMinimumValidationAverage(ctx context.Context, req *QueryGetMinimumValidationAverageRequest) (*QueryGetMinimumValidationAverageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMinimumValidationAverage not implemented")
}
func (*UnimplementedQueryServer) InProgressTrainingTasks(ctx context.Context, req *QueryInProgressTrainingTasksRequest) (*QueryInProgressTrainingTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InProgressTrainingTasks not implemented")
}
func (*UnimplementedQueryServer) PartialUpgrade(ctx context.Context, req *QueryGetPartialUpgradeRequest) (*QueryGetPartialUpgradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpgrade not implemented")
}
func (*UnimplementedQueryServer) PartialUpgradeAll(ctx context.Context, req *QueryAllPartialUpgradeRequest) (*QueryAllPartialUpgradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpgradeAll not implemented")
}
func (*UnimplementedQueryServer) BridgeTransaction(ctx context.Context, req *QueryGetBridgeTransactionRequest) (*QueryGetBridgeTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BridgeTransaction not implemented")
}
func (*UnimplementedQueryServer) BridgeTransactions(ctx context.Context, req *QueryAllBridgeTransactionsRequest) (*QueryAllBridgeTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BridgeTransactions not implemented")
}
func (*UnimplementedQueryServer) TrainingKvRecord(ctx context.Context, req *QueryTrainingKvRecordRequest) (*QueryTrainingKvRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrainingKvRecord not implemented")
}
func (*UnimplementedQueryServer) ListTrainingKvRecordKeys(ctx context.Context, req *QueryListTrainingKvRecordKeysRequest) (*QueryListTrainingKvRecordKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTrainingKvRecordKeys not implemented")
}
func (*UnimplementedQueryServer) TrainingBarrier(ctx context.Context, req *QueryTrainingBarrierRequest) (*QueryTrainingBarrierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrainingBarrier not implemented")
}
func (*UnimplementedQueryServer) TrainingAliveNodes(ctx context.Context, req *QueryTrainingAliveNodesRequest) (*QueryTrainingAliveNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrainingAliveNodes not implemented")
}
func (*UnimplementedQueryServer) EpochInfo(ctx context.Context, req *QueryEpochInfoRequest) (*QueryEpochInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EpochInfo not implemented")
}
func (*UnimplementedQueryServer) GetModelPerTokenPrice(ctx context.Context, req *QueryGetModelPerTokenPriceRequest) (*QueryGetModelPerTokenPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelPerTokenPrice not implemented")
}
func (*UnimplementedQueryServer) GetAllModelPerTokenPrices(ctx context.Context, req *QueryGetAllModelPerTokenPricesRequest) (*QueryGetAllModelPerTokenPricesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllModelPerTokenPrices not implemented")
}
func (*UnimplementedQueryServer) GetModelCapacity(ctx context.Context, req *QueryGetModelCapacityRequest) (*QueryGetModelCapacityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelCapacity not implemented")
}
func (*UnimplementedQueryServer) GetAllModelCapacities(ctx context.Context, req *QueryGetAllModelCapacitiesRequest) (*QueryGetAllModelCapacitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllModelCapacities not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Inference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetInferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Inference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/Inference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Inference(ctx, req.(*QueryGetInferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InferenceAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllInferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InferenceAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/InferenceAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InferenceAll(ctx, req.(*QueryAllInferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Participant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetParticipantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Participant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/Participant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Participant(ctx, req.(*QueryGetParticipantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ParticipantAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllParticipantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ParticipantAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/ParticipantAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ParticipantAll(ctx, req.(*QueryAllParticipantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InferenceParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInferenceParticipantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InferenceParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/InferenceParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InferenceParticipant(ctx, req.(*QueryInferenceParticipantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetRandomExecutor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRandomExecutorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetRandomExecutor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/GetRandomExecutor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetRandomExecutor(ctx, req.(*QueryGetRandomExecutorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EpochGroupData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEpochGroupDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EpochGroupData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/EpochGroupData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EpochGroupData(ctx, req.(*QueryGetEpochGroupDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EpochGroupDataAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllEpochGroupDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EpochGroupDataAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/EpochGroupDataAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EpochGroupDataAll(ctx, req.(*QueryAllEpochGroupDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SettleAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSettleAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SettleAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/SettleAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SettleAmount(ctx, req.(*QueryGetSettleAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SettleAmountAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSettleAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SettleAmountAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/SettleAmountAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SettleAmountAll(ctx, req.(*QueryAllSettleAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EpochGroupValidations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEpochGroupValidationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EpochGroupValidations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/EpochGroupValidations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EpochGroupValidations(ctx, req.(*QueryGetEpochGroupValidationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EpochGroupValidationsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllEpochGroupValidationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EpochGroupValidationsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/EpochGroupValidationsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EpochGroupValidationsAll(ctx, req.(*QueryAllEpochGroupValidationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PocBatchesForStage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPocBatchesForStageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PocBatchesForStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/PocBatchesForStage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PocBatchesForStage(ctx, req.(*QueryPocBatchesForStageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetCurrentEpoch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCurrentEpochRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCurrentEpoch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/GetCurrentEpoch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCurrentEpoch(ctx, req.(*QueryGetCurrentEpochRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenomicsData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTokenomicsDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenomicsData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/TokenomicsData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenomicsData(ctx, req.(*QueryGetTokenomicsDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetUnitOfComputePriceProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetUnitOfComputePriceProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetUnitOfComputePriceProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/GetUnitOfComputePriceProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetUnitOfComputePriceProposal(ctx, req.(*QueryGetUnitOfComputePriceProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CurrentEpochGroupData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCurrentEpochGroupDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CurrentEpochGroupData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/CurrentEpochGroupData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CurrentEpochGroupData(ctx, req.(*QueryCurrentEpochGroupDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ModelsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryModelsAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ModelsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/ModelsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ModelsAll(ctx, req.(*QueryModelsAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TopMiner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTopMinerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TopMiner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/TopMiner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TopMiner(ctx, req.(*QueryGetTopMinerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TopMinerAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllTopMinerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TopMinerAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/TopMinerAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TopMinerAll(ctx, req.(*QueryAllTopMinerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InferenceTimeout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetInferenceTimeoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InferenceTimeout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/InferenceTimeout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InferenceTimeout(ctx, req.(*QueryGetInferenceTimeoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InferenceTimeoutAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllInferenceTimeoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InferenceTimeoutAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/InferenceTimeoutAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InferenceTimeoutAll(ctx, req.(*QueryAllInferenceTimeoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InferenceValidationDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetInferenceValidationDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InferenceValidationDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/InferenceValidationDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InferenceValidationDetails(ctx, req.(*QueryGetInferenceValidationDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InferenceValidationDetailsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllInferenceValidationDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InferenceValidationDetailsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/InferenceValidationDetailsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InferenceValidationDetailsAll(ctx, req.(*QueryAllInferenceValidationDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetInferenceValidationParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetInferenceValidationParametersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetInferenceValidationParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/GetInferenceValidationParameters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetInferenceValidationParameters(ctx, req.(*QueryGetInferenceValidationParametersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EpochPerformanceSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEpochPerformanceSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EpochPerformanceSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/EpochPerformanceSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EpochPerformanceSummary(ctx, req.(*QueryGetEpochPerformanceSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EpochPerformanceSummaryAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllEpochPerformanceSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EpochPerformanceSummaryAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/EpochPerformanceSummaryAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EpochPerformanceSummaryAll(ctx, req.(*QueryAllEpochPerformanceSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TrainingTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTrainingTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TrainingTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/TrainingTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TrainingTask(ctx, req.(*QueryTrainingTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HardwareNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHardwareNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HardwareNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/HardwareNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HardwareNodes(ctx, req.(*QueryHardwareNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HardwareNodesAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHardwareNodesAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HardwareNodesAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/HardwareNodesAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HardwareNodesAll(ctx, req.(*QueryHardwareNodesAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueuedTrainingTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryQueuedTrainingTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueuedTrainingTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/QueuedTrainingTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueuedTrainingTasks(ctx, req.(*QueryQueuedTrainingTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TrainingTaskAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTrainingTaskAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TrainingTaskAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/TrainingTaskAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TrainingTaskAll(ctx, req.(*QueryTrainingTaskAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetParticipantCurrentStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetParticipantCurrentStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetParticipantCurrentStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/GetParticipantCurrentStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetParticipantCurrentStats(ctx, req.(*QueryGetParticipantCurrentStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAllParticipantCurrentStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllParticipantCurrentStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAllParticipantCurrentStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/GetAllParticipantCurrentStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAllParticipantCurrentStats(ctx, req.(*QueryGetAllParticipantCurrentStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetParticipantsFullStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParticipantsFullStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetParticipantsFullStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/GetParticipantsFullStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetParticipantsFullStats(ctx, req.(*QueryParticipantsFullStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StatsByTimePeriodByDeveloper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStatsByTimePeriodByDeveloperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StatsByTimePeriodByDeveloper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/StatsByTimePeriodByDeveloper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StatsByTimePeriodByDeveloper(ctx, req.(*QueryStatsByTimePeriodByDeveloperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StatsByDeveloperAndEpochsBackwards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStatsByDeveloperAndEpochBackwardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StatsByDeveloperAndEpochsBackwards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/StatsByDeveloperAndEpochsBackwards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StatsByDeveloperAndEpochsBackwards(ctx, req.(*QueryStatsByDeveloperAndEpochBackwardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CountParticipants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCountAllParticipantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CountParticipants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/CountParticipants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CountParticipants(ctx, req.(*QueryCountAllParticipantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DebugStatsDeveloperStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDebugStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DebugStatsDeveloperStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/DebugStatsDeveloperStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DebugStatsDeveloperStats(ctx, req.(*QueryDebugStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InferencesAndTokensStatsByEpochsBackwards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInferencesAndTokensStatsByEpochsBackwardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InferencesAndTokensStatsByEpochsBackwards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/InferencesAndTokensStatsByEpochsBackwards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InferencesAndTokensStatsByEpochsBackwards(ctx, req.(*QueryInferencesAndTokensStatsByEpochsBackwardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InferencesAndTokensStatsByTimePeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInferencesAndTokensStatsByTimePeriodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InferencesAndTokensStatsByTimePeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/InferencesAndTokensStatsByTimePeriod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InferencesAndTokensStatsByTimePeriod(ctx, req.(*QueryInferencesAndTokensStatsByTimePeriodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InferencesAndTokensStatsByModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInferencesAndTokensStatsByModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InferencesAndTokensStatsByModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/InferencesAndTokensStatsByModels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InferencesAndTokensStatsByModels(ctx, req.(*QueryInferencesAndTokensStatsByModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetMinimumValidationAverage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetMinimumValidationAverageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetMinimumValidationAverage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/GetMinimumValidationAverage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetMinimumValidationAverage(ctx, req.(*QueryGetMinimumValidationAverageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InProgressTrainingTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInProgressTrainingTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InProgressTrainingTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/InProgressTrainingTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InProgressTrainingTasks(ctx, req.(*QueryInProgressTrainingTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PartialUpgrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPartialUpgradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PartialUpgrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/PartialUpgrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PartialUpgrade(ctx, req.(*QueryGetPartialUpgradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PartialUpgradeAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPartialUpgradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PartialUpgradeAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/PartialUpgradeAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PartialUpgradeAll(ctx, req.(*QueryAllPartialUpgradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BridgeTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBridgeTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BridgeTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/BridgeTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BridgeTransaction(ctx, req.(*QueryGetBridgeTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BridgeTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllBridgeTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BridgeTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/BridgeTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BridgeTransactions(ctx, req.(*QueryAllBridgeTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TrainingKvRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTrainingKvRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TrainingKvRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/TrainingKvRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TrainingKvRecord(ctx, req.(*QueryTrainingKvRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListTrainingKvRecordKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListTrainingKvRecordKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListTrainingKvRecordKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/ListTrainingKvRecordKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListTrainingKvRecordKeys(ctx, req.(*QueryListTrainingKvRecordKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TrainingBarrier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTrainingBarrierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TrainingBarrier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/TrainingBarrier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TrainingBarrier(ctx, req.(*QueryTrainingBarrierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TrainingAliveNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTrainingAliveNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TrainingAliveNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/TrainingAliveNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TrainingAliveNodes(ctx, req.(*QueryTrainingAliveNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EpochInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEpochInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EpochInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/EpochInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EpochInfo(ctx, req.(*QueryEpochInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetModelPerTokenPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetModelPerTokenPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetModelPerTokenPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/GetModelPerTokenPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetModelPerTokenPrice(ctx, req.(*QueryGetModelPerTokenPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAllModelPerTokenPrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllModelPerTokenPricesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAllModelPerTokenPrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/GetAllModelPerTokenPrices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAllModelPerTokenPrices(ctx, req.(*QueryGetAllModelPerTokenPricesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetModelCapacity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetModelCapacityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetModelCapacity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/GetModelCapacity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetModelCapacity(ctx, req.(*QueryGetModelCapacityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAllModelCapacities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllModelCapacitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAllModelCapacities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/GetAllModelCapacities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAllModelCapacities(ctx, req.(*QueryGetAllModelCapacitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "inference.inference.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Inference",
			Handler:    _Query_Inference_Handler,
		},
		{
			MethodName: "InferenceAll",
			Handler:    _Query_InferenceAll_Handler,
		},
		{
			MethodName: "Participant",
			Handler:    _Query_Participant_Handler,
		},
		{
			MethodName: "ParticipantAll",
			Handler:    _Query_ParticipantAll_Handler,
		},
		{
			MethodName: "InferenceParticipant",
			Handler:    _Query_InferenceParticipant_Handler,
		},
		{
			MethodName: "GetRandomExecutor",
			Handler:    _Query_GetRandomExecutor_Handler,
		},
		{
			MethodName: "EpochGroupData",
			Handler:    _Query_EpochGroupData_Handler,
		},
		{
			MethodName: "EpochGroupDataAll",
			Handler:    _Query_EpochGroupDataAll_Handler,
		},
		{
			MethodName: "SettleAmount",
			Handler:    _Query_SettleAmount_Handler,
		},
		{
			MethodName: "SettleAmountAll",
			Handler:    _Query_SettleAmountAll_Handler,
		},
		{
			MethodName: "EpochGroupValidations",
			Handler:    _Query_EpochGroupValidations_Handler,
		},
		{
			MethodName: "EpochGroupValidationsAll",
			Handler:    _Query_EpochGroupValidationsAll_Handler,
		},
		{
			MethodName: "PocBatchesForStage",
			Handler:    _Query_PocBatchesForStage_Handler,
		},
		{
			MethodName: "GetCurrentEpoch",
			Handler:    _Query_GetCurrentEpoch_Handler,
		},
		{
			MethodName: "TokenomicsData",
			Handler:    _Query_TokenomicsData_Handler,
		},
		{
			MethodName: "GetUnitOfComputePriceProposal",
			Handler:    _Query_GetUnitOfComputePriceProposal_Handler,
		},
		{
			MethodName: "CurrentEpochGroupData",
			Handler:    _Query_CurrentEpochGroupData_Handler,
		},
		{
			MethodName: "ModelsAll",
			Handler:    _Query_ModelsAll_Handler,
		},
		{
			MethodName: "TopMiner",
			Handler:    _Query_TopMiner_Handler,
		},
		{
			MethodName: "TopMinerAll",
			Handler:    _Query_TopMinerAll_Handler,
		},
		{
			MethodName: "InferenceTimeout",
			Handler:    _Query_InferenceTimeout_Handler,
		},
		{
			MethodName: "InferenceTimeoutAll",
			Handler:    _Query_InferenceTimeoutAll_Handler,
		},
		{
			MethodName: "InferenceValidationDetails",
			Handler:    _Query_InferenceValidationDetails_Handler,
		},
		{
			MethodName: "InferenceValidationDetailsAll",
			Handler:    _Query_InferenceValidationDetailsAll_Handler,
		},
		{
			MethodName: "GetInferenceValidationParameters",
			Handler:    _Query_GetInferenceValidationParameters_Handler,
		},
		{
			MethodName: "EpochPerformanceSummary",
			Handler:    _Query_EpochPerformanceSummary_Handler,
		},
		{
			MethodName: "EpochPerformanceSummaryAll",
			Handler:    _Query_EpochPerformanceSummaryAll_Handler,
		},
		{
			MethodName: "TrainingTask",
			Handler:    _Query_TrainingTask_Handler,
		},
		{
			MethodName: "HardwareNodes",
			Handler:    _Query_HardwareNodes_Handler,
		},
		{
			MethodName: "HardwareNodesAll",
			Handler:    _Query_HardwareNodesAll_Handler,
		},
		{
			MethodName: "QueuedTrainingTasks",
			Handler:    _Query_QueuedTrainingTasks_Handler,
		},
		{
			MethodName: "TrainingTaskAll",
			Handler:    _Query_TrainingTaskAll_Handler,
		},
		{
			MethodName: "GetParticipantCurrentStats",
			Handler:    _Query_GetParticipantCurrentStats_Handler,
		},
		{
			MethodName: "GetAllParticipantCurrentStats",
			Handler:    _Query_GetAllParticipantCurrentStats_Handler,
		},
		{
			MethodName: "GetParticipantsFullStats",
			Handler:    _Query_GetParticipantsFullStats_Handler,
		},
		{
			MethodName: "StatsByTimePeriodByDeveloper",
			Handler:    _Query_StatsByTimePeriodByDeveloper_Handler,
		},
		{
			MethodName: "StatsByDeveloperAndEpochsBackwards",
			Handler:    _Query_StatsByDeveloperAndEpochsBackwards_Handler,
		},
		{
			MethodName: "CountParticipants",
			Handler:    _Query_CountParticipants_Handler,
		},
		{
			MethodName: "DebugStatsDeveloperStats",
			Handler:    _Query_DebugStatsDeveloperStats_Handler,
		},
		{
			MethodName: "InferencesAndTokensStatsByEpochsBackwards",
			Handler:    _Query_InferencesAndTokensStatsByEpochsBackwards_Handler,
		},
		{
			MethodName: "InferencesAndTokensStatsByTimePeriod",
			Handler:    _Query_InferencesAndTokensStatsByTimePeriod_Handler,
		},
		{
			MethodName: "InferencesAndTokensStatsByModels",
			Handler:    _Query_InferencesAndTokensStatsByModels_Handler,
		},
		{
			MethodName: "GetMinimumValidationAverage",
			Handler:    _Query_GetMinimumValidationAverage_Handler,
		},
		{
			MethodName: "InProgressTrainingTasks",
			Handler:    _Query_InProgressTrainingTasks_Handler,
		},
		{
			MethodName: "PartialUpgrade",
			Handler:    _Query_PartialUpgrade_Handler,
		},
		{
			MethodName: "PartialUpgradeAll",
			Handler:    _Query_PartialUpgradeAll_Handler,
		},
		{
			MethodName: "BridgeTransaction",
			Handler:    _Query_BridgeTransaction_Handler,
		},
		{
			MethodName: "BridgeTransactions",
			Handler:    _Query_BridgeTransactions_Handler,
		},
		{
			MethodName: "TrainingKvRecord",
			Handler:    _Query_TrainingKvRecord_Handler,
		},
		{
			MethodName: "ListTrainingKvRecordKeys",
			Handler:    _Query_ListTrainingKvRecordKeys_Handler,
		},
		{
			MethodName: "TrainingBarrier",
			Handler:    _Query_TrainingBarrier_Handler,
		},
		{
			MethodName: "TrainingAliveNodes",
			Handler:    _Query_TrainingAliveNodes_Handler,
		},
		{
			MethodName: "EpochInfo",
			Handler:    _Query_EpochInfo_Handler,
		},
		{
			MethodName: "GetModelPerTokenPrice",
			Handler:    _Query_GetModelPerTokenPrice_Handler,
		},
		{
			MethodName: "GetAllModelPerTokenPrices",
			Handler:    _Query_GetAllModelPerTokenPrices_Handler,
		},
		{
			MethodName: "GetModelCapacity",
			Handler:    _Query_GetModelCapacity_Handler,
		},
		{
			MethodName: "GetAllModelCapacities",
			Handler:    _Query_GetAllModelCapacities_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inference/inference/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetInferenceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetInferenceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetInferenceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetInferenceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetInferenceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetInferenceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Inference.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllInferenceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllInferenceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllInferenceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllInferenceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllInferenceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllInferenceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Inference) > 0 {
		for iNdEx := len(m.Inference) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Inference[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetParticipantRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetParticipantRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetParticipantRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetParticipantResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetParticipantResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetParticipantResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Participant.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllParticipantRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllParticipantRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllParticipantRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllParticipantResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllParticipantResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllParticipantResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Participant) > 0 {
		for iNdEx := len(m.Participant) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Participant[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryInferenceParticipantRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInferenceParticipantRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInferenceParticipantRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryInferenceParticipantResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInferenceParticipantResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInferenceParticipantResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Balance != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Balance))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Pubkey) > 0 {
		i -= len(m.Pubkey)
		copy(dAtA[i:], m.Pubkey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Pubkey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRandomExecutorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRandomExecutorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRandomExecutorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Model) > 0 {
		i -= len(m.Model)
		copy(dAtA[i:], m.Model)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Model)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRandomExecutorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRandomExecutorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRandomExecutorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Executor.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetEpochGroupDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEpochGroupDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEpochGroupDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ModelId) > 0 {
		i -= len(m.ModelId)
		copy(dAtA[i:], m.ModelId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ModelId)))
		i--
		dAtA[i] = 0x12
	}
	if m.PocStartBlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PocStartBlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEpochGroupDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEpochGroupDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEpochGroupDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EpochGroupData.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllEpochGroupDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllEpochGroupDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllEpochGroupDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllEpochGroupDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllEpochGroupDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllEpochGroupDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.EpochGroupData) > 0 {
		for iNdEx := len(m.EpochGroupData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EpochGroupData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSettleAmountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSettleAmountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSettleAmountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Participant) > 0 {
		i -= len(m.Participant)
		copy(dAtA[i:], m.Participant)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Participant)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSettleAmountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSettleAmountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSettleAmountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SettleAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllSettleAmountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSettleAmountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSettleAmountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSettleAmountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSettleAmountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSettleAmountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SettleAmount) > 0 {
		for iNdEx := len(m.SettleAmount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SettleAmount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEpochGroupValidationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEpochGroupValidationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEpochGroupValidationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PocStartBlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PocStartBlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Participant) > 0 {
		i -= len(m.Participant)
		copy(dAtA[i:], m.Participant)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Participant)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEpochGroupValidationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEpochGroupValidationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEpochGroupValidationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EpochGroupValidations.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllEpochGroupValidationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllEpochGroupValidationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllEpochGroupValidationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllEpochGroupValidationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllEpochGroupValidationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllEpochGroupValidationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.EpochGroupValidations) > 0 {
		for iNdEx := len(m.EpochGroupValidations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EpochGroupValidations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPocBatchesForStageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPocBatchesForStageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPocBatchesForStageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPocBatchesForStageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPocBatchesForStageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPocBatchesForStageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PocBatch) > 0 {
		for iNdEx := len(m.PocBatch) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PocBatch[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PoCBatchesWithParticipants) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoCBatchesWithParticipants) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoCBatchesWithParticipants) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PocBatch) > 0 {
		for iNdEx := len(m.PocBatch) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PocBatch[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.HexPubKey) > 0 {
		i -= len(m.HexPubKey)
		copy(dAtA[i:], m.HexPubKey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.HexPubKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Participant) > 0 {
		i -= len(m.Participant)
		copy(dAtA[i:], m.Participant)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Participant)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCurrentEpochRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCurrentEpochRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCurrentEpochRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetCurrentEpochResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCurrentEpochResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCurrentEpochResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Epoch != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTokenomicsDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTokenomicsDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTokenomicsDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetTokenomicsDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTokenomicsDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTokenomicsDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TokenomicsData.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetUnitOfComputePriceProposalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetUnitOfComputePriceProposalRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetUnitOfComputePriceProposalRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Participant) > 0 {
		i -= len(m.Participant)
		copy(dAtA[i:], m.Participant)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Participant)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetUnitOfComputePriceProposalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetUnitOfComputePriceProposalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetUnitOfComputePriceProposalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Default != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Default))
		i--
		dAtA[i] = 0x10
	}
	if m.Proposal != nil {
		{
			size, err := m.Proposal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCurrentEpochGroupDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCurrentEpochGroupDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCurrentEpochGroupDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryCurrentEpochGroupDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCurrentEpochGroupDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCurrentEpochGroupDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EpochGroupData.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryPreviousEpochGroupDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPreviousEpochGroupDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPreviousEpochGroupDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryPreviousEpochGroupDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPreviousEpochGroupDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPreviousEpochGroupDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EpochGroupData.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryModelsAllRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryModelsAllRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryModelsAllRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryModelsAllResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryModelsAllResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryModelsAllResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Model) > 0 {
		for iNdEx := len(m.Model) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Model[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTopMinerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTopMinerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTopMinerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTopMinerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTopMinerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTopMinerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TopMiner.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllTopMinerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTopMinerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTopMinerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTopMinerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTopMinerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTopMinerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TopMiner) > 0 {
		for iNdEx := len(m.TopMiner) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TopMiner[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetInferenceTimeoutRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetInferenceTimeoutRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetInferenceTimeoutRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InferenceId) > 0 {
		i -= len(m.InferenceId)
		copy(dAtA[i:], m.InferenceId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.InferenceId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ExpirationHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ExpirationHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetInferenceTimeoutResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetInferenceTimeoutResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetInferenceTimeoutResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.InferenceTimeout.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllInferenceTimeoutRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllInferenceTimeoutRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllInferenceTimeoutRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllInferenceTimeoutResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllInferenceTimeoutResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllInferenceTimeoutResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.InferenceTimeout) > 0 {
		for iNdEx := len(m.InferenceTimeout) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InferenceTimeout[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetInferenceValidationDetailsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetInferenceValidationDetailsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetInferenceValidationDetailsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InferenceId) > 0 {
		i -= len(m.InferenceId)
		copy(dAtA[i:], m.InferenceId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.InferenceId)))
		i--
		dAtA[i] = 0x12
	}
	if m.EpochId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EpochId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetInferenceValidationDetailsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetInferenceValidationDetailsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetInferenceValidationDetailsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.InferenceValidationDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllInferenceValidationDetailsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllInferenceValidationDetailsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllInferenceValidationDetailsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllInferenceValidationDetailsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllInferenceValidationDetailsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllInferenceValidationDetailsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.InferenceValidationDetails) > 0 {
		for iNdEx := len(m.InferenceValidationDetails) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InferenceValidationDetails[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetInferenceValidationParametersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetInferenceValidationParametersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetInferenceValidationParametersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Requester) > 0 {
		i -= len(m.Requester)
		copy(dAtA[i:], m.Requester)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Requester)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Ids) > 0 {
		for iNdEx := len(m.Ids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Ids[iNdEx])
			copy(dAtA[i:], m.Ids[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Ids[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetInferenceValidationParametersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetInferenceValidationParametersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetInferenceValidationParametersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Parameters != nil {
		{
			size, err := m.Parameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Details) > 0 {
		for iNdEx := len(m.Details) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Details[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.CurrentHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CurrentHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.ValidatorPower != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ValidatorPower))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEpochPerformanceSummaryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEpochPerformanceSummaryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEpochPerformanceSummaryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ParticipantId) > 0 {
		i -= len(m.ParticipantId)
		copy(dAtA[i:], m.ParticipantId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ParticipantId)))
		i--
		dAtA[i] = 0x12
	}
	if m.EpochStartHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EpochStartHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEpochPerformanceSummaryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEpochPerformanceSummaryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEpochPerformanceSummaryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EpochPerformanceSummary.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllEpochPerformanceSummaryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllEpochPerformanceSummaryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllEpochPerformanceSummaryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllEpochPerformanceSummaryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllEpochPerformanceSummaryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllEpochPerformanceSummaryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.EpochPerformanceSummary) > 0 {
		for iNdEx := len(m.EpochPerformanceSummary) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EpochPerformanceSummary[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTrainingTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTrainingTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTrainingTaskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTrainingTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTrainingTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTrainingTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Task != nil {
		{
			size, err := m.Task.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryHardwareNodesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHardwareNodesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHardwareNodesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Participant) > 0 {
		i -= len(m.Participant)
		copy(dAtA[i:], m.Participant)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Participant)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryHardwareNodesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHardwareNodesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHardwareNodesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nodes != nil {
		{
			size, err := m.Nodes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryHardwareNodesAllRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHardwareNodesAllRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHardwareNodesAllRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryHardwareNodesAllResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHardwareNodesAllResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHardwareNodesAllResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryQueuedTrainingTasksRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQueuedTrainingTasksRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQueuedTrainingTasksRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryQueuedTrainingTasksResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQueuedTrainingTasksResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQueuedTrainingTasksResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tasks) > 0 {
		for iNdEx := len(m.Tasks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tasks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTrainingTaskAllRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTrainingTaskAllRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTrainingTaskAllRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTrainingTaskAllResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTrainingTaskAllResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTrainingTaskAllResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tasks) > 0 {
		for iNdEx := len(m.Tasks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tasks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetParticipantCurrentStatsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetParticipantCurrentStatsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetParticipantCurrentStatsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ParticipantId) > 0 {
		i -= len(m.ParticipantId)
		copy(dAtA[i:], m.ParticipantId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ParticipantId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetParticipantCurrentStatsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetParticipantCurrentStatsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetParticipantCurrentStatsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Reputation != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Reputation))
		i--
		dAtA[i] = 0x10
	}
	if m.Weight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Weight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllParticipantCurrentStatsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllParticipantCurrentStatsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllParticipantCurrentStatsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetAllParticipantCurrentStatsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllParticipantCurrentStatsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllParticipantCurrentStatsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EpochId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EpochId))
		i--
		dAtA[i] = 0x18
	}
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ParticipantCurrentStats) > 0 {
		for iNdEx := len(m.ParticipantCurrentStats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ParticipantCurrentStats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ParticipantCurrentStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParticipantCurrentStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParticipantCurrentStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Reputation != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Reputation))
		i--
		dAtA[i] = 0x18
	}
	if m.Weight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Weight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ParticipantId) > 0 {
		i -= len(m.ParticipantId)
		copy(dAtA[i:], m.ParticipantId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ParticipantId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ParticipantFullStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParticipantFullStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParticipantFullStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EpochsCompleted != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EpochsCompleted))
		i--
		dAtA[i] = 0x30
	}
	if m.RewardedCoinsLatestEpoch != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RewardedCoinsLatestEpoch))
		i--
		dAtA[i] = 0x28
	}
	if m.EarnedCoinsCurrentEpoch != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EarnedCoinsCurrentEpoch))
		i--
		dAtA[i] = 0x20
	}
	if m.Reputation != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Reputation))
		i--
		dAtA[i] = 0x18
	}
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AccountAddress) > 0 {
		i -= len(m.AccountAddress)
		copy(dAtA[i:], m.AccountAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AccountAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryParticipantsFullStatsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParticipantsFullStatsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParticipantsFullStatsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParticipantsFullStatsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParticipantsFullStatsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParticipantsFullStatsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ParticipantsStats) > 0 {
		for iNdEx := len(m.ParticipantsStats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ParticipantsStats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryStatsByTimePeriodByDeveloperRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStatsByTimePeriodByDeveloperRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStatsByTimePeriodByDeveloperRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeTo != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TimeTo))
		i--
		dAtA[i] = 0x18
	}
	if m.TimeFrom != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TimeFrom))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Developer) > 0 {
		i -= len(m.Developer)
		copy(dAtA[i:], m.Developer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Developer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStatsByTimePeriodByDeveloperResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStatsByTimePeriodByDeveloperResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStatsByTimePeriodByDeveloperResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Stats) > 0 {
		for iNdEx := len(m.Stats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryStatsByDeveloperAndEpochBackwardsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStatsByDeveloperAndEpochBackwardsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStatsByDeveloperAndEpochBackwardsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EpochsN != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EpochsN))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Developer) > 0 {
		i -= len(m.Developer)
		copy(dAtA[i:], m.Developer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Developer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryInferencesAndTokensStatsByEpochsBackwardsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInferencesAndTokensStatsByEpochsBackwardsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInferencesAndTokensStatsByEpochsBackwardsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EpochsN != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EpochsN))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryInferencesAndTokensStatsByTimePeriodRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInferencesAndTokensStatsByTimePeriodRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInferencesAndTokensStatsByTimePeriodRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeTo != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TimeTo))
		i--
		dAtA[i] = 0x18
	}
	if m.TimeFrom != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TimeFrom))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *QueryInferencesAndTokensStatsByModelsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInferencesAndTokensStatsByModelsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInferencesAndTokensStatsByModelsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeTo != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TimeTo))
		i--
		dAtA[i] = 0x18
	}
	if m.TimeFrom != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TimeFrom))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *ModelStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModelStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Inferences != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Inferences))
		i--
		dAtA[i] = 0x18
	}
	if m.AiTokens != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AiTokens))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Model) > 0 {
		i -= len(m.Model)
		copy(dAtA[i:], m.Model)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Model)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryInferencesAndTokensStatsByModelsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInferencesAndTokensStatsByModelsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInferencesAndTokensStatsByModelsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StatsModels) > 0 {
		for iNdEx := len(m.StatsModels) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StatsModels[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryInferencesAndTokensStatsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInferencesAndTokensStatsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInferencesAndTokensStatsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActualInferencesCost != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ActualInferencesCost))
		i--
		dAtA[i] = 0x18
	}
	if m.Inferences != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Inferences))
		i--
		dAtA[i] = 0x10
	}
	if m.AiTokens != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AiTokens))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryCountAllParticipantsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCountAllParticipantsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCountAllParticipantsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryCountAllParticipantsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCountAllParticipantsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCountAllParticipantsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDebugStatsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDebugStatsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDebugStatsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryDebugStatsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDebugStatsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDebugStatsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StatsByEpoch) > 0 {
		for iNdEx := len(m.StatsByEpoch) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StatsByEpoch[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.StatsByTime) > 0 {
		for iNdEx := len(m.StatsByTime) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StatsByTime[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDebugStatsResponse_TemporaryTimeStat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDebugStatsResponse_TemporaryTimeStat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDebugStatsResponse_TemporaryTimeStat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Stats) > 0 {
		for iNdEx := len(m.Stats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Developer) > 0 {
		i -= len(m.Developer)
		copy(dAtA[i:], m.Developer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Developer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDebugStatsResponse_TemporaryEpochStat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDebugStatsResponse_TemporaryEpochStat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDebugStatsResponse_TemporaryEpochStat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Stats) > 0 {
		for iNdEx := len(m.Stats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Developer) > 0 {
		i -= len(m.Developer)
		copy(dAtA[i:], m.Developer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Developer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetMinimumValidationAverageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMinimumValidationAverageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMinimumValidationAverageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetMinimumValidationAverageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMinimumValidationAverageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMinimumValidationAverageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.MinimumValidationAverage) > 0 {
		i -= len(m.MinimumValidationAverage)
		copy(dAtA[i:], m.MinimumValidationAverage)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MinimumValidationAverage)))
		i--
		dAtA[i] = 0x12
	}
	if m.TrafficBasis != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TrafficBasis))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryInProgressTrainingTasksRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInProgressTrainingTasksRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInProgressTrainingTasksRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryInProgressTrainingTasksResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInProgressTrainingTasksResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInProgressTrainingTasksResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tasks) > 0 {
		for iNdEx := len(m.Tasks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tasks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPartialUpgradeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPartialUpgradeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPartialUpgradeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPartialUpgradeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPartialUpgradeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPartialUpgradeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PartialUpgrade.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPartialUpgradeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPartialUpgradeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPartialUpgradeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPartialUpgradeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPartialUpgradeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPartialUpgradeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PartialUpgrade) > 0 {
		for iNdEx := len(m.PartialUpgrade) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PartialUpgrade[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTrainingKvRecordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTrainingKvRecordRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTrainingKvRecordRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x12
	}
	if m.TaskId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TaskId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTrainingKvRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTrainingKvRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTrainingKvRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Record != nil {
		{
			size, err := m.Record.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListTrainingKvRecordKeysRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListTrainingKvRecordKeysRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListTrainingKvRecordKeysRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TaskId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TaskId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryListTrainingKvRecordKeysResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListTrainingKvRecordKeysResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListTrainingKvRecordKeysResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for iNdEx := len(m.Keys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Keys[iNdEx])
			copy(dAtA[i:], m.Keys[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Keys[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTrainingBarrierRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTrainingBarrierRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTrainingBarrierRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Req != nil {
		{
			size, err := m.Req.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTrainingBarrierResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTrainingBarrierResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTrainingBarrierResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Resp != nil {
		{
			size, err := m.Resp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *QueryTrainingAliveNodesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTrainingAliveNodesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTrainingAliveNodesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Req != nil {
		{
			size, err := m.Req.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTrainingAliveNodesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTrainingAliveNodesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTrainingAliveNodesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Resp != nil {
		{
			size, err := m.Resp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBridgeTransactionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBridgeTransactionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBridgeTransactionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReceiptIndex) > 0 {
		i -= len(m.ReceiptIndex)
		copy(dAtA[i:], m.ReceiptIndex)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ReceiptIndex)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BlockNumber) > 0 {
		i -= len(m.BlockNumber)
		copy(dAtA[i:], m.BlockNumber)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BlockNumber)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OriginChain) > 0 {
		i -= len(m.OriginChain)
		copy(dAtA[i:], m.OriginChain)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OriginChain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBridgeTransactionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBridgeTransactionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBridgeTransactionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.BridgeTransaction.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllBridgeTransactionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBridgeTransactionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBridgeTransactionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllBridgeTransactionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBridgeTransactionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBridgeTransactionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BridgeTransactions) > 0 {
		for iNdEx := len(m.BridgeTransactions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BridgeTransactions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryEpochInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEpochInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEpochInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryEpochInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEpochInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEpochInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.LatestEpoch.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetModelPerTokenPriceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetModelPerTokenPriceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetModelPerTokenPriceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ModelId) > 0 {
		i -= len(m.ModelId)
		copy(dAtA[i:], m.ModelId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ModelId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetModelPerTokenPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetModelPerTokenPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetModelPerTokenPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Found {
		i--
		if m.Found {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Price != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Price))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllModelPerTokenPricesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllModelPerTokenPricesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllModelPerTokenPricesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ModelPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModelPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Price != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Price))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ModelId) > 0 {
		i -= len(m.ModelId)
		copy(dAtA[i:], m.ModelId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ModelId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllModelPerTokenPricesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllModelPerTokenPricesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllModelPerTokenPricesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ModelPrices) > 0 {
		for iNdEx := len(m.ModelPrices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ModelPrices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetModelCapacityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetModelCapacityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetModelCapacityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ModelId) > 0 {
		i -= len(m.ModelId)
		copy(dAtA[i:], m.ModelId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ModelId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetModelCapacityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetModelCapacityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetModelCapacityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Found {
		i--
		if m.Found {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Capacity != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Capacity))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllModelCapacitiesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllModelCapacitiesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllModelCapacitiesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetAllModelCapacitiesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllModelCapacitiesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllModelCapacitiesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ModelCapacities) > 0 {
		for iNdEx := len(m.ModelCapacities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ModelCapacities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ModelCapacity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelCapacity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModelCapacity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Capacity != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Capacity))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ModelId) > 0 {
		i -= len(m.ModelId)
		copy(dAtA[i:], m.ModelId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ModelId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetInferenceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetInferenceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Inference.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllInferenceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllInferenceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Inference) > 0 {
		for _, e := range m.Inference {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetParticipantRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetParticipantResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Participant.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllParticipantRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllParticipantResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Participant) > 0 {
		for _, e := range m.Participant {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	return n
}

func (m *QueryInferenceParticipantRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryInferenceParticipantResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Balance != 0 {
		n += 1 + sovQuery(uint64(m.Balance))
	}
	return n
}

func (m *QueryGetRandomExecutorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Model)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRandomExecutorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Executor.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetEpochGroupDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PocStartBlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.PocStartBlockHeight))
	}
	l = len(m.ModelId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEpochGroupDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EpochGroupData.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllEpochGroupDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllEpochGroupDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EpochGroupData) > 0 {
		for _, e := range m.EpochGroupData {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSettleAmountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Participant)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSettleAmountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SettleAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllSettleAmountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSettleAmountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SettleAmount) > 0 {
		for _, e := range m.SettleAmount {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEpochGroupValidationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Participant)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.PocStartBlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.PocStartBlockHeight))
	}
	return n
}

func (m *QueryGetEpochGroupValidationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EpochGroupValidations.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllEpochGroupValidationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllEpochGroupValidationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EpochGroupValidations) > 0 {
		for _, e := range m.EpochGroupValidations {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPocBatchesForStageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	return n
}

func (m *QueryPocBatchesForStageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PocBatch) > 0 {
		for _, e := range m.PocBatch {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *PoCBatchesWithParticipants) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Participant)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.HexPubKey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.PocBatch) > 0 {
		for _, e := range m.PocBatch {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetCurrentEpochRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetCurrentEpochResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovQuery(uint64(m.Epoch))
	}
	return n
}

func (m *QueryGetTokenomicsDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetTokenomicsDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TokenomicsData.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetUnitOfComputePriceProposalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Participant)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetUnitOfComputePriceProposalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Proposal != nil {
		l = m.Proposal.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Default != 0 {
		n += 1 + sovQuery(uint64(m.Default))
	}
	return n
}

func (m *QueryCurrentEpochGroupDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryCurrentEpochGroupDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EpochGroupData.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryPreviousEpochGroupDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryPreviousEpochGroupDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EpochGroupData.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryModelsAllRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryModelsAllResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Model) > 0 {
		for _, e := range m.Model {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetTopMinerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTopMinerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TopMiner.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllTopMinerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTopMinerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TopMiner) > 0 {
		for _, e := range m.TopMiner {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetInferenceTimeoutRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExpirationHeight != 0 {
		n += 1 + sovQuery(uint64(m.ExpirationHeight))
	}
	l = len(m.InferenceId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetInferenceTimeoutResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.InferenceTimeout.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllInferenceTimeoutRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllInferenceTimeoutResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.InferenceTimeout) > 0 {
		for _, e := range m.InferenceTimeout {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetInferenceValidationDetailsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochId != 0 {
		n += 1 + sovQuery(uint64(m.EpochId))
	}
	l = len(m.InferenceId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetInferenceValidationDetailsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.InferenceValidationDetails.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllInferenceValidationDetailsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllInferenceValidationDetailsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.InferenceValidationDetails) > 0 {
		for _, e := range m.InferenceValidationDetails {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetInferenceValidationParametersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = len(m.Requester)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetInferenceValidationParametersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValidatorPower != 0 {
		n += 1 + sovQuery(uint64(m.ValidatorPower))
	}
	if m.CurrentHeight != 0 {
		n += 1 + sovQuery(uint64(m.CurrentHeight))
	}
	if len(m.Details) > 0 {
		for _, e := range m.Details {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Parameters != nil {
		l = m.Parameters.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEpochPerformanceSummaryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochStartHeight != 0 {
		n += 1 + sovQuery(uint64(m.EpochStartHeight))
	}
	l = len(m.ParticipantId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEpochPerformanceSummaryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EpochPerformanceSummary.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllEpochPerformanceSummaryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllEpochPerformanceSummaryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EpochPerformanceSummary) > 0 {
		for _, e := range m.EpochPerformanceSummary {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTrainingTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryTrainingTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Task != nil {
		l = m.Task.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryHardwareNodesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Participant)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryHardwareNodesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nodes != nil {
		l = m.Nodes.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryHardwareNodesAllRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryHardwareNodesAllResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryQueuedTrainingTasksRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryQueuedTrainingTasksResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tasks) > 0 {
		for _, e := range m.Tasks {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryTrainingTaskAllRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTrainingTaskAllResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tasks) > 0 {
		for _, e := range m.Tasks {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetParticipantCurrentStatsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ParticipantId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetParticipantCurrentStatsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Weight != 0 {
		n += 1 + sovQuery(uint64(m.Weight))
	}
	if m.Reputation != 0 {
		n += 1 + sovQuery(uint64(m.Reputation))
	}
	return n
}

func (m *QueryGetAllParticipantCurrentStatsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetAllParticipantCurrentStatsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ParticipantCurrentStats) > 0 {
		for _, e := range m.ParticipantCurrentStats {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	if m.EpochId != 0 {
		n += 1 + sovQuery(uint64(m.EpochId))
	}
	return n
}

func (m *ParticipantCurrentStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ParticipantId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Weight != 0 {
		n += 1 + sovQuery(uint64(m.Weight))
	}
	if m.Reputation != 0 {
		n += 1 + sovQuery(uint64(m.Reputation))
	}
	return n
}

func (m *ParticipantFullStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccountAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Reputation != 0 {
		n += 1 + sovQuery(uint64(m.Reputation))
	}
	if m.EarnedCoinsCurrentEpoch != 0 {
		n += 1 + sovQuery(uint64(m.EarnedCoinsCurrentEpoch))
	}
	if m.RewardedCoinsLatestEpoch != 0 {
		n += 1 + sovQuery(uint64(m.RewardedCoinsLatestEpoch))
	}
	if m.EpochsCompleted != 0 {
		n += 1 + sovQuery(uint64(m.EpochsCompleted))
	}
	return n
}

func (m *QueryParticipantsFullStatsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParticipantsFullStatsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ParticipantsStats) > 0 {
		for _, e := range m.ParticipantsStats {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryStatsByTimePeriodByDeveloperRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Developer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TimeFrom != 0 {
		n += 1 + sovQuery(uint64(m.TimeFrom))
	}
	if m.TimeTo != 0 {
		n += 1 + sovQuery(uint64(m.TimeTo))
	}
	return n
}

func (m *QueryStatsByTimePeriodByDeveloperResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Stats) > 0 {
		for _, e := range m.Stats {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryStatsByDeveloperAndEpochBackwardsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Developer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.EpochsN != 0 {
		n += 1 + sovQuery(uint64(m.EpochsN))
	}
	return n
}

func (m *QueryInferencesAndTokensStatsByEpochsBackwardsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochsN != 0 {
		n += 1 + sovQuery(uint64(m.EpochsN))
	}
	return n
}

func (m *QueryInferencesAndTokensStatsByTimePeriodRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimeFrom != 0 {
		n += 1 + sovQuery(uint64(m.TimeFrom))
	}
	if m.TimeTo != 0 {
		n += 1 + sovQuery(uint64(m.TimeTo))
	}
	return n
}

func (m *QueryInferencesAndTokensStatsByModelsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimeFrom != 0 {
		n += 1 + sovQuery(uint64(m.TimeFrom))
	}
	if m.TimeTo != 0 {
		n += 1 + sovQuery(uint64(m.TimeTo))
	}
	return n
}

func (m *ModelStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Model)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.AiTokens != 0 {
		n += 1 + sovQuery(uint64(m.AiTokens))
	}
	if m.Inferences != 0 {
		n += 1 + sovQuery(uint64(m.Inferences))
	}
	return n
}

func (m *QueryInferencesAndTokensStatsByModelsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StatsModels) > 0 {
		for _, e := range m.StatsModels {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryInferencesAndTokensStatsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AiTokens != 0 {
		n += 1 + sovQuery(uint64(m.AiTokens))
	}
	if m.Inferences != 0 {
		n += 1 + sovQuery(uint64(m.Inferences))
	}
	if m.ActualInferencesCost != 0 {
		n += 1 + sovQuery(uint64(m.ActualInferencesCost))
	}
	return n
}

func (m *QueryCountAllParticipantsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryCountAllParticipantsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovQuery(uint64(m.Total))
	}
	return n
}

func (m *QueryDebugStatsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryDebugStatsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StatsByTime) > 0 {
		for _, e := range m.StatsByTime {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.StatsByEpoch) > 0 {
		for _, e := range m.StatsByEpoch {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryDebugStatsResponse_TemporaryTimeStat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Developer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Stats) > 0 {
		for _, e := range m.Stats {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryDebugStatsResponse_TemporaryEpochStat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Developer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Stats) > 0 {
		for _, e := range m.Stats {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetMinimumValidationAverageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetMinimumValidationAverageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TrafficBasis != 0 {
		n += 1 + sovQuery(uint64(m.TrafficBasis))
	}
	l = len(m.MinimumValidationAverage)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	return n
}

func (m *QueryInProgressTrainingTasksRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryInProgressTrainingTasksResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tasks) > 0 {
		for _, e := range m.Tasks {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetPartialUpgradeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	return n
}

func (m *QueryGetPartialUpgradeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PartialUpgrade.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllPartialUpgradeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPartialUpgradeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PartialUpgrade) > 0 {
		for _, e := range m.PartialUpgrade {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTrainingKvRecordRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskId != 0 {
		n += 1 + sovQuery(uint64(m.TaskId))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTrainingKvRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Record != nil {
		l = m.Record.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListTrainingKvRecordKeysRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskId != 0 {
		n += 1 + sovQuery(uint64(m.TaskId))
	}
	return n
}

func (m *QueryListTrainingKvRecordKeysResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for _, s := range m.Keys {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryTrainingBarrierRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Req != nil {
		l = m.Req.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTrainingBarrierResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Resp != nil {
		l = m.Resp.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTrainingAliveNodesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Req != nil {
		l = m.Req.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTrainingAliveNodesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Resp != nil {
		l = m.Resp.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBridgeTransactionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OriginChain)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.BlockNumber)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ReceiptIndex)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBridgeTransactionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BridgeTransaction.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllBridgeTransactionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllBridgeTransactionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BridgeTransactions) > 0 {
		for _, e := range m.BridgeTransactions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEpochInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryEpochInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.LatestEpoch.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetModelPerTokenPriceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ModelId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetModelPerTokenPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Price != 0 {
		n += 1 + sovQuery(uint64(m.Price))
	}
	if m.Found {
		n += 2
	}
	return n
}

func (m *QueryGetAllModelPerTokenPricesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ModelPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ModelId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Price != 0 {
		n += 1 + sovQuery(uint64(m.Price))
	}
	return n
}

func (m *QueryGetAllModelPerTokenPricesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ModelPrices) > 0 {
		for _, e := range m.ModelPrices {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetModelCapacityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ModelId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetModelCapacityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Capacity != 0 {
		n += 1 + sovQuery(uint64(m.Capacity))
	}
	if m.Found {
		n += 2
	}
	return n
}

func (m *QueryGetAllModelCapacitiesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetAllModelCapacitiesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ModelCapacities) > 0 {
		for _, e := range m.ModelCapacities {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *ModelCapacity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ModelId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Capacity != 0 {
		n += 1 + sovQuery(uint64(m.Capacity))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetInferenceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetInferenceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetInferenceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetInferenceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetInferenceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetInferenceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inference", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Inference.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllInferenceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllInferenceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllInferenceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllInferenceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllInferenceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllInferenceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inference", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inference = append(m.Inference, Inference{})
			if err := m.Inference[len(m.Inference)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetParticipantRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetParticipantRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetParticipantRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetParticipantResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetParticipantResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetParticipantResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participant", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Participant.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllParticipantRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllParticipantRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllParticipantRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllParticipantResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllParticipantResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllParticipantResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participant", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participant = append(m.Participant, Participant{})
			if err := m.Participant[len(m.Participant)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInferenceParticipantRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInferenceParticipantRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInferenceParticipantRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInferenceParticipantResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInferenceParticipantResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInferenceParticipantResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			m.Balance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Balance |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRandomExecutorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRandomExecutorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRandomExecutorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Model = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRandomExecutorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRandomExecutorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRandomExecutorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Executor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEpochGroupDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEpochGroupDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEpochGroupDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PocStartBlockHeight", wireType)
			}
			m.PocStartBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PocStartBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEpochGroupDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEpochGroupDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEpochGroupDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochGroupData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EpochGroupData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllEpochGroupDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllEpochGroupDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllEpochGroupDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllEpochGroupDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllEpochGroupDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllEpochGroupDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochGroupData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochGroupData = append(m.EpochGroupData, EpochGroupData{})
			if err := m.EpochGroupData[len(m.EpochGroupData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSettleAmountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSettleAmountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSettleAmountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSettleAmountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSettleAmountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSettleAmountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettleAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SettleAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSettleAmountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSettleAmountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSettleAmountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSettleAmountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSettleAmountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSettleAmountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettleAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SettleAmount = append(m.SettleAmount, SettleAmount{})
			if err := m.SettleAmount[len(m.SettleAmount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEpochGroupValidationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEpochGroupValidationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEpochGroupValidationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PocStartBlockHeight", wireType)
			}
			m.PocStartBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PocStartBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEpochGroupValidationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEpochGroupValidationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEpochGroupValidationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochGroupValidations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EpochGroupValidations.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllEpochGroupValidationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllEpochGroupValidationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllEpochGroupValidationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllEpochGroupValidationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllEpochGroupValidationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllEpochGroupValidationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochGroupValidations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochGroupValidations = append(m.EpochGroupValidations, EpochGroupValidations{})
			if err := m.EpochGroupValidations[len(m.EpochGroupValidations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPocBatchesForStageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPocBatchesForStageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPocBatchesForStageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPocBatchesForStageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPocBatchesForStageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPocBatchesForStageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PocBatch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PocBatch = append(m.PocBatch, PoCBatchesWithParticipants{})
			if err := m.PocBatch[len(m.PocBatch)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoCBatchesWithParticipants) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoCBatchesWithParticipants: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoCBatchesWithParticipants: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HexPubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HexPubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PocBatch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PocBatch = append(m.PocBatch, PoCBatch{})
			if err := m.PocBatch[len(m.PocBatch)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCurrentEpochRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCurrentEpochRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCurrentEpochRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCurrentEpochResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCurrentEpochResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCurrentEpochResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTokenomicsDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTokenomicsDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTokenomicsDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTokenomicsDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTokenomicsDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTokenomicsDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenomicsData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenomicsData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetUnitOfComputePriceProposalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetUnitOfComputePriceProposalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetUnitOfComputePriceProposalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetUnitOfComputePriceProposalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetUnitOfComputePriceProposalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetUnitOfComputePriceProposalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proposal == nil {
				m.Proposal = &UnitOfComputePriceProposal{}
			}
			if err := m.Proposal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Default", wireType)
			}
			m.Default = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Default |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCurrentEpochGroupDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCurrentEpochGroupDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCurrentEpochGroupDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCurrentEpochGroupDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCurrentEpochGroupDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCurrentEpochGroupDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochGroupData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EpochGroupData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPreviousEpochGroupDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPreviousEpochGroupDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPreviousEpochGroupDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPreviousEpochGroupDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPreviousEpochGroupDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPreviousEpochGroupDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochGroupData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EpochGroupData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryModelsAllRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryModelsAllRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryModelsAllRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryModelsAllResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryModelsAllResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryModelsAllResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Model = append(m.Model, Model{})
			if err := m.Model[len(m.Model)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTopMinerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTopMinerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTopMinerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTopMinerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTopMinerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTopMinerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopMiner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TopMiner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTopMinerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTopMinerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTopMinerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTopMinerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTopMinerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTopMinerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopMiner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopMiner = append(m.TopMiner, TopMiner{})
			if err := m.TopMiner[len(m.TopMiner)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetInferenceTimeoutRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetInferenceTimeoutRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetInferenceTimeoutRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationHeight", wireType)
			}
			m.ExpirationHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InferenceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InferenceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetInferenceTimeoutResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetInferenceTimeoutResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetInferenceTimeoutResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InferenceTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InferenceTimeout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllInferenceTimeoutRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllInferenceTimeoutRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllInferenceTimeoutRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllInferenceTimeoutResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllInferenceTimeoutResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllInferenceTimeoutResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InferenceTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InferenceTimeout = append(m.InferenceTimeout, InferenceTimeout{})
			if err := m.InferenceTimeout[len(m.InferenceTimeout)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetInferenceValidationDetailsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetInferenceValidationDetailsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetInferenceValidationDetailsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochId", wireType)
			}
			m.EpochId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InferenceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InferenceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetInferenceValidationDetailsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetInferenceValidationDetailsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetInferenceValidationDetailsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InferenceValidationDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InferenceValidationDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllInferenceValidationDetailsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllInferenceValidationDetailsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllInferenceValidationDetailsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllInferenceValidationDetailsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllInferenceValidationDetailsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllInferenceValidationDetailsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InferenceValidationDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InferenceValidationDetails = append(m.InferenceValidationDetails, InferenceValidationDetails{})
			if err := m.InferenceValidationDetails[len(m.InferenceValidationDetails)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetInferenceValidationParametersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetInferenceValidationParametersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetInferenceValidationParametersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ids = append(m.Ids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requester", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requester = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetInferenceValidationParametersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetInferenceValidationParametersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetInferenceValidationParametersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorPower", wireType)
			}
			m.ValidatorPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorPower |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentHeight", wireType)
			}
			m.CurrentHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = append(m.Details, &InferenceValidationDetails{})
			if err := m.Details[len(m.Details)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Parameters == nil {
				m.Parameters = &ValidationParams{}
			}
			if err := m.Parameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEpochPerformanceSummaryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEpochPerformanceSummaryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEpochPerformanceSummaryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochStartHeight", wireType)
			}
			m.EpochStartHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochStartHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParticipantId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEpochPerformanceSummaryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEpochPerformanceSummaryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEpochPerformanceSummaryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochPerformanceSummary", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EpochPerformanceSummary.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllEpochPerformanceSummaryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllEpochPerformanceSummaryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllEpochPerformanceSummaryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllEpochPerformanceSummaryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllEpochPerformanceSummaryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllEpochPerformanceSummaryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochPerformanceSummary", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochPerformanceSummary = append(m.EpochPerformanceSummary, EpochPerformanceSummary{})
			if err := m.EpochPerformanceSummary[len(m.EpochPerformanceSummary)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTrainingTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTrainingTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTrainingTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTrainingTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTrainingTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTrainingTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Task == nil {
				m.Task = &TrainingTask{}
			}
			if err := m.Task.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHardwareNodesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHardwareNodesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHardwareNodesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHardwareNodesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHardwareNodesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHardwareNodesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nodes == nil {
				m.Nodes = &HardwareNodes{}
			}
			if err := m.Nodes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHardwareNodesAllRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHardwareNodesAllRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHardwareNodesAllRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHardwareNodesAllResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHardwareNodesAllResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHardwareNodesAllResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &HardwareNodes{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQueuedTrainingTasksRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQueuedTrainingTasksRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQueuedTrainingTasksRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQueuedTrainingTasksResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQueuedTrainingTasksResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQueuedTrainingTasksResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tasks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tasks = append(m.Tasks, &TrainingTask{})
			if err := m.Tasks[len(m.Tasks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTrainingTaskAllRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTrainingTaskAllRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTrainingTaskAllRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTrainingTaskAllResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTrainingTaskAllResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTrainingTaskAllResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tasks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tasks = append(m.Tasks, &TrainingTask{})
			if err := m.Tasks[len(m.Tasks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetParticipantCurrentStatsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetParticipantCurrentStatsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetParticipantCurrentStatsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParticipantId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetParticipantCurrentStatsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetParticipantCurrentStatsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetParticipantCurrentStatsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reputation", wireType)
			}
			m.Reputation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reputation |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllParticipantCurrentStatsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllParticipantCurrentStatsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllParticipantCurrentStatsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllParticipantCurrentStatsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllParticipantCurrentStatsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllParticipantCurrentStatsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantCurrentStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParticipantCurrentStats = append(m.ParticipantCurrentStats, &ParticipantCurrentStats{})
			if err := m.ParticipantCurrentStats[len(m.ParticipantCurrentStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochId", wireType)
			}
			m.EpochId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParticipantCurrentStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParticipantCurrentStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParticipantCurrentStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParticipantId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reputation", wireType)
			}
			m.Reputation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reputation |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParticipantFullStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParticipantFullStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParticipantFullStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reputation", wireType)
			}
			m.Reputation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reputation |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EarnedCoinsCurrentEpoch", wireType)
			}
			m.EarnedCoinsCurrentEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EarnedCoinsCurrentEpoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardedCoinsLatestEpoch", wireType)
			}
			m.RewardedCoinsLatestEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardedCoinsLatestEpoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochsCompleted", wireType)
			}
			m.EpochsCompleted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochsCompleted |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParticipantsFullStatsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParticipantsFullStatsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParticipantsFullStatsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParticipantsFullStatsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParticipantsFullStatsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParticipantsFullStatsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantsStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParticipantsStats = append(m.ParticipantsStats, &ParticipantFullStats{})
			if err := m.ParticipantsStats[len(m.ParticipantsStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStatsByTimePeriodByDeveloperRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStatsByTimePeriodByDeveloperRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStatsByTimePeriodByDeveloperRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Developer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Developer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeFrom", wireType)
			}
			m.TimeFrom = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeFrom |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeTo", wireType)
			}
			m.TimeTo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeTo |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStatsByTimePeriodByDeveloperResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStatsByTimePeriodByDeveloperResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStatsByTimePeriodByDeveloperResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stats = append(m.Stats, &DeveloperStatsByTime{})
			if err := m.Stats[len(m.Stats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStatsByDeveloperAndEpochBackwardsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStatsByDeveloperAndEpochBackwardsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStatsByDeveloperAndEpochBackwardsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Developer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Developer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochsN", wireType)
			}
			m.EpochsN = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochsN |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInferencesAndTokensStatsByEpochsBackwardsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInferencesAndTokensStatsByEpochsBackwardsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInferencesAndTokensStatsByEpochsBackwardsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochsN", wireType)
			}
			m.EpochsN = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochsN |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInferencesAndTokensStatsByTimePeriodRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInferencesAndTokensStatsByTimePeriodRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInferencesAndTokensStatsByTimePeriodRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeFrom", wireType)
			}
			m.TimeFrom = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeFrom |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeTo", wireType)
			}
			m.TimeTo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeTo |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInferencesAndTokensStatsByModelsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInferencesAndTokensStatsByModelsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInferencesAndTokensStatsByModelsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeFrom", wireType)
			}
			m.TimeFrom = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeFrom |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeTo", wireType)
			}
			m.TimeTo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeTo |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Model = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AiTokens", wireType)
			}
			m.AiTokens = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AiTokens |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inferences", wireType)
			}
			m.Inferences = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Inferences |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInferencesAndTokensStatsByModelsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInferencesAndTokensStatsByModelsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInferencesAndTokensStatsByModelsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatsModels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatsModels = append(m.StatsModels, &ModelStats{})
			if err := m.StatsModels[len(m.StatsModels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInferencesAndTokensStatsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInferencesAndTokensStatsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInferencesAndTokensStatsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AiTokens", wireType)
			}
			m.AiTokens = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AiTokens |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inferences", wireType)
			}
			m.Inferences = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Inferences |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualInferencesCost", wireType)
			}
			m.ActualInferencesCost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActualInferencesCost |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCountAllParticipantsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCountAllParticipantsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCountAllParticipantsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCountAllParticipantsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCountAllParticipantsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCountAllParticipantsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDebugStatsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDebugStatsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDebugStatsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDebugStatsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDebugStatsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDebugStatsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatsByTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatsByTime = append(m.StatsByTime, &QueryDebugStatsResponse_TemporaryTimeStat{})
			if err := m.StatsByTime[len(m.StatsByTime)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatsByEpoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatsByEpoch = append(m.StatsByEpoch, &QueryDebugStatsResponse_TemporaryEpochStat{})
			if err := m.StatsByEpoch[len(m.StatsByEpoch)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDebugStatsResponse_TemporaryTimeStat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TemporaryTimeStat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TemporaryTimeStat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Developer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Developer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stats = append(m.Stats, &DeveloperStatsByTime{})
			if err := m.Stats[len(m.Stats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDebugStatsResponse_TemporaryEpochStat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TemporaryEpochStat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TemporaryEpochStat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Developer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Developer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stats = append(m.Stats, &DeveloperStatsByEpoch{})
			if err := m.Stats[len(m.Stats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMinimumValidationAverageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMinimumValidationAverageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMinimumValidationAverageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMinimumValidationAverageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMinimumValidationAverageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMinimumValidationAverageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrafficBasis", wireType)
			}
			m.TrafficBasis = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrafficBasis |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumValidationAverage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinimumValidationAverage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInProgressTrainingTasksRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInProgressTrainingTasksRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInProgressTrainingTasksRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInProgressTrainingTasksResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInProgressTrainingTasksResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInProgressTrainingTasksResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tasks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tasks = append(m.Tasks, &TrainingTask{})
			if err := m.Tasks[len(m.Tasks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPartialUpgradeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPartialUpgradeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPartialUpgradeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPartialUpgradeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPartialUpgradeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPartialUpgradeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartialUpgrade", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PartialUpgrade.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPartialUpgradeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPartialUpgradeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPartialUpgradeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPartialUpgradeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPartialUpgradeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPartialUpgradeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartialUpgrade", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartialUpgrade = append(m.PartialUpgrade, PartialUpgrade{})
			if err := m.PartialUpgrade[len(m.PartialUpgrade)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTrainingKvRecordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTrainingKvRecordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTrainingKvRecordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTrainingKvRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTrainingKvRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTrainingKvRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Record == nil {
				m.Record = &TrainingTaskKVRecord{}
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListTrainingKvRecordKeysRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListTrainingKvRecordKeysRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListTrainingKvRecordKeysRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListTrainingKvRecordKeysResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListTrainingKvRecordKeysResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListTrainingKvRecordKeysResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTrainingBarrierRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTrainingBarrierRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTrainingBarrierRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Req", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Req == nil {
				m.Req = &GetBarrierStatusRequest{}
			}
			if err := m.Req.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTrainingBarrierResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTrainingBarrierResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTrainingBarrierResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resp == nil {
				m.Resp = &GetBarrierStatusResponse{}
			}
			if err := m.Resp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTrainingAliveNodesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTrainingAliveNodesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTrainingAliveNodesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Req", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Req == nil {
				m.Req = &GetAliveNodesRequest{}
			}
			if err := m.Req.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTrainingAliveNodesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTrainingAliveNodesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTrainingAliveNodesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resp == nil {
				m.Resp = &GetAliveNodesResponse{}
			}
			if err := m.Resp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBridgeTransactionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBridgeTransactionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBridgeTransactionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiptIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiptIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBridgeTransactionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBridgeTransactionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBridgeTransactionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeTransaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BridgeTransaction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBridgeTransactionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBridgeTransactionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBridgeTransactionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBridgeTransactionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBridgeTransactionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBridgeTransactionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeTransactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeTransactions = append(m.BridgeTransactions, BridgeTransaction{})
			if err := m.BridgeTransactions[len(m.BridgeTransactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEpochInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEpochInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEpochInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEpochInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEpochInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEpochInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestEpoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LatestEpoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetModelPerTokenPriceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetModelPerTokenPriceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetModelPerTokenPriceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetModelPerTokenPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetModelPerTokenPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetModelPerTokenPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Found", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Found = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllModelPerTokenPricesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllModelPerTokenPricesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllModelPerTokenPricesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllModelPerTokenPricesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllModelPerTokenPricesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllModelPerTokenPricesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelPrices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelPrices = append(m.ModelPrices, ModelPrice{})
			if err := m.ModelPrices[len(m.ModelPrices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetModelCapacityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetModelCapacityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetModelCapacityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetModelCapacityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetModelCapacityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetModelCapacityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capacity", wireType)
			}
			m.Capacity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Capacity |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Found", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Found = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllModelCapacitiesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllModelCapacitiesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllModelCapacitiesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllModelCapacitiesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllModelCapacitiesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllModelCapacitiesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelCapacities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelCapacities = append(m.ModelCapacities, ModelCapacity{})
			if err := m.ModelCapacities[len(m.ModelCapacities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelCapacity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelCapacity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelCapacity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capacity", wireType)
			}
			m.Capacity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Capacity |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)

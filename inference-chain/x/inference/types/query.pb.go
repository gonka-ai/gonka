// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: inference/inference/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetInferenceRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetInferenceRequest) Reset()         { *m = QueryGetInferenceRequest{} }
func (m *QueryGetInferenceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetInferenceRequest) ProtoMessage()    {}
func (*QueryGetInferenceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{2}
}
func (m *QueryGetInferenceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetInferenceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetInferenceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetInferenceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetInferenceRequest.Merge(m, src)
}
func (m *QueryGetInferenceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetInferenceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetInferenceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetInferenceRequest proto.InternalMessageInfo

func (m *QueryGetInferenceRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetInferenceResponse struct {
	Inference Inference `protobuf:"bytes,1,opt,name=inference,proto3" json:"inference"`
}

func (m *QueryGetInferenceResponse) Reset()         { *m = QueryGetInferenceResponse{} }
func (m *QueryGetInferenceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetInferenceResponse) ProtoMessage()    {}
func (*QueryGetInferenceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{3}
}
func (m *QueryGetInferenceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetInferenceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetInferenceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetInferenceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetInferenceResponse.Merge(m, src)
}
func (m *QueryGetInferenceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetInferenceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetInferenceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetInferenceResponse proto.InternalMessageInfo

func (m *QueryGetInferenceResponse) GetInference() Inference {
	if m != nil {
		return m.Inference
	}
	return Inference{}
}

type QueryAllInferenceRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllInferenceRequest) Reset()         { *m = QueryAllInferenceRequest{} }
func (m *QueryAllInferenceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllInferenceRequest) ProtoMessage()    {}
func (*QueryAllInferenceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{4}
}
func (m *QueryAllInferenceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllInferenceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllInferenceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllInferenceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllInferenceRequest.Merge(m, src)
}
func (m *QueryAllInferenceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllInferenceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllInferenceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllInferenceRequest proto.InternalMessageInfo

func (m *QueryAllInferenceRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllInferenceResponse struct {
	Inference  []Inference         `protobuf:"bytes,1,rep,name=inference,proto3" json:"inference"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllInferenceResponse) Reset()         { *m = QueryAllInferenceResponse{} }
func (m *QueryAllInferenceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllInferenceResponse) ProtoMessage()    {}
func (*QueryAllInferenceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{5}
}
func (m *QueryAllInferenceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllInferenceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllInferenceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllInferenceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllInferenceResponse.Merge(m, src)
}
func (m *QueryAllInferenceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllInferenceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllInferenceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllInferenceResponse proto.InternalMessageInfo

func (m *QueryAllInferenceResponse) GetInference() []Inference {
	if m != nil {
		return m.Inference
	}
	return nil
}

func (m *QueryAllInferenceResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetParticipantRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetParticipantRequest) Reset()         { *m = QueryGetParticipantRequest{} }
func (m *QueryGetParticipantRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetParticipantRequest) ProtoMessage()    {}
func (*QueryGetParticipantRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{6}
}
func (m *QueryGetParticipantRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetParticipantRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetParticipantRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetParticipantRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetParticipantRequest.Merge(m, src)
}
func (m *QueryGetParticipantRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetParticipantRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetParticipantRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetParticipantRequest proto.InternalMessageInfo

func (m *QueryGetParticipantRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetParticipantResponse struct {
	Participant Participant `protobuf:"bytes,1,opt,name=participant,proto3" json:"participant"`
}

func (m *QueryGetParticipantResponse) Reset()         { *m = QueryGetParticipantResponse{} }
func (m *QueryGetParticipantResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetParticipantResponse) ProtoMessage()    {}
func (*QueryGetParticipantResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{7}
}
func (m *QueryGetParticipantResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetParticipantResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetParticipantResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetParticipantResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetParticipantResponse.Merge(m, src)
}
func (m *QueryGetParticipantResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetParticipantResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetParticipantResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetParticipantResponse proto.InternalMessageInfo

func (m *QueryGetParticipantResponse) GetParticipant() Participant {
	if m != nil {
		return m.Participant
	}
	return Participant{}
}

type QueryAllParticipantRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllParticipantRequest) Reset()         { *m = QueryAllParticipantRequest{} }
func (m *QueryAllParticipantRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllParticipantRequest) ProtoMessage()    {}
func (*QueryAllParticipantRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{8}
}
func (m *QueryAllParticipantRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllParticipantRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllParticipantRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllParticipantRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllParticipantRequest.Merge(m, src)
}
func (m *QueryAllParticipantRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllParticipantRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllParticipantRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllParticipantRequest proto.InternalMessageInfo

func (m *QueryAllParticipantRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllParticipantResponse struct {
	Participant []Participant       `protobuf:"bytes,1,rep,name=participant,proto3" json:"participant"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	BlockHeight int64               `protobuf:"varint,3,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *QueryAllParticipantResponse) Reset()         { *m = QueryAllParticipantResponse{} }
func (m *QueryAllParticipantResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllParticipantResponse) ProtoMessage()    {}
func (*QueryAllParticipantResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{9}
}
func (m *QueryAllParticipantResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllParticipantResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllParticipantResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllParticipantResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllParticipantResponse.Merge(m, src)
}
func (m *QueryAllParticipantResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllParticipantResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllParticipantResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllParticipantResponse proto.InternalMessageInfo

func (m *QueryAllParticipantResponse) GetParticipant() []Participant {
	if m != nil {
		return m.Participant
	}
	return nil
}

func (m *QueryAllParticipantResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryAllParticipantResponse) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type QueryGetInferencesWithExecutorsRequest struct {
	Ids       []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	Requester string   `protobuf:"bytes,2,opt,name=requester,proto3" json:"requester,omitempty"`
}

func (m *QueryGetInferencesWithExecutorsRequest) Reset() {
	*m = QueryGetInferencesWithExecutorsRequest{}
}
func (m *QueryGetInferencesWithExecutorsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetInferencesWithExecutorsRequest) ProtoMessage()    {}
func (*QueryGetInferencesWithExecutorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{10}
}
func (m *QueryGetInferencesWithExecutorsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetInferencesWithExecutorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetInferencesWithExecutorsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetInferencesWithExecutorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetInferencesWithExecutorsRequest.Merge(m, src)
}
func (m *QueryGetInferencesWithExecutorsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetInferencesWithExecutorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetInferencesWithExecutorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetInferencesWithExecutorsRequest proto.InternalMessageInfo

func (m *QueryGetInferencesWithExecutorsRequest) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *QueryGetInferencesWithExecutorsRequest) GetRequester() string {
	if m != nil {
		return m.Requester
	}
	return ""
}

type QueryGetInferencesWithExecutorsResponse struct {
	InferenceWithExecutor []InferenceWithExecutor `protobuf:"bytes,1,rep,name=inference_with_executor,json=inferenceWithExecutor,proto3" json:"inference_with_executor"`
	NumValidators         uint32                  `protobuf:"varint,2,opt,name=num_validators,json=numValidators,proto3" json:"num_validators,omitempty"`
	TotalPower            uint32                  `protobuf:"varint,3,opt,name=total_power,json=totalPower,proto3" json:"total_power,omitempty"`
	ValidatorPower        uint32                  `protobuf:"varint,4,opt,name=validator_power,json=validatorPower,proto3" json:"validator_power,omitempty"`
	CurrentHeight         uint32                  `protobuf:"varint,5,opt,name=current_height,json=currentHeight,proto3" json:"current_height,omitempty"`
}

func (m *QueryGetInferencesWithExecutorsResponse) Reset() {
	*m = QueryGetInferencesWithExecutorsResponse{}
}
func (m *QueryGetInferencesWithExecutorsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetInferencesWithExecutorsResponse) ProtoMessage()    {}
func (*QueryGetInferencesWithExecutorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{11}
}
func (m *QueryGetInferencesWithExecutorsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetInferencesWithExecutorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetInferencesWithExecutorsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetInferencesWithExecutorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetInferencesWithExecutorsResponse.Merge(m, src)
}
func (m *QueryGetInferencesWithExecutorsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetInferencesWithExecutorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetInferencesWithExecutorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetInferencesWithExecutorsResponse proto.InternalMessageInfo

func (m *QueryGetInferencesWithExecutorsResponse) GetInferenceWithExecutor() []InferenceWithExecutor {
	if m != nil {
		return m.InferenceWithExecutor
	}
	return nil
}

func (m *QueryGetInferencesWithExecutorsResponse) GetNumValidators() uint32 {
	if m != nil {
		return m.NumValidators
	}
	return 0
}

func (m *QueryGetInferencesWithExecutorsResponse) GetTotalPower() uint32 {
	if m != nil {
		return m.TotalPower
	}
	return 0
}

func (m *QueryGetInferencesWithExecutorsResponse) GetValidatorPower() uint32 {
	if m != nil {
		return m.ValidatorPower
	}
	return 0
}

func (m *QueryGetInferencesWithExecutorsResponse) GetCurrentHeight() uint32 {
	if m != nil {
		return m.CurrentHeight
	}
	return 0
}

type InferenceWithExecutor struct {
	Inference    Inference   `protobuf:"bytes,1,opt,name=inference,proto3" json:"inference"`
	Executor     Participant `protobuf:"bytes,2,opt,name=executor,proto3" json:"executor"`
	CurrentPower uint32      `protobuf:"varint,3,opt,name=current_power,json=currentPower,proto3" json:"current_power,omitempty"`
}

func (m *InferenceWithExecutor) Reset()         { *m = InferenceWithExecutor{} }
func (m *InferenceWithExecutor) String() string { return proto.CompactTextString(m) }
func (*InferenceWithExecutor) ProtoMessage()    {}
func (*InferenceWithExecutor) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{12}
}
func (m *InferenceWithExecutor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InferenceWithExecutor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InferenceWithExecutor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InferenceWithExecutor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InferenceWithExecutor.Merge(m, src)
}
func (m *InferenceWithExecutor) XXX_Size() int {
	return m.Size()
}
func (m *InferenceWithExecutor) XXX_DiscardUnknown() {
	xxx_messageInfo_InferenceWithExecutor.DiscardUnknown(m)
}

var xxx_messageInfo_InferenceWithExecutor proto.InternalMessageInfo

func (m *InferenceWithExecutor) GetInference() Inference {
	if m != nil {
		return m.Inference
	}
	return Inference{}
}

func (m *InferenceWithExecutor) GetExecutor() Participant {
	if m != nil {
		return m.Executor
	}
	return Participant{}
}

func (m *InferenceWithExecutor) GetCurrentPower() uint32 {
	if m != nil {
		return m.CurrentPower
	}
	return 0
}

type QueryInferenceParticipantRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryInferenceParticipantRequest) Reset()         { *m = QueryInferenceParticipantRequest{} }
func (m *QueryInferenceParticipantRequest) String() string { return proto.CompactTextString(m) }
func (*QueryInferenceParticipantRequest) ProtoMessage()    {}
func (*QueryInferenceParticipantRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{13}
}
func (m *QueryInferenceParticipantRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInferenceParticipantRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInferenceParticipantRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInferenceParticipantRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInferenceParticipantRequest.Merge(m, src)
}
func (m *QueryInferenceParticipantRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryInferenceParticipantRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInferenceParticipantRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInferenceParticipantRequest proto.InternalMessageInfo

func (m *QueryInferenceParticipantRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryInferenceParticipantResponse struct {
	Pubkey  string `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Balance int64  `protobuf:"varint,2,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (m *QueryInferenceParticipantResponse) Reset()         { *m = QueryInferenceParticipantResponse{} }
func (m *QueryInferenceParticipantResponse) String() string { return proto.CompactTextString(m) }
func (*QueryInferenceParticipantResponse) ProtoMessage()    {}
func (*QueryInferenceParticipantResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{14}
}
func (m *QueryInferenceParticipantResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInferenceParticipantResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInferenceParticipantResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInferenceParticipantResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInferenceParticipantResponse.Merge(m, src)
}
func (m *QueryInferenceParticipantResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryInferenceParticipantResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInferenceParticipantResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInferenceParticipantResponse proto.InternalMessageInfo

func (m *QueryInferenceParticipantResponse) GetPubkey() string {
	if m != nil {
		return m.Pubkey
	}
	return ""
}

func (m *QueryInferenceParticipantResponse) GetBalance() int64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

type QueryGetRandomExecutorRequest struct {
}

func (m *QueryGetRandomExecutorRequest) Reset()         { *m = QueryGetRandomExecutorRequest{} }
func (m *QueryGetRandomExecutorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRandomExecutorRequest) ProtoMessage()    {}
func (*QueryGetRandomExecutorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{15}
}
func (m *QueryGetRandomExecutorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRandomExecutorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRandomExecutorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRandomExecutorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRandomExecutorRequest.Merge(m, src)
}
func (m *QueryGetRandomExecutorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRandomExecutorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRandomExecutorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRandomExecutorRequest proto.InternalMessageInfo

type QueryGetRandomExecutorResponse struct {
	Executor Participant `protobuf:"bytes,1,opt,name=executor,proto3" json:"executor"`
}

func (m *QueryGetRandomExecutorResponse) Reset()         { *m = QueryGetRandomExecutorResponse{} }
func (m *QueryGetRandomExecutorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRandomExecutorResponse) ProtoMessage()    {}
func (*QueryGetRandomExecutorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{16}
}
func (m *QueryGetRandomExecutorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRandomExecutorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRandomExecutorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRandomExecutorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRandomExecutorResponse.Merge(m, src)
}
func (m *QueryGetRandomExecutorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRandomExecutorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRandomExecutorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRandomExecutorResponse proto.InternalMessageInfo

func (m *QueryGetRandomExecutorResponse) GetExecutor() Participant {
	if m != nil {
		return m.Executor
	}
	return Participant{}
}

type QueryGetEpochGroupDataRequest struct {
	PocStartBlockHeight uint64 `protobuf:"varint,1,opt,name=poc_start_block_height,json=pocStartBlockHeight,proto3" json:"poc_start_block_height,omitempty"`
}

func (m *QueryGetEpochGroupDataRequest) Reset()         { *m = QueryGetEpochGroupDataRequest{} }
func (m *QueryGetEpochGroupDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetEpochGroupDataRequest) ProtoMessage()    {}
func (*QueryGetEpochGroupDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{17}
}
func (m *QueryGetEpochGroupDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEpochGroupDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEpochGroupDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEpochGroupDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEpochGroupDataRequest.Merge(m, src)
}
func (m *QueryGetEpochGroupDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEpochGroupDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEpochGroupDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEpochGroupDataRequest proto.InternalMessageInfo

func (m *QueryGetEpochGroupDataRequest) GetPocStartBlockHeight() uint64 {
	if m != nil {
		return m.PocStartBlockHeight
	}
	return 0
}

type QueryGetEpochGroupDataResponse struct {
	EpochGroupData EpochGroupData `protobuf:"bytes,1,opt,name=epoch_group_data,json=epochGroupData,proto3" json:"epoch_group_data"`
}

func (m *QueryGetEpochGroupDataResponse) Reset()         { *m = QueryGetEpochGroupDataResponse{} }
func (m *QueryGetEpochGroupDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetEpochGroupDataResponse) ProtoMessage()    {}
func (*QueryGetEpochGroupDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{18}
}
func (m *QueryGetEpochGroupDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEpochGroupDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEpochGroupDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEpochGroupDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEpochGroupDataResponse.Merge(m, src)
}
func (m *QueryGetEpochGroupDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEpochGroupDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEpochGroupDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEpochGroupDataResponse proto.InternalMessageInfo

func (m *QueryGetEpochGroupDataResponse) GetEpochGroupData() EpochGroupData {
	if m != nil {
		return m.EpochGroupData
	}
	return EpochGroupData{}
}

type QueryAllEpochGroupDataRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllEpochGroupDataRequest) Reset()         { *m = QueryAllEpochGroupDataRequest{} }
func (m *QueryAllEpochGroupDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllEpochGroupDataRequest) ProtoMessage()    {}
func (*QueryAllEpochGroupDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{19}
}
func (m *QueryAllEpochGroupDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllEpochGroupDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllEpochGroupDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllEpochGroupDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllEpochGroupDataRequest.Merge(m, src)
}
func (m *QueryAllEpochGroupDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllEpochGroupDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllEpochGroupDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllEpochGroupDataRequest proto.InternalMessageInfo

func (m *QueryAllEpochGroupDataRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllEpochGroupDataResponse struct {
	EpochGroupData []EpochGroupData    `protobuf:"bytes,1,rep,name=epoch_group_data,json=epochGroupData,proto3" json:"epoch_group_data"`
	Pagination     *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllEpochGroupDataResponse) Reset()         { *m = QueryAllEpochGroupDataResponse{} }
func (m *QueryAllEpochGroupDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllEpochGroupDataResponse) ProtoMessage()    {}
func (*QueryAllEpochGroupDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{20}
}
func (m *QueryAllEpochGroupDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllEpochGroupDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllEpochGroupDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllEpochGroupDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllEpochGroupDataResponse.Merge(m, src)
}
func (m *QueryAllEpochGroupDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllEpochGroupDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllEpochGroupDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllEpochGroupDataResponse proto.InternalMessageInfo

func (m *QueryAllEpochGroupDataResponse) GetEpochGroupData() []EpochGroupData {
	if m != nil {
		return m.EpochGroupData
	}
	return nil
}

func (m *QueryAllEpochGroupDataResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetSettleAmountRequest struct {
	Participant string `protobuf:"bytes,1,opt,name=participant,proto3" json:"participant,omitempty"`
}

func (m *QueryGetSettleAmountRequest) Reset()         { *m = QueryGetSettleAmountRequest{} }
func (m *QueryGetSettleAmountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSettleAmountRequest) ProtoMessage()    {}
func (*QueryGetSettleAmountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{21}
}
func (m *QueryGetSettleAmountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSettleAmountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSettleAmountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSettleAmountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSettleAmountRequest.Merge(m, src)
}
func (m *QueryGetSettleAmountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSettleAmountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSettleAmountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSettleAmountRequest proto.InternalMessageInfo

func (m *QueryGetSettleAmountRequest) GetParticipant() string {
	if m != nil {
		return m.Participant
	}
	return ""
}

type QueryGetSettleAmountResponse struct {
	SettleAmount SettleAmount `protobuf:"bytes,1,opt,name=settle_amount,json=settleAmount,proto3" json:"settle_amount"`
}

func (m *QueryGetSettleAmountResponse) Reset()         { *m = QueryGetSettleAmountResponse{} }
func (m *QueryGetSettleAmountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSettleAmountResponse) ProtoMessage()    {}
func (*QueryGetSettleAmountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{22}
}
func (m *QueryGetSettleAmountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSettleAmountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSettleAmountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSettleAmountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSettleAmountResponse.Merge(m, src)
}
func (m *QueryGetSettleAmountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSettleAmountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSettleAmountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSettleAmountResponse proto.InternalMessageInfo

func (m *QueryGetSettleAmountResponse) GetSettleAmount() SettleAmount {
	if m != nil {
		return m.SettleAmount
	}
	return SettleAmount{}
}

type QueryAllSettleAmountRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSettleAmountRequest) Reset()         { *m = QueryAllSettleAmountRequest{} }
func (m *QueryAllSettleAmountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllSettleAmountRequest) ProtoMessage()    {}
func (*QueryAllSettleAmountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{23}
}
func (m *QueryAllSettleAmountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSettleAmountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSettleAmountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSettleAmountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSettleAmountRequest.Merge(m, src)
}
func (m *QueryAllSettleAmountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSettleAmountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSettleAmountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSettleAmountRequest proto.InternalMessageInfo

func (m *QueryAllSettleAmountRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllSettleAmountResponse struct {
	SettleAmount []SettleAmount      `protobuf:"bytes,1,rep,name=settle_amount,json=settleAmount,proto3" json:"settle_amount"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSettleAmountResponse) Reset()         { *m = QueryAllSettleAmountResponse{} }
func (m *QueryAllSettleAmountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllSettleAmountResponse) ProtoMessage()    {}
func (*QueryAllSettleAmountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{24}
}
func (m *QueryAllSettleAmountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSettleAmountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSettleAmountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSettleAmountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSettleAmountResponse.Merge(m, src)
}
func (m *QueryAllSettleAmountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSettleAmountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSettleAmountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSettleAmountResponse proto.InternalMessageInfo

func (m *QueryAllSettleAmountResponse) GetSettleAmount() []SettleAmount {
	if m != nil {
		return m.SettleAmount
	}
	return nil
}

func (m *QueryAllSettleAmountResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetEpochGroupValidationsRequest struct {
	Participant         string `protobuf:"bytes,1,opt,name=participant,proto3" json:"participant,omitempty"`
	PocStartBlockHeight uint64 `protobuf:"varint,2,opt,name=poc_start_block_height,json=pocStartBlockHeight,proto3" json:"poc_start_block_height,omitempty"`
}

func (m *QueryGetEpochGroupValidationsRequest) Reset()         { *m = QueryGetEpochGroupValidationsRequest{} }
func (m *QueryGetEpochGroupValidationsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetEpochGroupValidationsRequest) ProtoMessage()    {}
func (*QueryGetEpochGroupValidationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{25}
}
func (m *QueryGetEpochGroupValidationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEpochGroupValidationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEpochGroupValidationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEpochGroupValidationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEpochGroupValidationsRequest.Merge(m, src)
}
func (m *QueryGetEpochGroupValidationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEpochGroupValidationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEpochGroupValidationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEpochGroupValidationsRequest proto.InternalMessageInfo

func (m *QueryGetEpochGroupValidationsRequest) GetParticipant() string {
	if m != nil {
		return m.Participant
	}
	return ""
}

func (m *QueryGetEpochGroupValidationsRequest) GetPocStartBlockHeight() uint64 {
	if m != nil {
		return m.PocStartBlockHeight
	}
	return 0
}

type QueryGetEpochGroupValidationsResponse struct {
	EpochGroupValidations EpochGroupValidations `protobuf:"bytes,1,opt,name=epoch_group_validations,json=epochGroupValidations,proto3" json:"epoch_group_validations"`
}

func (m *QueryGetEpochGroupValidationsResponse) Reset()         { *m = QueryGetEpochGroupValidationsResponse{} }
func (m *QueryGetEpochGroupValidationsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetEpochGroupValidationsResponse) ProtoMessage()    {}
func (*QueryGetEpochGroupValidationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{26}
}
func (m *QueryGetEpochGroupValidationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEpochGroupValidationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEpochGroupValidationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEpochGroupValidationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEpochGroupValidationsResponse.Merge(m, src)
}
func (m *QueryGetEpochGroupValidationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEpochGroupValidationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEpochGroupValidationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEpochGroupValidationsResponse proto.InternalMessageInfo

func (m *QueryGetEpochGroupValidationsResponse) GetEpochGroupValidations() EpochGroupValidations {
	if m != nil {
		return m.EpochGroupValidations
	}
	return EpochGroupValidations{}
}

type QueryAllEpochGroupValidationsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllEpochGroupValidationsRequest) Reset()         { *m = QueryAllEpochGroupValidationsRequest{} }
func (m *QueryAllEpochGroupValidationsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllEpochGroupValidationsRequest) ProtoMessage()    {}
func (*QueryAllEpochGroupValidationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{27}
}
func (m *QueryAllEpochGroupValidationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllEpochGroupValidationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllEpochGroupValidationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllEpochGroupValidationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllEpochGroupValidationsRequest.Merge(m, src)
}
func (m *QueryAllEpochGroupValidationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllEpochGroupValidationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllEpochGroupValidationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllEpochGroupValidationsRequest proto.InternalMessageInfo

func (m *QueryAllEpochGroupValidationsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllEpochGroupValidationsResponse struct {
	EpochGroupValidations []EpochGroupValidations `protobuf:"bytes,1,rep,name=epoch_group_validations,json=epochGroupValidations,proto3" json:"epoch_group_validations"`
	Pagination            *query.PageResponse     `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllEpochGroupValidationsResponse) Reset()         { *m = QueryAllEpochGroupValidationsResponse{} }
func (m *QueryAllEpochGroupValidationsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllEpochGroupValidationsResponse) ProtoMessage()    {}
func (*QueryAllEpochGroupValidationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{28}
}
func (m *QueryAllEpochGroupValidationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllEpochGroupValidationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllEpochGroupValidationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllEpochGroupValidationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllEpochGroupValidationsResponse.Merge(m, src)
}
func (m *QueryAllEpochGroupValidationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllEpochGroupValidationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllEpochGroupValidationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllEpochGroupValidationsResponse proto.InternalMessageInfo

func (m *QueryAllEpochGroupValidationsResponse) GetEpochGroupValidations() []EpochGroupValidations {
	if m != nil {
		return m.EpochGroupValidations
	}
	return nil
}

func (m *QueryAllEpochGroupValidationsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryPocBatchesForStageRequest struct {
	BlockHeight int64 `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *QueryPocBatchesForStageRequest) Reset()         { *m = QueryPocBatchesForStageRequest{} }
func (m *QueryPocBatchesForStageRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPocBatchesForStageRequest) ProtoMessage()    {}
func (*QueryPocBatchesForStageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{29}
}
func (m *QueryPocBatchesForStageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPocBatchesForStageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPocBatchesForStageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPocBatchesForStageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPocBatchesForStageRequest.Merge(m, src)
}
func (m *QueryPocBatchesForStageRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPocBatchesForStageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPocBatchesForStageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPocBatchesForStageRequest proto.InternalMessageInfo

func (m *QueryPocBatchesForStageRequest) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type QueryPocBatchesForStageResponse struct {
	PocBatch []PoCBatchesWithParticipants `protobuf:"bytes,1,rep,name=poc_batch,json=pocBatch,proto3" json:"poc_batch"`
}

func (m *QueryPocBatchesForStageResponse) Reset()         { *m = QueryPocBatchesForStageResponse{} }
func (m *QueryPocBatchesForStageResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPocBatchesForStageResponse) ProtoMessage()    {}
func (*QueryPocBatchesForStageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{30}
}
func (m *QueryPocBatchesForStageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPocBatchesForStageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPocBatchesForStageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPocBatchesForStageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPocBatchesForStageResponse.Merge(m, src)
}
func (m *QueryPocBatchesForStageResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPocBatchesForStageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPocBatchesForStageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPocBatchesForStageResponse proto.InternalMessageInfo

func (m *QueryPocBatchesForStageResponse) GetPocBatch() []PoCBatchesWithParticipants {
	if m != nil {
		return m.PocBatch
	}
	return nil
}

type PoCBatchesWithParticipants struct {
	Participant string     `protobuf:"bytes,1,opt,name=participant,proto3" json:"participant,omitempty"`
	PubKey      string     `protobuf:"bytes,2,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	HexPubKey   string     `protobuf:"bytes,3,opt,name=hex_pub_key,json=hexPubKey,proto3" json:"hex_pub_key,omitempty"`
	PocBatch    []PoCBatch `protobuf:"bytes,4,rep,name=poc_batch,json=pocBatch,proto3" json:"poc_batch"`
}

func (m *PoCBatchesWithParticipants) Reset()         { *m = PoCBatchesWithParticipants{} }
func (m *PoCBatchesWithParticipants) String() string { return proto.CompactTextString(m) }
func (*PoCBatchesWithParticipants) ProtoMessage()    {}
func (*PoCBatchesWithParticipants) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{31}
}
func (m *PoCBatchesWithParticipants) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoCBatchesWithParticipants) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoCBatchesWithParticipants.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoCBatchesWithParticipants) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoCBatchesWithParticipants.Merge(m, src)
}
func (m *PoCBatchesWithParticipants) XXX_Size() int {
	return m.Size()
}
func (m *PoCBatchesWithParticipants) XXX_DiscardUnknown() {
	xxx_messageInfo_PoCBatchesWithParticipants.DiscardUnknown(m)
}

var xxx_messageInfo_PoCBatchesWithParticipants proto.InternalMessageInfo

func (m *PoCBatchesWithParticipants) GetParticipant() string {
	if m != nil {
		return m.Participant
	}
	return ""
}

func (m *PoCBatchesWithParticipants) GetPubKey() string {
	if m != nil {
		return m.PubKey
	}
	return ""
}

func (m *PoCBatchesWithParticipants) GetHexPubKey() string {
	if m != nil {
		return m.HexPubKey
	}
	return ""
}

func (m *PoCBatchesWithParticipants) GetPocBatch() []PoCBatch {
	if m != nil {
		return m.PocBatch
	}
	return nil
}

type QueryGetCurrentEpochRequest struct {
}

func (m *QueryGetCurrentEpochRequest) Reset()         { *m = QueryGetCurrentEpochRequest{} }
func (m *QueryGetCurrentEpochRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCurrentEpochRequest) ProtoMessage()    {}
func (*QueryGetCurrentEpochRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{32}
}
func (m *QueryGetCurrentEpochRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCurrentEpochRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCurrentEpochRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCurrentEpochRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCurrentEpochRequest.Merge(m, src)
}
func (m *QueryGetCurrentEpochRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCurrentEpochRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCurrentEpochRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCurrentEpochRequest proto.InternalMessageInfo

type QueryGetCurrentEpochResponse struct {
	Epoch uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (m *QueryGetCurrentEpochResponse) Reset()         { *m = QueryGetCurrentEpochResponse{} }
func (m *QueryGetCurrentEpochResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCurrentEpochResponse) ProtoMessage()    {}
func (*QueryGetCurrentEpochResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{33}
}
func (m *QueryGetCurrentEpochResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCurrentEpochResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCurrentEpochResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCurrentEpochResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCurrentEpochResponse.Merge(m, src)
}
func (m *QueryGetCurrentEpochResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCurrentEpochResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCurrentEpochResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCurrentEpochResponse proto.InternalMessageInfo

func (m *QueryGetCurrentEpochResponse) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

type QueryGetTokenomicsDataRequest struct {
}

func (m *QueryGetTokenomicsDataRequest) Reset()         { *m = QueryGetTokenomicsDataRequest{} }
func (m *QueryGetTokenomicsDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTokenomicsDataRequest) ProtoMessage()    {}
func (*QueryGetTokenomicsDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{34}
}
func (m *QueryGetTokenomicsDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTokenomicsDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTokenomicsDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTokenomicsDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTokenomicsDataRequest.Merge(m, src)
}
func (m *QueryGetTokenomicsDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTokenomicsDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTokenomicsDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTokenomicsDataRequest proto.InternalMessageInfo

type QueryGetTokenomicsDataResponse struct {
	TokenomicsData TokenomicsData `protobuf:"bytes,1,opt,name=tokenomics_data,json=tokenomicsData,proto3" json:"tokenomics_data"`
}

func (m *QueryGetTokenomicsDataResponse) Reset()         { *m = QueryGetTokenomicsDataResponse{} }
func (m *QueryGetTokenomicsDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTokenomicsDataResponse) ProtoMessage()    {}
func (*QueryGetTokenomicsDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{35}
}
func (m *QueryGetTokenomicsDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTokenomicsDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTokenomicsDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTokenomicsDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTokenomicsDataResponse.Merge(m, src)
}
func (m *QueryGetTokenomicsDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTokenomicsDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTokenomicsDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTokenomicsDataResponse proto.InternalMessageInfo

func (m *QueryGetTokenomicsDataResponse) GetTokenomicsData() TokenomicsData {
	if m != nil {
		return m.TokenomicsData
	}
	return TokenomicsData{}
}

type QueryGetUnitOfComputePriceProposalRequest struct {
	Participant string `protobuf:"bytes,1,opt,name=participant,proto3" json:"participant,omitempty"`
}

func (m *QueryGetUnitOfComputePriceProposalRequest) Reset() {
	*m = QueryGetUnitOfComputePriceProposalRequest{}
}
func (m *QueryGetUnitOfComputePriceProposalRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetUnitOfComputePriceProposalRequest) ProtoMessage() {}
func (*QueryGetUnitOfComputePriceProposalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{36}
}
func (m *QueryGetUnitOfComputePriceProposalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetUnitOfComputePriceProposalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetUnitOfComputePriceProposalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetUnitOfComputePriceProposalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetUnitOfComputePriceProposalRequest.Merge(m, src)
}
func (m *QueryGetUnitOfComputePriceProposalRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetUnitOfComputePriceProposalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetUnitOfComputePriceProposalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetUnitOfComputePriceProposalRequest proto.InternalMessageInfo

func (m *QueryGetUnitOfComputePriceProposalRequest) GetParticipant() string {
	if m != nil {
		return m.Participant
	}
	return ""
}

type QueryGetUnitOfComputePriceProposalResponse struct {
	Proposal *UnitOfComputePriceProposal `protobuf:"bytes,1,opt,name=proposal,proto3" json:"proposal,omitempty"`
	Default  uint64                      `protobuf:"varint,2,opt,name=default,proto3" json:"default,omitempty"`
}

func (m *QueryGetUnitOfComputePriceProposalResponse) Reset() {
	*m = QueryGetUnitOfComputePriceProposalResponse{}
}
func (m *QueryGetUnitOfComputePriceProposalResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetUnitOfComputePriceProposalResponse) ProtoMessage() {}
func (*QueryGetUnitOfComputePriceProposalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{37}
}
func (m *QueryGetUnitOfComputePriceProposalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetUnitOfComputePriceProposalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetUnitOfComputePriceProposalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetUnitOfComputePriceProposalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetUnitOfComputePriceProposalResponse.Merge(m, src)
}
func (m *QueryGetUnitOfComputePriceProposalResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetUnitOfComputePriceProposalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetUnitOfComputePriceProposalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetUnitOfComputePriceProposalResponse proto.InternalMessageInfo

func (m *QueryGetUnitOfComputePriceProposalResponse) GetProposal() *UnitOfComputePriceProposal {
	if m != nil {
		return m.Proposal
	}
	return nil
}

func (m *QueryGetUnitOfComputePriceProposalResponse) GetDefault() uint64 {
	if m != nil {
		return m.Default
	}
	return 0
}

type QueryCurrentEpochGroupDataRequest struct {
}

func (m *QueryCurrentEpochGroupDataRequest) Reset()         { *m = QueryCurrentEpochGroupDataRequest{} }
func (m *QueryCurrentEpochGroupDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCurrentEpochGroupDataRequest) ProtoMessage()    {}
func (*QueryCurrentEpochGroupDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{38}
}
func (m *QueryCurrentEpochGroupDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCurrentEpochGroupDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCurrentEpochGroupDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCurrentEpochGroupDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCurrentEpochGroupDataRequest.Merge(m, src)
}
func (m *QueryCurrentEpochGroupDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCurrentEpochGroupDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCurrentEpochGroupDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCurrentEpochGroupDataRequest proto.InternalMessageInfo

type QueryCurrentEpochGroupDataResponse struct {
	EpochGroupData EpochGroupData `protobuf:"bytes,1,opt,name=epoch_group_data,json=epochGroupData,proto3" json:"epoch_group_data"`
}

func (m *QueryCurrentEpochGroupDataResponse) Reset()         { *m = QueryCurrentEpochGroupDataResponse{} }
func (m *QueryCurrentEpochGroupDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCurrentEpochGroupDataResponse) ProtoMessage()    {}
func (*QueryCurrentEpochGroupDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{39}
}
func (m *QueryCurrentEpochGroupDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCurrentEpochGroupDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCurrentEpochGroupDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCurrentEpochGroupDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCurrentEpochGroupDataResponse.Merge(m, src)
}
func (m *QueryCurrentEpochGroupDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCurrentEpochGroupDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCurrentEpochGroupDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCurrentEpochGroupDataResponse proto.InternalMessageInfo

func (m *QueryCurrentEpochGroupDataResponse) GetEpochGroupData() EpochGroupData {
	if m != nil {
		return m.EpochGroupData
	}
	return EpochGroupData{}
}

type QueryModelsAllRequest struct {
}

func (m *QueryModelsAllRequest) Reset()         { *m = QueryModelsAllRequest{} }
func (m *QueryModelsAllRequest) String() string { return proto.CompactTextString(m) }
func (*QueryModelsAllRequest) ProtoMessage()    {}
func (*QueryModelsAllRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{40}
}
func (m *QueryModelsAllRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryModelsAllRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryModelsAllRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryModelsAllRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryModelsAllRequest.Merge(m, src)
}
func (m *QueryModelsAllRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryModelsAllRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryModelsAllRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryModelsAllRequest proto.InternalMessageInfo

type QueryModelsAllResponse struct {
	Model []Model `protobuf:"bytes,1,rep,name=model,proto3" json:"model"`
}

func (m *QueryModelsAllResponse) Reset()         { *m = QueryModelsAllResponse{} }
func (m *QueryModelsAllResponse) String() string { return proto.CompactTextString(m) }
func (*QueryModelsAllResponse) ProtoMessage()    {}
func (*QueryModelsAllResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{41}
}
func (m *QueryModelsAllResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryModelsAllResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryModelsAllResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryModelsAllResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryModelsAllResponse.Merge(m, src)
}
func (m *QueryModelsAllResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryModelsAllResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryModelsAllResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryModelsAllResponse proto.InternalMessageInfo

func (m *QueryModelsAllResponse) GetModel() []Model {
	if m != nil {
		return m.Model
	}
	return nil
}

type QueryGetTopMinerRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetTopMinerRequest) Reset()         { *m = QueryGetTopMinerRequest{} }
func (m *QueryGetTopMinerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTopMinerRequest) ProtoMessage()    {}
func (*QueryGetTopMinerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{42}
}
func (m *QueryGetTopMinerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTopMinerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTopMinerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTopMinerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTopMinerRequest.Merge(m, src)
}
func (m *QueryGetTopMinerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTopMinerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTopMinerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTopMinerRequest proto.InternalMessageInfo

func (m *QueryGetTopMinerRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryGetTopMinerResponse struct {
	TopMiner TopMiner `protobuf:"bytes,1,opt,name=top_miner,json=topMiner,proto3" json:"top_miner"`
}

func (m *QueryGetTopMinerResponse) Reset()         { *m = QueryGetTopMinerResponse{} }
func (m *QueryGetTopMinerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTopMinerResponse) ProtoMessage()    {}
func (*QueryGetTopMinerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{43}
}
func (m *QueryGetTopMinerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTopMinerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTopMinerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTopMinerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTopMinerResponse.Merge(m, src)
}
func (m *QueryGetTopMinerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTopMinerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTopMinerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTopMinerResponse proto.InternalMessageInfo

func (m *QueryGetTopMinerResponse) GetTopMiner() TopMiner {
	if m != nil {
		return m.TopMiner
	}
	return TopMiner{}
}

type QueryAllTopMinerRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTopMinerRequest) Reset()         { *m = QueryAllTopMinerRequest{} }
func (m *QueryAllTopMinerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllTopMinerRequest) ProtoMessage()    {}
func (*QueryAllTopMinerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{44}
}
func (m *QueryAllTopMinerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTopMinerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTopMinerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTopMinerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTopMinerRequest.Merge(m, src)
}
func (m *QueryAllTopMinerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTopMinerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTopMinerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTopMinerRequest proto.InternalMessageInfo

func (m *QueryAllTopMinerRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllTopMinerResponse struct {
	TopMiner   []TopMiner          `protobuf:"bytes,1,rep,name=top_miner,json=topMiner,proto3" json:"top_miner"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTopMinerResponse) Reset()         { *m = QueryAllTopMinerResponse{} }
func (m *QueryAllTopMinerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllTopMinerResponse) ProtoMessage()    {}
func (*QueryAllTopMinerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0cfe3b0e1cc5bd, []int{45}
}
func (m *QueryAllTopMinerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTopMinerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTopMinerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTopMinerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTopMinerResponse.Merge(m, src)
}
func (m *QueryAllTopMinerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTopMinerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTopMinerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTopMinerResponse proto.InternalMessageInfo

func (m *QueryAllTopMinerResponse) GetTopMiner() []TopMiner {
	if m != nil {
		return m.TopMiner
	}
	return nil
}

func (m *QueryAllTopMinerResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "inference.inference.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "inference.inference.QueryParamsResponse")
	proto.RegisterType((*QueryGetInferenceRequest)(nil), "inference.inference.QueryGetInferenceRequest")
	proto.RegisterType((*QueryGetInferenceResponse)(nil), "inference.inference.QueryGetInferenceResponse")
	proto.RegisterType((*QueryAllInferenceRequest)(nil), "inference.inference.QueryAllInferenceRequest")
	proto.RegisterType((*QueryAllInferenceResponse)(nil), "inference.inference.QueryAllInferenceResponse")
	proto.RegisterType((*QueryGetParticipantRequest)(nil), "inference.inference.QueryGetParticipantRequest")
	proto.RegisterType((*QueryGetParticipantResponse)(nil), "inference.inference.QueryGetParticipantResponse")
	proto.RegisterType((*QueryAllParticipantRequest)(nil), "inference.inference.QueryAllParticipantRequest")
	proto.RegisterType((*QueryAllParticipantResponse)(nil), "inference.inference.QueryAllParticipantResponse")
	proto.RegisterType((*QueryGetInferencesWithExecutorsRequest)(nil), "inference.inference.QueryGetInferencesWithExecutorsRequest")
	proto.RegisterType((*QueryGetInferencesWithExecutorsResponse)(nil), "inference.inference.QueryGetInferencesWithExecutorsResponse")
	proto.RegisterType((*InferenceWithExecutor)(nil), "inference.inference.InferenceWithExecutor")
	proto.RegisterType((*QueryInferenceParticipantRequest)(nil), "inference.inference.QueryInferenceParticipantRequest")
	proto.RegisterType((*QueryInferenceParticipantResponse)(nil), "inference.inference.QueryInferenceParticipantResponse")
	proto.RegisterType((*QueryGetRandomExecutorRequest)(nil), "inference.inference.QueryGetRandomExecutorRequest")
	proto.RegisterType((*QueryGetRandomExecutorResponse)(nil), "inference.inference.QueryGetRandomExecutorResponse")
	proto.RegisterType((*QueryGetEpochGroupDataRequest)(nil), "inference.inference.QueryGetEpochGroupDataRequest")
	proto.RegisterType((*QueryGetEpochGroupDataResponse)(nil), "inference.inference.QueryGetEpochGroupDataResponse")
	proto.RegisterType((*QueryAllEpochGroupDataRequest)(nil), "inference.inference.QueryAllEpochGroupDataRequest")
	proto.RegisterType((*QueryAllEpochGroupDataResponse)(nil), "inference.inference.QueryAllEpochGroupDataResponse")
	proto.RegisterType((*QueryGetSettleAmountRequest)(nil), "inference.inference.QueryGetSettleAmountRequest")
	proto.RegisterType((*QueryGetSettleAmountResponse)(nil), "inference.inference.QueryGetSettleAmountResponse")
	proto.RegisterType((*QueryAllSettleAmountRequest)(nil), "inference.inference.QueryAllSettleAmountRequest")
	proto.RegisterType((*QueryAllSettleAmountResponse)(nil), "inference.inference.QueryAllSettleAmountResponse")
	proto.RegisterType((*QueryGetEpochGroupValidationsRequest)(nil), "inference.inference.QueryGetEpochGroupValidationsRequest")
	proto.RegisterType((*QueryGetEpochGroupValidationsResponse)(nil), "inference.inference.QueryGetEpochGroupValidationsResponse")
	proto.RegisterType((*QueryAllEpochGroupValidationsRequest)(nil), "inference.inference.QueryAllEpochGroupValidationsRequest")
	proto.RegisterType((*QueryAllEpochGroupValidationsResponse)(nil), "inference.inference.QueryAllEpochGroupValidationsResponse")
	proto.RegisterType((*QueryPocBatchesForStageRequest)(nil), "inference.inference.QueryPocBatchesForStageRequest")
	proto.RegisterType((*QueryPocBatchesForStageResponse)(nil), "inference.inference.QueryPocBatchesForStageResponse")
	proto.RegisterType((*PoCBatchesWithParticipants)(nil), "inference.inference.PoCBatchesWithParticipants")
	proto.RegisterType((*QueryGetCurrentEpochRequest)(nil), "inference.inference.QueryGetCurrentEpochRequest")
	proto.RegisterType((*QueryGetCurrentEpochResponse)(nil), "inference.inference.QueryGetCurrentEpochResponse")
	proto.RegisterType((*QueryGetTokenomicsDataRequest)(nil), "inference.inference.QueryGetTokenomicsDataRequest")
	proto.RegisterType((*QueryGetTokenomicsDataResponse)(nil), "inference.inference.QueryGetTokenomicsDataResponse")
	proto.RegisterType((*QueryGetUnitOfComputePriceProposalRequest)(nil), "inference.inference.QueryGetUnitOfComputePriceProposalRequest")
	proto.RegisterType((*QueryGetUnitOfComputePriceProposalResponse)(nil), "inference.inference.QueryGetUnitOfComputePriceProposalResponse")
	proto.RegisterType((*QueryCurrentEpochGroupDataRequest)(nil), "inference.inference.QueryCurrentEpochGroupDataRequest")
	proto.RegisterType((*QueryCurrentEpochGroupDataResponse)(nil), "inference.inference.QueryCurrentEpochGroupDataResponse")
	proto.RegisterType((*QueryModelsAllRequest)(nil), "inference.inference.QueryModelsAllRequest")
	proto.RegisterType((*QueryModelsAllResponse)(nil), "inference.inference.QueryModelsAllResponse")
	proto.RegisterType((*QueryGetTopMinerRequest)(nil), "inference.inference.QueryGetTopMinerRequest")
	proto.RegisterType((*QueryGetTopMinerResponse)(nil), "inference.inference.QueryGetTopMinerResponse")
	proto.RegisterType((*QueryAllTopMinerRequest)(nil), "inference.inference.QueryAllTopMinerRequest")
	proto.RegisterType((*QueryAllTopMinerResponse)(nil), "inference.inference.QueryAllTopMinerResponse")
}

func init() { proto.RegisterFile("inference/inference/query.proto", fileDescriptor_cf0cfe3b0e1cc5bd) }

var fileDescriptor_cf0cfe3b0e1cc5bd = []byte{
	// 2188 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x5a, 0xcf, 0x6f, 0x1c, 0x49,
	0x15, 0x4e, 0x79, 0x92, 0x6c, 0xe6, 0xd9, 0x71, 0x36, 0x15, 0x3b, 0x31, 0xbd, 0xf1, 0xd8, 0xe9,
	0x90, 0x75, 0xd6, 0x24, 0x33, 0xb1, 0x1d, 0x27, 0x0a, 0xc9, 0x26, 0x6b, 0x7b, 0x13, 0x67, 0x09,
	0x21, 0xc3, 0x64, 0xb3, 0x20, 0x84, 0xd4, 0xea, 0xe9, 0x29, 0xcf, 0x34, 0xe9, 0xe9, 0xea, 0xed,
	0xee, 0xd9, 0xb5, 0x65, 0xf9, 0xc2, 0x3f, 0x00, 0x68, 0xaf, 0x48, 0x08, 0x09, 0xa4, 0x20, 0x38,
	0xc0, 0x61, 0x91, 0x40, 0xc0, 0x89, 0xc3, 0x9e, 0x50, 0x60, 0x25, 0x84, 0x38, 0x20, 0x94, 0x20,
	0xc1, 0x91, 0x33, 0x27, 0xd4, 0xd5, 0xd5, 0xbf, 0x66, 0xaa, 0x7b, 0xba, 0x67, 0x67, 0x2f, 0xd1,
	0x74, 0xf5, 0xab, 0x57, 0xdf, 0xf7, 0x5e, 0x55, 0xbd, 0xd7, 0x5f, 0x0c, 0x0b, 0xba, 0xb9, 0x43,
	0x6c, 0x62, 0x6a, 0xa4, 0x16, 0xfd, 0x7a, 0xbf, 0x47, 0xec, 0xbd, 0xaa, 0x65, 0x53, 0x97, 0xe2,
	0x53, 0xe1, 0x70, 0x35, 0xfc, 0x25, 0x9d, 0x54, 0xbb, 0xba, 0x49, 0x6b, 0xec, 0x5f, 0xdf, 0x4e,
	0x9a, 0x69, 0xd3, 0x36, 0x65, 0x3f, 0x6b, 0xde, 0x2f, 0x3e, 0x7a, 0xb6, 0x4d, 0x69, 0xdb, 0x20,
	0x35, 0xd5, 0xd2, 0x6b, 0xaa, 0x69, 0x52, 0x57, 0x75, 0x75, 0x6a, 0x3a, 0xfc, 0xed, 0xb2, 0x46,
	0x9d, 0x2e, 0x75, 0x6a, 0x4d, 0xd5, 0xe1, 0x8b, 0xd6, 0x3e, 0x58, 0x69, 0x12, 0x57, 0x5d, 0xa9,
	0x59, 0x6a, 0x5b, 0x37, 0x99, 0x31, 0xb7, 0x5d, 0x14, 0x01, 0xb5, 0x54, 0x5b, 0xed, 0x06, 0xde,
	0xce, 0x8b, 0x2c, 0x22, 0xf4, 0xbe, 0xd1, 0x85, 0x14, 0x37, 0xae, 0xae, 0xe9, 0x96, 0x6a, 0xba,
	0x01, 0x32, 0x91, 0x19, 0xb1, 0xa8, 0xd6, 0x51, 0xda, 0x36, 0xed, 0x59, 0x4a, 0x4b, 0x75, 0x55,
	0x6e, 0xbb, 0x24, 0xb2, 0x75, 0x88, 0xeb, 0x1a, 0x44, 0x51, 0xbb, 0xb4, 0x17, 0x3a, 0x5d, 0x19,
	0xe6, 0xf4, 0x03, 0xd5, 0xd0, 0x5b, 0x89, 0x08, 0xc9, 0x42, 0xb8, 0x54, 0x6b, 0xaa, 0xae, 0xd6,
	0xe1, 0x36, 0x6f, 0x88, 0x6c, 0x5c, 0xfa, 0x94, 0x98, 0xb4, 0xab, 0x6b, 0x4e, 0x1c, 0xaa, 0xd0,
	0xb4, 0x67, 0xea, 0xae, 0x42, 0x77, 0x14, 0x8d, 0x76, 0xad, 0x9e, 0x1b, 0x04, 0x4a, 0xb8, 0x31,
	0xba, 0xb4, 0x45, 0x8c, 0xac, 0x70, 0xbb, 0xd4, 0x52, 0xba, 0xba, 0x49, 0x6c, 0x6e, 0x54, 0x89,
	0x67, 0x38, 0xc8, 0xad, 0x46, 0x75, 0x9e, 0x55, 0x79, 0x06, 0xf0, 0xd7, 0xbd, 0xbc, 0xd7, 0x59,
	0x22, 0x1b, 0xe4, 0xfd, 0x1e, 0x71, 0x5c, 0xf9, 0x09, 0x9c, 0x4a, 0x8c, 0x3a, 0x16, 0x35, 0x1d,
	0x82, 0x6f, 0xc3, 0x51, 0x3f, 0xe1, 0x73, 0x68, 0x11, 0x5d, 0x9c, 0x5c, 0x7d, 0xad, 0x2a, 0xd8,
	0x9b, 0x55, 0x7f, 0xd2, 0x66, 0xf9, 0x93, 0x7f, 0x2c, 0x1c, 0x7a, 0xf6, 0xef, 0x5f, 0x2e, 0xa3,
	0x06, 0x9f, 0x25, 0x5f, 0x81, 0x39, 0xe6, 0x76, 0x9b, 0xb8, 0xef, 0x04, 0xe6, 0x7c, 0x49, 0x3c,
	0x03, 0x47, 0x74, 0xb3, 0x45, 0x76, 0x99, 0xeb, 0x72, 0xc3, 0x7f, 0x90, 0x15, 0xf8, 0x82, 0x60,
	0x06, 0x87, 0xb3, 0x09, 0xe5, 0x70, 0x55, 0x8e, 0xa8, 0x22, 0x44, 0x14, 0x4e, 0xdd, 0x3c, 0xec,
	0x81, 0x6a, 0x44, 0xd3, 0xe4, 0x26, 0x87, 0xb4, 0x61, 0x18, 0x03, 0x90, 0xee, 0x01, 0x44, 0xa7,
	0x80, 0x2f, 0xf0, 0x7a, 0xd5, 0x0f, 0x68, 0xd5, 0x0b, 0x68, 0xd5, 0x3f, 0xa7, 0x3c, 0xac, 0xd5,
	0xba, 0xda, 0x0e, 0xe6, 0x36, 0x62, 0x33, 0xe5, 0x67, 0x88, 0xb3, 0x48, 0x2e, 0x22, 0x66, 0x51,
	0x1a, 0x81, 0x05, 0xde, 0x4e, 0x20, 0x9d, 0x60, 0x48, 0x97, 0x86, 0x22, 0xf5, 0x01, 0x24, 0xa0,
	0xae, 0x82, 0x14, 0xc4, 0xbb, 0x1e, 0x9d, 0xc9, 0xec, 0x1c, 0xb5, 0xe1, 0x35, 0xe1, 0x1c, 0xce,
	0xef, 0x3e, 0x4c, 0xc6, 0x8e, 0x37, 0x0f, 0xe3, 0x62, 0xda, 0xce, 0x09, 0xec, 0x38, 0xc7, 0xf8,
	0x54, 0xb9, 0xc5, 0xc1, 0x6d, 0x18, 0x86, 0x00, 0xdc, 0xb8, 0xb2, 0xf5, 0x29, 0xe2, 0x7c, 0xfa,
	0x97, 0x49, 0xe3, 0x53, 0x1a, 0x91, 0xcf, 0xd8, 0xb2, 0x86, 0xcf, 0xc1, 0x54, 0xd3, 0xa0, 0xda,
	0x53, 0xa5, 0x43, 0xf4, 0x76, 0xc7, 0x9d, 0x2b, 0x2d, 0xa2, 0x8b, 0xa5, 0xc6, 0x24, 0x1b, 0xbb,
	0xcf, 0x86, 0xe4, 0x6f, 0xc2, 0xeb, 0x03, 0x07, 0xc9, 0xf9, 0x86, 0xee, 0x76, 0xee, 0xee, 0x12,
	0xad, 0xe7, 0x52, 0x3b, 0x38, 0xfb, 0xf8, 0x55, 0x28, 0xe9, 0x2d, 0x87, 0xf1, 0x2a, 0x37, 0xbc,
	0x9f, 0xf8, 0x2c, 0x94, 0x6d, 0xff, 0x25, 0xb1, 0x19, 0xcc, 0x72, 0x23, 0x1a, 0x90, 0x7f, 0x3e,
	0x01, 0x4b, 0x43, 0x5d, 0xf3, 0xd8, 0x75, 0xe0, 0x4c, 0x18, 0x1d, 0xe5, 0x43, 0xdd, 0xed, 0x28,
	0x84, 0xdb, 0xf0, 0x38, 0x2e, 0x67, 0xef, 0xfc, 0xb8, 0x57, 0x1e, 0xd1, 0x59, 0x5d, 0xf4, 0x12,
	0x5f, 0x80, 0x69, 0xb3, 0xd7, 0x0d, 0x2e, 0x74, 0x6a, 0x3b, 0x0c, 0xf8, 0xf1, 0xc6, 0x71, 0xb3,
	0xd7, 0x7d, 0x2f, 0x1c, 0xc4, 0x0b, 0x30, 0xe9, 0x52, 0x57, 0x35, 0x14, 0x8b, 0x7e, 0x48, 0x6c,
	0x16, 0xb8, 0xe3, 0x0d, 0x60, 0x43, 0x75, 0x6f, 0x04, 0x2f, 0xc1, 0x89, 0xd0, 0x07, 0x37, 0x3a,
	0xcc, 0x8c, 0xa6, 0xc3, 0x61, 0xdf, 0xf0, 0x02, 0x4c, 0x6b, 0x3d, 0xdb, 0x26, 0xa6, 0x1b, 0x64,
	0xe1, 0x88, 0xbf, 0x20, 0x1f, 0xe5, 0x79, 0xf8, 0x23, 0x82, 0x59, 0x21, 0x9d, 0x71, 0xdc, 0x66,
	0x78, 0x13, 0x8e, 0x85, 0x01, 0x9d, 0x28, 0x74, 0xd0, 0xc2, 0x79, 0xf8, 0x3c, 0x04, 0x90, 0x13,
	0x41, 0x99, 0xe2, 0x83, 0x8c, 0xad, 0x7c, 0x0b, 0x16, 0x59, 0xce, 0x43, 0x2c, 0x82, 0x03, 0x39,
	0x07, 0xaf, 0xa8, 0xad, 0x96, 0x4d, 0x1c, 0x87, 0xdf, 0x17, 0xc1, 0xa3, 0xfc, 0x04, 0xce, 0x65,
	0xcc, 0xe6, 0x7b, 0xe5, 0x34, 0x1c, 0xb5, 0x7a, 0xcd, 0xa7, 0x64, 0x8f, 0xcf, 0xe6, 0x4f, 0x9e,
	0xdb, 0xa6, 0x6a, 0xa8, 0x5e, 0x94, 0x26, 0xd8, 0x3e, 0x0f, 0x1e, 0xe5, 0x05, 0x98, 0x0f, 0x36,
	0x62, 0x43, 0x35, 0x5b, 0xb4, 0x1b, 0xc4, 0x36, 0x28, 0x6b, 0x2d, 0xa8, 0xa4, 0x19, 0x84, 0x97,
	0xf1, 0xb1, 0xd8, 0x8e, 0x1c, 0x29, 0x80, 0xf2, 0xbb, 0x11, 0x8c, 0xbb, 0x5e, 0x6f, 0xb1, 0xed,
	0xb5, 0x16, 0x6f, 0xab, 0xae, 0x1a, 0x04, 0x66, 0x0d, 0x4e, 0x5b, 0x54, 0x53, 0x1c, 0x57, 0xb5,
	0x5d, 0x25, 0x71, 0x70, 0xbd, 0x25, 0x0f, 0x37, 0x4e, 0x59, 0x54, 0x7b, 0xec, 0xbd, 0xdc, 0x8c,
	0x1d, 0xe0, 0x5e, 0x84, 0xbd, 0xdf, 0x2b, 0xc7, 0xfe, 0x18, 0x5e, 0xed, 0x6f, 0x90, 0x38, 0x87,
	0xf3, 0x42, 0x0e, 0x49, 0x37, 0x9c, 0xc6, 0x34, 0x49, 0x8c, 0xca, 0x6d, 0x4e, 0x66, 0xc3, 0x30,
	0xc4, 0x64, 0xc6, 0x75, 0xed, 0xfe, 0x01, 0x71, 0x82, 0x82, 0x95, 0x32, 0x09, 0x96, 0x3e, 0x13,
	0xc1, 0xf1, 0x95, 0xce, 0x3b, 0x51, 0x19, 0x7c, 0xcc, 0x7a, 0xcf, 0x0d, 0xd6, 0x7a, 0x06, 0x71,
	0x5a, 0x1c, 0x2c, 0x83, 0xe5, 0x64, 0x79, 0x33, 0xe0, 0xac, 0xd8, 0x01, 0xa7, 0xff, 0x55, 0x38,
	0x9e, 0x68, 0x6a, 0x79, 0xb0, 0xcf, 0x09, 0xb9, 0xc7, 0x3d, 0x70, 0xe6, 0x53, 0x4e, 0x6c, 0x4c,
	0x26, 0x51, 0x95, 0x13, 0xc1, 0x1d, 0x57, 0x5a, 0x3f, 0x46, 0x9c, 0xd5, 0xc0, 0x3a, 0xe9, 0xac,
	0x4a, 0x23, 0xb3, 0x1a, 0x5f, 0x36, 0x0f, 0xe0, 0x8b, 0x83, 0xc7, 0xed, 0xbd, 0xe8, 0xf3, 0x20,
	0x77, 0x5a, 0x33, 0x4e, 0xfb, 0x44, 0xfa, 0x69, 0xff, 0x01, 0x82, 0x0b, 0x43, 0xd6, 0x8f, 0x4a,
	0x6a, 0xca, 0x17, 0x0c, 0xcf, 0xda, 0xf2, 0x90, 0xb3, 0x11, 0x73, 0x1a, 0x94, 0x54, 0x22, 0x7a,
	0x29, 0x9b, 0x3c, 0x24, 0x89, 0x03, 0x2a, 0x08, 0xc9, 0xb8, 0xb6, 0xce, 0xdf, 0x83, 0x18, 0xa4,
	0x2f, 0x98, 0x27, 0x06, 0xa5, 0x31, 0xc6, 0x60, 0x7c, 0xfb, 0x6b, 0x8b, 0xdf, 0x76, 0x75, 0xaa,
	0x6d, 0x7a, 0x9f, 0x92, 0xc4, 0xb9, 0x47, 0xed, 0xc7, 0x6e, 0x14, 0x8a, 0x81, 0xa6, 0x0e, 0x0d,
	0x36, 0x75, 0x3d, 0x58, 0x48, 0x75, 0xc2, 0x43, 0xd3, 0x80, 0xb2, 0xb7, 0xfb, 0xd8, 0xe7, 0x2a,
	0x0f, 0x46, 0x4d, 0x5c, 0xd1, 0xe8, 0x16, 0xf7, 0xe1, 0x75, 0x25, 0xb1, 0xfa, 0x16, 0x44, 0xe4,
	0x98, 0xc5, 0x57, 0x91, 0x7f, 0x83, 0x40, 0x4a, 0x37, 0xcf, 0x71, 0x24, 0xce, 0xc0, 0x2b, 0x56,
	0xaf, 0xa9, 0x78, 0xb5, 0x7d, 0x22, 0xac, 0xed, 0x0f, 0xc8, 0x1e, 0xae, 0xc0, 0x64, 0x87, 0xec,
	0x2a, 0xc1, 0xcb, 0x92, 0xdf, 0x6b, 0x76, 0xc8, 0x6e, 0xdd, 0x7f, 0xff, 0x56, 0x9c, 0xcd, 0x61,
	0xc6, 0x66, 0x3e, 0x93, 0xcd, 0x00, 0xf6, 0xf9, 0xe8, 0x96, 0xde, 0xf2, 0x1b, 0x1a, 0xb6, 0x0b,
	0x82, 0x0e, 0xe1, 0x6a, 0x74, 0x07, 0x27, 0x5f, 0xf3, 0x70, 0xce, 0xc0, 0x11, 0xb6, 0x31, 0x78,
	0xa5, 0xf6, 0x1f, 0xe2, 0x8d, 0xc7, 0xbb, 0xe1, 0x67, 0x7f, 0xac, 0x48, 0xca, 0x6e, 0x54, 0xbc,
	0xfb, 0x0d, 0xc2, 0x3c, 0x9d, 0xe8, 0x53, 0x0c, 0x32, 0x6b, 0x77, 0xd2, 0x4b, 0x50, 0xda, 0xdc,
	0xc4, 0xa8, 0xfc, 0x10, 0xde, 0x08, 0x56, 0x7d, 0x62, 0xea, 0xee, 0xa3, 0x9d, 0x2d, 0x5f, 0x60,
	0xa8, 0xdb, 0xba, 0x46, 0xea, 0x36, 0xb5, 0xa8, 0xa3, 0x1a, 0xf9, 0xeb, 0xd3, 0x47, 0x08, 0x96,
	0xf3, 0xf8, 0xe3, 0x8c, 0x1e, 0xc0, 0x31, 0x8b, 0x8f, 0x71, 0x2a, 0xe2, 0x8d, 0x97, 0xe1, 0x2a,
	0x74, 0xe0, 0x35, 0x7d, 0x2d, 0xb2, 0xa3, 0xf6, 0x8c, 0xe0, 0xd6, 0x0c, 0x1e, 0xe5, 0xf3, 0xbc,
	0x97, 0x8c, 0xa7, 0xab, 0xbf, 0x49, 0x91, 0xf7, 0x40, 0xce, 0x32, 0xfa, 0x3c, 0x1b, 0xa8, 0x33,
	0x30, 0xcb, 0x96, 0x7e, 0x48, 0x5b, 0xc4, 0x70, 0x36, 0x8c, 0x20, 0xe0, 0x72, 0x1d, 0x4e, 0xf7,
	0xbf, 0xe0, 0x38, 0xae, 0xc1, 0x11, 0xa6, 0xf3, 0xf0, 0xf3, 0x2a, 0x09, 0x17, 0x67, 0xd3, 0xf8,
	0x9a, 0xbe, 0xb9, 0xbc, 0x06, 0x67, 0xa2, 0x5d, 0x66, 0x3d, 0xd4, 0x4d, 0x62, 0x0f, 0xef, 0xc5,
	0xbf, 0x1d, 0x69, 0x32, 0xd1, 0x24, 0x0e, 0xe4, 0x2d, 0x28, 0x87, 0x7a, 0x12, 0x8f, 0xc4, 0x7c,
	0xca, 0x76, 0xf4, 0x67, 0x06, 0xc7, 0xcd, 0xe5, 0xcf, 0xb2, 0xca, 0x21, 0x6d, 0x18, 0x46, 0x3f,
	0xa4, 0x71, 0x95, 0x89, 0x9f, 0xa2, 0x48, 0xc2, 0x19, 0xc6, 0xa0, 0x54, 0x98, 0xc1, 0xd8, 0x6e,
	0xfc, 0xd5, 0x1f, 0x9d, 0x83, 0x23, 0x0c, 0x27, 0xfe, 0x1e, 0x82, 0xa3, 0xbe, 0x48, 0x86, 0x97,
	0x84, 0x60, 0x06, 0x15, 0x39, 0xe9, 0xe2, 0x70, 0x43, 0x7f, 0x4d, 0x79, 0xf5, 0xbb, 0x9f, 0xfe,
	0xeb, 0xa3, 0x89, 0x4b, 0x78, 0xb9, 0x66, 0xd9, 0xb4, 0xd5, 0xd3, 0x5c, 0x47, 0xd3, 0xd3, 0x34,
	0x59, 0xae, 0xdf, 0xe2, 0x9f, 0x21, 0x28, 0x87, 0x1f, 0x63, 0xf8, 0x72, 0xfa, 0x5a, 0x02, 0xe5,
	0x4e, 0xaa, 0xe6, 0x35, 0xe7, 0x00, 0xdf, 0x64, 0x00, 0xaf, 0xe3, 0xf5, 0x3c, 0x00, 0xa3, 0x5f,
	0xfb, 0x4c, 0x6d, 0x3a, 0xc0, 0x3f, 0x41, 0x30, 0x15, 0x3a, 0xdd, 0x30, 0x8c, 0x2c, 0xb8, 0x02,
	0x55, 0x2f, 0x0b, 0xae, 0x48, 0x9f, 0x93, 0xd7, 0x19, 0xdc, 0x1a, 0xbe, 0x5c, 0x08, 0x2e, 0xfe,
	0x15, 0x82, 0xc9, 0x58, 0x59, 0xc4, 0xb5, 0xcc, 0x28, 0x0d, 0x7e, 0x3e, 0x4b, 0x57, 0xf2, 0x4f,
	0xe0, 0x48, 0xef, 0x30, 0xa4, 0x37, 0xf0, 0xf5, 0x9c, 0x99, 0x0f, 0x1c, 0x84, 0xa1, 0xfd, 0x05,
	0x82, 0xe9, 0x98, 0x63, 0x2f, 0xb8, 0xb5, 0xcc, 0x68, 0x15, 0x83, 0x2d, 0x16, 0xd4, 0xe4, 0xeb,
	0x0c, 0xf6, 0x0a, 0xae, 0x15, 0x84, 0x8d, 0xff, 0x83, 0x40, 0x4a, 0x17, 0x9d, 0xf0, 0xcd, 0x7c,
	0xfb, 0x52, 0xa8, 0x82, 0x49, 0xb7, 0x46, 0x9b, 0xcc, 0x29, 0x3d, 0x62, 0x94, 0xde, 0xc1, 0xdb,
	0x79, 0x28, 0xb5, 0x89, 0xab, 0x84, 0x4f, 0x4e, 0x52, 0x16, 0x73, 0x6a, 0xfb, 0x7a, 0xcb, 0x39,
	0xc0, 0x7f, 0x41, 0x30, 0x23, 0x52, 0x4b, 0xf0, 0x7a, 0x3a, 0xce, 0x0c, 0x6d, 0x46, 0xba, 0x56,
	0x74, 0x1a, 0x27, 0xf6, 0x80, 0x11, 0xbb, 0x8b, 0xb7, 0x0a, 0x1d, 0x06, 0x25, 0xb1, 0xd9, 0x78,
	0xe5, 0x39, 0xc0, 0xbf, 0x47, 0x70, 0x72, 0x40, 0x8a, 0xc1, 0xab, 0x99, 0x91, 0x17, 0x0a, 0x3b,
	0xd2, 0x5a, 0xa1, 0x39, 0xa3, 0x1c, 0x17, 0x2f, 0x49, 0x36, 0xf3, 0x13, 0xe6, 0x06, 0x3f, 0x47,
	0x30, 0x9d, 0xec, 0x01, 0x86, 0x80, 0x17, 0x36, 0x27, 0x43, 0xc0, 0x8b, 0x7b, 0x15, 0xf9, 0x09,
	0x03, 0xff, 0x08, 0x3f, 0xcc, 0x03, 0xbe, 0xbf, 0xab, 0xa9, 0xed, 0x8b, 0xbf, 0x48, 0x0f, 0xf0,
	0x6f, 0x11, 0x9c, 0x4c, 0xae, 0xe8, 0x5d, 0x02, 0xab, 0x99, 0x67, 0xba, 0x30, 0xab, 0x54, 0x85,
	0x47, 0xbe, 0xc5, 0x58, 0x5d, 0xc3, 0x57, 0x47, 0x61, 0x85, 0x7f, 0x87, 0x60, 0x2a, 0xae, 0x10,
	0xe0, 0xec, 0x2b, 0x54, 0x20, 0x7b, 0x48, 0x2b, 0x05, 0x66, 0x70, 0xcc, 0xdb, 0x0c, 0xf3, 0x06,
	0xbe, 0x93, 0x07, 0x73, 0x42, 0xea, 0xa8, 0xed, 0xc7, 0xce, 0xc5, 0x81, 0x57, 0x31, 0x4e, 0xc4,
	0x57, 0xf0, 0x22, 0x9f, 0x7d, 0x9b, 0x16, 0x64, 0x90, 0x22, 0xc1, 0xc8, 0x37, 0x18, 0x83, 0x35,
	0xbc, 0x52, 0x98, 0x01, 0xfe, 0x1f, 0x82, 0x59, 0xe1, 0x67, 0x34, 0xbe, 0x91, 0x73, 0x57, 0x0f,
	0x0a, 0x08, 0xd2, 0x97, 0x47, 0x99, 0xca, 0xb9, 0x7c, 0x87, 0x71, 0x69, 0xe1, 0x66, 0xd1, 0x1d,
	0x14, 0x13, 0x0d, 0x92, 0x79, 0x49, 0x3f, 0x2c, 0x7f, 0x45, 0x30, 0x27, 0x44, 0xe3, 0x65, 0xee,
	0x46, 0xce, 0xfd, 0x5f, 0x8c, 0xff, 0x30, 0x29, 0x44, 0xde, 0x62, 0xfc, 0xdf, 0xc4, 0x37, 0x3f,
	0x03, 0x7f, 0xfc, 0x67, 0x04, 0x78, 0x50, 0x53, 0xc0, 0x19, 0x47, 0x3a, 0x55, 0xc6, 0x90, 0xae,
	0x16, 0x9b, 0xc4, 0x69, 0xd4, 0x19, 0x8d, 0xaf, 0xe0, 0xfb, 0xb9, 0x7a, 0x82, 0x40, 0x12, 0x20,
	0x8e, 0xb2, 0x43, 0x6d, 0x2f, 0x57, 0x6d, 0x52, 0xdb, 0x4f, 0x26, 0xeb, 0x63, 0x04, 0x27, 0xfa,
	0xbe, 0xea, 0x87, 0xdc, 0x0f, 0x02, 0x7d, 0x60, 0xc8, 0xfd, 0x20, 0x92, 0x0c, 0x8a, 0xb5, 0xbb,
	0x5e, 0x99, 0x09, 0xfe, 0xf7, 0x85, 0x65, 0x07, 0xff, 0x1a, 0xc1, 0x74, 0xf2, 0x6b, 0x7f, 0x48,
	0x91, 0x11, 0x2a, 0x10, 0x43, 0x8a, 0x8c, 0x58, 0x94, 0x90, 0x6f, 0x32, 0xe8, 0xeb, 0x78, 0x2d,
	0x0f, 0xf4, 0x3e, 0xf9, 0x02, 0xff, 0x17, 0xc1, 0x7c, 0xa6, 0x52, 0x80, 0x6f, 0x67, 0x62, 0x1a,
	0x2a, 0x59, 0x48, 0x77, 0x46, 0x9e, 0xcf, 0xf9, 0x7d, 0x8d, 0xf1, 0xbb, 0x8f, 0xef, 0xe5, 0x4d,
	0x4d, 0xdf, 0x5f, 0x6a, 0x28, 0x96, 0xe7, 0x56, 0x09, 0x55, 0x8a, 0x3f, 0x21, 0x98, 0x15, 0x4a,
	0x0c, 0x38, 0xa3, 0xdf, 0xca, 0x12, 0x2e, 0xa4, 0xeb, 0x85, 0xe7, 0x71, 0x6a, 0x6f, 0x33, 0x6a,
	0xb7, 0xf1, 0xad, 0x3c, 0xd4, 0x12, 0x3b, 0x2e, 0x5e, 0x51, 0x7f, 0x88, 0xa0, 0x1c, 0xea, 0x13,
	0x78, 0x39, 0x1d, 0x4c, 0xbf, 0xba, 0x21, 0x7d, 0x29, 0x97, 0x2d, 0x07, 0x7b, 0x8d, 0x81, 0xbd,
	0x82, 0xab, 0x79, 0xc0, 0x32, 0xad, 0xc3, 0x51, 0x54, 0xc3, 0xc0, 0xcf, 0x10, 0x1c, 0x0b, 0x3e,
	0xdc, 0xf1, 0xa5, 0x21, 0x3b, 0x3c, 0xa1, 0x3e, 0x48, 0x97, 0x73, 0x5a, 0x8f, 0xd2, 0x2b, 0x86,
	0x8a, 0x43, 0xac, 0xd7, 0xfd, 0x31, 0x82, 0xc9, 0xc0, 0xab, 0x17, 0xcb, 0x4b, 0x99, 0x77, 0x7c,
	0x01, 0xb4, 0x02, 0xd5, 0xa3, 0xd8, 0x27, 0x6b, 0x88, 0x76, 0xf3, 0xd1, 0x27, 0x2f, 0x2a, 0xe8,
	0xf9, 0x8b, 0x0a, 0xfa, 0xe7, 0x8b, 0x0a, 0xfa, 0xfe, 0xcb, 0xca, 0xa1, 0xe7, 0x2f, 0x2b, 0x87,
	0xfe, 0xf6, 0xb2, 0x72, 0xe8, 0x5b, 0xeb, 0x6d, 0xdd, 0xed, 0xf4, 0x9a, 0x55, 0x8d, 0x76, 0xd3,
	0x5d, 0xee, 0xc6, 0x9d, 0xee, 0x59, 0xc4, 0x69, 0x1e, 0x65, 0x7f, 0x63, 0xb4, 0xf6, 0xff, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xef, 0xfa, 0x7b, 0x2f, 0xe4, 0x26, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of Inference items.
	Inference(ctx context.Context, in *QueryGetInferenceRequest, opts ...grpc.CallOption) (*QueryGetInferenceResponse, error)
	InferenceAll(ctx context.Context, in *QueryAllInferenceRequest, opts ...grpc.CallOption) (*QueryAllInferenceResponse, error)
	// Queries a list of Participant items.
	Participant(ctx context.Context, in *QueryGetParticipantRequest, opts ...grpc.CallOption) (*QueryGetParticipantResponse, error)
	ParticipantAll(ctx context.Context, in *QueryAllParticipantRequest, opts ...grpc.CallOption) (*QueryAllParticipantResponse, error)
	// Queries a list of GetInferencesWithExecutors items.
	GetInferencesWithExecutors(ctx context.Context, in *QueryGetInferencesWithExecutorsRequest, opts ...grpc.CallOption) (*QueryGetInferencesWithExecutorsResponse, error)
	// Queries a list of InferenceParticipant items.
	InferenceParticipant(ctx context.Context, in *QueryInferenceParticipantRequest, opts ...grpc.CallOption) (*QueryInferenceParticipantResponse, error)
	// Queries a list of GetRandomExecutor items.
	GetRandomExecutor(ctx context.Context, in *QueryGetRandomExecutorRequest, opts ...grpc.CallOption) (*QueryGetRandomExecutorResponse, error)
	// Queries a list of EpochGroupData items.
	EpochGroupData(ctx context.Context, in *QueryGetEpochGroupDataRequest, opts ...grpc.CallOption) (*QueryGetEpochGroupDataResponse, error)
	EpochGroupDataAll(ctx context.Context, in *QueryAllEpochGroupDataRequest, opts ...grpc.CallOption) (*QueryAllEpochGroupDataResponse, error)
	// Queries a list of SettleAmount items.
	SettleAmount(ctx context.Context, in *QueryGetSettleAmountRequest, opts ...grpc.CallOption) (*QueryGetSettleAmountResponse, error)
	SettleAmountAll(ctx context.Context, in *QueryAllSettleAmountRequest, opts ...grpc.CallOption) (*QueryAllSettleAmountResponse, error)
	// Queries a list of EpochGroupValidations items.
	EpochGroupValidations(ctx context.Context, in *QueryGetEpochGroupValidationsRequest, opts ...grpc.CallOption) (*QueryGetEpochGroupValidationsResponse, error)
	EpochGroupValidationsAll(ctx context.Context, in *QueryAllEpochGroupValidationsRequest, opts ...grpc.CallOption) (*QueryAllEpochGroupValidationsResponse, error)
	// Queries a list of PocBatchesForStage items.
	PocBatchesForStage(ctx context.Context, in *QueryPocBatchesForStageRequest, opts ...grpc.CallOption) (*QueryPocBatchesForStageResponse, error)
	// Queries a list of GetCurrentEpoch items.
	GetCurrentEpoch(ctx context.Context, in *QueryGetCurrentEpochRequest, opts ...grpc.CallOption) (*QueryGetCurrentEpochResponse, error)
	// Queries a TokenomicsData by index.
	TokenomicsData(ctx context.Context, in *QueryGetTokenomicsDataRequest, opts ...grpc.CallOption) (*QueryGetTokenomicsDataResponse, error)
	// Queries a list of GetUnitOfComputePriceProposal items.
	GetUnitOfComputePriceProposal(ctx context.Context, in *QueryGetUnitOfComputePriceProposalRequest, opts ...grpc.CallOption) (*QueryGetUnitOfComputePriceProposalResponse, error)
	// Queries a list of CurrentEpochGroupData items.
	CurrentEpochGroupData(ctx context.Context, in *QueryCurrentEpochGroupDataRequest, opts ...grpc.CallOption) (*QueryCurrentEpochGroupDataResponse, error)
	// Queries a list of ModelsAll items.
	ModelsAll(ctx context.Context, in *QueryModelsAllRequest, opts ...grpc.CallOption) (*QueryModelsAllResponse, error)
	// Queries a list of TopMiner items.
	TopMiner(ctx context.Context, in *QueryGetTopMinerRequest, opts ...grpc.CallOption) (*QueryGetTopMinerResponse, error)
	TopMinerAll(ctx context.Context, in *QueryAllTopMinerRequest, opts ...grpc.CallOption) (*QueryAllTopMinerResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Inference(ctx context.Context, in *QueryGetInferenceRequest, opts ...grpc.CallOption) (*QueryGetInferenceResponse, error) {
	out := new(QueryGetInferenceResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/Inference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InferenceAll(ctx context.Context, in *QueryAllInferenceRequest, opts ...grpc.CallOption) (*QueryAllInferenceResponse, error) {
	out := new(QueryAllInferenceResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/InferenceAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Participant(ctx context.Context, in *QueryGetParticipantRequest, opts ...grpc.CallOption) (*QueryGetParticipantResponse, error) {
	out := new(QueryGetParticipantResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/Participant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ParticipantAll(ctx context.Context, in *QueryAllParticipantRequest, opts ...grpc.CallOption) (*QueryAllParticipantResponse, error) {
	out := new(QueryAllParticipantResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/ParticipantAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetInferencesWithExecutors(ctx context.Context, in *QueryGetInferencesWithExecutorsRequest, opts ...grpc.CallOption) (*QueryGetInferencesWithExecutorsResponse, error) {
	out := new(QueryGetInferencesWithExecutorsResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/GetInferencesWithExecutors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InferenceParticipant(ctx context.Context, in *QueryInferenceParticipantRequest, opts ...grpc.CallOption) (*QueryInferenceParticipantResponse, error) {
	out := new(QueryInferenceParticipantResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/InferenceParticipant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetRandomExecutor(ctx context.Context, in *QueryGetRandomExecutorRequest, opts ...grpc.CallOption) (*QueryGetRandomExecutorResponse, error) {
	out := new(QueryGetRandomExecutorResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/GetRandomExecutor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EpochGroupData(ctx context.Context, in *QueryGetEpochGroupDataRequest, opts ...grpc.CallOption) (*QueryGetEpochGroupDataResponse, error) {
	out := new(QueryGetEpochGroupDataResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/EpochGroupData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EpochGroupDataAll(ctx context.Context, in *QueryAllEpochGroupDataRequest, opts ...grpc.CallOption) (*QueryAllEpochGroupDataResponse, error) {
	out := new(QueryAllEpochGroupDataResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/EpochGroupDataAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SettleAmount(ctx context.Context, in *QueryGetSettleAmountRequest, opts ...grpc.CallOption) (*QueryGetSettleAmountResponse, error) {
	out := new(QueryGetSettleAmountResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/SettleAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SettleAmountAll(ctx context.Context, in *QueryAllSettleAmountRequest, opts ...grpc.CallOption) (*QueryAllSettleAmountResponse, error) {
	out := new(QueryAllSettleAmountResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/SettleAmountAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EpochGroupValidations(ctx context.Context, in *QueryGetEpochGroupValidationsRequest, opts ...grpc.CallOption) (*QueryGetEpochGroupValidationsResponse, error) {
	out := new(QueryGetEpochGroupValidationsResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/EpochGroupValidations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EpochGroupValidationsAll(ctx context.Context, in *QueryAllEpochGroupValidationsRequest, opts ...grpc.CallOption) (*QueryAllEpochGroupValidationsResponse, error) {
	out := new(QueryAllEpochGroupValidationsResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/EpochGroupValidationsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PocBatchesForStage(ctx context.Context, in *QueryPocBatchesForStageRequest, opts ...grpc.CallOption) (*QueryPocBatchesForStageResponse, error) {
	out := new(QueryPocBatchesForStageResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/PocBatchesForStage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetCurrentEpoch(ctx context.Context, in *QueryGetCurrentEpochRequest, opts ...grpc.CallOption) (*QueryGetCurrentEpochResponse, error) {
	out := new(QueryGetCurrentEpochResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/GetCurrentEpoch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenomicsData(ctx context.Context, in *QueryGetTokenomicsDataRequest, opts ...grpc.CallOption) (*QueryGetTokenomicsDataResponse, error) {
	out := new(QueryGetTokenomicsDataResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/TokenomicsData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetUnitOfComputePriceProposal(ctx context.Context, in *QueryGetUnitOfComputePriceProposalRequest, opts ...grpc.CallOption) (*QueryGetUnitOfComputePriceProposalResponse, error) {
	out := new(QueryGetUnitOfComputePriceProposalResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/GetUnitOfComputePriceProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CurrentEpochGroupData(ctx context.Context, in *QueryCurrentEpochGroupDataRequest, opts ...grpc.CallOption) (*QueryCurrentEpochGroupDataResponse, error) {
	out := new(QueryCurrentEpochGroupDataResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/CurrentEpochGroupData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ModelsAll(ctx context.Context, in *QueryModelsAllRequest, opts ...grpc.CallOption) (*QueryModelsAllResponse, error) {
	out := new(QueryModelsAllResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/ModelsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TopMiner(ctx context.Context, in *QueryGetTopMinerRequest, opts ...grpc.CallOption) (*QueryGetTopMinerResponse, error) {
	out := new(QueryGetTopMinerResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/TopMiner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TopMinerAll(ctx context.Context, in *QueryAllTopMinerRequest, opts ...grpc.CallOption) (*QueryAllTopMinerResponse, error) {
	out := new(QueryAllTopMinerResponse)
	err := c.cc.Invoke(ctx, "/inference.inference.Query/TopMinerAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of Inference items.
	Inference(context.Context, *QueryGetInferenceRequest) (*QueryGetInferenceResponse, error)
	InferenceAll(context.Context, *QueryAllInferenceRequest) (*QueryAllInferenceResponse, error)
	// Queries a list of Participant items.
	Participant(context.Context, *QueryGetParticipantRequest) (*QueryGetParticipantResponse, error)
	ParticipantAll(context.Context, *QueryAllParticipantRequest) (*QueryAllParticipantResponse, error)
	// Queries a list of GetInferencesWithExecutors items.
	GetInferencesWithExecutors(context.Context, *QueryGetInferencesWithExecutorsRequest) (*QueryGetInferencesWithExecutorsResponse, error)
	// Queries a list of InferenceParticipant items.
	InferenceParticipant(context.Context, *QueryInferenceParticipantRequest) (*QueryInferenceParticipantResponse, error)
	// Queries a list of GetRandomExecutor items.
	GetRandomExecutor(context.Context, *QueryGetRandomExecutorRequest) (*QueryGetRandomExecutorResponse, error)
	// Queries a list of EpochGroupData items.
	EpochGroupData(context.Context, *QueryGetEpochGroupDataRequest) (*QueryGetEpochGroupDataResponse, error)
	EpochGroupDataAll(context.Context, *QueryAllEpochGroupDataRequest) (*QueryAllEpochGroupDataResponse, error)
	// Queries a list of SettleAmount items.
	SettleAmount(context.Context, *QueryGetSettleAmountRequest) (*QueryGetSettleAmountResponse, error)
	SettleAmountAll(context.Context, *QueryAllSettleAmountRequest) (*QueryAllSettleAmountResponse, error)
	// Queries a list of EpochGroupValidations items.
	EpochGroupValidations(context.Context, *QueryGetEpochGroupValidationsRequest) (*QueryGetEpochGroupValidationsResponse, error)
	EpochGroupValidationsAll(context.Context, *QueryAllEpochGroupValidationsRequest) (*QueryAllEpochGroupValidationsResponse, error)
	// Queries a list of PocBatchesForStage items.
	PocBatchesForStage(context.Context, *QueryPocBatchesForStageRequest) (*QueryPocBatchesForStageResponse, error)
	// Queries a list of GetCurrentEpoch items.
	GetCurrentEpoch(context.Context, *QueryGetCurrentEpochRequest) (*QueryGetCurrentEpochResponse, error)
	// Queries a TokenomicsData by index.
	TokenomicsData(context.Context, *QueryGetTokenomicsDataRequest) (*QueryGetTokenomicsDataResponse, error)
	// Queries a list of GetUnitOfComputePriceProposal items.
	GetUnitOfComputePriceProposal(context.Context, *QueryGetUnitOfComputePriceProposalRequest) (*QueryGetUnitOfComputePriceProposalResponse, error)
	// Queries a list of CurrentEpochGroupData items.
	CurrentEpochGroupData(context.Context, *QueryCurrentEpochGroupDataRequest) (*QueryCurrentEpochGroupDataResponse, error)
	// Queries a list of ModelsAll items.
	ModelsAll(context.Context, *QueryModelsAllRequest) (*QueryModelsAllResponse, error)
	// Queries a list of TopMiner items.
	TopMiner(context.Context, *QueryGetTopMinerRequest) (*QueryGetTopMinerResponse, error)
	TopMinerAll(context.Context, *QueryAllTopMinerRequest) (*QueryAllTopMinerResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Inference(ctx context.Context, req *QueryGetInferenceRequest) (*QueryGetInferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inference not implemented")
}
func (*UnimplementedQueryServer) InferenceAll(ctx context.Context, req *QueryAllInferenceRequest) (*QueryAllInferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InferenceAll not implemented")
}
func (*UnimplementedQueryServer) Participant(ctx context.Context, req *QueryGetParticipantRequest) (*QueryGetParticipantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Participant not implemented")
}
func (*UnimplementedQueryServer) ParticipantAll(ctx context.Context, req *QueryAllParticipantRequest) (*QueryAllParticipantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParticipantAll not implemented")
}
func (*UnimplementedQueryServer) GetInferencesWithExecutors(ctx context.Context, req *QueryGetInferencesWithExecutorsRequest) (*QueryGetInferencesWithExecutorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInferencesWithExecutors not implemented")
}
func (*UnimplementedQueryServer) InferenceParticipant(ctx context.Context, req *QueryInferenceParticipantRequest) (*QueryInferenceParticipantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InferenceParticipant not implemented")
}
func (*UnimplementedQueryServer) GetRandomExecutor(ctx context.Context, req *QueryGetRandomExecutorRequest) (*QueryGetRandomExecutorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandomExecutor not implemented")
}
func (*UnimplementedQueryServer) EpochGroupData(ctx context.Context, req *QueryGetEpochGroupDataRequest) (*QueryGetEpochGroupDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EpochGroupData not implemented")
}
func (*UnimplementedQueryServer) EpochGroupDataAll(ctx context.Context, req *QueryAllEpochGroupDataRequest) (*QueryAllEpochGroupDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EpochGroupDataAll not implemented")
}
func (*UnimplementedQueryServer) SettleAmount(ctx context.Context, req *QueryGetSettleAmountRequest) (*QueryGetSettleAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SettleAmount not implemented")
}
func (*UnimplementedQueryServer) SettleAmountAll(ctx context.Context, req *QueryAllSettleAmountRequest) (*QueryAllSettleAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SettleAmountAll not implemented")
}
func (*UnimplementedQueryServer) EpochGroupValidations(ctx context.Context, req *QueryGetEpochGroupValidationsRequest) (*QueryGetEpochGroupValidationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EpochGroupValidations not implemented")
}
func (*UnimplementedQueryServer) EpochGroupValidationsAll(ctx context.Context, req *QueryAllEpochGroupValidationsRequest) (*QueryAllEpochGroupValidationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EpochGroupValidationsAll not implemented")
}
func (*UnimplementedQueryServer) PocBatchesForStage(ctx context.Context, req *QueryPocBatchesForStageRequest) (*QueryPocBatchesForStageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PocBatchesForStage not implemented")
}
func (*UnimplementedQueryServer) GetCurrentEpoch(ctx context.Context, req *QueryGetCurrentEpochRequest) (*QueryGetCurrentEpochResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentEpoch not implemented")
}
func (*UnimplementedQueryServer) TokenomicsData(ctx context.Context, req *QueryGetTokenomicsDataRequest) (*QueryGetTokenomicsDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenomicsData not implemented")
}
func (*UnimplementedQueryServer) GetUnitOfComputePriceProposal(ctx context.Context, req *QueryGetUnitOfComputePriceProposalRequest) (*QueryGetUnitOfComputePriceProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnitOfComputePriceProposal not implemented")
}
func (*UnimplementedQueryServer) CurrentEpochGroupData(ctx context.Context, req *QueryCurrentEpochGroupDataRequest) (*QueryCurrentEpochGroupDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentEpochGroupData not implemented")
}
func (*UnimplementedQueryServer) ModelsAll(ctx context.Context, req *QueryModelsAllRequest) (*QueryModelsAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModelsAll not implemented")
}
func (*UnimplementedQueryServer) TopMiner(ctx context.Context, req *QueryGetTopMinerRequest) (*QueryGetTopMinerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopMiner not implemented")
}
func (*UnimplementedQueryServer) TopMinerAll(ctx context.Context, req *QueryAllTopMinerRequest) (*QueryAllTopMinerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopMinerAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Inference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetInferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Inference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/Inference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Inference(ctx, req.(*QueryGetInferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InferenceAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllInferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InferenceAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/InferenceAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InferenceAll(ctx, req.(*QueryAllInferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Participant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetParticipantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Participant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/Participant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Participant(ctx, req.(*QueryGetParticipantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ParticipantAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllParticipantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ParticipantAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/ParticipantAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ParticipantAll(ctx, req.(*QueryAllParticipantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetInferencesWithExecutors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetInferencesWithExecutorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetInferencesWithExecutors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/GetInferencesWithExecutors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetInferencesWithExecutors(ctx, req.(*QueryGetInferencesWithExecutorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InferenceParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInferenceParticipantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InferenceParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/InferenceParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InferenceParticipant(ctx, req.(*QueryInferenceParticipantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetRandomExecutor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRandomExecutorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetRandomExecutor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/GetRandomExecutor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetRandomExecutor(ctx, req.(*QueryGetRandomExecutorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EpochGroupData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEpochGroupDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EpochGroupData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/EpochGroupData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EpochGroupData(ctx, req.(*QueryGetEpochGroupDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EpochGroupDataAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllEpochGroupDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EpochGroupDataAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/EpochGroupDataAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EpochGroupDataAll(ctx, req.(*QueryAllEpochGroupDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SettleAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSettleAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SettleAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/SettleAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SettleAmount(ctx, req.(*QueryGetSettleAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SettleAmountAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSettleAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SettleAmountAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/SettleAmountAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SettleAmountAll(ctx, req.(*QueryAllSettleAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EpochGroupValidations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEpochGroupValidationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EpochGroupValidations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/EpochGroupValidations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EpochGroupValidations(ctx, req.(*QueryGetEpochGroupValidationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EpochGroupValidationsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllEpochGroupValidationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EpochGroupValidationsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/EpochGroupValidationsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EpochGroupValidationsAll(ctx, req.(*QueryAllEpochGroupValidationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PocBatchesForStage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPocBatchesForStageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PocBatchesForStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/PocBatchesForStage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PocBatchesForStage(ctx, req.(*QueryPocBatchesForStageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetCurrentEpoch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCurrentEpochRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCurrentEpoch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/GetCurrentEpoch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCurrentEpoch(ctx, req.(*QueryGetCurrentEpochRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenomicsData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTokenomicsDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenomicsData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/TokenomicsData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenomicsData(ctx, req.(*QueryGetTokenomicsDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetUnitOfComputePriceProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetUnitOfComputePriceProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetUnitOfComputePriceProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/GetUnitOfComputePriceProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetUnitOfComputePriceProposal(ctx, req.(*QueryGetUnitOfComputePriceProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CurrentEpochGroupData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCurrentEpochGroupDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CurrentEpochGroupData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/CurrentEpochGroupData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CurrentEpochGroupData(ctx, req.(*QueryCurrentEpochGroupDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ModelsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryModelsAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ModelsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/ModelsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ModelsAll(ctx, req.(*QueryModelsAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TopMiner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTopMinerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TopMiner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/TopMiner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TopMiner(ctx, req.(*QueryGetTopMinerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TopMinerAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllTopMinerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TopMinerAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inference.inference.Query/TopMinerAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TopMinerAll(ctx, req.(*QueryAllTopMinerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "inference.inference.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Inference",
			Handler:    _Query_Inference_Handler,
		},
		{
			MethodName: "InferenceAll",
			Handler:    _Query_InferenceAll_Handler,
		},
		{
			MethodName: "Participant",
			Handler:    _Query_Participant_Handler,
		},
		{
			MethodName: "ParticipantAll",
			Handler:    _Query_ParticipantAll_Handler,
		},
		{
			MethodName: "GetInferencesWithExecutors",
			Handler:    _Query_GetInferencesWithExecutors_Handler,
		},
		{
			MethodName: "InferenceParticipant",
			Handler:    _Query_InferenceParticipant_Handler,
		},
		{
			MethodName: "GetRandomExecutor",
			Handler:    _Query_GetRandomExecutor_Handler,
		},
		{
			MethodName: "EpochGroupData",
			Handler:    _Query_EpochGroupData_Handler,
		},
		{
			MethodName: "EpochGroupDataAll",
			Handler:    _Query_EpochGroupDataAll_Handler,
		},
		{
			MethodName: "SettleAmount",
			Handler:    _Query_SettleAmount_Handler,
		},
		{
			MethodName: "SettleAmountAll",
			Handler:    _Query_SettleAmountAll_Handler,
		},
		{
			MethodName: "EpochGroupValidations",
			Handler:    _Query_EpochGroupValidations_Handler,
		},
		{
			MethodName: "EpochGroupValidationsAll",
			Handler:    _Query_EpochGroupValidationsAll_Handler,
		},
		{
			MethodName: "PocBatchesForStage",
			Handler:    _Query_PocBatchesForStage_Handler,
		},
		{
			MethodName: "GetCurrentEpoch",
			Handler:    _Query_GetCurrentEpoch_Handler,
		},
		{
			MethodName: "TokenomicsData",
			Handler:    _Query_TokenomicsData_Handler,
		},
		{
			MethodName: "GetUnitOfComputePriceProposal",
			Handler:    _Query_GetUnitOfComputePriceProposal_Handler,
		},
		{
			MethodName: "CurrentEpochGroupData",
			Handler:    _Query_CurrentEpochGroupData_Handler,
		},
		{
			MethodName: "ModelsAll",
			Handler:    _Query_ModelsAll_Handler,
		},
		{
			MethodName: "TopMiner",
			Handler:    _Query_TopMiner_Handler,
		},
		{
			MethodName: "TopMinerAll",
			Handler:    _Query_TopMinerAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inference/inference/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetInferenceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetInferenceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetInferenceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetInferenceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetInferenceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetInferenceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Inference.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllInferenceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllInferenceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllInferenceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllInferenceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllInferenceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllInferenceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Inference) > 0 {
		for iNdEx := len(m.Inference) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Inference[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetParticipantRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetParticipantRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetParticipantRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetParticipantResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetParticipantResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetParticipantResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Participant.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllParticipantRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllParticipantRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllParticipantRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllParticipantResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllParticipantResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllParticipantResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Participant) > 0 {
		for iNdEx := len(m.Participant) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Participant[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetInferencesWithExecutorsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetInferencesWithExecutorsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetInferencesWithExecutorsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Requester) > 0 {
		i -= len(m.Requester)
		copy(dAtA[i:], m.Requester)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Requester)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Ids) > 0 {
		for iNdEx := len(m.Ids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Ids[iNdEx])
			copy(dAtA[i:], m.Ids[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Ids[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetInferencesWithExecutorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetInferencesWithExecutorsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetInferencesWithExecutorsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CurrentHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CurrentHeight))
		i--
		dAtA[i] = 0x28
	}
	if m.ValidatorPower != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ValidatorPower))
		i--
		dAtA[i] = 0x20
	}
	if m.TotalPower != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalPower))
		i--
		dAtA[i] = 0x18
	}
	if m.NumValidators != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.NumValidators))
		i--
		dAtA[i] = 0x10
	}
	if len(m.InferenceWithExecutor) > 0 {
		for iNdEx := len(m.InferenceWithExecutor) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InferenceWithExecutor[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *InferenceWithExecutor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InferenceWithExecutor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InferenceWithExecutor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CurrentPower != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CurrentPower))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.Executor.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Inference.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryInferenceParticipantRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInferenceParticipantRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInferenceParticipantRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryInferenceParticipantResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInferenceParticipantResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInferenceParticipantResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Balance != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Balance))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Pubkey) > 0 {
		i -= len(m.Pubkey)
		copy(dAtA[i:], m.Pubkey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Pubkey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRandomExecutorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRandomExecutorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRandomExecutorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetRandomExecutorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRandomExecutorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRandomExecutorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Executor.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetEpochGroupDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEpochGroupDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEpochGroupDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PocStartBlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PocStartBlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEpochGroupDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEpochGroupDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEpochGroupDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EpochGroupData.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllEpochGroupDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllEpochGroupDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllEpochGroupDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllEpochGroupDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllEpochGroupDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllEpochGroupDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.EpochGroupData) > 0 {
		for iNdEx := len(m.EpochGroupData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EpochGroupData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSettleAmountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSettleAmountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSettleAmountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Participant) > 0 {
		i -= len(m.Participant)
		copy(dAtA[i:], m.Participant)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Participant)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSettleAmountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSettleAmountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSettleAmountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SettleAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllSettleAmountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSettleAmountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSettleAmountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSettleAmountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSettleAmountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSettleAmountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SettleAmount) > 0 {
		for iNdEx := len(m.SettleAmount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SettleAmount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEpochGroupValidationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEpochGroupValidationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEpochGroupValidationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PocStartBlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PocStartBlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Participant) > 0 {
		i -= len(m.Participant)
		copy(dAtA[i:], m.Participant)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Participant)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEpochGroupValidationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEpochGroupValidationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEpochGroupValidationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EpochGroupValidations.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllEpochGroupValidationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllEpochGroupValidationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllEpochGroupValidationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllEpochGroupValidationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllEpochGroupValidationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllEpochGroupValidationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.EpochGroupValidations) > 0 {
		for iNdEx := len(m.EpochGroupValidations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EpochGroupValidations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPocBatchesForStageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPocBatchesForStageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPocBatchesForStageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPocBatchesForStageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPocBatchesForStageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPocBatchesForStageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PocBatch) > 0 {
		for iNdEx := len(m.PocBatch) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PocBatch[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PoCBatchesWithParticipants) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoCBatchesWithParticipants) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoCBatchesWithParticipants) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PocBatch) > 0 {
		for iNdEx := len(m.PocBatch) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PocBatch[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.HexPubKey) > 0 {
		i -= len(m.HexPubKey)
		copy(dAtA[i:], m.HexPubKey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.HexPubKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Participant) > 0 {
		i -= len(m.Participant)
		copy(dAtA[i:], m.Participant)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Participant)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCurrentEpochRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCurrentEpochRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCurrentEpochRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetCurrentEpochResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCurrentEpochResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCurrentEpochResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Epoch != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTokenomicsDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTokenomicsDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTokenomicsDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetTokenomicsDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTokenomicsDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTokenomicsDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TokenomicsData.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetUnitOfComputePriceProposalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetUnitOfComputePriceProposalRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetUnitOfComputePriceProposalRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Participant) > 0 {
		i -= len(m.Participant)
		copy(dAtA[i:], m.Participant)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Participant)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetUnitOfComputePriceProposalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetUnitOfComputePriceProposalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetUnitOfComputePriceProposalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Default != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Default))
		i--
		dAtA[i] = 0x10
	}
	if m.Proposal != nil {
		{
			size, err := m.Proposal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCurrentEpochGroupDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCurrentEpochGroupDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCurrentEpochGroupDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryCurrentEpochGroupDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCurrentEpochGroupDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCurrentEpochGroupDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EpochGroupData.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryModelsAllRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryModelsAllRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryModelsAllRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryModelsAllResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryModelsAllResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryModelsAllResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Model) > 0 {
		for iNdEx := len(m.Model) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Model[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTopMinerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTopMinerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTopMinerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTopMinerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTopMinerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTopMinerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TopMiner.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllTopMinerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTopMinerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTopMinerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTopMinerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTopMinerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTopMinerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TopMiner) > 0 {
		for iNdEx := len(m.TopMiner) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TopMiner[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetInferenceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetInferenceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Inference.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllInferenceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllInferenceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Inference) > 0 {
		for _, e := range m.Inference {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetParticipantRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetParticipantResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Participant.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllParticipantRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllParticipantResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Participant) > 0 {
		for _, e := range m.Participant {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	return n
}

func (m *QueryGetInferencesWithExecutorsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = len(m.Requester)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetInferencesWithExecutorsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.InferenceWithExecutor) > 0 {
		for _, e := range m.InferenceWithExecutor {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.NumValidators != 0 {
		n += 1 + sovQuery(uint64(m.NumValidators))
	}
	if m.TotalPower != 0 {
		n += 1 + sovQuery(uint64(m.TotalPower))
	}
	if m.ValidatorPower != 0 {
		n += 1 + sovQuery(uint64(m.ValidatorPower))
	}
	if m.CurrentHeight != 0 {
		n += 1 + sovQuery(uint64(m.CurrentHeight))
	}
	return n
}

func (m *InferenceWithExecutor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Inference.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.Executor.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.CurrentPower != 0 {
		n += 1 + sovQuery(uint64(m.CurrentPower))
	}
	return n
}

func (m *QueryInferenceParticipantRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryInferenceParticipantResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Balance != 0 {
		n += 1 + sovQuery(uint64(m.Balance))
	}
	return n
}

func (m *QueryGetRandomExecutorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetRandomExecutorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Executor.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetEpochGroupDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PocStartBlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.PocStartBlockHeight))
	}
	return n
}

func (m *QueryGetEpochGroupDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EpochGroupData.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllEpochGroupDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllEpochGroupDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EpochGroupData) > 0 {
		for _, e := range m.EpochGroupData {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSettleAmountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Participant)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSettleAmountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SettleAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllSettleAmountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSettleAmountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SettleAmount) > 0 {
		for _, e := range m.SettleAmount {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEpochGroupValidationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Participant)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.PocStartBlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.PocStartBlockHeight))
	}
	return n
}

func (m *QueryGetEpochGroupValidationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EpochGroupValidations.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllEpochGroupValidationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllEpochGroupValidationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EpochGroupValidations) > 0 {
		for _, e := range m.EpochGroupValidations {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPocBatchesForStageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	return n
}

func (m *QueryPocBatchesForStageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PocBatch) > 0 {
		for _, e := range m.PocBatch {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *PoCBatchesWithParticipants) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Participant)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.HexPubKey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.PocBatch) > 0 {
		for _, e := range m.PocBatch {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetCurrentEpochRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetCurrentEpochResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovQuery(uint64(m.Epoch))
	}
	return n
}

func (m *QueryGetTokenomicsDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetTokenomicsDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TokenomicsData.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetUnitOfComputePriceProposalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Participant)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetUnitOfComputePriceProposalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Proposal != nil {
		l = m.Proposal.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Default != 0 {
		n += 1 + sovQuery(uint64(m.Default))
	}
	return n
}

func (m *QueryCurrentEpochGroupDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryCurrentEpochGroupDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EpochGroupData.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryModelsAllRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryModelsAllResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Model) > 0 {
		for _, e := range m.Model {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetTopMinerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTopMinerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TopMiner.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllTopMinerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTopMinerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TopMiner) > 0 {
		for _, e := range m.TopMiner {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetInferenceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetInferenceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetInferenceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetInferenceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetInferenceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetInferenceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inference", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Inference.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllInferenceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllInferenceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllInferenceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllInferenceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllInferenceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllInferenceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inference", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inference = append(m.Inference, Inference{})
			if err := m.Inference[len(m.Inference)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetParticipantRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetParticipantRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetParticipantRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetParticipantResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetParticipantResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetParticipantResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participant", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Participant.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllParticipantRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllParticipantRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllParticipantRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllParticipantResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllParticipantResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllParticipantResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participant", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participant = append(m.Participant, Participant{})
			if err := m.Participant[len(m.Participant)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetInferencesWithExecutorsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetInferencesWithExecutorsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetInferencesWithExecutorsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ids = append(m.Ids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requester", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requester = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetInferencesWithExecutorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetInferencesWithExecutorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetInferencesWithExecutorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InferenceWithExecutor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InferenceWithExecutor = append(m.InferenceWithExecutor, InferenceWithExecutor{})
			if err := m.InferenceWithExecutor[len(m.InferenceWithExecutor)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumValidators", wireType)
			}
			m.NumValidators = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumValidators |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPower", wireType)
			}
			m.TotalPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalPower |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorPower", wireType)
			}
			m.ValidatorPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorPower |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentHeight", wireType)
			}
			m.CurrentHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentHeight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InferenceWithExecutor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InferenceWithExecutor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InferenceWithExecutor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inference", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Inference.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Executor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentPower", wireType)
			}
			m.CurrentPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentPower |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInferenceParticipantRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInferenceParticipantRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInferenceParticipantRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInferenceParticipantResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInferenceParticipantResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInferenceParticipantResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			m.Balance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Balance |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRandomExecutorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRandomExecutorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRandomExecutorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRandomExecutorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRandomExecutorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRandomExecutorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Executor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEpochGroupDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEpochGroupDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEpochGroupDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PocStartBlockHeight", wireType)
			}
			m.PocStartBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PocStartBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEpochGroupDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEpochGroupDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEpochGroupDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochGroupData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EpochGroupData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllEpochGroupDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllEpochGroupDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllEpochGroupDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllEpochGroupDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllEpochGroupDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllEpochGroupDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochGroupData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochGroupData = append(m.EpochGroupData, EpochGroupData{})
			if err := m.EpochGroupData[len(m.EpochGroupData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSettleAmountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSettleAmountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSettleAmountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSettleAmountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSettleAmountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSettleAmountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettleAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SettleAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSettleAmountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSettleAmountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSettleAmountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSettleAmountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSettleAmountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSettleAmountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettleAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SettleAmount = append(m.SettleAmount, SettleAmount{})
			if err := m.SettleAmount[len(m.SettleAmount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEpochGroupValidationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEpochGroupValidationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEpochGroupValidationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PocStartBlockHeight", wireType)
			}
			m.PocStartBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PocStartBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEpochGroupValidationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEpochGroupValidationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEpochGroupValidationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochGroupValidations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EpochGroupValidations.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllEpochGroupValidationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllEpochGroupValidationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllEpochGroupValidationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllEpochGroupValidationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllEpochGroupValidationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllEpochGroupValidationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochGroupValidations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochGroupValidations = append(m.EpochGroupValidations, EpochGroupValidations{})
			if err := m.EpochGroupValidations[len(m.EpochGroupValidations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPocBatchesForStageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPocBatchesForStageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPocBatchesForStageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPocBatchesForStageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPocBatchesForStageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPocBatchesForStageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PocBatch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PocBatch = append(m.PocBatch, PoCBatchesWithParticipants{})
			if err := m.PocBatch[len(m.PocBatch)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoCBatchesWithParticipants) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoCBatchesWithParticipants: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoCBatchesWithParticipants: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HexPubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HexPubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PocBatch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PocBatch = append(m.PocBatch, PoCBatch{})
			if err := m.PocBatch[len(m.PocBatch)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCurrentEpochRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCurrentEpochRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCurrentEpochRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCurrentEpochResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCurrentEpochResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCurrentEpochResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTokenomicsDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTokenomicsDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTokenomicsDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTokenomicsDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTokenomicsDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTokenomicsDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenomicsData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenomicsData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetUnitOfComputePriceProposalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetUnitOfComputePriceProposalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetUnitOfComputePriceProposalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetUnitOfComputePriceProposalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetUnitOfComputePriceProposalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetUnitOfComputePriceProposalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proposal == nil {
				m.Proposal = &UnitOfComputePriceProposal{}
			}
			if err := m.Proposal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Default", wireType)
			}
			m.Default = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Default |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCurrentEpochGroupDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCurrentEpochGroupDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCurrentEpochGroupDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCurrentEpochGroupDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCurrentEpochGroupDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCurrentEpochGroupDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochGroupData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EpochGroupData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryModelsAllRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryModelsAllRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryModelsAllRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryModelsAllResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryModelsAllResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryModelsAllResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Model = append(m.Model, Model{})
			if err := m.Model[len(m.Model)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTopMinerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTopMinerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTopMinerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTopMinerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTopMinerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTopMinerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopMiner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TopMiner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTopMinerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTopMinerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTopMinerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTopMinerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTopMinerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTopMinerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopMiner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopMiner = append(m.TopMiner, TopMiner{})
			if err := m.TopMiner[len(m.TopMiner)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: inference/collateral/unbonding.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// UnbondingCollateral represents collateral that is in the process of being withdrawn
type UnbondingCollateral struct {
	// participant is the address of the participant withdrawing collateral
	Participant string `protobuf:"bytes,1,opt,name=participant,proto3" json:"participant,omitempty"`
	// amount is the collateral amount being withdrawn
	Amount types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
	// completion_epoch is the epoch when the funds will be released
	CompletionEpoch uint64 `protobuf:"varint,3,opt,name=completion_epoch,json=completionEpoch,proto3" json:"completion_epoch,omitempty"`
}

func (m *UnbondingCollateral) Reset()         { *m = UnbondingCollateral{} }
func (m *UnbondingCollateral) String() string { return proto.CompactTextString(m) }
func (*UnbondingCollateral) ProtoMessage()    {}
func (*UnbondingCollateral) Descriptor() ([]byte, []int) {
	return fileDescriptor_38f0f782a7bd039b, []int{0}
}
func (m *UnbondingCollateral) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnbondingCollateral) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnbondingCollateral.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnbondingCollateral) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnbondingCollateral.Merge(m, src)
}
func (m *UnbondingCollateral) XXX_Size() int {
	return m.Size()
}
func (m *UnbondingCollateral) XXX_DiscardUnknown() {
	xxx_messageInfo_UnbondingCollateral.DiscardUnknown(m)
}

var xxx_messageInfo_UnbondingCollateral proto.InternalMessageInfo

func (m *UnbondingCollateral) GetParticipant() string {
	if m != nil {
		return m.Participant
	}
	return ""
}

func (m *UnbondingCollateral) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *UnbondingCollateral) GetCompletionEpoch() uint64 {
	if m != nil {
		return m.CompletionEpoch
	}
	return 0
}

func init() {
	proto.RegisterType((*UnbondingCollateral)(nil), "inference.collateral.UnbondingCollateral")
}

func init() {
	proto.RegisterFile("inference/collateral/unbonding.proto", fileDescriptor_38f0f782a7bd039b)
}

var fileDescriptor_38f0f782a7bd039b = []byte{
	// 281 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xb1, 0x4e, 0xf3, 0x30,
	0x14, 0x85, 0xe3, 0xff, 0xaf, 0x2a, 0x91, 0x0e, 0xa0, 0xd0, 0x21, 0x74, 0x30, 0x11, 0x62, 0x08,
	0x8b, 0xad, 0x82, 0x04, 0x7b, 0x2b, 0x76, 0x14, 0x89, 0x85, 0x05, 0x39, 0xae, 0x49, 0x2d, 0x25,
	0xbe, 0x56, 0x7c, 0x83, 0xe0, 0x2d, 0xd8, 0x79, 0xa1, 0x8e, 0x1d, 0x99, 0x10, 0x4a, 0x5e, 0x04,
	0x25, 0x29, 0x4d, 0x37, 0xeb, 0xf8, 0xd3, 0x39, 0xba, 0x9f, 0x7f, 0xa9, 0xcd, 0x8b, 0x2a, 0x95,
	0x91, 0x8a, 0x4b, 0xc8, 0x73, 0x81, 0xaa, 0x14, 0x39, 0xaf, 0x4c, 0x0a, 0x66, 0xa5, 0x4d, 0xc6,
	0x6c, 0x09, 0x08, 0xc1, 0x74, 0x4f, 0xb1, 0x81, 0x9a, 0x4d, 0x33, 0xc8, 0xa0, 0x03, 0x78, 0xfb,
	0xea, 0xd9, 0x19, 0x95, 0xe0, 0x0a, 0x70, 0x3c, 0x15, 0x4e, 0xf1, 0xd7, 0x79, 0xaa, 0x50, 0xcc,
	0xb9, 0x04, 0x6d, 0xfa, 0xff, 0x8b, 0x4f, 0xe2, 0x9f, 0x3e, 0xfe, 0xf5, 0x2f, 0xf7, 0x6d, 0x41,
	0xe4, 0x4f, 0xac, 0x28, 0x51, 0x4b, 0x6d, 0x85, 0xc1, 0x90, 0x44, 0x24, 0x3e, 0x4a, 0x0e, 0xa3,
	0xe0, 0xce, 0x1f, 0x8b, 0x02, 0x2a, 0x83, 0xe1, 0xbf, 0x88, 0xc4, 0x93, 0xeb, 0x33, 0xd6, 0x4f,
	0xb1, 0x76, 0x8a, 0xed, 0xa6, 0xd8, 0x12, 0xb4, 0x59, 0x8c, 0x36, 0xdf, 0xe7, 0x5e, 0xb2, 0xc3,
	0x83, 0x2b, 0xff, 0x44, 0x42, 0x61, 0x73, 0x85, 0x1a, 0xcc, 0xb3, 0xb2, 0x20, 0xd7, 0xe1, 0xff,
	0x88, 0xc4, 0xa3, 0xe4, 0x78, 0xc8, 0xef, 0xdb, 0x78, 0xf1, 0xb0, 0xa9, 0x29, 0xd9, 0xd6, 0x94,
	0xfc, 0xd4, 0x94, 0x7c, 0x34, 0xd4, 0xdb, 0x36, 0xd4, 0xfb, 0x6a, 0xa8, 0xf7, 0x74, 0x9b, 0x69,
	0x5c, 0x57, 0x29, 0x93, 0x50, 0x70, 0x5b, 0xc2, 0xaa, 0x92, 0xe8, 0xa4, 0xee, 0xcc, 0x0d, 0x0e,
	0xdf, 0x0e, 0x2d, 0xe2, 0xbb, 0x55, 0x2e, 0x1d, 0x77, 0x67, 0xdf, 0xfc, 0x06, 0x00, 0x00, 0xff,
	0xff, 0x57, 0x4a, 0x64, 0x0c, 0x6a, 0x01, 0x00, 0x00,
}

func (m *UnbondingCollateral) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnbondingCollateral) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnbondingCollateral) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CompletionEpoch != 0 {
		i = encodeVarintUnbonding(dAtA, i, uint64(m.CompletionEpoch))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintUnbonding(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Participant) > 0 {
		i -= len(m.Participant)
		copy(dAtA[i:], m.Participant)
		i = encodeVarintUnbonding(dAtA, i, uint64(len(m.Participant)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintUnbonding(dAtA []byte, offset int, v uint64) int {
	offset -= sovUnbonding(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UnbondingCollateral) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Participant)
	if l > 0 {
		n += 1 + l + sovUnbonding(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovUnbonding(uint64(l))
	if m.CompletionEpoch != 0 {
		n += 1 + sovUnbonding(uint64(m.CompletionEpoch))
	}
	return n
}

func sovUnbonding(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUnbonding(x uint64) (n int) {
	return sovUnbonding(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UnbondingCollateral) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUnbonding
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnbondingCollateral: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnbondingCollateral: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUnbonding
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUnbonding
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUnbonding
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUnbonding
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUnbonding
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUnbonding
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletionEpoch", wireType)
			}
			m.CompletionEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUnbonding
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompletionEpoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUnbonding(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUnbonding
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUnbonding(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUnbonding
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUnbonding
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUnbonding
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUnbonding
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUnbonding
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUnbonding
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUnbonding        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUnbonding          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUnbonding = fmt.Errorf("proto: unexpected end of group")
)

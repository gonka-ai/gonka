// Code generated by MockGen. DO NOT EDIT.
// Source: x/inference/types/expected_keepers.go
//
// Generated by this command:
//
//	mockgen -source=x/inference/types/expected_keepers.go -package keeper -destination=testutil/keeper/expected_keepers_mocks.go
//

// Package keeper is a generated GoMock package.
package keeper

import (
	context "context"
	reflect "reflect"

	math "cosmossdk.io/math"
	types "github.com/cosmos/cosmos-sdk/types"
	types0 "github.com/cosmos/cosmos-sdk/x/bank/types"
	group "github.com/cosmos/cosmos-sdk/x/group"
	keeper "github.com/cosmos/cosmos-sdk/x/staking/keeper"
	types1 "github.com/cosmos/cosmos-sdk/x/staking/types"
	types2 "github.com/productscience/inference/x/inference/types"
	gomock "go.uber.org/mock/gomock"
)

// MockAccountKeeper is a mock of AccountKeeper interface.
type MockAccountKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockAccountKeeperMockRecorder
	isgomock struct{}
}

// MockAccountKeeperMockRecorder is the mock recorder for MockAccountKeeper.
type MockAccountKeeperMockRecorder struct {
	mock *MockAccountKeeper
}

// NewMockAccountKeeper creates a new mock instance.
func NewMockAccountKeeper(ctrl *gomock.Controller) *MockAccountKeeper {
	mock := &MockAccountKeeper{ctrl: ctrl}
	mock.recorder = &MockAccountKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountKeeper) EXPECT() *MockAccountKeeperMockRecorder {
	return m.recorder
}

// GetAccount mocks base method.
func (m *MockAccountKeeper) GetAccount(arg0 context.Context, arg1 types.AccAddress) types.AccountI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0, arg1)
	ret0, _ := ret[0].(types.AccountI)
	return ret0
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockAccountKeeperMockRecorder) GetAccount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockAccountKeeper)(nil).GetAccount), arg0, arg1)
}

// GetModuleAccount mocks base method.
func (m *MockAccountKeeper) GetModuleAccount(ctx context.Context, moduleName string) types.ModuleAccountI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModuleAccount", ctx, moduleName)
	ret0, _ := ret[0].(types.ModuleAccountI)
	return ret0
}

// GetModuleAccount indicates an expected call of GetModuleAccount.
func (mr *MockAccountKeeperMockRecorder) GetModuleAccount(ctx, moduleName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModuleAccount", reflect.TypeOf((*MockAccountKeeper)(nil).GetModuleAccount), ctx, moduleName)
}

// GetModuleAddress mocks base method.
func (m *MockAccountKeeper) GetModuleAddress(moduleName string) types.AccAddress {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModuleAddress", moduleName)
	ret0, _ := ret[0].(types.AccAddress)
	return ret0
}

// GetModuleAddress indicates an expected call of GetModuleAddress.
func (mr *MockAccountKeeperMockRecorder) GetModuleAddress(moduleName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModuleAddress", reflect.TypeOf((*MockAccountKeeper)(nil).GetModuleAddress), moduleName)
}

// NewAccountWithAddress mocks base method.
func (m *MockAccountKeeper) NewAccountWithAddress(arg0 context.Context, arg1 types.AccAddress) types.AccountI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewAccountWithAddress", arg0, arg1)
	ret0, _ := ret[0].(types.AccountI)
	return ret0
}

// NewAccountWithAddress indicates an expected call of NewAccountWithAddress.
func (mr *MockAccountKeeperMockRecorder) NewAccountWithAddress(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewAccountWithAddress", reflect.TypeOf((*MockAccountKeeper)(nil).NewAccountWithAddress), arg0, arg1)
}

// SetAccount mocks base method.
func (m *MockAccountKeeper) SetAccount(ctx context.Context, acc types.AccountI) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAccount", ctx, acc)
}

// SetAccount indicates an expected call of SetAccount.
func (mr *MockAccountKeeperMockRecorder) SetAccount(ctx, acc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAccount", reflect.TypeOf((*MockAccountKeeper)(nil).SetAccount), ctx, acc)
}

// MockBankKeeper is a mock of BankKeeper interface.
type MockBankKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockBankKeeperMockRecorder
	isgomock struct{}
}

// MockBankKeeperMockRecorder is the mock recorder for MockBankKeeper.
type MockBankKeeperMockRecorder struct {
	mock *MockBankKeeper
}

// NewMockBankKeeper creates a new mock instance.
func NewMockBankKeeper(ctrl *gomock.Controller) *MockBankKeeper {
	mock := &MockBankKeeper{ctrl: ctrl}
	mock.recorder = &MockBankKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBankKeeper) EXPECT() *MockBankKeeperMockRecorder {
	return m.recorder
}

// SpendableCoin mocks base method.
func (m *MockBankKeeper) SpendableCoin(ctx context.Context, addr types.AccAddress, denom string) types.Coin {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpendableCoin", ctx, addr, denom)
	ret0, _ := ret[0].(types.Coin)
	return ret0
}

// SpendableCoin indicates an expected call of SpendableCoin.
func (mr *MockBankKeeperMockRecorder) SpendableCoin(ctx, addr, denom any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpendableCoin", reflect.TypeOf((*MockBankKeeper)(nil).SpendableCoin), ctx, addr, denom)
}

// SpendableCoins mocks base method.
func (m *MockBankKeeper) SpendableCoins(arg0 context.Context, arg1 types.AccAddress) types.Coins {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpendableCoins", arg0, arg1)
	ret0, _ := ret[0].(types.Coins)
	return ret0
}

// SpendableCoins indicates an expected call of SpendableCoins.
func (mr *MockBankKeeperMockRecorder) SpendableCoins(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpendableCoins", reflect.TypeOf((*MockBankKeeper)(nil).SpendableCoins), arg0, arg1)
}

// MockBankEscrowKeeper is a mock of BankEscrowKeeper interface.
type MockBankEscrowKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockBankEscrowKeeperMockRecorder
	isgomock struct{}
}

// MockBankEscrowKeeperMockRecorder is the mock recorder for MockBankEscrowKeeper.
type MockBankEscrowKeeperMockRecorder struct {
	mock *MockBankEscrowKeeper
}

// NewMockBankEscrowKeeper creates a new mock instance.
func NewMockBankEscrowKeeper(ctrl *gomock.Controller) *MockBankEscrowKeeper {
	mock := &MockBankEscrowKeeper{ctrl: ctrl}
	mock.recorder = &MockBankEscrowKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBankEscrowKeeper) EXPECT() *MockBankEscrowKeeperMockRecorder {
	return m.recorder
}

// BurnCoins mocks base method.
func (m *MockBankEscrowKeeper) BurnCoins(ctx context.Context, moduleName string, amt types.Coins) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BurnCoins", ctx, moduleName, amt)
	ret0, _ := ret[0].(error)
	return ret0
}

// BurnCoins indicates an expected call of BurnCoins.
func (mr *MockBankEscrowKeeperMockRecorder) BurnCoins(ctx, moduleName, amt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BurnCoins", reflect.TypeOf((*MockBankEscrowKeeper)(nil).BurnCoins), ctx, moduleName, amt)
}

// GetDenomMetaData mocks base method.
func (m *MockBankEscrowKeeper) GetDenomMetaData(ctx context.Context, denom string) (types0.Metadata, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDenomMetaData", ctx, denom)
	ret0, _ := ret[0].(types0.Metadata)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetDenomMetaData indicates an expected call of GetDenomMetaData.
func (mr *MockBankEscrowKeeperMockRecorder) GetDenomMetaData(ctx, denom any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDenomMetaData", reflect.TypeOf((*MockBankEscrowKeeper)(nil).GetDenomMetaData), ctx, denom)
}

// MintCoins mocks base method.
func (m *MockBankEscrowKeeper) MintCoins(ctx context.Context, moduleName string, amt types.Coins) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MintCoins", ctx, moduleName, amt)
	ret0, _ := ret[0].(error)
	return ret0
}

// MintCoins indicates an expected call of MintCoins.
func (mr *MockBankEscrowKeeperMockRecorder) MintCoins(ctx, moduleName, amt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MintCoins", reflect.TypeOf((*MockBankEscrowKeeper)(nil).MintCoins), ctx, moduleName, amt)
}

// SendCoinsFromAccountToModule mocks base method.
func (m *MockBankEscrowKeeper) SendCoinsFromAccountToModule(ctx context.Context, senderAddr types.AccAddress, recipientModule string, amt types.Coins) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCoinsFromAccountToModule", ctx, senderAddr, recipientModule, amt)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCoinsFromAccountToModule indicates an expected call of SendCoinsFromAccountToModule.
func (mr *MockBankEscrowKeeperMockRecorder) SendCoinsFromAccountToModule(ctx, senderAddr, recipientModule, amt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCoinsFromAccountToModule", reflect.TypeOf((*MockBankEscrowKeeper)(nil).SendCoinsFromAccountToModule), ctx, senderAddr, recipientModule, amt)
}

// SendCoinsFromModuleToAccount mocks base method.
func (m *MockBankEscrowKeeper) SendCoinsFromModuleToAccount(ctx context.Context, senderModule string, recipientAddr types.AccAddress, amt types.Coins) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCoinsFromModuleToAccount", ctx, senderModule, recipientAddr, amt)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCoinsFromModuleToAccount indicates an expected call of SendCoinsFromModuleToAccount.
func (mr *MockBankEscrowKeeperMockRecorder) SendCoinsFromModuleToAccount(ctx, senderModule, recipientAddr, amt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCoinsFromModuleToAccount", reflect.TypeOf((*MockBankEscrowKeeper)(nil).SendCoinsFromModuleToAccount), ctx, senderModule, recipientAddr, amt)
}

// SendCoinsFromModuleToModule mocks base method.
func (m *MockBankEscrowKeeper) SendCoinsFromModuleToModule(ctx context.Context, senderModule, recipientModule string, amt types.Coins) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCoinsFromModuleToModule", ctx, senderModule, recipientModule, amt)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCoinsFromModuleToModule indicates an expected call of SendCoinsFromModuleToModule.
func (mr *MockBankEscrowKeeperMockRecorder) SendCoinsFromModuleToModule(ctx, senderModule, recipientModule, amt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCoinsFromModuleToModule", reflect.TypeOf((*MockBankEscrowKeeper)(nil).SendCoinsFromModuleToModule), ctx, senderModule, recipientModule, amt)
}

// MockGroupMessageKeeper is a mock of GroupMessageKeeper interface.
type MockGroupMessageKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockGroupMessageKeeperMockRecorder
	isgomock struct{}
}

// MockGroupMessageKeeperMockRecorder is the mock recorder for MockGroupMessageKeeper.
type MockGroupMessageKeeperMockRecorder struct {
	mock *MockGroupMessageKeeper
}

// NewMockGroupMessageKeeper creates a new mock instance.
func NewMockGroupMessageKeeper(ctrl *gomock.Controller) *MockGroupMessageKeeper {
	mock := &MockGroupMessageKeeper{ctrl: ctrl}
	mock.recorder = &MockGroupMessageKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupMessageKeeper) EXPECT() *MockGroupMessageKeeperMockRecorder {
	return m.recorder
}

// CreateGroup mocks base method.
func (m *MockGroupMessageKeeper) CreateGroup(goCtx context.Context, msg *group.MsgCreateGroup) (*group.MsgCreateGroupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", goCtx, msg)
	ret0, _ := ret[0].(*group.MsgCreateGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroup indicates an expected call of CreateGroup.
func (mr *MockGroupMessageKeeperMockRecorder) CreateGroup(goCtx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockGroupMessageKeeper)(nil).CreateGroup), goCtx, msg)
}

// CreateGroupWithPolicy mocks base method.
func (m *MockGroupMessageKeeper) CreateGroupWithPolicy(ctx context.Context, msg *group.MsgCreateGroupWithPolicy) (*group.MsgCreateGroupWithPolicyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroupWithPolicy", ctx, msg)
	ret0, _ := ret[0].(*group.MsgCreateGroupWithPolicyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroupWithPolicy indicates an expected call of CreateGroupWithPolicy.
func (mr *MockGroupMessageKeeperMockRecorder) CreateGroupWithPolicy(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroupWithPolicy", reflect.TypeOf((*MockGroupMessageKeeper)(nil).CreateGroupWithPolicy), ctx, msg)
}

// GroupInfo mocks base method.
func (m *MockGroupMessageKeeper) GroupInfo(goCtx context.Context, request *group.QueryGroupInfoRequest) (*group.QueryGroupInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupInfo", goCtx, request)
	ret0, _ := ret[0].(*group.QueryGroupInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupInfo indicates an expected call of GroupInfo.
func (mr *MockGroupMessageKeeperMockRecorder) GroupInfo(goCtx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupInfo", reflect.TypeOf((*MockGroupMessageKeeper)(nil).GroupInfo), goCtx, request)
}

// GroupMembers mocks base method.
func (m *MockGroupMessageKeeper) GroupMembers(goCtx context.Context, request *group.QueryGroupMembersRequest) (*group.QueryGroupMembersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupMembers", goCtx, request)
	ret0, _ := ret[0].(*group.QueryGroupMembersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupMembers indicates an expected call of GroupMembers.
func (mr *MockGroupMessageKeeperMockRecorder) GroupMembers(goCtx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupMembers", reflect.TypeOf((*MockGroupMessageKeeper)(nil).GroupMembers), goCtx, request)
}

// SubmitProposal mocks base method.
func (m *MockGroupMessageKeeper) SubmitProposal(goCtx context.Context, msg *group.MsgSubmitProposal) (*group.MsgSubmitProposalResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitProposal", goCtx, msg)
	ret0, _ := ret[0].(*group.MsgSubmitProposalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitProposal indicates an expected call of SubmitProposal.
func (mr *MockGroupMessageKeeperMockRecorder) SubmitProposal(goCtx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitProposal", reflect.TypeOf((*MockGroupMessageKeeper)(nil).SubmitProposal), goCtx, msg)
}

// UpdateGroupMembers mocks base method.
func (m *MockGroupMessageKeeper) UpdateGroupMembers(goCtx context.Context, msg *group.MsgUpdateGroupMembers) (*group.MsgUpdateGroupMembersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroupMembers", goCtx, msg)
	ret0, _ := ret[0].(*group.MsgUpdateGroupMembersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGroupMembers indicates an expected call of UpdateGroupMembers.
func (mr *MockGroupMessageKeeperMockRecorder) UpdateGroupMembers(goCtx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroupMembers", reflect.TypeOf((*MockGroupMessageKeeper)(nil).UpdateGroupMembers), goCtx, msg)
}

// UpdateGroupMetadata mocks base method.
func (m *MockGroupMessageKeeper) UpdateGroupMetadata(goCtx context.Context, msg *group.MsgUpdateGroupMetadata) (*group.MsgUpdateGroupMetadataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroupMetadata", goCtx, msg)
	ret0, _ := ret[0].(*group.MsgUpdateGroupMetadataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGroupMetadata indicates an expected call of UpdateGroupMetadata.
func (mr *MockGroupMessageKeeperMockRecorder) UpdateGroupMetadata(goCtx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroupMetadata", reflect.TypeOf((*MockGroupMessageKeeper)(nil).UpdateGroupMetadata), goCtx, msg)
}

// Vote mocks base method.
func (m *MockGroupMessageKeeper) Vote(goCtx context.Context, msg *group.MsgVote) (*group.MsgVoteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Vote", goCtx, msg)
	ret0, _ := ret[0].(*group.MsgVoteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Vote indicates an expected call of Vote.
func (mr *MockGroupMessageKeeperMockRecorder) Vote(goCtx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Vote", reflect.TypeOf((*MockGroupMessageKeeper)(nil).Vote), goCtx, msg)
}

// MockParamSubspace is a mock of ParamSubspace interface.
type MockParamSubspace struct {
	ctrl     *gomock.Controller
	recorder *MockParamSubspaceMockRecorder
	isgomock struct{}
}

// MockParamSubspaceMockRecorder is the mock recorder for MockParamSubspace.
type MockParamSubspaceMockRecorder struct {
	mock *MockParamSubspace
}

// NewMockParamSubspace creates a new mock instance.
func NewMockParamSubspace(ctrl *gomock.Controller) *MockParamSubspace {
	mock := &MockParamSubspace{ctrl: ctrl}
	mock.recorder = &MockParamSubspaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParamSubspace) EXPECT() *MockParamSubspaceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockParamSubspace) Get(arg0 context.Context, arg1 []byte, arg2 any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Get", arg0, arg1, arg2)
}

// Get indicates an expected call of Get.
func (mr *MockParamSubspaceMockRecorder) Get(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockParamSubspace)(nil).Get), arg0, arg1, arg2)
}

// Set mocks base method.
func (m *MockParamSubspace) Set(arg0 context.Context, arg1 []byte, arg2 any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", arg0, arg1, arg2)
}

// Set indicates an expected call of Set.
func (mr *MockParamSubspaceMockRecorder) Set(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockParamSubspace)(nil).Set), arg0, arg1, arg2)
}

// MockStakingHooks is a mock of StakingHooks interface.
type MockStakingHooks struct {
	ctrl     *gomock.Controller
	recorder *MockStakingHooksMockRecorder
	isgomock struct{}
}

// MockStakingHooksMockRecorder is the mock recorder for MockStakingHooks.
type MockStakingHooksMockRecorder struct {
	mock *MockStakingHooks
}

// NewMockStakingHooks creates a new mock instance.
func NewMockStakingHooks(ctrl *gomock.Controller) *MockStakingHooks {
	mock := &MockStakingHooks{ctrl: ctrl}
	mock.recorder = &MockStakingHooksMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStakingHooks) EXPECT() *MockStakingHooksMockRecorder {
	return m.recorder
}

// AfterDelegationModified mocks base method.
func (m *MockStakingHooks) AfterDelegationModified(ctx context.Context, delAddr types.AccAddress, valAddr types.ValAddress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AfterDelegationModified", ctx, delAddr, valAddr)
	ret0, _ := ret[0].(error)
	return ret0
}

// AfterDelegationModified indicates an expected call of AfterDelegationModified.
func (mr *MockStakingHooksMockRecorder) AfterDelegationModified(ctx, delAddr, valAddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterDelegationModified", reflect.TypeOf((*MockStakingHooks)(nil).AfterDelegationModified), ctx, delAddr, valAddr)
}

// AfterValidatorBeginUnbonding mocks base method.
func (m *MockStakingHooks) AfterValidatorBeginUnbonding(ctx context.Context, consAddr types.ConsAddress, valAddr types.ValAddress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AfterValidatorBeginUnbonding", ctx, consAddr, valAddr)
	ret0, _ := ret[0].(error)
	return ret0
}

// AfterValidatorBeginUnbonding indicates an expected call of AfterValidatorBeginUnbonding.
func (mr *MockStakingHooksMockRecorder) AfterValidatorBeginUnbonding(ctx, consAddr, valAddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterValidatorBeginUnbonding", reflect.TypeOf((*MockStakingHooks)(nil).AfterValidatorBeginUnbonding), ctx, consAddr, valAddr)
}

// AfterValidatorBonded mocks base method.
func (m *MockStakingHooks) AfterValidatorBonded(ctx context.Context, consAddr types.ConsAddress, valAddr types.ValAddress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AfterValidatorBonded", ctx, consAddr, valAddr)
	ret0, _ := ret[0].(error)
	return ret0
}

// AfterValidatorBonded indicates an expected call of AfterValidatorBonded.
func (mr *MockStakingHooksMockRecorder) AfterValidatorBonded(ctx, consAddr, valAddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterValidatorBonded", reflect.TypeOf((*MockStakingHooks)(nil).AfterValidatorBonded), ctx, consAddr, valAddr)
}

// AfterValidatorCreated mocks base method.
func (m *MockStakingHooks) AfterValidatorCreated(ctx context.Context, valAddr types.ValAddress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AfterValidatorCreated", ctx, valAddr)
	ret0, _ := ret[0].(error)
	return ret0
}

// AfterValidatorCreated indicates an expected call of AfterValidatorCreated.
func (mr *MockStakingHooksMockRecorder) AfterValidatorCreated(ctx, valAddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterValidatorCreated", reflect.TypeOf((*MockStakingHooks)(nil).AfterValidatorCreated), ctx, valAddr)
}

// AfterValidatorRemoved mocks base method.
func (m *MockStakingHooks) AfterValidatorRemoved(ctx context.Context, consAddr types.ConsAddress, valAddr types.ValAddress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AfterValidatorRemoved", ctx, consAddr, valAddr)
	ret0, _ := ret[0].(error)
	return ret0
}

// AfterValidatorRemoved indicates an expected call of AfterValidatorRemoved.
func (mr *MockStakingHooksMockRecorder) AfterValidatorRemoved(ctx, consAddr, valAddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterValidatorRemoved", reflect.TypeOf((*MockStakingHooks)(nil).AfterValidatorRemoved), ctx, consAddr, valAddr)
}

// BeforeDelegationCreated mocks base method.
func (m *MockStakingHooks) BeforeDelegationCreated(ctx context.Context, delAddr types.AccAddress, valAddr types.ValAddress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeforeDelegationCreated", ctx, delAddr, valAddr)
	ret0, _ := ret[0].(error)
	return ret0
}

// BeforeDelegationCreated indicates an expected call of BeforeDelegationCreated.
func (mr *MockStakingHooksMockRecorder) BeforeDelegationCreated(ctx, delAddr, valAddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeDelegationCreated", reflect.TypeOf((*MockStakingHooks)(nil).BeforeDelegationCreated), ctx, delAddr, valAddr)
}

// BeforeDelegationRemoved mocks base method.
func (m *MockStakingHooks) BeforeDelegationRemoved(ctx context.Context, delAddr types.AccAddress, valAddr types.ValAddress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeforeDelegationRemoved", ctx, delAddr, valAddr)
	ret0, _ := ret[0].(error)
	return ret0
}

// BeforeDelegationRemoved indicates an expected call of BeforeDelegationRemoved.
func (mr *MockStakingHooksMockRecorder) BeforeDelegationRemoved(ctx, delAddr, valAddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeDelegationRemoved", reflect.TypeOf((*MockStakingHooks)(nil).BeforeDelegationRemoved), ctx, delAddr, valAddr)
}

// BeforeDelegationSharesModified mocks base method.
func (m *MockStakingHooks) BeforeDelegationSharesModified(ctx context.Context, delAddr types.AccAddress, valAddr types.ValAddress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeforeDelegationSharesModified", ctx, delAddr, valAddr)
	ret0, _ := ret[0].(error)
	return ret0
}

// BeforeDelegationSharesModified indicates an expected call of BeforeDelegationSharesModified.
func (mr *MockStakingHooksMockRecorder) BeforeDelegationSharesModified(ctx, delAddr, valAddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeDelegationSharesModified", reflect.TypeOf((*MockStakingHooks)(nil).BeforeDelegationSharesModified), ctx, delAddr, valAddr)
}

// BeforeValidatorModified mocks base method.
func (m *MockStakingHooks) BeforeValidatorModified(ctx context.Context, valAddr types.ValAddress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeforeValidatorModified", ctx, valAddr)
	ret0, _ := ret[0].(error)
	return ret0
}

// BeforeValidatorModified indicates an expected call of BeforeValidatorModified.
func (mr *MockStakingHooksMockRecorder) BeforeValidatorModified(ctx, valAddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeValidatorModified", reflect.TypeOf((*MockStakingHooks)(nil).BeforeValidatorModified), ctx, valAddr)
}

// BeforeValidatorSlashed mocks base method.
func (m *MockStakingHooks) BeforeValidatorSlashed(ctx context.Context, valAddr types.ValAddress, fraction math.LegacyDec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeforeValidatorSlashed", ctx, valAddr, fraction)
	ret0, _ := ret[0].(error)
	return ret0
}

// BeforeValidatorSlashed indicates an expected call of BeforeValidatorSlashed.
func (mr *MockStakingHooksMockRecorder) BeforeValidatorSlashed(ctx, valAddr, fraction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeValidatorSlashed", reflect.TypeOf((*MockStakingHooks)(nil).BeforeValidatorSlashed), ctx, valAddr, fraction)
}

// MockValidatorSet is a mock of ValidatorSet interface.
type MockValidatorSet struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorSetMockRecorder
	isgomock struct{}
}

// MockValidatorSetMockRecorder is the mock recorder for MockValidatorSet.
type MockValidatorSetMockRecorder struct {
	mock *MockValidatorSet
}

// NewMockValidatorSet creates a new mock instance.
func NewMockValidatorSet(ctrl *gomock.Controller) *MockValidatorSet {
	mock := &MockValidatorSet{ctrl: ctrl}
	mock.recorder = &MockValidatorSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidatorSet) EXPECT() *MockValidatorSetMockRecorder {
	return m.recorder
}

// IterateValidators mocks base method.
func (m *MockValidatorSet) IterateValidators(arg0 context.Context, arg1 func(int64, types1.ValidatorI) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IterateValidators", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// IterateValidators indicates an expected call of IterateValidators.
func (mr *MockValidatorSetMockRecorder) IterateValidators(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IterateValidators", reflect.TypeOf((*MockValidatorSet)(nil).IterateValidators), arg0, arg1)
}

// MockStakingKeeper is a mock of StakingKeeper interface.
type MockStakingKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockStakingKeeperMockRecorder
	isgomock struct{}
}

// MockStakingKeeperMockRecorder is the mock recorder for MockStakingKeeper.
type MockStakingKeeperMockRecorder struct {
	mock *MockStakingKeeper
}

// NewMockStakingKeeper creates a new mock instance.
func NewMockStakingKeeper(ctrl *gomock.Controller) *MockStakingKeeper {
	mock := &MockStakingKeeper{ctrl: ctrl}
	mock.recorder = &MockStakingKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStakingKeeper) EXPECT() *MockStakingKeeperMockRecorder {
	return m.recorder
}

// GetAllValidators mocks base method.
func (m *MockStakingKeeper) GetAllValidators(ctx context.Context) ([]types1.Validator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllValidators", ctx)
	ret0, _ := ret[0].([]types1.Validator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllValidators indicates an expected call of GetAllValidators.
func (mr *MockStakingKeeperMockRecorder) GetAllValidators(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllValidators", reflect.TypeOf((*MockStakingKeeper)(nil).GetAllValidators), ctx)
}

// SetComputeValidators mocks base method.
func (m *MockStakingKeeper) SetComputeValidators(ctx context.Context, computeResults []keeper.ComputeResult) ([]types1.Validator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetComputeValidators", ctx, computeResults)
	ret0, _ := ret[0].([]types1.Validator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetComputeValidators indicates an expected call of SetComputeValidators.
func (mr *MockStakingKeeperMockRecorder) SetComputeValidators(ctx, computeResults any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetComputeValidators", reflect.TypeOf((*MockStakingKeeper)(nil).SetComputeValidators), ctx, computeResults)
}

// MockCollateralKeeper is a mock of CollateralKeeper interface.
type MockCollateralKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockCollateralKeeperMockRecorder
	isgomock struct{}
}

// MockCollateralKeeperMockRecorder is the mock recorder for MockCollateralKeeper.
type MockCollateralKeeperMockRecorder struct {
	mock *MockCollateralKeeper
}

// NewMockCollateralKeeper creates a new mock instance.
func NewMockCollateralKeeper(ctrl *gomock.Controller) *MockCollateralKeeper {
	mock := &MockCollateralKeeper{ctrl: ctrl}
	mock.recorder = &MockCollateralKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollateralKeeper) EXPECT() *MockCollateralKeeperMockRecorder {
	return m.recorder
}

// AdvanceEpoch mocks base method.
func (m *MockCollateralKeeper) AdvanceEpoch(ctx context.Context, completedEpoch uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AdvanceEpoch", ctx, completedEpoch)
}

// AdvanceEpoch indicates an expected call of AdvanceEpoch.
func (mr *MockCollateralKeeperMockRecorder) AdvanceEpoch(ctx, completedEpoch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdvanceEpoch", reflect.TypeOf((*MockCollateralKeeper)(nil).AdvanceEpoch), ctx, completedEpoch)
}

// GetCollateral mocks base method.
func (m *MockCollateralKeeper) GetCollateral(ctx context.Context, participant types.AccAddress) (types.Coin, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollateral", ctx, participant)
	ret0, _ := ret[0].(types.Coin)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetCollateral indicates an expected call of GetCollateral.
func (mr *MockCollateralKeeperMockRecorder) GetCollateral(ctx, participant any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollateral", reflect.TypeOf((*MockCollateralKeeper)(nil).GetCollateral), ctx, participant)
}

// Slash mocks base method.
func (m *MockCollateralKeeper) Slash(ctx context.Context, participant types.AccAddress, slashFraction math.LegacyDec) (types.Coin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Slash", ctx, participant, slashFraction)
	ret0, _ := ret[0].(types.Coin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Slash indicates an expected call of Slash.
func (mr *MockCollateralKeeperMockRecorder) Slash(ctx, participant, slashFraction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Slash", reflect.TypeOf((*MockCollateralKeeper)(nil).Slash), ctx, participant, slashFraction)
}

// MockStreamVestingKeeper is a mock of StreamVestingKeeper interface.
type MockStreamVestingKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockStreamVestingKeeperMockRecorder
	isgomock struct{}
}

// MockStreamVestingKeeperMockRecorder is the mock recorder for MockStreamVestingKeeper.
type MockStreamVestingKeeperMockRecorder struct {
	mock *MockStreamVestingKeeper
}

// NewMockStreamVestingKeeper creates a new mock instance.
func NewMockStreamVestingKeeper(ctrl *gomock.Controller) *MockStreamVestingKeeper {
	mock := &MockStreamVestingKeeper{ctrl: ctrl}
	mock.recorder = &MockStreamVestingKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamVestingKeeper) EXPECT() *MockStreamVestingKeeperMockRecorder {
	return m.recorder
}

// AddVestedRewards mocks base method.
func (m *MockStreamVestingKeeper) AddVestedRewards(ctx context.Context, participantAddress string, amount types.Coins, vestingEpochs *uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddVestedRewards", ctx, participantAddress, amount, vestingEpochs)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddVestedRewards indicates an expected call of AddVestedRewards.
func (mr *MockStreamVestingKeeperMockRecorder) AddVestedRewards(ctx, participantAddress, amount, vestingEpochs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVestedRewards", reflect.TypeOf((*MockStreamVestingKeeper)(nil).AddVestedRewards), ctx, participantAddress, amount, vestingEpochs)
}

// AdvanceEpoch mocks base method.
func (m *MockStreamVestingKeeper) AdvanceEpoch(ctx context.Context, completedEpoch uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdvanceEpoch", ctx, completedEpoch)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdvanceEpoch indicates an expected call of AdvanceEpoch.
func (mr *MockStreamVestingKeeperMockRecorder) AdvanceEpoch(ctx, completedEpoch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdvanceEpoch", reflect.TypeOf((*MockStreamVestingKeeper)(nil).AdvanceEpoch), ctx, completedEpoch)
}

// MockParticipantKeeper is a mock of ParticipantKeeper interface.
type MockParticipantKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockParticipantKeeperMockRecorder
	isgomock struct{}
}

// MockParticipantKeeperMockRecorder is the mock recorder for MockParticipantKeeper.
type MockParticipantKeeperMockRecorder struct {
	mock *MockParticipantKeeper
}

// NewMockParticipantKeeper creates a new mock instance.
func NewMockParticipantKeeper(ctrl *gomock.Controller) *MockParticipantKeeper {
	mock := &MockParticipantKeeper{ctrl: ctrl}
	mock.recorder = &MockParticipantKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParticipantKeeper) EXPECT() *MockParticipantKeeperMockRecorder {
	return m.recorder
}

// GetAllParticipant mocks base method.
func (m *MockParticipantKeeper) GetAllParticipant(ctx context.Context) []types2.Participant {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllParticipant", ctx)
	ret0, _ := ret[0].([]types2.Participant)
	return ret0
}

// GetAllParticipant indicates an expected call of GetAllParticipant.
func (mr *MockParticipantKeeperMockRecorder) GetAllParticipant(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllParticipant", reflect.TypeOf((*MockParticipantKeeper)(nil).GetAllParticipant), ctx)
}

// GetParticipant mocks base method.
func (m *MockParticipantKeeper) GetParticipant(ctx context.Context, index string) (types2.Participant, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParticipant", ctx, index)
	ret0, _ := ret[0].(types2.Participant)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetParticipant indicates an expected call of GetParticipant.
func (mr *MockParticipantKeeperMockRecorder) GetParticipant(ctx, index any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParticipant", reflect.TypeOf((*MockParticipantKeeper)(nil).GetParticipant), ctx, index)
}

// GetParticipants mocks base method.
func (m *MockParticipantKeeper) GetParticipants(ctx context.Context, ids []string) ([]types2.Participant, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParticipants", ctx, ids)
	ret0, _ := ret[0].([]types2.Participant)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetParticipants indicates an expected call of GetParticipants.
func (mr *MockParticipantKeeperMockRecorder) GetParticipants(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParticipants", reflect.TypeOf((*MockParticipantKeeper)(nil).GetParticipants), ctx, ids)
}

// ParticipantAll mocks base method.
func (m *MockParticipantKeeper) ParticipantAll(ctx context.Context, req *types2.QueryAllParticipantRequest) (*types2.QueryAllParticipantResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParticipantAll", ctx, req)
	ret0, _ := ret[0].(*types2.QueryAllParticipantResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParticipantAll indicates an expected call of ParticipantAll.
func (mr *MockParticipantKeeperMockRecorder) ParticipantAll(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParticipantAll", reflect.TypeOf((*MockParticipantKeeper)(nil).ParticipantAll), ctx, req)
}

// RemoveParticipant mocks base method.
func (m *MockParticipantKeeper) RemoveParticipant(ctx context.Context, index string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveParticipant", ctx, index)
}

// RemoveParticipant indicates an expected call of RemoveParticipant.
func (mr *MockParticipantKeeperMockRecorder) RemoveParticipant(ctx, index any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveParticipant", reflect.TypeOf((*MockParticipantKeeper)(nil).RemoveParticipant), ctx, index)
}

// SetParticipant mocks base method.
func (m *MockParticipantKeeper) SetParticipant(ctx context.Context, participant types2.Participant) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetParticipant", ctx, participant)
}

// SetParticipant indicates an expected call of SetParticipant.
func (mr *MockParticipantKeeperMockRecorder) SetParticipant(ctx, participant any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetParticipant", reflect.TypeOf((*MockParticipantKeeper)(nil).SetParticipant), ctx, participant)
}

// MockEpochGroupDataKeeper is a mock of EpochGroupDataKeeper interface.
type MockEpochGroupDataKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockEpochGroupDataKeeperMockRecorder
	isgomock struct{}
}

// MockEpochGroupDataKeeperMockRecorder is the mock recorder for MockEpochGroupDataKeeper.
type MockEpochGroupDataKeeperMockRecorder struct {
	mock *MockEpochGroupDataKeeper
}

// NewMockEpochGroupDataKeeper creates a new mock instance.
func NewMockEpochGroupDataKeeper(ctrl *gomock.Controller) *MockEpochGroupDataKeeper {
	mock := &MockEpochGroupDataKeeper{ctrl: ctrl}
	mock.recorder = &MockEpochGroupDataKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEpochGroupDataKeeper) EXPECT() *MockEpochGroupDataKeeperMockRecorder {
	return m.recorder
}

// GetAllEpochGroupData mocks base method.
func (m *MockEpochGroupDataKeeper) GetAllEpochGroupData(ctx context.Context) []types2.EpochGroupData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEpochGroupData", ctx)
	ret0, _ := ret[0].([]types2.EpochGroupData)
	return ret0
}

// GetAllEpochGroupData indicates an expected call of GetAllEpochGroupData.
func (mr *MockEpochGroupDataKeeperMockRecorder) GetAllEpochGroupData(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEpochGroupData", reflect.TypeOf((*MockEpochGroupDataKeeper)(nil).GetAllEpochGroupData), ctx)
}

// GetEpochGroupData mocks base method.
func (m *MockEpochGroupDataKeeper) GetEpochGroupData(ctx context.Context, pocStartBlockHeight uint64, modelId string) (types2.EpochGroupData, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEpochGroupData", ctx, pocStartBlockHeight, modelId)
	ret0, _ := ret[0].(types2.EpochGroupData)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetEpochGroupData indicates an expected call of GetEpochGroupData.
func (mr *MockEpochGroupDataKeeperMockRecorder) GetEpochGroupData(ctx, pocStartBlockHeight, modelId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEpochGroupData", reflect.TypeOf((*MockEpochGroupDataKeeper)(nil).GetEpochGroupData), ctx, pocStartBlockHeight, modelId)
}

// RemoveEpochGroupData mocks base method.
func (m *MockEpochGroupDataKeeper) RemoveEpochGroupData(ctx context.Context, pocStartBlockHeight uint64, modelId string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveEpochGroupData", ctx, pocStartBlockHeight, modelId)
}

// RemoveEpochGroupData indicates an expected call of RemoveEpochGroupData.
func (mr *MockEpochGroupDataKeeperMockRecorder) RemoveEpochGroupData(ctx, pocStartBlockHeight, modelId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveEpochGroupData", reflect.TypeOf((*MockEpochGroupDataKeeper)(nil).RemoveEpochGroupData), ctx, pocStartBlockHeight, modelId)
}

// SetEpochGroupData mocks base method.
func (m *MockEpochGroupDataKeeper) SetEpochGroupData(ctx context.Context, epochGroupData types2.EpochGroupData) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetEpochGroupData", ctx, epochGroupData)
}

// SetEpochGroupData indicates an expected call of SetEpochGroupData.
func (mr *MockEpochGroupDataKeeperMockRecorder) SetEpochGroupData(ctx, epochGroupData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEpochGroupData", reflect.TypeOf((*MockEpochGroupDataKeeper)(nil).SetEpochGroupData), ctx, epochGroupData)
}

syntax = "proto3";
package inference.bls;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "inference/bls/params.proto";
import "inference/bls/types.proto";

option go_package = "github.com/productscience/inference/x/bls/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
  
  // SubmitDealerPart allows a participant to submit their dealer part during the dealing phase
  rpc SubmitDealerPart(MsgSubmitDealerPart) returns (MsgSubmitDealerPartResponse);
  
  // SubmitVerificationVector allows a participant to confirm they completed verification during the verifying phase
  rpc SubmitVerificationVector(MsgSubmitVerificationVector) returns (MsgSubmitVerificationVectorResponse);
}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "inference/x/bls/MsgUpdateParams";

  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

// MsgSubmitDealerPart is the message for submitting dealer parts during the dealing phase
message MsgSubmitDealerPart {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "inference/x/bls/MsgSubmitDealerPart";

  // creator is the address of the dealer submitting their part
  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  
  // epoch_id identifies the DKG round this dealer part belongs to
  uint64 epoch_id = 2;
  
  // commitments are the G2 points C_kj = g * a_kj representing polynomial commitments
  repeated bytes commitments = 3;
  
  // encrypted_shares_for_participants contains encrypted shares for all participants in order
  // Index i = shares for EpochBLSData.participants[i]
  repeated EncryptedSharesForParticipant encrypted_shares_for_participants = 4 [(gogoproto.nullable) = false];
}

// MsgSubmitDealerPartResponse defines the response structure for executing a
// MsgSubmitDealerPart message.
message MsgSubmitDealerPartResponse {}

// MsgSubmitVerificationVector is the message for confirming verification completion during the verifying phase
message MsgSubmitVerificationVector {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "inference/x/bls/MsgSubmitVerificationVector";

  // creator is the address of the participant confirming verification completion
  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  
  // epoch_id identifies the DKG round this verification confirmation belongs to
  uint64 epoch_id = 2;
  
  // dealer_validity is a bitmap indicating which dealers provided valid shares
  // Index i corresponds to EpochBLSData.participants[i] as dealer
  // true = dealer's shares verified correctly against their commitments
  // false = dealer's shares failed verification or dealer didn't submit
  repeated bool dealer_validity = 3;
}

// MsgSubmitVerificationVectorResponse defines the response structure for executing a
// MsgSubmitVerificationVector message.
message MsgSubmitVerificationVectorResponse {}
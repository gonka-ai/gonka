syntax = "proto3";
package inference.bls;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "inference/bls/params.proto";
import "inference/bls/types.proto";

option go_package = "github.com/productscience/inference/x/bls/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
  
  // SubmitDealerPart allows a participant to submit their dealer part during the dealing phase
  rpc SubmitDealerPart(MsgSubmitDealerPart) returns (MsgSubmitDealerPartResponse);
  
  // SubmitVerificationVector allows a participant to confirm they completed verification during the verifying phase
  rpc SubmitVerificationVector(MsgSubmitVerificationVector) returns (MsgSubmitVerificationVectorResponse);
  
  // SubmitGroupKeyValidationSignature allows a participant to submit their partial signature for group key validation
  rpc SubmitGroupKeyValidationSignature(MsgSubmitGroupKeyValidationSignature) returns (MsgSubmitGroupKeyValidationSignatureResponse);
  
  // SubmitPartialSignature allows a participant to submit their partial signature for threshold signing
  rpc SubmitPartialSignature(MsgSubmitPartialSignature) returns (MsgSubmitPartialSignatureResponse);
  
  // RequestThresholdSignature allows external users to request a threshold signature
  rpc RequestThresholdSignature(MsgRequestThresholdSignature) returns (MsgRequestThresholdSignatureResponse);
}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "inference/x/bls/MsgUpdateParams";

  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

// MsgSubmitDealerPart is the message for submitting dealer parts during the dealing phase
message MsgSubmitDealerPart {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "inference/x/bls/MsgSubmitDealerPart";

  // creator is the address of the dealer submitting their part
  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  
  // epoch_index identifies the DKG round this dealer part belongs to
  uint64 epoch_index = 2;
  
  // commitments are the G2 points C_kj = g * a_kj representing polynomial commitments
  repeated bytes commitments = 3;
  
  // encrypted_shares_for_participants contains encrypted shares for all participants in order
  // Index i = shares for EpochBLSData.participants[i]
  repeated EncryptedSharesForParticipant encrypted_shares_for_participants = 4 [(gogoproto.nullable) = false];
}

// MsgSubmitDealerPartResponse defines the response structure for executing a
// MsgSubmitDealerPart message.
message MsgSubmitDealerPartResponse {}

// MsgSubmitVerificationVector is the message for confirming verification completion during the verifying phase
message MsgSubmitVerificationVector {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "inference/x/bls/MsgSubmitVerificationVector";

  // creator is the address of the participant confirming verification completion
  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  
  // epoch_index identifies the DKG round this verification confirmation belongs to
  uint64 epoch_index = 2;
  
  // dealer_validity is a bitmap indicating which dealers provided valid shares
  // Index i corresponds to EpochBLSData.participants[i] as dealer
  // true = dealer's shares verified correctly against their commitments
  // false = dealer's shares failed verification or dealer didn't submit
  repeated bool dealer_validity = 3;
}

// MsgSubmitVerificationVectorResponse defines the response structure for executing a
// MsgSubmitVerificationVector message.
message MsgSubmitVerificationVectorResponse {}

// MsgSubmitGroupKeyValidationSignature is the message for submitting partial signatures for group key validation
message MsgSubmitGroupKeyValidationSignature {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "inference/x/bls/MsgSubmitGroupKeyValidationSignature";

  // creator is the address of the participant submitting their partial signature
  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  
  // new_epoch_index identifies the epoch whose group public key is being validated
  uint64 new_epoch_index = 2;
  
  // slot_indices are the slot indices this participant is signing for (from their previous epoch assignment)
  repeated uint32 slot_indices = 3;
  
  // partial_signature is the BLS partial signature (G1 point, 48-byte compressed format)
  bytes partial_signature = 4;
}

// MsgSubmitGroupKeyValidationSignatureResponse defines the response structure for executing a
// MsgSubmitGroupKeyValidationSignature message.
message MsgSubmitGroupKeyValidationSignatureResponse {}

// MsgSubmitPartialSignature is the message for submitting partial signatures for threshold signing
message MsgSubmitPartialSignature {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "inference/x/bls/MsgSubmitPartialSignature";

  // creator is the address of the participant submitting their partial signature
  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  
  // request_id identifies the threshold signing request this partial signature is for
  bytes request_id = 2;
  
  // slot_indices are the slot indices this participant is signing for (from their current epoch assignment)
  repeated uint32 slot_indices = 3;
  
  // partial_signature is the aggregated BLS partial signature for all participant's slots (G1 point, 48-byte compressed format)
  bytes partial_signature = 4;
}

// MsgSubmitPartialSignatureResponse defines the response structure for executing a
// MsgSubmitPartialSignature message.
message MsgSubmitPartialSignatureResponse {}

// MsgRequestThresholdSignature allows external users to request a threshold signature via transaction
message MsgRequestThresholdSignature {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name)           = "inference/x/bls/MsgRequestThresholdSignature";

  // creator is the address of the user requesting the threshold signature
  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // current_epoch_index identifies the epoch to use for signing
  uint64 current_epoch_index = 2;

  // chain_id is the chain ID for EIP-155 compatibility (32 bytes)
  bytes chain_id = 3;

  // request_id is the user-provided unique identifier for this request (32 bytes)
  bytes request_id = 4;

  // data is the arbitrary data to be signed (array of 32-byte chunks)
  repeated bytes data = 5;
}

// MsgRequestThresholdSignatureResponse defines the response structure for executing a
// MsgRequestThresholdSignature message.
message MsgRequestThresholdSignatureResponse {}
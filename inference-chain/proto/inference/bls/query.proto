syntax = "proto3";
package inference.bls;

import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "inference/bls/params.proto";
import "inference/bls/types.proto";

option go_package = "github.com/productscience/inference/x/bls/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/productscience/inference/bls/params";
  }
  
  // EpochBLSData queries complete BLS data for a specific epoch
  rpc EpochBLSData(QueryEpochBLSDataRequest) returns (QueryEpochBLSDataResponse) {
    option (google.api.http).get = "/productscience/inference/bls/epoch_data/{epoch_id}";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// QueryEpochBLSDataRequest is request type for the Query/EpochBLSData RPC method.
message QueryEpochBLSDataRequest {
  // epoch_id identifies the DKG round to query complete data for
  uint64 epoch_id = 1;
}

// QueryEpochBLSDataResponse is response type for the Query/EpochBLSData RPC method.
message QueryEpochBLSDataResponse {
  // epoch_data contains complete BLS data for the specified epoch
  EpochBLSData epoch_data = 1 [(gogoproto.nullable) = false];
}
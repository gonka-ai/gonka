syntax = "proto3";

package inference.inference;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "inference/inference/params.proto";
import "inference/inference/training_task.proto";
import "inference/inference/hardware_node.proto";

option go_package = "github.com/productscience/inference/x/inference/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;
  
  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams                     (MsgUpdateParams                    ) returns (MsgUpdateParamsResponse                    );
  rpc StartInference                   (MsgStartInference                  ) returns (MsgStartInferenceResponse                  );
  rpc FinishInference                  (MsgFinishInference                 ) returns (MsgFinishInferenceResponse                 );
  rpc SubmitNewParticipant             (MsgSubmitNewParticipant            ) returns (MsgSubmitNewParticipantResponse            );
  rpc Validation                       (MsgValidation                      ) returns (MsgValidationResponse                      );
  rpc SubmitNewUnfundedParticipant     (MsgSubmitNewUnfundedParticipant    ) returns (MsgSubmitNewUnfundedParticipantResponse    );
  rpc InvalidateInference              (MsgInvalidateInference             ) returns (MsgInvalidateInferenceResponse             );
  rpc RevalidateInference              (MsgRevalidateInference             ) returns (MsgRevalidateInferenceResponse             );
  rpc ClaimRewards                     (MsgClaimRewards                    ) returns (MsgClaimRewardsResponse                    );
  rpc SubmitPocBatch                   (MsgSubmitPocBatch                  ) returns (MsgSubmitPocBatchResponse                  );
  rpc SubmitPocValidation              (MsgSubmitPocValidation             ) returns (MsgSubmitPocValidationResponse             );
  rpc SubmitSeed                       (MsgSubmitSeed                      ) returns (MsgSubmitSeedResponse                      );
  rpc SubmitUnitOfComputePriceProposal (MsgSubmitUnitOfComputePriceProposal) returns (MsgSubmitUnitOfComputePriceProposalResponse);
  rpc RegisterModel                    (MsgRegisterModel                   ) returns (MsgRegisterModelResponse                   );
  rpc CreateTrainingTask               (MsgCreateTrainingTask              ) returns (MsgCreateTrainingTaskResponse              );
  rpc SubmitHardwareDiff               (MsgSubmitHardwareDiff              ) returns (MsgSubmitHardwareDiffResponse              );
  rpc ClaimTrainingTaskForAssignment   (MsgClaimTrainingTaskForAssignment  ) returns (MsgClaimTrainingTaskForAssignmentResponse  );
}
// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) =                             "authority";
  option           (amino.name) = "inference/x/inference/MsgUpdateParams";
  
  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.
  
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

message MsgStartInference {
  option (cosmos.msg.v1.signer) = "creator";
  string creator        = 1;
  string inference_id   = 2;
  string prompt_hash    = 3;
  string prompt_payload = 4;
  string model          = 6;
  string requested_by   = 7;
  string assigned_to    = 8;
}

message MsgStartInferenceResponse {
  string inference_index = 1;
}

message MsgFinishInference {
  option (cosmos.msg.v1.signer) = "creator";
  string creator                = 1;
  string inference_id           = 2;
  string response_hash          = 3;
  string response_payload       = 4;
  uint64 prompt_token_count     = 5;
  uint64 completion_token_count = 6;
  string executed_by            = 7;
}

message MsgFinishInferenceResponse {
  string inference_index = 1;
}

message MsgSubmitNewParticipant {
  option (cosmos.msg.v1.signer) = "creator";
           string creator       = 1;
           string url           = 2;
  repeated string models        = 3;
           string validator_key = 4;
           string worker_key    = 5;
}

message MsgSubmitNewParticipantResponse {
  string participant_index = 1;
  string status            = 2;
}

message MsgValidation {
  option (cosmos.msg.v1.signer) = "creator";
  string creator          = 1;
  string id               = 2;
  string inference_id     = 3;
  string response_payload = 4;
  string response_hash    = 5;
  double value            = 6;
  bool   revalidation     = 7;
}

message MsgValidationResponse {}

message MsgSubmitNewUnfundedParticipant {
  option (cosmos.msg.v1.signer) = "creator";
           string creator       = 1;
           string address       = 2;
           string url           = 3;
  repeated string models        = 4;
           string pub_key       = 5;
           string validator_key = 6;
           string worker_key    = 7;
}

message MsgSubmitNewUnfundedParticipantResponse {}

message MsgInvalidateInference {
  option (cosmos.msg.v1.signer) = "creator";
  string creator      = 1;
  string inference_id = 2;
}

message MsgInvalidateInferenceResponse {}

message MsgRevalidateInference {
  option (cosmos.msg.v1.signer) = "creator";
  string creator      = 1;
  string inference_id = 2;
}

message MsgRevalidateInferenceResponse {}

message MsgClaimRewards {
  option (cosmos.msg.v1.signer) = "creator";
  string creator          = 1;
  int64  seed             = 2;
  uint64 poc_start_height = 3;
}

message MsgClaimRewardsResponse {
  uint64 amount = 1;
  string result = 2;
}

message MsgSubmitPocBatch {
  option (cosmos.msg.v1.signer) = "creator";
           string creator                      = 1;
           int64  poc_stage_start_block_height = 2;
           string batch_id                     = 3;
  repeated int64  nonces                       = 4;
  repeated double dist                         = 5;
}

message MsgSubmitPocBatchResponse {}

message MsgSubmitPocValidation {
  option (cosmos.msg.v1.signer) = "creator";
           string creator                      =  1;
           string participant_address          =  2;
           int64  poc_stage_start_block_height =  3;
  repeated int64  nonces                       =  4;
  repeated double dist                         =  5;
  repeated double received_dist                =  6;
           double r_target                     =  7;
           double fraud_threshold              =  8;
           int64  n_invalid                    =  9;
           double probability_honest           = 10;
           bool   fraud_detected               = 11;
}

message MsgSubmitPocValidationResponse {}

message MsgSubmitSeed {
  option (cosmos.msg.v1.signer) = "creator";
  string creator      = 1;
  int64  block_height = 2;
  string signature    = 3;
}

message MsgSubmitSeedResponse {}

message MsgSubmitUnitOfComputePriceProposal {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  uint64 price   = 2;
}

message MsgSubmitUnitOfComputePriceProposalResponse {}

message MsgRegisterModel {
  option (cosmos.msg.v1.signer) = "authority";
  string authority                  = 1;
  string proposed_by                = 2;
  string id                         = 3;
  uint64 units_of_compute_per_token = 4;
}

message MsgRegisterModelResponse {}

message MsgCreateTrainingTask {
  option (cosmos.msg.v1.signer) = "creator";
           string                    creator            = 1;
  repeated TrainingHardwareResources hardware_resources = 2;
           TrainingConfig            config             = 3;
}

message MsgCreateTrainingTaskResponse {
  TrainingTask task = 1;
}

message MsgSubmitHardwareDiff {
  option (cosmos.msg.v1.signer) = "creator";
           string       creator       = 1;
  repeated HardwareNode newOrModified = 2;
  repeated HardwareNode removed       = 3;
}

message MsgSubmitHardwareDiffResponse {}

message MsgClaimTrainingTaskForAssignment {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  uint64 task_id = 2;
}

message MsgClaimTrainingTaskForAssignmentResponse {}


syntax = "proto3";

package inference.inference;

import "amino/amino.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "inference/inference/v1/bridge_transaction.proto";
import "inference/inference/v1/epoch.proto";
import "inference/inference/v1/epoch_group_data.proto";
import "inference/inference/v1/epoch_group_validations.proto";
import "inference/inference/v1/epoch_performance_summary.proto";
import "inference/inference/v1/hardware_node.proto";
import "inference/inference/v1/inference.proto";
import "inference/inference/v1/inference_timeout.proto";
import "inference/inference/v1/inference_validation_details.proto";
import "inference/inference/v1/model.proto";
import "inference/inference/v1/network_node.proto";
import "inference/inference/v1/params.proto";
import "inference/inference/v1/partial_upgrade.proto";
import "inference/inference/v1/participant.proto";
import "inference/inference/v1/pocbatch.proto";
import "inference/inference/v1/settle_amount.proto";
import "inference/inference/v1/stats_developer.proto";
import "inference/inference/v1/tokenomics_data.proto";
import "inference/inference/v1/top_miner.proto";
import "inference/inference/v1/training_task.proto";
import "inference/inference/v1/training_task_sync.proto";
import "inference/inference/v1/unit_of_compute.proto";

option go_package = "github.com/productscience/inference/x/inference/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/productscience/inference/inference/params";
  }

  // Queries a list of Inference items.
  rpc Inference(QueryGetInferenceRequest) returns (QueryGetInferenceResponse) {
    option (google.api.http).get = "/productscience/inference/inference/inference/{index}";
  }
  rpc InferenceAll(QueryAllInferenceRequest) returns (QueryAllInferenceResponse) {
    option (google.api.http).get = "/productscience/inference/inference/inference";
  }

  // Queries a list of Participant items.
  rpc Participant(QueryGetParticipantRequest) returns (QueryGetParticipantResponse) {
    option (google.api.http).get = "/productscience/inference/inference/participant/{index}";
  }
  rpc ParticipantAll(QueryAllParticipantRequest) returns (QueryAllParticipantResponse) {
    option (google.api.http).get = "/productscience/inference/inference/participant";
  }

  // Queries a list of InferenceParticipant items.
  rpc InferenceParticipant(QueryInferenceParticipantRequest) returns (QueryInferenceParticipantResponse) {
    option (google.api.http).get = "/productscience/inference/inference/inference_participant/{address}";
  }

  // Queries a list of GetRandomExecutor items.
  rpc GetRandomExecutor(QueryGetRandomExecutorRequest) returns (QueryGetRandomExecutorResponse) {
    option (google.api.http).get = "/productscience/inference/inference/get_random_executor";
  }

  // Queries a list of EpochGroupData items.
  rpc EpochGroupData(QueryGetEpochGroupDataRequest) returns (QueryGetEpochGroupDataResponse) {
    option (google.api.http).get = "/productscience/inference/inference/epoch_group_data/{poc_start_block_height}";
  }
  rpc EpochGroupDataAll(QueryAllEpochGroupDataRequest) returns (QueryAllEpochGroupDataResponse) {
    option (google.api.http).get = "/productscience/inference/inference/epoch_group_data";
  }

  // Queries a list of SettleAmount items.
  rpc SettleAmount(QueryGetSettleAmountRequest) returns (QueryGetSettleAmountResponse) {
    option (google.api.http).get = "/productscience/inference/inference/settle_amount/{participant}";
  }
  rpc SettleAmountAll(QueryAllSettleAmountRequest) returns (QueryAllSettleAmountResponse) {
    option (google.api.http).get = "/productscience/inference/inference/settle_amount";
  }

  // Queries a list of EpochGroupValidations items.
  rpc EpochGroupValidations(QueryGetEpochGroupValidationsRequest) returns (QueryGetEpochGroupValidationsResponse) {
    option (google.api.http).get = "/productscience/inference/inference/epoch_group_validations/{participant}/{poc_start_block_height}";
  }
  rpc EpochGroupValidationsAll(QueryAllEpochGroupValidationsRequest) returns (QueryAllEpochGroupValidationsResponse) {
    option (google.api.http).get = "/productscience/inference/inference/epoch_group_validations";
  }

  // Queries a list of PocBatchesForStage items.
  rpc PocBatchesForStage(QueryPocBatchesForStageRequest) returns (QueryPocBatchesForStageResponse) {
    option (google.api.http).get = "/productscience/inference/inference/poc_batches_for_stage/{block_height}";
  }

  // Queries a list of GetCurrentEpoch items.
  rpc GetCurrentEpoch(QueryGetCurrentEpochRequest) returns (QueryGetCurrentEpochResponse) {
    option (google.api.http).get = "/productscience/inference/inference/get_current_epoch";
  }

  // Queries a TokenomicsData by index.
  rpc TokenomicsData(QueryGetTokenomicsDataRequest) returns (QueryGetTokenomicsDataResponse) {
    option (google.api.http).get = "/productscience/inference/inference/tokenomics_data";
  }

  // Queries a list of GetUnitOfComputePriceProposal items.
  rpc GetUnitOfComputePriceProposal(QueryGetUnitOfComputePriceProposalRequest) returns (QueryGetUnitOfComputePriceProposalResponse) {
    option (google.api.http).get = "/productscience/inference/inference/get_unit_of_compute_price_proposal";
  }

  // Queries a list of CurrentEpochGroupData items.
  rpc CurrentEpochGroupData(QueryCurrentEpochGroupDataRequest) returns (QueryCurrentEpochGroupDataResponse) {
    option (google.api.http).get = "/productscience/inference/inference/current_epoch_group_data";
  }

  // Queries a list of ModelsAll items.
  rpc ModelsAll(QueryModelsAllRequest) returns (QueryModelsAllResponse) {
    option (google.api.http).get = "/productscience/inference/inference/models_all";
  }

  // Queries a list of TopMiner items.
  rpc TopMiner(QueryGetTopMinerRequest) returns (QueryGetTopMinerResponse) {
    option (google.api.http).get = "/productscience/inference/inference/top_miner/{address}";
  }
  rpc TopMinerAll(QueryAllTopMinerRequest) returns (QueryAllTopMinerResponse) {
    option (google.api.http).get = "/productscience/inference/inference/top_miner";
  }

  // Queries a list of InferenceTimeout items.
  rpc InferenceTimeout(QueryGetInferenceTimeoutRequest) returns (QueryGetInferenceTimeoutResponse) {
    option (google.api.http).get = "/productscience/inference/inference/inference_timeout/{expirationHeight}/{inferenceId}";
  }
  rpc InferenceTimeoutAll(QueryAllInferenceTimeoutRequest) returns (QueryAllInferenceTimeoutResponse) {
    option (google.api.http).get = "/productscience/inference/inference/inference_timeout";
  }

  // BE CAREFUL, epoch_id in the request body meand epoch_group_id!!
  rpc InferenceValidationDetails(QueryGetInferenceValidationDetailsRequest) returns (QueryGetInferenceValidationDetailsResponse) {
    option (google.api.http).get = "/productscience/inference/inference/inference_validation_details/{epochId}/{inferenceId}";
  }

  // Queries a list of InferenceValidationDetails items.
  rpc InferenceValidationDetailsAll(QueryAllInferenceValidationDetailsRequest) returns (QueryAllInferenceValidationDetailsResponse) {
    option (google.api.http).get = "/productscience/inference/inference/inference_validation_details";
  }

  // Queries a list of GetInferenceValidationParameters items.
  rpc GetInferenceValidationParameters(QueryGetInferenceValidationParametersRequest) returns (QueryGetInferenceValidationParametersResponse) {
    option (google.api.http).get = "/productscience/inference/inference/get_inference_validation_parameters/{ids}/{requester}";
  }

  // Queries a list of EpochPerformanceSummary items.
  rpc EpochPerformanceSummary(QueryGetEpochPerformanceSummaryRequest) returns (QueryGetEpochPerformanceSummaryResponse) {
    option (google.api.http).get = "/productscience/inference/inference/epoch_performance_summary/{epochStartHeight}/{participantId}";
  }
  rpc EpochPerformanceSummaryAll(QueryAllEpochPerformanceSummaryRequest) returns (QueryAllEpochPerformanceSummaryResponse) {
    option (google.api.http).get = "/productscience/inference/inference/epoch_performance_summary";
  }

  // Queries a list of TrainingTask items.
  rpc TrainingTask(QueryTrainingTaskRequest) returns (QueryTrainingTaskResponse) {
    option (google.api.http).get = "/productscience/inference/inference/training_task";
  }

  // Queries a list of HardwareNodes items.
  rpc HardwareNodes(QueryHardwareNodesRequest) returns (QueryHardwareNodesResponse) {
    option (google.api.http).get = "/productscience/inference/inference/hardware_nodes/{participant}";
  }

  // Queries a list of HardwareNodesAll items.
  rpc HardwareNodesAll(QueryHardwareNodesAllRequest) returns (QueryHardwareNodesAllResponse) {
    option (google.api.http).get = "/productscience/inference/inference/hardware_nodes_all";
  }

  // Queries a list of QueuedTrainingTasks items.
  rpc QueuedTrainingTasks(QueryQueuedTrainingTasksRequest) returns (QueryQueuedTrainingTasksResponse) {
    option (google.api.http).get = "/productscience/inference/inference/queued_training_tasks";
  }

  // Queries a list of TrainingTaskAll items.
  rpc TrainingTaskAll(QueryTrainingTaskAllRequest) returns (QueryTrainingTaskAllResponse) {
    option (google.api.http).get = "/productscience/inference/inference/training_task_all";
  }

  // Queries a list of GetParticipantCurrentStats items.
  rpc GetParticipantCurrentStats(QueryGetParticipantCurrentStatsRequest) returns (QueryGetParticipantCurrentStatsResponse) {
    option (google.api.http).get = "/productscience/inference/inference/get_participant_current_stats/{participantId}";
  }

  // Queries a list of GetAllParticipantCurrentStats items.
  rpc GetAllParticipantCurrentStats(QueryGetAllParticipantCurrentStatsRequest) returns (QueryGetAllParticipantCurrentStatsResponse) {
    option (google.api.http).get = "/productscience/inference/inference/get_all_participant_current_stats";
  }
  rpc GetParticipantsFullStats(QueryParticipantsFullStatsRequest) returns (QueryParticipantsFullStatsResponse) {
    option (google.api.http).get = "/productscience/inference/inference/participants_stats";
  }
  rpc StatsByTimePeriodByDeveloper(QueryStatsByTimePeriodByDeveloperRequest) returns (QueryStatsByTimePeriodByDeveloperResponse) {
    option (google.api.http).get = "/productscience/inference/inference/developer/{developer}/stats_by_time";
  }
  rpc StatsByDeveloperAndEpochsBackwards(QueryStatsByDeveloperAndEpochBackwardsRequest) returns (QueryInferencesAndTokensStatsResponse) {
    option (google.api.http).get = "/productscience/inference/inference/developer/{developer}/stats_by_epochs_backwards";
  }
  rpc CountParticipants(QueryCountAllParticipantsRequest) returns (QueryCountAllParticipantsResponse) {
    option (google.api.http).get = "/productscience/inference/inference/participants/count";
  }
  rpc DebugStatsDeveloperStats(QueryDebugStatsRequest) returns (QueryDebugStatsResponse) {
    option (google.api.http).get = "/productscience/inference/inference/debug/developer/all_stats";
  }
  rpc InferencesAndTokensStatsByEpochsBackwards(QueryInferencesAndTokensStatsByEpochsBackwardsRequest) returns (QueryInferencesAndTokensStatsResponse) {
    option (google.api.http).get = "/productscience/inference/inference/developer/stats_by_epochs_backwards";
  }
  rpc InferencesAndTokensStatsByTimePeriod(QueryInferencesAndTokensStatsByTimePeriodRequest) returns (QueryInferencesAndTokensStatsResponse) {
    option (google.api.http).get = "/productscience/inference/inference/all_stats_by_time";
  }
  rpc InferencesAndTokensStatsByModels(QueryInferencesAndTokensStatsByModelsRequest) returns (QueryInferencesAndTokensStatsByModelsResponse) {
    option (google.api.http).get = "/productscience/inference/inference/models_stats_by_time";
  }

  // Queries a list of GetMinimumValidationAverage items.
  rpc GetMinimumValidationAverage(QueryGetMinimumValidationAverageRequest) returns (QueryGetMinimumValidationAverageResponse) {
    option (google.api.http).get = "/productscience/inference/inference/get_minimum_validation_average";
  }

  // Queries a list of InProgressTrainingTasks items.
  rpc InProgressTrainingTasks(QueryInProgressTrainingTasksRequest) returns (QueryInProgressTrainingTasksResponse) {
    option (google.api.http).get = "/productscience/inference/inference/in_progress_training_tasks";
  }

  // Queries a list of PartialUpgrade items.
  rpc PartialUpgrade(QueryGetPartialUpgradeRequest) returns (QueryGetPartialUpgradeResponse) {
    option (google.api.http).get = "/productscience/inference/inference/partial_upgrade/{height}";
  }
  rpc PartialUpgradeAll(QueryAllPartialUpgradeRequest) returns (QueryAllPartialUpgradeResponse) {
    option (google.api.http).get = "/productscience/inference/inference/partial_upgrade";
  }

  // Queries a bridge transaction by its composite key
  rpc BridgeTransaction(QueryGetBridgeTransactionRequest) returns (QueryGetBridgeTransactionResponse) {
    option (google.api.http).get = "/inference/inference/bridge_transaction/{origin_chain}/{block_number}/{receipt_index}";
  }

  // Queries all bridge transactions
  rpc BridgeTransactions(QueryAllBridgeTransactionsRequest) returns (QueryAllBridgeTransactionsResponse) {
    option (google.api.http).get = "/inference/inference/bridge_transactions";
  }

  // Queries a list of TrainingKvRecord items.
  rpc TrainingKvRecord(QueryTrainingKvRecordRequest) returns (QueryTrainingKvRecordResponse) {
    option (google.api.http).get = "/productscience/inference/inference/training_kv_record/{taskId}/{key}";
  }

  // Queries a list of ListTrainingKvRecordKeys items.
  rpc ListTrainingKvRecordKeys(QueryListTrainingKvRecordKeysRequest) returns (QueryListTrainingKvRecordKeysResponse) {
    option (google.api.http).get = "/productscience/inference/inference/list_training_kv_record_keys/{taskId}";
  }

  // Queries a list of TrainingBarrier items.
  rpc TrainingBarrier(QueryTrainingBarrierRequest) returns (QueryTrainingBarrierResponse) {
    option (google.api.http).get = "/productscience/inference/inference/training_barrier";
  }

  // Queries a list of TrainingAliveNodes items.
  rpc TrainingAliveNodes(QueryTrainingAliveNodesRequest) returns (QueryTrainingAliveNodesResponse) {
    option (google.api.http).get = "/productscience/inference/inference/training_alive_nodes";
  }

  // Queries a list of EpochInfo items.
  rpc EpochInfo(QueryEpochInfoRequest) returns (QueryEpochInfoResponse) {
    option (google.api.http).get = "/productscience/inference/inference/epoch_info";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

message QueryGetInferenceRequest {
  string index = 1;
}

message QueryGetInferenceResponse {
  Inference inference = 1 [(gogoproto.nullable) = false];
}

message QueryAllInferenceRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllInferenceResponse {
  repeated Inference inference = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetParticipantRequest {
  string index = 1;
}

message QueryGetParticipantResponse {
  Participant participant = 1 [(gogoproto.nullable) = false];
}

message QueryAllParticipantRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllParticipantResponse {
  repeated Participant participant = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
  int64 block_height = 3;
}

message QueryInferenceParticipantRequest {
  string address = 1;
}

message QueryInferenceParticipantResponse {
  string pubkey = 1;
  int64 balance = 2;
}

message QueryGetRandomExecutorRequest {
  string model = 1;
}

message QueryGetRandomExecutorResponse {
  Participant executor = 1 [(gogoproto.nullable) = false];
}

message QueryGetEpochGroupDataRequest {
  uint64 poc_start_block_height = 1;
  string model_id = 2;
}

message QueryGetEpochGroupDataResponse {
  EpochGroupData epoch_group_data = 1 [(gogoproto.nullable) = false];
}

message QueryAllEpochGroupDataRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllEpochGroupDataResponse {
  repeated EpochGroupData epoch_group_data = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetSettleAmountRequest {
  string participant = 1;
}

message QueryGetSettleAmountResponse {
  SettleAmount settle_amount = 1 [(gogoproto.nullable) = false];
}

message QueryAllSettleAmountRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllSettleAmountResponse {
  repeated SettleAmount settle_amount = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetEpochGroupValidationsRequest {
  string participant = 1;
  uint64 poc_start_block_height = 2;
}

message QueryGetEpochGroupValidationsResponse {
  EpochGroupValidations epoch_group_validations = 1 [(gogoproto.nullable) = false];
}

message QueryAllEpochGroupValidationsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllEpochGroupValidationsResponse {
  repeated EpochGroupValidations epoch_group_validations = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryPocBatchesForStageRequest {
  int64 block_height = 1;
}

message QueryPocBatchesForStageResponse {
  repeated PoCBatchesWithParticipants poc_batch = 1 [(gogoproto.nullable) = false];
}

message PoCBatchesWithParticipants {
  string participant = 1;
  string pub_key = 2;
  string hex_pub_key = 3;
  repeated PoCBatch poc_batch = 4 [(gogoproto.nullable) = false];
}

message QueryGetCurrentEpochRequest {}

// DEPRECATED: ambiguous query, re-check what it expect as epoch: id, poc_start_block_height, or epoch_group_id
message QueryGetCurrentEpochResponse {
  uint64 epoch = 1;
}

message QueryGetTokenomicsDataRequest {}

message QueryGetTokenomicsDataResponse {
  TokenomicsData tokenomics_data = 1 [(gogoproto.nullable) = false];
}

message QueryGetUnitOfComputePriceProposalRequest {
  string participant = 1;
}

message QueryGetUnitOfComputePriceProposalResponse {
  UnitOfComputePriceProposal proposal = 1;
  uint64 default = 2;
}

message QueryCurrentEpochGroupDataRequest {}

message QueryCurrentEpochGroupDataResponse {
  EpochGroupData epoch_group_data = 1 [(gogoproto.nullable) = false];
}

message QueryPreviousEpochGroupDataRequest {}

message QueryPreviousEpochGroupDataResponse {
  EpochGroupData epoch_group_data = 1 [(gogoproto.nullable) = false];
}

message QueryModelsAllRequest {}

message QueryModelsAllResponse {
  repeated Model model = 1 [(gogoproto.nullable) = false];
}

message QueryGetTopMinerRequest {
  string address = 1;
}

message QueryGetTopMinerResponse {
  TopMiner top_miner = 1 [(gogoproto.nullable) = false];
}

message QueryAllTopMinerRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllTopMinerResponse {
  repeated TopMiner top_miner = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetInferenceTimeoutRequest {
  uint64 expirationHeight = 1;
  string inferenceId = 2;
}

message QueryGetInferenceTimeoutResponse {
  InferenceTimeout inference_timeout = 1 [(gogoproto.nullable) = false];
}

message QueryAllInferenceTimeoutRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllInferenceTimeoutResponse {
  repeated InferenceTimeout inference_timeout = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetInferenceValidationDetailsRequest {
  uint64 epochId = 1;
  string inferenceId = 2;
}

message QueryGetInferenceValidationDetailsResponse {
  InferenceValidationDetails inferenceValidationDetails = 1 [(gogoproto.nullable) = false];
}

message QueryAllInferenceValidationDetailsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllInferenceValidationDetailsResponse {
  repeated InferenceValidationDetails inferenceValidationDetails = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetInferenceValidationParametersRequest {
  repeated string ids = 1;
  string requester = 2;
}

message QueryGetInferenceValidationParametersResponse {
  uint64 validator_power = 1;
  uint64 current_height = 2;
  repeated InferenceValidationDetails details = 3;
  ValidationParams parameters = 4;
}

message QueryGetEpochPerformanceSummaryRequest {
  uint64 epochStartHeight = 1;
  string participantId = 2;
}

message QueryGetEpochPerformanceSummaryResponse {
  EpochPerformanceSummary epochPerformanceSummary = 1 [(gogoproto.nullable) = false];
}

message QueryAllEpochPerformanceSummaryRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllEpochPerformanceSummaryResponse {
  repeated EpochPerformanceSummary epochPerformanceSummary = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryTrainingTaskRequest {
  uint64 id = 1;
}

message QueryTrainingTaskResponse {
  TrainingTask task = 1;
}

message QueryHardwareNodesRequest {
  string participant = 1;
}

message QueryHardwareNodesResponse {
  HardwareNodes nodes = 1;
}

message QueryHardwareNodesAllRequest {}

message QueryHardwareNodesAllResponse {
  repeated HardwareNodes nodes = 1;
}

message QueryQueuedTrainingTasksRequest {}

message QueryQueuedTrainingTasksResponse {
  repeated TrainingTask tasks = 1;
}

message QueryTrainingTaskAllRequest {}

message QueryTrainingTaskAllResponse {
  repeated TrainingTask tasks = 1;
}

message QueryGetParticipantCurrentStatsRequest {
  string participantId = 1;
}

message QueryGetParticipantCurrentStatsResponse {
  uint64 weight = 1;
  int32 reputation = 2;
}

message QueryGetAllParticipantCurrentStatsRequest {}

message QueryGetAllParticipantCurrentStatsResponse {
  repeated ParticipantCurrentStats participant_current_stats = 1;
  int64 block_height = 2;
  int64 epoch_id = 3;
}

message ParticipantCurrentStats {
  string participant_id = 1;
  uint64 weight = 2;
  int32 reputation = 3;
}

message ParticipantFullStats {
  string account_address = 1;
  string operator_address = 2;
  int32 reputation = 3;
  uint64 earned_coins_current_epoch = 4;
  uint64 rewarded_coins_latest_epoch = 5;
  uint32 epochs_completed = 6;
}

message QueryParticipantsFullStatsRequest {}

message QueryParticipantsFullStatsResponse {
  repeated ParticipantFullStats participants_stats = 1;
}

message QueryStatsByTimePeriodByDeveloperRequest {
  string developer = 1;
  int64 time_from = 2;
  int64 time_to = 3;
}

message QueryStatsByTimePeriodByDeveloperResponse {
  repeated DeveloperStatsByTime stats = 1;
}

message QueryStatsByDeveloperAndEpochBackwardsRequest {
  string developer = 1;
  int32 epochs_n = 2;
}

message QueryInferencesAndTokensStatsByEpochsBackwardsRequest {
  int32 epochs_n = 1;
}

message QueryInferencesAndTokensStatsByTimePeriodRequest {
  int64 time_from = 2;
  int64 time_to = 3;
}

message QueryInferencesAndTokensStatsByModelsRequest {
  int64 time_from = 2;
  int64 time_to = 3;
}

message ModelStats {
  string model = 1;
  int64 ai_tokens = 2;
  int32 inferences = 3;
}

message QueryInferencesAndTokensStatsByModelsResponse {
  repeated ModelStats stats_models = 1;
}

message QueryInferencesAndTokensStatsResponse {
  int64 ai_tokens = 1;
  int32 inferences = 2;
  int64 actual_inferences_cost = 3;
}

message QueryCountAllParticipantsRequest {}

message QueryCountAllParticipantsResponse {
  int64 total = 1;
}

message QueryDebugStatsRequest {}

message QueryDebugStatsResponse {
  message TemporaryTimeStat {
    string developer = 1;
    repeated DeveloperStatsByTime stats = 2;
  }

  message TemporaryEpochStat {
    string developer = 1;
    repeated DeveloperStatsByEpoch stats = 2;
  }

  repeated TemporaryTimeStat stats_by_time = 1;
  repeated TemporaryEpochStat stats_by_epoch = 2;
}

message QueryGetMinimumValidationAverageRequest {}

message QueryGetMinimumValidationAverageResponse {
  uint64 traffic_basis = 1;
  string minimum_validation_average = 2;
  uint64 block_height = 3;
}

message QueryInProgressTrainingTasksRequest {}

message QueryInProgressTrainingTasksResponse {
  repeated TrainingTask tasks = 1;
}

message QueryGetPartialUpgradeRequest {
  uint64 height = 1;
}

message QueryGetPartialUpgradeResponse {
  PartialUpgrade partialUpgrade = 1 [(gogoproto.nullable) = false];
}

message QueryAllPartialUpgradeRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllPartialUpgradeResponse {
  repeated PartialUpgrade partialUpgrade = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryTrainingKvRecordRequest {
  uint64 taskId = 1;
  string key = 2;
}

message QueryTrainingKvRecordResponse {
  TrainingTaskKVRecord record = 1;
}

message QueryListTrainingKvRecordKeysRequest {
  uint64 taskId = 1;
}

message QueryListTrainingKvRecordKeysResponse {
  repeated string keys = 1;
}

message QueryTrainingBarrierRequest {
  GetBarrierStatusRequest req = 1;
}

message QueryTrainingBarrierResponse {
  GetBarrierStatusResponse resp = 2;
}

message QueryTrainingAliveNodesRequest {
  GetAliveNodesRequest req = 1;
}

message QueryTrainingAliveNodesResponse {
  GetAliveNodesResponse resp = 2;
}

message QueryGetBridgeTransactionRequest {
  string origin_chain = 1;
  string block_number = 2;
  string receipt_index = 3;
}

message QueryGetBridgeTransactionResponse {
  BridgeTransaction bridgeTransaction = 1 [(gogoproto.nullable) = false];
}

message QueryAllBridgeTransactionsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllBridgeTransactionsResponse {
  repeated BridgeTransaction bridgeTransactions = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryEpochInfoRequest {}

message QueryEpochInfoResponse {
  int64 block_height = 1;
  Params params = 2 [(gogoproto.nullable) = false];
  Epoch latest_epoch = 3 [(gogoproto.nullable) = false];
}

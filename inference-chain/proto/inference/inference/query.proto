syntax = "proto3";

package inference.inference;

import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "inference/inference/params.proto";
import "inference/inference/inference.proto";
import "inference/inference/participant.proto";
import "inference/inference/epoch_group_data.proto";
import "inference/inference/settle_amount.proto";
import "inference/inference/epoch_group_validations.proto";
import "inference/inference/pocbatch.proto";
import "inference/inference/tokenomics_data.proto";
import "inference/inference/unit_of_compute.proto";
import "inference/inference/model.proto";
import "inference/inference/top_miner.proto";
import "cosmos/base/v1beta1/coin.proto";
import "inference/inference/training_task.proto";
import "inference/inference/hardware_node.proto";

option go_package = "github.com/productscience/inference/x/inference/types";

// Query defines the gRPC querier service.
service Query {
  
  // Parameters queries the parameters of the module.
  rpc Params (QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/productscience/inference/inference/params";
  
  }
  
  // Queries a list of Inference items.
  rpc Inference    (QueryGetInferenceRequest) returns (QueryGetInferenceResponse) {
    option (google.api.http).get = "/productscience/inference/inference/inference/{index}";
  
  }
  rpc InferenceAll (QueryAllInferenceRequest) returns (QueryAllInferenceResponse) {
    option (google.api.http).get = "/productscience/inference/inference/inference";
  
  }
  
  // Queries a list of Participant items.
  rpc Participant    (QueryGetParticipantRequest) returns (QueryGetParticipantResponse) {
    option (google.api.http).get = "/productscience/inference/inference/participant/{index}";
  
  }
  rpc ParticipantAll (QueryAllParticipantRequest) returns (QueryAllParticipantResponse) {
    option (google.api.http).get = "/productscience/inference/inference/participant";
  
  }
  
  // Queries a list of GetInferencesWithExecutors items.
  rpc GetInferencesWithExecutors (QueryGetInferencesWithExecutorsRequest) returns (QueryGetInferencesWithExecutorsResponse) {
    option (google.api.http).get = "/productscience/inference/inference/get_inferences_with_executors/{ids}";
  
  }
  
  // Queries a list of InferenceParticipant items.
  rpc InferenceParticipant (QueryInferenceParticipantRequest) returns (QueryInferenceParticipantResponse) {
    option (google.api.http).get = "/productscience/inference/inference/inference_participant/{address}";
  
  }
  
  // Queries a list of GetRandomExecutor items.
  rpc GetRandomExecutor (QueryGetRandomExecutorRequest) returns (QueryGetRandomExecutorResponse) {
    option (google.api.http).get = "/productscience/inference/inference/get_random_executor";
  
  }
  
  // Queries a list of EpochGroupData items.
  rpc EpochGroupData    (QueryGetEpochGroupDataRequest) returns (QueryGetEpochGroupDataResponse) {
    option (google.api.http).get = "/productscience/inference/inference/epoch_group_data/{poc_start_block_height}";
  
  }
  rpc EpochGroupDataAll (QueryAllEpochGroupDataRequest) returns (QueryAllEpochGroupDataResponse) {
    option (google.api.http).get = "/productscience/inference/inference/epoch_group_data";
  
  }
  
  // Queries a list of SettleAmount items.
  rpc SettleAmount    (QueryGetSettleAmountRequest) returns (QueryGetSettleAmountResponse) {
    option (google.api.http).get = "/productscience/inference/inference/settle_amount/{participant}";
  
  }
  rpc SettleAmountAll (QueryAllSettleAmountRequest) returns (QueryAllSettleAmountResponse) {
    option (google.api.http).get = "/productscience/inference/inference/settle_amount";
  
  }
  
  // Queries a list of EpochGroupValidations items.
  rpc EpochGroupValidations    (QueryGetEpochGroupValidationsRequest) returns (QueryGetEpochGroupValidationsResponse) {
    option (google.api.http).get = "/productscience/inference/inference/epoch_group_validations/{participant}/{poc_start_block_height}";
  
  }
  rpc EpochGroupValidationsAll (QueryAllEpochGroupValidationsRequest) returns (QueryAllEpochGroupValidationsResponse) {
    option (google.api.http).get = "/productscience/inference/inference/epoch_group_validations";
  
  }
  
  // Queries a list of PocBatchesForStage items.
  rpc PocBatchesForStage (QueryPocBatchesForStageRequest) returns (QueryPocBatchesForStageResponse) {
    option (google.api.http).get = "/productscience/inference/inference/poc_batches_for_stage/{block_height}";
  
  }
  
  // Queries a list of GetCurrentEpoch items.
  rpc GetCurrentEpoch (QueryGetCurrentEpochRequest) returns (QueryGetCurrentEpochResponse) {
    option (google.api.http).get = "/productscience/inference/inference/get_current_epoch";
  
  }
  
  // Queries a TokenomicsData by index.
  rpc TokenomicsData (QueryGetTokenomicsDataRequest) returns (QueryGetTokenomicsDataResponse) {
    option (google.api.http).get = "/productscience/inference/inference/tokenomics_data";
  
  }
  
  // Queries a list of GetUnitOfComputePriceProposal items.
  rpc GetUnitOfComputePriceProposal (QueryGetUnitOfComputePriceProposalRequest) returns (QueryGetUnitOfComputePriceProposalResponse) {
    option (google.api.http).get = "/productscience/inference/inference/get_unit_of_compute_price_proposal";
  
  }
  
  // Queries a list of CurrentEpochGroupData items.
  rpc CurrentEpochGroupData (QueryCurrentEpochGroupDataRequest) returns (QueryCurrentEpochGroupDataResponse) {
    option (google.api.http).get = "/productscience/inference/inference/current_epoch_group_data";
  
  }
  
  // Queries a list of ModelsAll items.
  rpc ModelsAll (QueryModelsAllRequest) returns (QueryModelsAllResponse) {
    option (google.api.http).get = "/productscience/inference/inference/models_all";
  
  }
  
  // Queries a list of TopMiner items.
  rpc TopMiner    (QueryGetTopMinerRequest) returns (QueryGetTopMinerResponse) {
    option (google.api.http).get = "/productscience/inference/inference/top_miner/{address}";
  
  }
  rpc TopMinerAll (QueryAllTopMinerRequest) returns (QueryAllTopMinerResponse) {
    option (google.api.http).get = "/productscience/inference/inference/top_miner";
  
  }
  
  // Queries a list of TrainingTask items.
  rpc TrainingTask (QueryTrainingTaskRequest) returns (QueryTrainingTaskResponse) {
    option (google.api.http).get = "/productscience/inference/inference/training_task";
  
  }
  
  // Queries a list of HardwareNodes items.
  rpc HardwareNodes (QueryHardwareNodesRequest) returns (QueryHardwareNodesResponse) {
    option (google.api.http).get = "/productscience/inference/inference/hardware_nodes/{participant}";
  
  }
  
  // Queries a list of HardwareNodesAll items.
  rpc HardwareNodesAll (QueryHardwareNodesAllRequest) returns (QueryHardwareNodesAllResponse) {
    option (google.api.http).get = "/productscience/inference/inference/hardware_nodes_all";
  
  }
  
  // Queries a list of QueuedTrainingTasks items.
  rpc QueuedTrainingTasks (QueryQueuedTrainingTasksRequest) returns (QueryQueuedTrainingTasksResponse) {
    option (google.api.http).get = "/productscience/inference/inference/queued_training_tasks";
  
  }
  
  // Queries a list of TrainingTaskAll items.
  rpc TrainingTaskAll (QueryTrainingTaskAllRequest) returns (QueryTrainingTaskAllResponse) {
    option (google.api.http).get = "/productscience/inference/inference/training_task_all";
  
  }
}
// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

message QueryGetInferenceRequest {
  string index = 1;
}

message QueryGetInferenceResponse {
  Inference inference = 1 [(gogoproto.nullable) = false];
}

message QueryAllInferenceRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllInferenceResponse {
  repeated Inference                              inference  = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetParticipantRequest {
  string index = 1;
}

message QueryGetParticipantResponse {
  Participant participant = 1 [(gogoproto.nullable) = false];
}

message QueryAllParticipantRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllParticipantResponse {
  repeated Participant                            participant  = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination   = 2;
           int64                                  block_height = 3;
}

message QueryGetInferencesWithExecutorsRequest {
  repeated string ids       = 1;
           string requester = 2;
}

message QueryGetInferencesWithExecutorsResponse {
  repeated InferenceWithExecutor inference_with_executor = 1 [(gogoproto.nullable) = false];
           uint32                num_validators          = 2;
           uint32                total_power             = 3;
           uint32                validator_power         = 4;
           uint32                current_height          = 5;
}

message InferenceWithExecutor {
  Inference   inference     = 1 [(gogoproto.nullable) = false];
  Participant executor      = 2 [(gogoproto.nullable) = false];
  uint32      current_power = 3;
}

message QueryInferenceParticipantRequest {
  string address = 1;
}

message QueryInferenceParticipantResponse {
  string pubkey  = 1;
  int64  balance = 2;
}

message QueryGetRandomExecutorRequest {}

message QueryGetRandomExecutorResponse {
  Participant executor = 1 [(gogoproto.nullable) = false];
}

message QueryGetEpochGroupDataRequest {
  uint64 poc_start_block_height = 1;
}

message QueryGetEpochGroupDataResponse {
  EpochGroupData epoch_group_data = 1 [(gogoproto.nullable) = false];
}

message QueryAllEpochGroupDataRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllEpochGroupDataResponse {
  repeated EpochGroupData                         epoch_group_data = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination       = 2;
}

message QueryGetSettleAmountRequest {
  string participant = 1;
}

message QueryGetSettleAmountResponse {
  SettleAmount settle_amount = 1 [(gogoproto.nullable) = false];
}

message QueryAllSettleAmountRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllSettleAmountResponse {
  repeated SettleAmount                           settle_amount = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination    = 2;
}

message QueryGetEpochGroupValidationsRequest {
  string participant            = 1;
  uint64 poc_start_block_height = 2;
}

message QueryGetEpochGroupValidationsResponse {
  EpochGroupValidations epoch_group_validations = 1 [(gogoproto.nullable) = false];
}

message QueryAllEpochGroupValidationsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllEpochGroupValidationsResponse {
  repeated EpochGroupValidations                  epoch_group_validations = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination              = 2;
}

message QueryPocBatchesForStageRequest {
  int64 block_height = 1;
}

message QueryPocBatchesForStageResponse {
  repeated PoCBatchesWithParticipants poc_batch = 1 [(gogoproto.nullable) = false];
}

message PoCBatchesWithParticipants {
           string   participant = 1;
           string   pub_key     = 2;
           string   hex_pub_key = 3;
  repeated PoCBatch poc_batch   = 4 [(gogoproto.nullable) = false];
}

message QueryGetCurrentEpochRequest {}

message QueryGetCurrentEpochResponse {
  uint64 epoch = 1;
}

message QueryGetTokenomicsDataRequest {}

message QueryGetTokenomicsDataResponse {
  TokenomicsData tokenomics_data = 1 [(gogoproto.nullable) = false];
}

message QueryGetUnitOfComputePriceProposalRequest {
  string participant = 1;
}

message QueryGetUnitOfComputePriceProposalResponse {
  UnitOfComputePriceProposal proposal = 1;
  uint64                     default  = 2;
}

message QueryCurrentEpochGroupDataRequest {}

message QueryCurrentEpochGroupDataResponse {
  EpochGroupData epoch_group_data = 1 [(gogoproto.nullable) = false];
}

message QueryModelsAllRequest {}

message QueryModelsAllResponse {
  repeated Model model = 1 [(gogoproto.nullable) = false];
}

message QueryGetTopMinerRequest {
  string address = 1;
}

message QueryGetTopMinerResponse {
  TopMiner top_miner = 1 [(gogoproto.nullable) = false];
}

message QueryAllTopMinerRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllTopMinerResponse {
  repeated TopMiner                               top_miner  = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryTrainingTaskRequest {
  uint64 id = 1;
}

message QueryTrainingTaskResponse {
  TrainingTask task = 1;
}

message QueryHardwareNodesRequest {
  string participant = 1;
}

message QueryHardwareNodesResponse {
  HardwareNodes nodes = 1;
}

message QueryHardwareNodesAllRequest {}

message QueryHardwareNodesAllResponse {
  repeated HardwareNodes nodes = 1;
}

message QueryQueuedTrainingTasksRequest {}

message QueryQueuedTrainingTasksResponse {
  repeated TrainingTask tasks = 1;
}

message QueryTrainingTaskAllRequest {}

message QueryTrainingTaskAllResponse {
  repeated TrainingTask tasks = 1;
}


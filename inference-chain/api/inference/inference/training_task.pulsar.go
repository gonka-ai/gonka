// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package inference

import (
	fmt "fmt"
	io "io"
	reflect "reflect"
	sync "sync"

	runtime "github.com/cosmos/cosmos-proto/runtime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

var _ protoreflect.List = (*_TrainingTask_8_list)(nil)

type _TrainingTask_8_list struct {
	list *[]*TrainingHardwareResources
}

func (x *_TrainingTask_8_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_TrainingTask_8_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_TrainingTask_8_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*TrainingHardwareResources)
	(*x.list)[i] = concreteValue
}

func (x *_TrainingTask_8_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*TrainingHardwareResources)
	*x.list = append(*x.list, concreteValue)
}

func (x *_TrainingTask_8_list) AppendMutable() protoreflect.Value {
	v := new(TrainingHardwareResources)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_TrainingTask_8_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_TrainingTask_8_list) NewElement() protoreflect.Value {
	v := new(TrainingHardwareResources)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_TrainingTask_8_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_TrainingTask_10_list)(nil)

type _TrainingTask_10_list struct {
	list *[]*TrainingTaskAssignee
}

func (x *_TrainingTask_10_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_TrainingTask_10_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_TrainingTask_10_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*TrainingTaskAssignee)
	(*x.list)[i] = concreteValue
}

func (x *_TrainingTask_10_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*TrainingTaskAssignee)
	*x.list = append(*x.list, concreteValue)
}

func (x *_TrainingTask_10_list) AppendMutable() protoreflect.Value {
	v := new(TrainingTaskAssignee)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_TrainingTask_10_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_TrainingTask_10_list) NewElement() protoreflect.Value {
	v := new(TrainingTaskAssignee)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_TrainingTask_10_list) IsValid() bool {
	return x.list != nil
}

var (
	md_TrainingTask                                     protoreflect.MessageDescriptor
	fd_TrainingTask_id                                  protoreflect.FieldDescriptor
	fd_TrainingTask_requested_by                        protoreflect.FieldDescriptor
	fd_TrainingTask_created_at_block_height             protoreflect.FieldDescriptor
	fd_TrainingTask_assigner                            protoreflect.FieldDescriptor
	fd_TrainingTask_claimed_by_assigner_at_block_height protoreflect.FieldDescriptor
	fd_TrainingTask_assigned_at_block_height            protoreflect.FieldDescriptor
	fd_TrainingTask_finished_at_block_height            protoreflect.FieldDescriptor
	fd_TrainingTask_hardware_resources                  protoreflect.FieldDescriptor
	fd_TrainingTask_config                              protoreflect.FieldDescriptor
	fd_TrainingTask_assignees                           protoreflect.FieldDescriptor
	fd_TrainingTask_epoch                               protoreflect.FieldDescriptor
)

func init() {
	file_inference_inference_training_task_proto_init()
	md_TrainingTask = File_inference_inference_training_task_proto.Messages().ByName("TrainingTask")
	fd_TrainingTask_id = md_TrainingTask.Fields().ByName("id")
	fd_TrainingTask_requested_by = md_TrainingTask.Fields().ByName("requested_by")
	fd_TrainingTask_created_at_block_height = md_TrainingTask.Fields().ByName("created_at_block_height")
	fd_TrainingTask_assigner = md_TrainingTask.Fields().ByName("assigner")
	fd_TrainingTask_claimed_by_assigner_at_block_height = md_TrainingTask.Fields().ByName("claimed_by_assigner_at_block_height")
	fd_TrainingTask_assigned_at_block_height = md_TrainingTask.Fields().ByName("assigned_at_block_height")
	fd_TrainingTask_finished_at_block_height = md_TrainingTask.Fields().ByName("finished_at_block_height")
	fd_TrainingTask_hardware_resources = md_TrainingTask.Fields().ByName("hardware_resources")
	fd_TrainingTask_config = md_TrainingTask.Fields().ByName("config")
	fd_TrainingTask_assignees = md_TrainingTask.Fields().ByName("assignees")
	fd_TrainingTask_epoch = md_TrainingTask.Fields().ByName("epoch")
}

var _ protoreflect.Message = (*fastReflection_TrainingTask)(nil)

type fastReflection_TrainingTask TrainingTask

func (x *TrainingTask) ProtoReflect() protoreflect.Message {
	return (*fastReflection_TrainingTask)(x)
}

func (x *TrainingTask) slowProtoReflect() protoreflect.Message {
	mi := &file_inference_inference_training_task_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_TrainingTask_messageType fastReflection_TrainingTask_messageType
var _ protoreflect.MessageType = fastReflection_TrainingTask_messageType{}

type fastReflection_TrainingTask_messageType struct{}

func (x fastReflection_TrainingTask_messageType) Zero() protoreflect.Message {
	return (*fastReflection_TrainingTask)(nil)
}
func (x fastReflection_TrainingTask_messageType) New() protoreflect.Message {
	return new(fastReflection_TrainingTask)
}
func (x fastReflection_TrainingTask_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_TrainingTask
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_TrainingTask) Descriptor() protoreflect.MessageDescriptor {
	return md_TrainingTask
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_TrainingTask) Type() protoreflect.MessageType {
	return _fastReflection_TrainingTask_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_TrainingTask) New() protoreflect.Message {
	return new(fastReflection_TrainingTask)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_TrainingTask) Interface() protoreflect.ProtoMessage {
	return (*TrainingTask)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_TrainingTask) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_TrainingTask_id, value) {
			return
		}
	}
	if x.RequestedBy != "" {
		value := protoreflect.ValueOfString(x.RequestedBy)
		if !f(fd_TrainingTask_requested_by, value) {
			return
		}
	}
	if x.CreatedAtBlockHeight != uint64(0) {
		value := protoreflect.ValueOfUint64(x.CreatedAtBlockHeight)
		if !f(fd_TrainingTask_created_at_block_height, value) {
			return
		}
	}
	if x.Assigner != "" {
		value := protoreflect.ValueOfString(x.Assigner)
		if !f(fd_TrainingTask_assigner, value) {
			return
		}
	}
	if x.ClaimedByAssignerAtBlockHeight != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ClaimedByAssignerAtBlockHeight)
		if !f(fd_TrainingTask_claimed_by_assigner_at_block_height, value) {
			return
		}
	}
	if x.AssignedAtBlockHeight != uint64(0) {
		value := protoreflect.ValueOfUint64(x.AssignedAtBlockHeight)
		if !f(fd_TrainingTask_assigned_at_block_height, value) {
			return
		}
	}
	if x.FinishedAtBlockHeight != uint64(0) {
		value := protoreflect.ValueOfUint64(x.FinishedAtBlockHeight)
		if !f(fd_TrainingTask_finished_at_block_height, value) {
			return
		}
	}
	if len(x.HardwareResources) != 0 {
		value := protoreflect.ValueOfList(&_TrainingTask_8_list{list: &x.HardwareResources})
		if !f(fd_TrainingTask_hardware_resources, value) {
			return
		}
	}
	if x.Config != nil {
		value := protoreflect.ValueOfMessage(x.Config.ProtoReflect())
		if !f(fd_TrainingTask_config, value) {
			return
		}
	}
	if len(x.Assignees) != 0 {
		value := protoreflect.ValueOfList(&_TrainingTask_10_list{list: &x.Assignees})
		if !f(fd_TrainingTask_assignees, value) {
			return
		}
	}
	if x.Epoch != nil {
		value := protoreflect.ValueOfMessage(x.Epoch.ProtoReflect())
		if !f(fd_TrainingTask_epoch, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_TrainingTask) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "inference.inference.TrainingTask.id":
		return x.Id != uint64(0)
	case "inference.inference.TrainingTask.requested_by":
		return x.RequestedBy != ""
	case "inference.inference.TrainingTask.created_at_block_height":
		return x.CreatedAtBlockHeight != uint64(0)
	case "inference.inference.TrainingTask.assigner":
		return x.Assigner != ""
	case "inference.inference.TrainingTask.claimed_by_assigner_at_block_height":
		return x.ClaimedByAssignerAtBlockHeight != uint64(0)
	case "inference.inference.TrainingTask.assigned_at_block_height":
		return x.AssignedAtBlockHeight != uint64(0)
	case "inference.inference.TrainingTask.finished_at_block_height":
		return x.FinishedAtBlockHeight != uint64(0)
	case "inference.inference.TrainingTask.hardware_resources":
		return len(x.HardwareResources) != 0
	case "inference.inference.TrainingTask.config":
		return x.Config != nil
	case "inference.inference.TrainingTask.assignees":
		return len(x.Assignees) != 0
	case "inference.inference.TrainingTask.epoch":
		return x.Epoch != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.TrainingTask"))
		}
		panic(fmt.Errorf("message inference.inference.TrainingTask does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TrainingTask) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "inference.inference.TrainingTask.id":
		x.Id = uint64(0)
	case "inference.inference.TrainingTask.requested_by":
		x.RequestedBy = ""
	case "inference.inference.TrainingTask.created_at_block_height":
		x.CreatedAtBlockHeight = uint64(0)
	case "inference.inference.TrainingTask.assigner":
		x.Assigner = ""
	case "inference.inference.TrainingTask.claimed_by_assigner_at_block_height":
		x.ClaimedByAssignerAtBlockHeight = uint64(0)
	case "inference.inference.TrainingTask.assigned_at_block_height":
		x.AssignedAtBlockHeight = uint64(0)
	case "inference.inference.TrainingTask.finished_at_block_height":
		x.FinishedAtBlockHeight = uint64(0)
	case "inference.inference.TrainingTask.hardware_resources":
		x.HardwareResources = nil
	case "inference.inference.TrainingTask.config":
		x.Config = nil
	case "inference.inference.TrainingTask.assignees":
		x.Assignees = nil
	case "inference.inference.TrainingTask.epoch":
		x.Epoch = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.TrainingTask"))
		}
		panic(fmt.Errorf("message inference.inference.TrainingTask does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_TrainingTask) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "inference.inference.TrainingTask.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	case "inference.inference.TrainingTask.requested_by":
		value := x.RequestedBy
		return protoreflect.ValueOfString(value)
	case "inference.inference.TrainingTask.created_at_block_height":
		value := x.CreatedAtBlockHeight
		return protoreflect.ValueOfUint64(value)
	case "inference.inference.TrainingTask.assigner":
		value := x.Assigner
		return protoreflect.ValueOfString(value)
	case "inference.inference.TrainingTask.claimed_by_assigner_at_block_height":
		value := x.ClaimedByAssignerAtBlockHeight
		return protoreflect.ValueOfUint64(value)
	case "inference.inference.TrainingTask.assigned_at_block_height":
		value := x.AssignedAtBlockHeight
		return protoreflect.ValueOfUint64(value)
	case "inference.inference.TrainingTask.finished_at_block_height":
		value := x.FinishedAtBlockHeight
		return protoreflect.ValueOfUint64(value)
	case "inference.inference.TrainingTask.hardware_resources":
		if len(x.HardwareResources) == 0 {
			return protoreflect.ValueOfList(&_TrainingTask_8_list{})
		}
		listValue := &_TrainingTask_8_list{list: &x.HardwareResources}
		return protoreflect.ValueOfList(listValue)
	case "inference.inference.TrainingTask.config":
		value := x.Config
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "inference.inference.TrainingTask.assignees":
		if len(x.Assignees) == 0 {
			return protoreflect.ValueOfList(&_TrainingTask_10_list{})
		}
		listValue := &_TrainingTask_10_list{list: &x.Assignees}
		return protoreflect.ValueOfList(listValue)
	case "inference.inference.TrainingTask.epoch":
		value := x.Epoch
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.TrainingTask"))
		}
		panic(fmt.Errorf("message inference.inference.TrainingTask does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TrainingTask) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "inference.inference.TrainingTask.id":
		x.Id = value.Uint()
	case "inference.inference.TrainingTask.requested_by":
		x.RequestedBy = value.Interface().(string)
	case "inference.inference.TrainingTask.created_at_block_height":
		x.CreatedAtBlockHeight = value.Uint()
	case "inference.inference.TrainingTask.assigner":
		x.Assigner = value.Interface().(string)
	case "inference.inference.TrainingTask.claimed_by_assigner_at_block_height":
		x.ClaimedByAssignerAtBlockHeight = value.Uint()
	case "inference.inference.TrainingTask.assigned_at_block_height":
		x.AssignedAtBlockHeight = value.Uint()
	case "inference.inference.TrainingTask.finished_at_block_height":
		x.FinishedAtBlockHeight = value.Uint()
	case "inference.inference.TrainingTask.hardware_resources":
		lv := value.List()
		clv := lv.(*_TrainingTask_8_list)
		x.HardwareResources = *clv.list
	case "inference.inference.TrainingTask.config":
		x.Config = value.Message().Interface().(*TrainingConfig)
	case "inference.inference.TrainingTask.assignees":
		lv := value.List()
		clv := lv.(*_TrainingTask_10_list)
		x.Assignees = *clv.list
	case "inference.inference.TrainingTask.epoch":
		x.Epoch = value.Message().Interface().(*EpochInfo)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.TrainingTask"))
		}
		panic(fmt.Errorf("message inference.inference.TrainingTask does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TrainingTask) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.TrainingTask.hardware_resources":
		if x.HardwareResources == nil {
			x.HardwareResources = []*TrainingHardwareResources{}
		}
		value := &_TrainingTask_8_list{list: &x.HardwareResources}
		return protoreflect.ValueOfList(value)
	case "inference.inference.TrainingTask.config":
		if x.Config == nil {
			x.Config = new(TrainingConfig)
		}
		return protoreflect.ValueOfMessage(x.Config.ProtoReflect())
	case "inference.inference.TrainingTask.assignees":
		if x.Assignees == nil {
			x.Assignees = []*TrainingTaskAssignee{}
		}
		value := &_TrainingTask_10_list{list: &x.Assignees}
		return protoreflect.ValueOfList(value)
	case "inference.inference.TrainingTask.epoch":
		if x.Epoch == nil {
			x.Epoch = new(EpochInfo)
		}
		return protoreflect.ValueOfMessage(x.Epoch.ProtoReflect())
	case "inference.inference.TrainingTask.id":
		panic(fmt.Errorf("field id of message inference.inference.TrainingTask is not mutable"))
	case "inference.inference.TrainingTask.requested_by":
		panic(fmt.Errorf("field requested_by of message inference.inference.TrainingTask is not mutable"))
	case "inference.inference.TrainingTask.created_at_block_height":
		panic(fmt.Errorf("field created_at_block_height of message inference.inference.TrainingTask is not mutable"))
	case "inference.inference.TrainingTask.assigner":
		panic(fmt.Errorf("field assigner of message inference.inference.TrainingTask is not mutable"))
	case "inference.inference.TrainingTask.claimed_by_assigner_at_block_height":
		panic(fmt.Errorf("field claimed_by_assigner_at_block_height of message inference.inference.TrainingTask is not mutable"))
	case "inference.inference.TrainingTask.assigned_at_block_height":
		panic(fmt.Errorf("field assigned_at_block_height of message inference.inference.TrainingTask is not mutable"))
	case "inference.inference.TrainingTask.finished_at_block_height":
		panic(fmt.Errorf("field finished_at_block_height of message inference.inference.TrainingTask is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.TrainingTask"))
		}
		panic(fmt.Errorf("message inference.inference.TrainingTask does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_TrainingTask) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.TrainingTask.id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "inference.inference.TrainingTask.requested_by":
		return protoreflect.ValueOfString("")
	case "inference.inference.TrainingTask.created_at_block_height":
		return protoreflect.ValueOfUint64(uint64(0))
	case "inference.inference.TrainingTask.assigner":
		return protoreflect.ValueOfString("")
	case "inference.inference.TrainingTask.claimed_by_assigner_at_block_height":
		return protoreflect.ValueOfUint64(uint64(0))
	case "inference.inference.TrainingTask.assigned_at_block_height":
		return protoreflect.ValueOfUint64(uint64(0))
	case "inference.inference.TrainingTask.finished_at_block_height":
		return protoreflect.ValueOfUint64(uint64(0))
	case "inference.inference.TrainingTask.hardware_resources":
		list := []*TrainingHardwareResources{}
		return protoreflect.ValueOfList(&_TrainingTask_8_list{list: &list})
	case "inference.inference.TrainingTask.config":
		m := new(TrainingConfig)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "inference.inference.TrainingTask.assignees":
		list := []*TrainingTaskAssignee{}
		return protoreflect.ValueOfList(&_TrainingTask_10_list{list: &list})
	case "inference.inference.TrainingTask.epoch":
		m := new(EpochInfo)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.TrainingTask"))
		}
		panic(fmt.Errorf("message inference.inference.TrainingTask does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_TrainingTask) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in inference.inference.TrainingTask", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_TrainingTask) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TrainingTask) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_TrainingTask) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_TrainingTask) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*TrainingTask)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		l = len(x.RequestedBy)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.CreatedAtBlockHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.CreatedAtBlockHeight))
		}
		l = len(x.Assigner)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.ClaimedByAssignerAtBlockHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.ClaimedByAssignerAtBlockHeight))
		}
		if x.AssignedAtBlockHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.AssignedAtBlockHeight))
		}
		if x.FinishedAtBlockHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.FinishedAtBlockHeight))
		}
		if len(x.HardwareResources) > 0 {
			for _, e := range x.HardwareResources {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.Config != nil {
			l = options.Size(x.Config)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Assignees) > 0 {
			for _, e := range x.Assignees {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.Epoch != nil {
			l = options.Size(x.Epoch)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*TrainingTask)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Epoch != nil {
			encoded, err := options.Marshal(x.Epoch)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x5a
		}
		if len(x.Assignees) > 0 {
			for iNdEx := len(x.Assignees) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Assignees[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x52
			}
		}
		if x.Config != nil {
			encoded, err := options.Marshal(x.Config)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x4a
		}
		if len(x.HardwareResources) > 0 {
			for iNdEx := len(x.HardwareResources) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.HardwareResources[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x42
			}
		}
		if x.FinishedAtBlockHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.FinishedAtBlockHeight))
			i--
			dAtA[i] = 0x38
		}
		if x.AssignedAtBlockHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.AssignedAtBlockHeight))
			i--
			dAtA[i] = 0x30
		}
		if x.ClaimedByAssignerAtBlockHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ClaimedByAssignerAtBlockHeight))
			i--
			dAtA[i] = 0x28
		}
		if len(x.Assigner) > 0 {
			i -= len(x.Assigner)
			copy(dAtA[i:], x.Assigner)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Assigner)))
			i--
			dAtA[i] = 0x22
		}
		if x.CreatedAtBlockHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CreatedAtBlockHeight))
			i--
			dAtA[i] = 0x18
		}
		if len(x.RequestedBy) > 0 {
			i -= len(x.RequestedBy)
			copy(dAtA[i:], x.RequestedBy)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RequestedBy)))
			i--
			dAtA[i] = 0x12
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*TrainingTask)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TrainingTask: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TrainingTask: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RequestedBy", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RequestedBy = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CreatedAtBlockHeight", wireType)
				}
				x.CreatedAtBlockHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CreatedAtBlockHeight |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Assigner", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Assigner = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ClaimedByAssignerAtBlockHeight", wireType)
				}
				x.ClaimedByAssignerAtBlockHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ClaimedByAssignerAtBlockHeight |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AssignedAtBlockHeight", wireType)
				}
				x.AssignedAtBlockHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.AssignedAtBlockHeight |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FinishedAtBlockHeight", wireType)
				}
				x.FinishedAtBlockHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.FinishedAtBlockHeight |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field HardwareResources", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.HardwareResources = append(x.HardwareResources, &TrainingHardwareResources{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.HardwareResources[len(x.HardwareResources)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Config == nil {
					x.Config = &TrainingConfig{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Config); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Assignees", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Assignees = append(x.Assignees, &TrainingTaskAssignee{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Assignees[len(x.Assignees)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Epoch == nil {
					x.Epoch = &EpochInfo{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Epoch); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_TrainingHardwareResources       protoreflect.MessageDescriptor
	fd_TrainingHardwareResources_type  protoreflect.FieldDescriptor
	fd_TrainingHardwareResources_count protoreflect.FieldDescriptor
)

func init() {
	file_inference_inference_training_task_proto_init()
	md_TrainingHardwareResources = File_inference_inference_training_task_proto.Messages().ByName("TrainingHardwareResources")
	fd_TrainingHardwareResources_type = md_TrainingHardwareResources.Fields().ByName("type")
	fd_TrainingHardwareResources_count = md_TrainingHardwareResources.Fields().ByName("count")
}

var _ protoreflect.Message = (*fastReflection_TrainingHardwareResources)(nil)

type fastReflection_TrainingHardwareResources TrainingHardwareResources

func (x *TrainingHardwareResources) ProtoReflect() protoreflect.Message {
	return (*fastReflection_TrainingHardwareResources)(x)
}

func (x *TrainingHardwareResources) slowProtoReflect() protoreflect.Message {
	mi := &file_inference_inference_training_task_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_TrainingHardwareResources_messageType fastReflection_TrainingHardwareResources_messageType
var _ protoreflect.MessageType = fastReflection_TrainingHardwareResources_messageType{}

type fastReflection_TrainingHardwareResources_messageType struct{}

func (x fastReflection_TrainingHardwareResources_messageType) Zero() protoreflect.Message {
	return (*fastReflection_TrainingHardwareResources)(nil)
}
func (x fastReflection_TrainingHardwareResources_messageType) New() protoreflect.Message {
	return new(fastReflection_TrainingHardwareResources)
}
func (x fastReflection_TrainingHardwareResources_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_TrainingHardwareResources
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_TrainingHardwareResources) Descriptor() protoreflect.MessageDescriptor {
	return md_TrainingHardwareResources
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_TrainingHardwareResources) Type() protoreflect.MessageType {
	return _fastReflection_TrainingHardwareResources_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_TrainingHardwareResources) New() protoreflect.Message {
	return new(fastReflection_TrainingHardwareResources)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_TrainingHardwareResources) Interface() protoreflect.ProtoMessage {
	return (*TrainingHardwareResources)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_TrainingHardwareResources) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Type_ != "" {
		value := protoreflect.ValueOfString(x.Type_)
		if !f(fd_TrainingHardwareResources_type, value) {
			return
		}
	}
	if x.Count != uint32(0) {
		value := protoreflect.ValueOfUint32(x.Count)
		if !f(fd_TrainingHardwareResources_count, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_TrainingHardwareResources) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "inference.inference.TrainingHardwareResources.type":
		return x.Type_ != ""
	case "inference.inference.TrainingHardwareResources.count":
		return x.Count != uint32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.TrainingHardwareResources"))
		}
		panic(fmt.Errorf("message inference.inference.TrainingHardwareResources does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TrainingHardwareResources) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "inference.inference.TrainingHardwareResources.type":
		x.Type_ = ""
	case "inference.inference.TrainingHardwareResources.count":
		x.Count = uint32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.TrainingHardwareResources"))
		}
		panic(fmt.Errorf("message inference.inference.TrainingHardwareResources does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_TrainingHardwareResources) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "inference.inference.TrainingHardwareResources.type":
		value := x.Type_
		return protoreflect.ValueOfString(value)
	case "inference.inference.TrainingHardwareResources.count":
		value := x.Count
		return protoreflect.ValueOfUint32(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.TrainingHardwareResources"))
		}
		panic(fmt.Errorf("message inference.inference.TrainingHardwareResources does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TrainingHardwareResources) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "inference.inference.TrainingHardwareResources.type":
		x.Type_ = value.Interface().(string)
	case "inference.inference.TrainingHardwareResources.count":
		x.Count = uint32(value.Uint())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.TrainingHardwareResources"))
		}
		panic(fmt.Errorf("message inference.inference.TrainingHardwareResources does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TrainingHardwareResources) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.TrainingHardwareResources.type":
		panic(fmt.Errorf("field type of message inference.inference.TrainingHardwareResources is not mutable"))
	case "inference.inference.TrainingHardwareResources.count":
		panic(fmt.Errorf("field count of message inference.inference.TrainingHardwareResources is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.TrainingHardwareResources"))
		}
		panic(fmt.Errorf("message inference.inference.TrainingHardwareResources does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_TrainingHardwareResources) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.TrainingHardwareResources.type":
		return protoreflect.ValueOfString("")
	case "inference.inference.TrainingHardwareResources.count":
		return protoreflect.ValueOfUint32(uint32(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.TrainingHardwareResources"))
		}
		panic(fmt.Errorf("message inference.inference.TrainingHardwareResources does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_TrainingHardwareResources) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in inference.inference.TrainingHardwareResources", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_TrainingHardwareResources) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TrainingHardwareResources) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_TrainingHardwareResources) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_TrainingHardwareResources) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*TrainingHardwareResources)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Type_)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Count != 0 {
			n += 1 + runtime.Sov(uint64(x.Count))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*TrainingHardwareResources)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Count != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Count))
			i--
			dAtA[i] = 0x10
		}
		if len(x.Type_) > 0 {
			i -= len(x.Type_)
			copy(dAtA[i:], x.Type_)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Type_)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*TrainingHardwareResources)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TrainingHardwareResources: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TrainingHardwareResources: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Type_", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Type_ = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
				}
				x.Count = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Count |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_TrainingConfig                          protoreflect.MessageDescriptor
	fd_TrainingConfig_datasets                 protoreflect.FieldDescriptor
	fd_TrainingConfig_num_uoc_estimation_steps protoreflect.FieldDescriptor
)

func init() {
	file_inference_inference_training_task_proto_init()
	md_TrainingConfig = File_inference_inference_training_task_proto.Messages().ByName("TrainingConfig")
	fd_TrainingConfig_datasets = md_TrainingConfig.Fields().ByName("datasets")
	fd_TrainingConfig_num_uoc_estimation_steps = md_TrainingConfig.Fields().ByName("num_uoc_estimation_steps")
}

var _ protoreflect.Message = (*fastReflection_TrainingConfig)(nil)

type fastReflection_TrainingConfig TrainingConfig

func (x *TrainingConfig) ProtoReflect() protoreflect.Message {
	return (*fastReflection_TrainingConfig)(x)
}

func (x *TrainingConfig) slowProtoReflect() protoreflect.Message {
	mi := &file_inference_inference_training_task_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_TrainingConfig_messageType fastReflection_TrainingConfig_messageType
var _ protoreflect.MessageType = fastReflection_TrainingConfig_messageType{}

type fastReflection_TrainingConfig_messageType struct{}

func (x fastReflection_TrainingConfig_messageType) Zero() protoreflect.Message {
	return (*fastReflection_TrainingConfig)(nil)
}
func (x fastReflection_TrainingConfig_messageType) New() protoreflect.Message {
	return new(fastReflection_TrainingConfig)
}
func (x fastReflection_TrainingConfig_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_TrainingConfig
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_TrainingConfig) Descriptor() protoreflect.MessageDescriptor {
	return md_TrainingConfig
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_TrainingConfig) Type() protoreflect.MessageType {
	return _fastReflection_TrainingConfig_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_TrainingConfig) New() protoreflect.Message {
	return new(fastReflection_TrainingConfig)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_TrainingConfig) Interface() protoreflect.ProtoMessage {
	return (*TrainingConfig)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_TrainingConfig) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Datasets != nil {
		value := protoreflect.ValueOfMessage(x.Datasets.ProtoReflect())
		if !f(fd_TrainingConfig_datasets, value) {
			return
		}
	}
	if x.NumUocEstimationSteps != uint32(0) {
		value := protoreflect.ValueOfUint32(x.NumUocEstimationSteps)
		if !f(fd_TrainingConfig_num_uoc_estimation_steps, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_TrainingConfig) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "inference.inference.TrainingConfig.datasets":
		return x.Datasets != nil
	case "inference.inference.TrainingConfig.num_uoc_estimation_steps":
		return x.NumUocEstimationSteps != uint32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.TrainingConfig"))
		}
		panic(fmt.Errorf("message inference.inference.TrainingConfig does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TrainingConfig) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "inference.inference.TrainingConfig.datasets":
		x.Datasets = nil
	case "inference.inference.TrainingConfig.num_uoc_estimation_steps":
		x.NumUocEstimationSteps = uint32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.TrainingConfig"))
		}
		panic(fmt.Errorf("message inference.inference.TrainingConfig does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_TrainingConfig) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "inference.inference.TrainingConfig.datasets":
		value := x.Datasets
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "inference.inference.TrainingConfig.num_uoc_estimation_steps":
		value := x.NumUocEstimationSteps
		return protoreflect.ValueOfUint32(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.TrainingConfig"))
		}
		panic(fmt.Errorf("message inference.inference.TrainingConfig does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TrainingConfig) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "inference.inference.TrainingConfig.datasets":
		x.Datasets = value.Message().Interface().(*TrainingDatasets)
	case "inference.inference.TrainingConfig.num_uoc_estimation_steps":
		x.NumUocEstimationSteps = uint32(value.Uint())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.TrainingConfig"))
		}
		panic(fmt.Errorf("message inference.inference.TrainingConfig does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TrainingConfig) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.TrainingConfig.datasets":
		if x.Datasets == nil {
			x.Datasets = new(TrainingDatasets)
		}
		return protoreflect.ValueOfMessage(x.Datasets.ProtoReflect())
	case "inference.inference.TrainingConfig.num_uoc_estimation_steps":
		panic(fmt.Errorf("field num_uoc_estimation_steps of message inference.inference.TrainingConfig is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.TrainingConfig"))
		}
		panic(fmt.Errorf("message inference.inference.TrainingConfig does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_TrainingConfig) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.TrainingConfig.datasets":
		m := new(TrainingDatasets)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "inference.inference.TrainingConfig.num_uoc_estimation_steps":
		return protoreflect.ValueOfUint32(uint32(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.TrainingConfig"))
		}
		panic(fmt.Errorf("message inference.inference.TrainingConfig does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_TrainingConfig) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in inference.inference.TrainingConfig", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_TrainingConfig) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TrainingConfig) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_TrainingConfig) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_TrainingConfig) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*TrainingConfig)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Datasets != nil {
			l = options.Size(x.Datasets)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.NumUocEstimationSteps != 0 {
			n += 1 + runtime.Sov(uint64(x.NumUocEstimationSteps))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*TrainingConfig)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.NumUocEstimationSteps != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.NumUocEstimationSteps))
			i--
			dAtA[i] = 0x10
		}
		if x.Datasets != nil {
			encoded, err := options.Marshal(x.Datasets)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*TrainingConfig)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TrainingConfig: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TrainingConfig: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Datasets", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Datasets == nil {
					x.Datasets = &TrainingDatasets{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Datasets); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NumUocEstimationSteps", wireType)
				}
				x.NumUocEstimationSteps = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.NumUocEstimationSteps |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_TrainingDatasets       protoreflect.MessageDescriptor
	fd_TrainingDatasets_train protoreflect.FieldDescriptor
	fd_TrainingDatasets_test  protoreflect.FieldDescriptor
)

func init() {
	file_inference_inference_training_task_proto_init()
	md_TrainingDatasets = File_inference_inference_training_task_proto.Messages().ByName("TrainingDatasets")
	fd_TrainingDatasets_train = md_TrainingDatasets.Fields().ByName("train")
	fd_TrainingDatasets_test = md_TrainingDatasets.Fields().ByName("test")
}

var _ protoreflect.Message = (*fastReflection_TrainingDatasets)(nil)

type fastReflection_TrainingDatasets TrainingDatasets

func (x *TrainingDatasets) ProtoReflect() protoreflect.Message {
	return (*fastReflection_TrainingDatasets)(x)
}

func (x *TrainingDatasets) slowProtoReflect() protoreflect.Message {
	mi := &file_inference_inference_training_task_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_TrainingDatasets_messageType fastReflection_TrainingDatasets_messageType
var _ protoreflect.MessageType = fastReflection_TrainingDatasets_messageType{}

type fastReflection_TrainingDatasets_messageType struct{}

func (x fastReflection_TrainingDatasets_messageType) Zero() protoreflect.Message {
	return (*fastReflection_TrainingDatasets)(nil)
}
func (x fastReflection_TrainingDatasets_messageType) New() protoreflect.Message {
	return new(fastReflection_TrainingDatasets)
}
func (x fastReflection_TrainingDatasets_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_TrainingDatasets
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_TrainingDatasets) Descriptor() protoreflect.MessageDescriptor {
	return md_TrainingDatasets
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_TrainingDatasets) Type() protoreflect.MessageType {
	return _fastReflection_TrainingDatasets_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_TrainingDatasets) New() protoreflect.Message {
	return new(fastReflection_TrainingDatasets)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_TrainingDatasets) Interface() protoreflect.ProtoMessage {
	return (*TrainingDatasets)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_TrainingDatasets) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Train != "" {
		value := protoreflect.ValueOfString(x.Train)
		if !f(fd_TrainingDatasets_train, value) {
			return
		}
	}
	if x.Test != "" {
		value := protoreflect.ValueOfString(x.Test)
		if !f(fd_TrainingDatasets_test, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_TrainingDatasets) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "inference.inference.TrainingDatasets.train":
		return x.Train != ""
	case "inference.inference.TrainingDatasets.test":
		return x.Test != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.TrainingDatasets"))
		}
		panic(fmt.Errorf("message inference.inference.TrainingDatasets does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TrainingDatasets) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "inference.inference.TrainingDatasets.train":
		x.Train = ""
	case "inference.inference.TrainingDatasets.test":
		x.Test = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.TrainingDatasets"))
		}
		panic(fmt.Errorf("message inference.inference.TrainingDatasets does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_TrainingDatasets) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "inference.inference.TrainingDatasets.train":
		value := x.Train
		return protoreflect.ValueOfString(value)
	case "inference.inference.TrainingDatasets.test":
		value := x.Test
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.TrainingDatasets"))
		}
		panic(fmt.Errorf("message inference.inference.TrainingDatasets does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TrainingDatasets) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "inference.inference.TrainingDatasets.train":
		x.Train = value.Interface().(string)
	case "inference.inference.TrainingDatasets.test":
		x.Test = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.TrainingDatasets"))
		}
		panic(fmt.Errorf("message inference.inference.TrainingDatasets does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TrainingDatasets) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.TrainingDatasets.train":
		panic(fmt.Errorf("field train of message inference.inference.TrainingDatasets is not mutable"))
	case "inference.inference.TrainingDatasets.test":
		panic(fmt.Errorf("field test of message inference.inference.TrainingDatasets is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.TrainingDatasets"))
		}
		panic(fmt.Errorf("message inference.inference.TrainingDatasets does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_TrainingDatasets) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.TrainingDatasets.train":
		return protoreflect.ValueOfString("")
	case "inference.inference.TrainingDatasets.test":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.TrainingDatasets"))
		}
		panic(fmt.Errorf("message inference.inference.TrainingDatasets does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_TrainingDatasets) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in inference.inference.TrainingDatasets", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_TrainingDatasets) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TrainingDatasets) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_TrainingDatasets) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_TrainingDatasets) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*TrainingDatasets)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Train)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Test)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*TrainingDatasets)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Test) > 0 {
			i -= len(x.Test)
			copy(dAtA[i:], x.Test)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Test)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Train) > 0 {
			i -= len(x.Train)
			copy(dAtA[i:], x.Train)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Train)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*TrainingDatasets)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TrainingDatasets: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TrainingDatasets: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Train", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Train = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Test", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Test = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_TrainingTaskAssignee_2_list)(nil)

type _TrainingTaskAssignee_2_list struct {
	list *[]string
}

func (x *_TrainingTaskAssignee_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_TrainingTaskAssignee_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_TrainingTaskAssignee_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_TrainingTaskAssignee_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_TrainingTaskAssignee_2_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message TrainingTaskAssignee at list field NodeIds as it is not of Message kind"))
}

func (x *_TrainingTaskAssignee_2_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_TrainingTaskAssignee_2_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_TrainingTaskAssignee_2_list) IsValid() bool {
	return x.list != nil
}

var (
	md_TrainingTaskAssignee             protoreflect.MessageDescriptor
	fd_TrainingTaskAssignee_participant protoreflect.FieldDescriptor
	fd_TrainingTaskAssignee_node_ids    protoreflect.FieldDescriptor
)

func init() {
	file_inference_inference_training_task_proto_init()
	md_TrainingTaskAssignee = File_inference_inference_training_task_proto.Messages().ByName("TrainingTaskAssignee")
	fd_TrainingTaskAssignee_participant = md_TrainingTaskAssignee.Fields().ByName("participant")
	fd_TrainingTaskAssignee_node_ids = md_TrainingTaskAssignee.Fields().ByName("node_ids")
}

var _ protoreflect.Message = (*fastReflection_TrainingTaskAssignee)(nil)

type fastReflection_TrainingTaskAssignee TrainingTaskAssignee

func (x *TrainingTaskAssignee) ProtoReflect() protoreflect.Message {
	return (*fastReflection_TrainingTaskAssignee)(x)
}

func (x *TrainingTaskAssignee) slowProtoReflect() protoreflect.Message {
	mi := &file_inference_inference_training_task_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_TrainingTaskAssignee_messageType fastReflection_TrainingTaskAssignee_messageType
var _ protoreflect.MessageType = fastReflection_TrainingTaskAssignee_messageType{}

type fastReflection_TrainingTaskAssignee_messageType struct{}

func (x fastReflection_TrainingTaskAssignee_messageType) Zero() protoreflect.Message {
	return (*fastReflection_TrainingTaskAssignee)(nil)
}
func (x fastReflection_TrainingTaskAssignee_messageType) New() protoreflect.Message {
	return new(fastReflection_TrainingTaskAssignee)
}
func (x fastReflection_TrainingTaskAssignee_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_TrainingTaskAssignee
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_TrainingTaskAssignee) Descriptor() protoreflect.MessageDescriptor {
	return md_TrainingTaskAssignee
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_TrainingTaskAssignee) Type() protoreflect.MessageType {
	return _fastReflection_TrainingTaskAssignee_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_TrainingTaskAssignee) New() protoreflect.Message {
	return new(fastReflection_TrainingTaskAssignee)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_TrainingTaskAssignee) Interface() protoreflect.ProtoMessage {
	return (*TrainingTaskAssignee)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_TrainingTaskAssignee) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Participant != "" {
		value := protoreflect.ValueOfString(x.Participant)
		if !f(fd_TrainingTaskAssignee_participant, value) {
			return
		}
	}
	if len(x.NodeIds) != 0 {
		value := protoreflect.ValueOfList(&_TrainingTaskAssignee_2_list{list: &x.NodeIds})
		if !f(fd_TrainingTaskAssignee_node_ids, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_TrainingTaskAssignee) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "inference.inference.TrainingTaskAssignee.participant":
		return x.Participant != ""
	case "inference.inference.TrainingTaskAssignee.node_ids":
		return len(x.NodeIds) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.TrainingTaskAssignee"))
		}
		panic(fmt.Errorf("message inference.inference.TrainingTaskAssignee does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TrainingTaskAssignee) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "inference.inference.TrainingTaskAssignee.participant":
		x.Participant = ""
	case "inference.inference.TrainingTaskAssignee.node_ids":
		x.NodeIds = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.TrainingTaskAssignee"))
		}
		panic(fmt.Errorf("message inference.inference.TrainingTaskAssignee does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_TrainingTaskAssignee) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "inference.inference.TrainingTaskAssignee.participant":
		value := x.Participant
		return protoreflect.ValueOfString(value)
	case "inference.inference.TrainingTaskAssignee.node_ids":
		if len(x.NodeIds) == 0 {
			return protoreflect.ValueOfList(&_TrainingTaskAssignee_2_list{})
		}
		listValue := &_TrainingTaskAssignee_2_list{list: &x.NodeIds}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.TrainingTaskAssignee"))
		}
		panic(fmt.Errorf("message inference.inference.TrainingTaskAssignee does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TrainingTaskAssignee) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "inference.inference.TrainingTaskAssignee.participant":
		x.Participant = value.Interface().(string)
	case "inference.inference.TrainingTaskAssignee.node_ids":
		lv := value.List()
		clv := lv.(*_TrainingTaskAssignee_2_list)
		x.NodeIds = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.TrainingTaskAssignee"))
		}
		panic(fmt.Errorf("message inference.inference.TrainingTaskAssignee does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TrainingTaskAssignee) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.TrainingTaskAssignee.node_ids":
		if x.NodeIds == nil {
			x.NodeIds = []string{}
		}
		value := &_TrainingTaskAssignee_2_list{list: &x.NodeIds}
		return protoreflect.ValueOfList(value)
	case "inference.inference.TrainingTaskAssignee.participant":
		panic(fmt.Errorf("field participant of message inference.inference.TrainingTaskAssignee is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.TrainingTaskAssignee"))
		}
		panic(fmt.Errorf("message inference.inference.TrainingTaskAssignee does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_TrainingTaskAssignee) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.TrainingTaskAssignee.participant":
		return protoreflect.ValueOfString("")
	case "inference.inference.TrainingTaskAssignee.node_ids":
		list := []string{}
		return protoreflect.ValueOfList(&_TrainingTaskAssignee_2_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.TrainingTaskAssignee"))
		}
		panic(fmt.Errorf("message inference.inference.TrainingTaskAssignee does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_TrainingTaskAssignee) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in inference.inference.TrainingTaskAssignee", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_TrainingTaskAssignee) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TrainingTaskAssignee) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_TrainingTaskAssignee) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_TrainingTaskAssignee) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*TrainingTaskAssignee)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Participant)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.NodeIds) > 0 {
			for _, s := range x.NodeIds {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*TrainingTaskAssignee)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.NodeIds) > 0 {
			for iNdEx := len(x.NodeIds) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.NodeIds[iNdEx])
				copy(dAtA[i:], x.NodeIds[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.NodeIds[iNdEx])))
				i--
				dAtA[i] = 0x12
			}
		}
		if len(x.Participant) > 0 {
			i -= len(x.Participant)
			copy(dAtA[i:], x.Participant)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Participant)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*TrainingTaskAssignee)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TrainingTaskAssignee: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TrainingTaskAssignee: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Participant", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Participant = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NodeIds", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.NodeIds = append(x.NodeIds, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_EpochInfo                         protoreflect.MessageDescriptor
	fd_EpochInfo_last_epoch              protoreflect.FieldDescriptor
	fd_EpochInfo_last_epoch_block_height protoreflect.FieldDescriptor
	fd_EpochInfo_last_epoch_timestamp    protoreflect.FieldDescriptor
	fd_EpochInfo_last_epoch_is_finished  protoreflect.FieldDescriptor
)

func init() {
	file_inference_inference_training_task_proto_init()
	md_EpochInfo = File_inference_inference_training_task_proto.Messages().ByName("EpochInfo")
	fd_EpochInfo_last_epoch = md_EpochInfo.Fields().ByName("last_epoch")
	fd_EpochInfo_last_epoch_block_height = md_EpochInfo.Fields().ByName("last_epoch_block_height")
	fd_EpochInfo_last_epoch_timestamp = md_EpochInfo.Fields().ByName("last_epoch_timestamp")
	fd_EpochInfo_last_epoch_is_finished = md_EpochInfo.Fields().ByName("last_epoch_is_finished")
}

var _ protoreflect.Message = (*fastReflection_EpochInfo)(nil)

type fastReflection_EpochInfo EpochInfo

func (x *EpochInfo) ProtoReflect() protoreflect.Message {
	return (*fastReflection_EpochInfo)(x)
}

func (x *EpochInfo) slowProtoReflect() protoreflect.Message {
	mi := &file_inference_inference_training_task_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_EpochInfo_messageType fastReflection_EpochInfo_messageType
var _ protoreflect.MessageType = fastReflection_EpochInfo_messageType{}

type fastReflection_EpochInfo_messageType struct{}

func (x fastReflection_EpochInfo_messageType) Zero() protoreflect.Message {
	return (*fastReflection_EpochInfo)(nil)
}
func (x fastReflection_EpochInfo_messageType) New() protoreflect.Message {
	return new(fastReflection_EpochInfo)
}
func (x fastReflection_EpochInfo_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_EpochInfo
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_EpochInfo) Descriptor() protoreflect.MessageDescriptor {
	return md_EpochInfo
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_EpochInfo) Type() protoreflect.MessageType {
	return _fastReflection_EpochInfo_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_EpochInfo) New() protoreflect.Message {
	return new(fastReflection_EpochInfo)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_EpochInfo) Interface() protoreflect.ProtoMessage {
	return (*EpochInfo)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_EpochInfo) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.LastEpoch != int32(0) {
		value := protoreflect.ValueOfInt32(x.LastEpoch)
		if !f(fd_EpochInfo_last_epoch, value) {
			return
		}
	}
	if x.LastEpochBlockHeight != int64(0) {
		value := protoreflect.ValueOfInt64(x.LastEpochBlockHeight)
		if !f(fd_EpochInfo_last_epoch_block_height, value) {
			return
		}
	}
	if x.LastEpochTimestamp != int64(0) {
		value := protoreflect.ValueOfInt64(x.LastEpochTimestamp)
		if !f(fd_EpochInfo_last_epoch_timestamp, value) {
			return
		}
	}
	if x.LastEpochIsFinished != false {
		value := protoreflect.ValueOfBool(x.LastEpochIsFinished)
		if !f(fd_EpochInfo_last_epoch_is_finished, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_EpochInfo) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "inference.inference.EpochInfo.last_epoch":
		return x.LastEpoch != int32(0)
	case "inference.inference.EpochInfo.last_epoch_block_height":
		return x.LastEpochBlockHeight != int64(0)
	case "inference.inference.EpochInfo.last_epoch_timestamp":
		return x.LastEpochTimestamp != int64(0)
	case "inference.inference.EpochInfo.last_epoch_is_finished":
		return x.LastEpochIsFinished != false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.EpochInfo"))
		}
		panic(fmt.Errorf("message inference.inference.EpochInfo does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EpochInfo) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "inference.inference.EpochInfo.last_epoch":
		x.LastEpoch = int32(0)
	case "inference.inference.EpochInfo.last_epoch_block_height":
		x.LastEpochBlockHeight = int64(0)
	case "inference.inference.EpochInfo.last_epoch_timestamp":
		x.LastEpochTimestamp = int64(0)
	case "inference.inference.EpochInfo.last_epoch_is_finished":
		x.LastEpochIsFinished = false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.EpochInfo"))
		}
		panic(fmt.Errorf("message inference.inference.EpochInfo does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_EpochInfo) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "inference.inference.EpochInfo.last_epoch":
		value := x.LastEpoch
		return protoreflect.ValueOfInt32(value)
	case "inference.inference.EpochInfo.last_epoch_block_height":
		value := x.LastEpochBlockHeight
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.EpochInfo.last_epoch_timestamp":
		value := x.LastEpochTimestamp
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.EpochInfo.last_epoch_is_finished":
		value := x.LastEpochIsFinished
		return protoreflect.ValueOfBool(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.EpochInfo"))
		}
		panic(fmt.Errorf("message inference.inference.EpochInfo does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EpochInfo) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "inference.inference.EpochInfo.last_epoch":
		x.LastEpoch = int32(value.Int())
	case "inference.inference.EpochInfo.last_epoch_block_height":
		x.LastEpochBlockHeight = value.Int()
	case "inference.inference.EpochInfo.last_epoch_timestamp":
		x.LastEpochTimestamp = value.Int()
	case "inference.inference.EpochInfo.last_epoch_is_finished":
		x.LastEpochIsFinished = value.Bool()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.EpochInfo"))
		}
		panic(fmt.Errorf("message inference.inference.EpochInfo does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EpochInfo) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.EpochInfo.last_epoch":
		panic(fmt.Errorf("field last_epoch of message inference.inference.EpochInfo is not mutable"))
	case "inference.inference.EpochInfo.last_epoch_block_height":
		panic(fmt.Errorf("field last_epoch_block_height of message inference.inference.EpochInfo is not mutable"))
	case "inference.inference.EpochInfo.last_epoch_timestamp":
		panic(fmt.Errorf("field last_epoch_timestamp of message inference.inference.EpochInfo is not mutable"))
	case "inference.inference.EpochInfo.last_epoch_is_finished":
		panic(fmt.Errorf("field last_epoch_is_finished of message inference.inference.EpochInfo is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.EpochInfo"))
		}
		panic(fmt.Errorf("message inference.inference.EpochInfo does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_EpochInfo) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.EpochInfo.last_epoch":
		return protoreflect.ValueOfInt32(int32(0))
	case "inference.inference.EpochInfo.last_epoch_block_height":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.EpochInfo.last_epoch_timestamp":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.EpochInfo.last_epoch_is_finished":
		return protoreflect.ValueOfBool(false)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.EpochInfo"))
		}
		panic(fmt.Errorf("message inference.inference.EpochInfo does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_EpochInfo) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in inference.inference.EpochInfo", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_EpochInfo) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EpochInfo) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_EpochInfo) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_EpochInfo) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*EpochInfo)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.LastEpoch != 0 {
			n += 1 + runtime.Sov(uint64(x.LastEpoch))
		}
		if x.LastEpochBlockHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.LastEpochBlockHeight))
		}
		if x.LastEpochTimestamp != 0 {
			n += 1 + runtime.Sov(uint64(x.LastEpochTimestamp))
		}
		if x.LastEpochIsFinished {
			n += 2
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*EpochInfo)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.LastEpochIsFinished {
			i--
			if x.LastEpochIsFinished {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x20
		}
		if x.LastEpochTimestamp != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.LastEpochTimestamp))
			i--
			dAtA[i] = 0x18
		}
		if x.LastEpochBlockHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.LastEpochBlockHeight))
			i--
			dAtA[i] = 0x10
		}
		if x.LastEpoch != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.LastEpoch))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*EpochInfo)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EpochInfo: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EpochInfo: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastEpoch", wireType)
				}
				x.LastEpoch = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.LastEpoch |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastEpochBlockHeight", wireType)
				}
				x.LastEpochBlockHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.LastEpochBlockHeight |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastEpochTimestamp", wireType)
				}
				x.LastEpochTimestamp = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.LastEpochTimestamp |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastEpochIsFinished", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.LastEpochIsFinished = bool(v != 0)
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: inference/inference/training_task.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TrainingTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                             uint64                       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RequestedBy                    string                       `protobuf:"bytes,2,opt,name=requested_by,json=requestedBy,proto3" json:"requested_by,omitempty"`
	CreatedAtBlockHeight           uint64                       `protobuf:"varint,3,opt,name=created_at_block_height,json=createdAtBlockHeight,proto3" json:"created_at_block_height,omitempty"`
	Assigner                       string                       `protobuf:"bytes,4,opt,name=assigner,proto3" json:"assigner,omitempty"`
	ClaimedByAssignerAtBlockHeight uint64                       `protobuf:"varint,5,opt,name=claimed_by_assigner_at_block_height,json=claimedByAssignerAtBlockHeight,proto3" json:"claimed_by_assigner_at_block_height,omitempty"`
	AssignedAtBlockHeight          uint64                       `protobuf:"varint,6,opt,name=assigned_at_block_height,json=assignedAtBlockHeight,proto3" json:"assigned_at_block_height,omitempty"`
	FinishedAtBlockHeight          uint64                       `protobuf:"varint,7,opt,name=finished_at_block_height,json=finishedAtBlockHeight,proto3" json:"finished_at_block_height,omitempty"`
	HardwareResources              []*TrainingHardwareResources `protobuf:"bytes,8,rep,name=hardware_resources,json=hardwareResources,proto3" json:"hardware_resources,omitempty"`
	Config                         *TrainingConfig              `protobuf:"bytes,9,opt,name=config,proto3" json:"config,omitempty"`
	Assignees                      []*TrainingTaskAssignee      `protobuf:"bytes,10,rep,name=assignees,proto3" json:"assignees,omitempty"`
	Epoch                          *EpochInfo                   `protobuf:"bytes,11,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (x *TrainingTask) Reset() {
	*x = TrainingTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_inference_training_task_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrainingTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrainingTask) ProtoMessage() {}

// Deprecated: Use TrainingTask.ProtoReflect.Descriptor instead.
func (*TrainingTask) Descriptor() ([]byte, []int) {
	return file_inference_inference_training_task_proto_rawDescGZIP(), []int{0}
}

func (x *TrainingTask) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TrainingTask) GetRequestedBy() string {
	if x != nil {
		return x.RequestedBy
	}
	return ""
}

func (x *TrainingTask) GetCreatedAtBlockHeight() uint64 {
	if x != nil {
		return x.CreatedAtBlockHeight
	}
	return 0
}

func (x *TrainingTask) GetAssigner() string {
	if x != nil {
		return x.Assigner
	}
	return ""
}

func (x *TrainingTask) GetClaimedByAssignerAtBlockHeight() uint64 {
	if x != nil {
		return x.ClaimedByAssignerAtBlockHeight
	}
	return 0
}

func (x *TrainingTask) GetAssignedAtBlockHeight() uint64 {
	if x != nil {
		return x.AssignedAtBlockHeight
	}
	return 0
}

func (x *TrainingTask) GetFinishedAtBlockHeight() uint64 {
	if x != nil {
		return x.FinishedAtBlockHeight
	}
	return 0
}

func (x *TrainingTask) GetHardwareResources() []*TrainingHardwareResources {
	if x != nil {
		return x.HardwareResources
	}
	return nil
}

func (x *TrainingTask) GetConfig() *TrainingConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *TrainingTask) GetAssignees() []*TrainingTaskAssignee {
	if x != nil {
		return x.Assignees
	}
	return nil
}

func (x *TrainingTask) GetEpoch() *EpochInfo {
	if x != nil {
		return x.Epoch
	}
	return nil
}

type TrainingHardwareResources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type_ string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Count uint32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *TrainingHardwareResources) Reset() {
	*x = TrainingHardwareResources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_inference_training_task_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrainingHardwareResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrainingHardwareResources) ProtoMessage() {}

// Deprecated: Use TrainingHardwareResources.ProtoReflect.Descriptor instead.
func (*TrainingHardwareResources) Descriptor() ([]byte, []int) {
	return file_inference_inference_training_task_proto_rawDescGZIP(), []int{1}
}

func (x *TrainingHardwareResources) GetType_() string {
	if x != nil {
		return x.Type_
	}
	return ""
}

func (x *TrainingHardwareResources) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type TrainingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datasets              *TrainingDatasets `protobuf:"bytes,1,opt,name=datasets,proto3" json:"datasets,omitempty"`
	NumUocEstimationSteps uint32            `protobuf:"varint,2,opt,name=num_uoc_estimation_steps,json=numUocEstimationSteps,proto3" json:"num_uoc_estimation_steps,omitempty"`
}

func (x *TrainingConfig) Reset() {
	*x = TrainingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_inference_training_task_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrainingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrainingConfig) ProtoMessage() {}

// Deprecated: Use TrainingConfig.ProtoReflect.Descriptor instead.
func (*TrainingConfig) Descriptor() ([]byte, []int) {
	return file_inference_inference_training_task_proto_rawDescGZIP(), []int{2}
}

func (x *TrainingConfig) GetDatasets() *TrainingDatasets {
	if x != nil {
		return x.Datasets
	}
	return nil
}

func (x *TrainingConfig) GetNumUocEstimationSteps() uint32 {
	if x != nil {
		return x.NumUocEstimationSteps
	}
	return 0
}

type TrainingDatasets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Train string `protobuf:"bytes,1,opt,name=train,proto3" json:"train,omitempty"`
	Test  string `protobuf:"bytes,2,opt,name=test,proto3" json:"test,omitempty"`
}

func (x *TrainingDatasets) Reset() {
	*x = TrainingDatasets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_inference_training_task_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrainingDatasets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrainingDatasets) ProtoMessage() {}

// Deprecated: Use TrainingDatasets.ProtoReflect.Descriptor instead.
func (*TrainingDatasets) Descriptor() ([]byte, []int) {
	return file_inference_inference_training_task_proto_rawDescGZIP(), []int{3}
}

func (x *TrainingDatasets) GetTrain() string {
	if x != nil {
		return x.Train
	}
	return ""
}

func (x *TrainingDatasets) GetTest() string {
	if x != nil {
		return x.Test
	}
	return ""
}

type TrainingTaskAssignee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Participant string   `protobuf:"bytes,1,opt,name=participant,proto3" json:"participant,omitempty"`
	NodeIds     []string `protobuf:"bytes,2,rep,name=node_ids,json=nodeIds,proto3" json:"node_ids,omitempty"`
}

func (x *TrainingTaskAssignee) Reset() {
	*x = TrainingTaskAssignee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_inference_training_task_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrainingTaskAssignee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrainingTaskAssignee) ProtoMessage() {}

// Deprecated: Use TrainingTaskAssignee.ProtoReflect.Descriptor instead.
func (*TrainingTaskAssignee) Descriptor() ([]byte, []int) {
	return file_inference_inference_training_task_proto_rawDescGZIP(), []int{4}
}

func (x *TrainingTaskAssignee) GetParticipant() string {
	if x != nil {
		return x.Participant
	}
	return ""
}

func (x *TrainingTaskAssignee) GetNodeIds() []string {
	if x != nil {
		return x.NodeIds
	}
	return nil
}

type EpochInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastEpoch            int32 `protobuf:"varint,1,opt,name=last_epoch,json=lastEpoch,proto3" json:"last_epoch,omitempty"`
	LastEpochBlockHeight int64 `protobuf:"varint,2,opt,name=last_epoch_block_height,json=lastEpochBlockHeight,proto3" json:"last_epoch_block_height,omitempty"`
	LastEpochTimestamp   int64 `protobuf:"varint,3,opt,name=last_epoch_timestamp,json=lastEpochTimestamp,proto3" json:"last_epoch_timestamp,omitempty"` // Equals to the block time
	LastEpochIsFinished  bool  `protobuf:"varint,4,opt,name=last_epoch_is_finished,json=lastEpochIsFinished,proto3" json:"last_epoch_is_finished,omitempty"`
}

func (x *EpochInfo) Reset() {
	*x = EpochInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_inference_training_task_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpochInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpochInfo) ProtoMessage() {}

// Deprecated: Use EpochInfo.ProtoReflect.Descriptor instead.
func (*EpochInfo) Descriptor() ([]byte, []int) {
	return file_inference_inference_training_task_proto_rawDescGZIP(), []int{5}
}

func (x *EpochInfo) GetLastEpoch() int32 {
	if x != nil {
		return x.LastEpoch
	}
	return 0
}

func (x *EpochInfo) GetLastEpochBlockHeight() int64 {
	if x != nil {
		return x.LastEpochBlockHeight
	}
	return 0
}

func (x *EpochInfo) GetLastEpochTimestamp() int64 {
	if x != nil {
		return x.LastEpochTimestamp
	}
	return 0
}

func (x *EpochInfo) GetLastEpochIsFinished() bool {
	if x != nil {
		return x.LastEpochIsFinished
	}
	return false
}

var File_inference_inference_training_task_proto protoreflect.FileDescriptor

var file_inference_inference_training_task_proto_rawDesc = []byte{
	0x0a, 0x27, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x69, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xee,
	0x04, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x35, 0x0a, 0x17, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x23, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x1e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x42, 0x79, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x72, 0x41, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x5d, 0x0a, 0x12, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x48,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x52, 0x11, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x47, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x52, 0x09,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x05, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x45,
	0x70, 0x6f, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x22,
	0x45, 0x0a, 0x19, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8c, 0x01, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x41, 0x0a, 0x08, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x73, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x18,
	0x6e, 0x75, 0x6d, 0x5f, 0x75, 0x6f, 0x63, 0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15,
	0x6e, 0x75, 0x6d, 0x55, 0x6f, 0x63, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x65, 0x70, 0x73, 0x22, 0x3c, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x65, 0x73, 0x74, 0x22, 0x53, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54,
	0x61, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x73, 0x22, 0xc8, 0x01, 0x0a, 0x09, 0x45, 0x70, 0x6f,
	0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74,
	0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x70, 0x6f, 0x63,
	0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x30, 0x0a, 0x14,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74,
	0x45, 0x70, 0x6f, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x33,
	0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x69, 0x73, 0x5f,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x6c, 0x61, 0x73, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x42, 0xbf, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x11, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x24, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e,
	0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x2f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0xa2, 0x02, 0x03, 0x49, 0x49, 0x58,
	0xaa, 0x02, 0x13, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0xca, 0x02, 0x13, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5c, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0xe2, 0x02, 0x1f, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5c, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x14, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x3a, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_inference_inference_training_task_proto_rawDescOnce sync.Once
	file_inference_inference_training_task_proto_rawDescData = file_inference_inference_training_task_proto_rawDesc
)

func file_inference_inference_training_task_proto_rawDescGZIP() []byte {
	file_inference_inference_training_task_proto_rawDescOnce.Do(func() {
		file_inference_inference_training_task_proto_rawDescData = protoimpl.X.CompressGZIP(file_inference_inference_training_task_proto_rawDescData)
	})
	return file_inference_inference_training_task_proto_rawDescData
}

var file_inference_inference_training_task_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_inference_inference_training_task_proto_goTypes = []interface{}{
	(*TrainingTask)(nil),              // 0: inference.inference.TrainingTask
	(*TrainingHardwareResources)(nil), // 1: inference.inference.TrainingHardwareResources
	(*TrainingConfig)(nil),            // 2: inference.inference.TrainingConfig
	(*TrainingDatasets)(nil),          // 3: inference.inference.TrainingDatasets
	(*TrainingTaskAssignee)(nil),      // 4: inference.inference.TrainingTaskAssignee
	(*EpochInfo)(nil),                 // 5: inference.inference.EpochInfo
}
var file_inference_inference_training_task_proto_depIdxs = []int32{
	1, // 0: inference.inference.TrainingTask.hardware_resources:type_name -> inference.inference.TrainingHardwareResources
	2, // 1: inference.inference.TrainingTask.config:type_name -> inference.inference.TrainingConfig
	4, // 2: inference.inference.TrainingTask.assignees:type_name -> inference.inference.TrainingTaskAssignee
	5, // 3: inference.inference.TrainingTask.epoch:type_name -> inference.inference.EpochInfo
	3, // 4: inference.inference.TrainingConfig.datasets:type_name -> inference.inference.TrainingDatasets
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_inference_inference_training_task_proto_init() }
func file_inference_inference_training_task_proto_init() {
	if File_inference_inference_training_task_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_inference_inference_training_task_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrainingTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_inference_training_task_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrainingHardwareResources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_inference_training_task_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrainingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_inference_training_task_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrainingDatasets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_inference_training_task_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrainingTaskAssignee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_inference_training_task_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpochInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_inference_inference_training_task_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_inference_inference_training_task_proto_goTypes,
		DependencyIndexes: file_inference_inference_training_task_proto_depIdxs,
		MessageInfos:      file_inference_inference_training_task_proto_msgTypes,
	}.Build()
	File_inference_inference_training_task_proto = out.File
	file_inference_inference_training_task_proto_rawDesc = nil
	file_inference_inference_training_task_proto_goTypes = nil
	file_inference_inference_training_task_proto_depIdxs = nil
}

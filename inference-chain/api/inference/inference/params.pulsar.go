// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package inference

import (
	fmt "fmt"
	io "io"
	reflect "reflect"
	sync "sync"

	_ "cosmossdk.io/api/amino"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

var (
	md_Params                   protoreflect.MessageDescriptor
	fd_Params_epoch_params      protoreflect.FieldDescriptor
	fd_Params_validation_params protoreflect.FieldDescriptor
	fd_Params_poc_params        protoreflect.FieldDescriptor
	fd_Params_tokenomics_params protoreflect.FieldDescriptor
)

func init() {
	file_inference_inference_params_proto_init()
	md_Params = File_inference_inference_params_proto.Messages().ByName("Params")
	fd_Params_epoch_params = md_Params.Fields().ByName("epoch_params")
	fd_Params_validation_params = md_Params.Fields().ByName("validation_params")
	fd_Params_poc_params = md_Params.Fields().ByName("poc_params")
	fd_Params_tokenomics_params = md_Params.Fields().ByName("tokenomics_params")
}

var _ protoreflect.Message = (*fastReflection_Params)(nil)

type fastReflection_Params Params

func (x *Params) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Params)(x)
}

func (x *Params) slowProtoReflect() protoreflect.Message {
	mi := &file_inference_inference_params_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Params_messageType fastReflection_Params_messageType
var _ protoreflect.MessageType = fastReflection_Params_messageType{}

type fastReflection_Params_messageType struct{}

func (x fastReflection_Params_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Params)(nil)
}
func (x fastReflection_Params_messageType) New() protoreflect.Message {
	return new(fastReflection_Params)
}
func (x fastReflection_Params_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Params
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Params) Descriptor() protoreflect.MessageDescriptor {
	return md_Params
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Params) Type() protoreflect.MessageType {
	return _fastReflection_Params_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Params) New() protoreflect.Message {
	return new(fastReflection_Params)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Params) Interface() protoreflect.ProtoMessage {
	return (*Params)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Params) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.EpochParams != nil {
		value := protoreflect.ValueOfMessage(x.EpochParams.ProtoReflect())
		if !f(fd_Params_epoch_params, value) {
			return
		}
	}
	if x.ValidationParams != nil {
		value := protoreflect.ValueOfMessage(x.ValidationParams.ProtoReflect())
		if !f(fd_Params_validation_params, value) {
			return
		}
	}
	if x.PocParams != nil {
		value := protoreflect.ValueOfMessage(x.PocParams.ProtoReflect())
		if !f(fd_Params_poc_params, value) {
			return
		}
	}
	if x.TokenomicsParams != nil {
		value := protoreflect.ValueOfMessage(x.TokenomicsParams.ProtoReflect())
		if !f(fd_Params_tokenomics_params, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Params) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "inference.inference.Params.epoch_params":
		return x.EpochParams != nil
	case "inference.inference.Params.validation_params":
		return x.ValidationParams != nil
	case "inference.inference.Params.poc_params":
		return x.PocParams != nil
	case "inference.inference.Params.tokenomics_params":
		return x.TokenomicsParams != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.Params"))
		}
		panic(fmt.Errorf("message inference.inference.Params does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "inference.inference.Params.epoch_params":
		x.EpochParams = nil
	case "inference.inference.Params.validation_params":
		x.ValidationParams = nil
	case "inference.inference.Params.poc_params":
		x.PocParams = nil
	case "inference.inference.Params.tokenomics_params":
		x.TokenomicsParams = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.Params"))
		}
		panic(fmt.Errorf("message inference.inference.Params does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Params) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "inference.inference.Params.epoch_params":
		value := x.EpochParams
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "inference.inference.Params.validation_params":
		value := x.ValidationParams
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "inference.inference.Params.poc_params":
		value := x.PocParams
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "inference.inference.Params.tokenomics_params":
		value := x.TokenomicsParams
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.Params"))
		}
		panic(fmt.Errorf("message inference.inference.Params does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "inference.inference.Params.epoch_params":
		x.EpochParams = value.Message().Interface().(*EpochParams)
	case "inference.inference.Params.validation_params":
		x.ValidationParams = value.Message().Interface().(*ValidationParams)
	case "inference.inference.Params.poc_params":
		x.PocParams = value.Message().Interface().(*PocParams)
	case "inference.inference.Params.tokenomics_params":
		x.TokenomicsParams = value.Message().Interface().(*TokenomicsParams)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.Params"))
		}
		panic(fmt.Errorf("message inference.inference.Params does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.Params.epoch_params":
		if x.EpochParams == nil {
			x.EpochParams = new(EpochParams)
		}
		return protoreflect.ValueOfMessage(x.EpochParams.ProtoReflect())
	case "inference.inference.Params.validation_params":
		if x.ValidationParams == nil {
			x.ValidationParams = new(ValidationParams)
		}
		return protoreflect.ValueOfMessage(x.ValidationParams.ProtoReflect())
	case "inference.inference.Params.poc_params":
		if x.PocParams == nil {
			x.PocParams = new(PocParams)
		}
		return protoreflect.ValueOfMessage(x.PocParams.ProtoReflect())
	case "inference.inference.Params.tokenomics_params":
		if x.TokenomicsParams == nil {
			x.TokenomicsParams = new(TokenomicsParams)
		}
		return protoreflect.ValueOfMessage(x.TokenomicsParams.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.Params"))
		}
		panic(fmt.Errorf("message inference.inference.Params does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Params) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.Params.epoch_params":
		m := new(EpochParams)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "inference.inference.Params.validation_params":
		m := new(ValidationParams)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "inference.inference.Params.poc_params":
		m := new(PocParams)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "inference.inference.Params.tokenomics_params":
		m := new(TokenomicsParams)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.Params"))
		}
		panic(fmt.Errorf("message inference.inference.Params does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Params) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in inference.inference.Params", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Params) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Params) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Params) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.EpochParams != nil {
			l = options.Size(x.EpochParams)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.ValidationParams != nil {
			l = options.Size(x.ValidationParams)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.PocParams != nil {
			l = options.Size(x.PocParams)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.TokenomicsParams != nil {
			l = options.Size(x.TokenomicsParams)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.TokenomicsParams != nil {
			encoded, err := options.Marshal(x.TokenomicsParams)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x22
		}
		if x.PocParams != nil {
			encoded, err := options.Marshal(x.PocParams)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if x.ValidationParams != nil {
			encoded, err := options.Marshal(x.ValidationParams)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if x.EpochParams != nil {
			encoded, err := options.Marshal(x.EpochParams)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Params: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EpochParams", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.EpochParams == nil {
					x.EpochParams = &EpochParams{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.EpochParams); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidationParams", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.ValidationParams == nil {
					x.ValidationParams = &ValidationParams{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ValidationParams); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PocParams", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.PocParams == nil {
					x.PocParams = &PocParams{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.PocParams); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TokenomicsParams", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.TokenomicsParams == nil {
					x.TokenomicsParams = &TokenomicsParams{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.TokenomicsParams); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_GenesisOnlyParams                              protoreflect.MessageDescriptor
	fd_GenesisOnlyParams_total_supply                 protoreflect.FieldDescriptor
	fd_GenesisOnlyParams_originator_supply            protoreflect.FieldDescriptor
	fd_GenesisOnlyParams_top_reward_amount            protoreflect.FieldDescriptor
	fd_GenesisOnlyParams_standard_reward_amount       protoreflect.FieldDescriptor
	fd_GenesisOnlyParams_pre_programmed_sale_amount   protoreflect.FieldDescriptor
	fd_GenesisOnlyParams_top_rewards                  protoreflect.FieldDescriptor
	fd_GenesisOnlyParams_supply_denom                 protoreflect.FieldDescriptor
	fd_GenesisOnlyParams_top_reward_period            protoreflect.FieldDescriptor
	fd_GenesisOnlyParams_top_reward_payouts           protoreflect.FieldDescriptor
	fd_GenesisOnlyParams_top_reward_payouts_per_miner protoreflect.FieldDescriptor
	fd_GenesisOnlyParams_top_reward_max_duration      protoreflect.FieldDescriptor
)

func init() {
	file_inference_inference_params_proto_init()
	md_GenesisOnlyParams = File_inference_inference_params_proto.Messages().ByName("GenesisOnlyParams")
	fd_GenesisOnlyParams_total_supply = md_GenesisOnlyParams.Fields().ByName("total_supply")
	fd_GenesisOnlyParams_originator_supply = md_GenesisOnlyParams.Fields().ByName("originator_supply")
	fd_GenesisOnlyParams_top_reward_amount = md_GenesisOnlyParams.Fields().ByName("top_reward_amount")
	fd_GenesisOnlyParams_standard_reward_amount = md_GenesisOnlyParams.Fields().ByName("standard_reward_amount")
	fd_GenesisOnlyParams_pre_programmed_sale_amount = md_GenesisOnlyParams.Fields().ByName("pre_programmed_sale_amount")
	fd_GenesisOnlyParams_top_rewards = md_GenesisOnlyParams.Fields().ByName("top_rewards")
	fd_GenesisOnlyParams_supply_denom = md_GenesisOnlyParams.Fields().ByName("supply_denom")
	fd_GenesisOnlyParams_top_reward_period = md_GenesisOnlyParams.Fields().ByName("top_reward_period")
	fd_GenesisOnlyParams_top_reward_payouts = md_GenesisOnlyParams.Fields().ByName("top_reward_payouts")
	fd_GenesisOnlyParams_top_reward_payouts_per_miner = md_GenesisOnlyParams.Fields().ByName("top_reward_payouts_per_miner")
	fd_GenesisOnlyParams_top_reward_max_duration = md_GenesisOnlyParams.Fields().ByName("top_reward_max_duration")
}

var _ protoreflect.Message = (*fastReflection_GenesisOnlyParams)(nil)

type fastReflection_GenesisOnlyParams GenesisOnlyParams

func (x *GenesisOnlyParams) ProtoReflect() protoreflect.Message {
	return (*fastReflection_GenesisOnlyParams)(x)
}

func (x *GenesisOnlyParams) slowProtoReflect() protoreflect.Message {
	mi := &file_inference_inference_params_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_GenesisOnlyParams_messageType fastReflection_GenesisOnlyParams_messageType
var _ protoreflect.MessageType = fastReflection_GenesisOnlyParams_messageType{}

type fastReflection_GenesisOnlyParams_messageType struct{}

func (x fastReflection_GenesisOnlyParams_messageType) Zero() protoreflect.Message {
	return (*fastReflection_GenesisOnlyParams)(nil)
}
func (x fastReflection_GenesisOnlyParams_messageType) New() protoreflect.Message {
	return new(fastReflection_GenesisOnlyParams)
}
func (x fastReflection_GenesisOnlyParams_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_GenesisOnlyParams
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_GenesisOnlyParams) Descriptor() protoreflect.MessageDescriptor {
	return md_GenesisOnlyParams
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_GenesisOnlyParams) Type() protoreflect.MessageType {
	return _fastReflection_GenesisOnlyParams_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_GenesisOnlyParams) New() protoreflect.Message {
	return new(fastReflection_GenesisOnlyParams)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_GenesisOnlyParams) Interface() protoreflect.ProtoMessage {
	return (*GenesisOnlyParams)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_GenesisOnlyParams) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.TotalSupply != int64(0) {
		value := protoreflect.ValueOfInt64(x.TotalSupply)
		if !f(fd_GenesisOnlyParams_total_supply, value) {
			return
		}
	}
	if x.OriginatorSupply != int64(0) {
		value := protoreflect.ValueOfInt64(x.OriginatorSupply)
		if !f(fd_GenesisOnlyParams_originator_supply, value) {
			return
		}
	}
	if x.TopRewardAmount != int64(0) {
		value := protoreflect.ValueOfInt64(x.TopRewardAmount)
		if !f(fd_GenesisOnlyParams_top_reward_amount, value) {
			return
		}
	}
	if x.StandardRewardAmount != int64(0) {
		value := protoreflect.ValueOfInt64(x.StandardRewardAmount)
		if !f(fd_GenesisOnlyParams_standard_reward_amount, value) {
			return
		}
	}
	if x.PreProgrammedSaleAmount != int64(0) {
		value := protoreflect.ValueOfInt64(x.PreProgrammedSaleAmount)
		if !f(fd_GenesisOnlyParams_pre_programmed_sale_amount, value) {
			return
		}
	}
	if x.TopRewards != int32(0) {
		value := protoreflect.ValueOfInt32(x.TopRewards)
		if !f(fd_GenesisOnlyParams_top_rewards, value) {
			return
		}
	}
	if x.SupplyDenom != "" {
		value := protoreflect.ValueOfString(x.SupplyDenom)
		if !f(fd_GenesisOnlyParams_supply_denom, value) {
			return
		}
	}
	if x.TopRewardPeriod != int64(0) {
		value := protoreflect.ValueOfInt64(x.TopRewardPeriod)
		if !f(fd_GenesisOnlyParams_top_reward_period, value) {
			return
		}
	}
	if x.TopRewardPayouts != int64(0) {
		value := protoreflect.ValueOfInt64(x.TopRewardPayouts)
		if !f(fd_GenesisOnlyParams_top_reward_payouts, value) {
			return
		}
	}
	if x.TopRewardPayoutsPerMiner != int64(0) {
		value := protoreflect.ValueOfInt64(x.TopRewardPayoutsPerMiner)
		if !f(fd_GenesisOnlyParams_top_reward_payouts_per_miner, value) {
			return
		}
	}
	if x.TopRewardMaxDuration != int64(0) {
		value := protoreflect.ValueOfInt64(x.TopRewardMaxDuration)
		if !f(fd_GenesisOnlyParams_top_reward_max_duration, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_GenesisOnlyParams) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "inference.inference.GenesisOnlyParams.total_supply":
		return x.TotalSupply != int64(0)
	case "inference.inference.GenesisOnlyParams.originator_supply":
		return x.OriginatorSupply != int64(0)
	case "inference.inference.GenesisOnlyParams.top_reward_amount":
		return x.TopRewardAmount != int64(0)
	case "inference.inference.GenesisOnlyParams.standard_reward_amount":
		return x.StandardRewardAmount != int64(0)
	case "inference.inference.GenesisOnlyParams.pre_programmed_sale_amount":
		return x.PreProgrammedSaleAmount != int64(0)
	case "inference.inference.GenesisOnlyParams.top_rewards":
		return x.TopRewards != int32(0)
	case "inference.inference.GenesisOnlyParams.supply_denom":
		return x.SupplyDenom != ""
	case "inference.inference.GenesisOnlyParams.top_reward_period":
		return x.TopRewardPeriod != int64(0)
	case "inference.inference.GenesisOnlyParams.top_reward_payouts":
		return x.TopRewardPayouts != int64(0)
	case "inference.inference.GenesisOnlyParams.top_reward_payouts_per_miner":
		return x.TopRewardPayoutsPerMiner != int64(0)
	case "inference.inference.GenesisOnlyParams.top_reward_max_duration":
		return x.TopRewardMaxDuration != int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.GenesisOnlyParams"))
		}
		panic(fmt.Errorf("message inference.inference.GenesisOnlyParams does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisOnlyParams) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "inference.inference.GenesisOnlyParams.total_supply":
		x.TotalSupply = int64(0)
	case "inference.inference.GenesisOnlyParams.originator_supply":
		x.OriginatorSupply = int64(0)
	case "inference.inference.GenesisOnlyParams.top_reward_amount":
		x.TopRewardAmount = int64(0)
	case "inference.inference.GenesisOnlyParams.standard_reward_amount":
		x.StandardRewardAmount = int64(0)
	case "inference.inference.GenesisOnlyParams.pre_programmed_sale_amount":
		x.PreProgrammedSaleAmount = int64(0)
	case "inference.inference.GenesisOnlyParams.top_rewards":
		x.TopRewards = int32(0)
	case "inference.inference.GenesisOnlyParams.supply_denom":
		x.SupplyDenom = ""
	case "inference.inference.GenesisOnlyParams.top_reward_period":
		x.TopRewardPeriod = int64(0)
	case "inference.inference.GenesisOnlyParams.top_reward_payouts":
		x.TopRewardPayouts = int64(0)
	case "inference.inference.GenesisOnlyParams.top_reward_payouts_per_miner":
		x.TopRewardPayoutsPerMiner = int64(0)
	case "inference.inference.GenesisOnlyParams.top_reward_max_duration":
		x.TopRewardMaxDuration = int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.GenesisOnlyParams"))
		}
		panic(fmt.Errorf("message inference.inference.GenesisOnlyParams does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_GenesisOnlyParams) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "inference.inference.GenesisOnlyParams.total_supply":
		value := x.TotalSupply
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.GenesisOnlyParams.originator_supply":
		value := x.OriginatorSupply
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.GenesisOnlyParams.top_reward_amount":
		value := x.TopRewardAmount
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.GenesisOnlyParams.standard_reward_amount":
		value := x.StandardRewardAmount
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.GenesisOnlyParams.pre_programmed_sale_amount":
		value := x.PreProgrammedSaleAmount
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.GenesisOnlyParams.top_rewards":
		value := x.TopRewards
		return protoreflect.ValueOfInt32(value)
	case "inference.inference.GenesisOnlyParams.supply_denom":
		value := x.SupplyDenom
		return protoreflect.ValueOfString(value)
	case "inference.inference.GenesisOnlyParams.top_reward_period":
		value := x.TopRewardPeriod
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.GenesisOnlyParams.top_reward_payouts":
		value := x.TopRewardPayouts
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.GenesisOnlyParams.top_reward_payouts_per_miner":
		value := x.TopRewardPayoutsPerMiner
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.GenesisOnlyParams.top_reward_max_duration":
		value := x.TopRewardMaxDuration
		return protoreflect.ValueOfInt64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.GenesisOnlyParams"))
		}
		panic(fmt.Errorf("message inference.inference.GenesisOnlyParams does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisOnlyParams) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "inference.inference.GenesisOnlyParams.total_supply":
		x.TotalSupply = value.Int()
	case "inference.inference.GenesisOnlyParams.originator_supply":
		x.OriginatorSupply = value.Int()
	case "inference.inference.GenesisOnlyParams.top_reward_amount":
		x.TopRewardAmount = value.Int()
	case "inference.inference.GenesisOnlyParams.standard_reward_amount":
		x.StandardRewardAmount = value.Int()
	case "inference.inference.GenesisOnlyParams.pre_programmed_sale_amount":
		x.PreProgrammedSaleAmount = value.Int()
	case "inference.inference.GenesisOnlyParams.top_rewards":
		x.TopRewards = int32(value.Int())
	case "inference.inference.GenesisOnlyParams.supply_denom":
		x.SupplyDenom = value.Interface().(string)
	case "inference.inference.GenesisOnlyParams.top_reward_period":
		x.TopRewardPeriod = value.Int()
	case "inference.inference.GenesisOnlyParams.top_reward_payouts":
		x.TopRewardPayouts = value.Int()
	case "inference.inference.GenesisOnlyParams.top_reward_payouts_per_miner":
		x.TopRewardPayoutsPerMiner = value.Int()
	case "inference.inference.GenesisOnlyParams.top_reward_max_duration":
		x.TopRewardMaxDuration = value.Int()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.GenesisOnlyParams"))
		}
		panic(fmt.Errorf("message inference.inference.GenesisOnlyParams does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisOnlyParams) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.GenesisOnlyParams.total_supply":
		panic(fmt.Errorf("field total_supply of message inference.inference.GenesisOnlyParams is not mutable"))
	case "inference.inference.GenesisOnlyParams.originator_supply":
		panic(fmt.Errorf("field originator_supply of message inference.inference.GenesisOnlyParams is not mutable"))
	case "inference.inference.GenesisOnlyParams.top_reward_amount":
		panic(fmt.Errorf("field top_reward_amount of message inference.inference.GenesisOnlyParams is not mutable"))
	case "inference.inference.GenesisOnlyParams.standard_reward_amount":
		panic(fmt.Errorf("field standard_reward_amount of message inference.inference.GenesisOnlyParams is not mutable"))
	case "inference.inference.GenesisOnlyParams.pre_programmed_sale_amount":
		panic(fmt.Errorf("field pre_programmed_sale_amount of message inference.inference.GenesisOnlyParams is not mutable"))
	case "inference.inference.GenesisOnlyParams.top_rewards":
		panic(fmt.Errorf("field top_rewards of message inference.inference.GenesisOnlyParams is not mutable"))
	case "inference.inference.GenesisOnlyParams.supply_denom":
		panic(fmt.Errorf("field supply_denom of message inference.inference.GenesisOnlyParams is not mutable"))
	case "inference.inference.GenesisOnlyParams.top_reward_period":
		panic(fmt.Errorf("field top_reward_period of message inference.inference.GenesisOnlyParams is not mutable"))
	case "inference.inference.GenesisOnlyParams.top_reward_payouts":
		panic(fmt.Errorf("field top_reward_payouts of message inference.inference.GenesisOnlyParams is not mutable"))
	case "inference.inference.GenesisOnlyParams.top_reward_payouts_per_miner":
		panic(fmt.Errorf("field top_reward_payouts_per_miner of message inference.inference.GenesisOnlyParams is not mutable"))
	case "inference.inference.GenesisOnlyParams.top_reward_max_duration":
		panic(fmt.Errorf("field top_reward_max_duration of message inference.inference.GenesisOnlyParams is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.GenesisOnlyParams"))
		}
		panic(fmt.Errorf("message inference.inference.GenesisOnlyParams does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_GenesisOnlyParams) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.GenesisOnlyParams.total_supply":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.GenesisOnlyParams.originator_supply":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.GenesisOnlyParams.top_reward_amount":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.GenesisOnlyParams.standard_reward_amount":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.GenesisOnlyParams.pre_programmed_sale_amount":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.GenesisOnlyParams.top_rewards":
		return protoreflect.ValueOfInt32(int32(0))
	case "inference.inference.GenesisOnlyParams.supply_denom":
		return protoreflect.ValueOfString("")
	case "inference.inference.GenesisOnlyParams.top_reward_period":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.GenesisOnlyParams.top_reward_payouts":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.GenesisOnlyParams.top_reward_payouts_per_miner":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.GenesisOnlyParams.top_reward_max_duration":
		return protoreflect.ValueOfInt64(int64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.GenesisOnlyParams"))
		}
		panic(fmt.Errorf("message inference.inference.GenesisOnlyParams does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_GenesisOnlyParams) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in inference.inference.GenesisOnlyParams", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_GenesisOnlyParams) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisOnlyParams) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_GenesisOnlyParams) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_GenesisOnlyParams) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*GenesisOnlyParams)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.TotalSupply != 0 {
			n += 1 + runtime.Sov(uint64(x.TotalSupply))
		}
		if x.OriginatorSupply != 0 {
			n += 1 + runtime.Sov(uint64(x.OriginatorSupply))
		}
		if x.TopRewardAmount != 0 {
			n += 1 + runtime.Sov(uint64(x.TopRewardAmount))
		}
		if x.StandardRewardAmount != 0 {
			n += 1 + runtime.Sov(uint64(x.StandardRewardAmount))
		}
		if x.PreProgrammedSaleAmount != 0 {
			n += 1 + runtime.Sov(uint64(x.PreProgrammedSaleAmount))
		}
		if x.TopRewards != 0 {
			n += 1 + runtime.Sov(uint64(x.TopRewards))
		}
		l = len(x.SupplyDenom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.TopRewardPeriod != 0 {
			n += 1 + runtime.Sov(uint64(x.TopRewardPeriod))
		}
		if x.TopRewardPayouts != 0 {
			n += 1 + runtime.Sov(uint64(x.TopRewardPayouts))
		}
		if x.TopRewardPayoutsPerMiner != 0 {
			n += 1 + runtime.Sov(uint64(x.TopRewardPayoutsPerMiner))
		}
		if x.TopRewardMaxDuration != 0 {
			n += 1 + runtime.Sov(uint64(x.TopRewardMaxDuration))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*GenesisOnlyParams)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.TopRewardMaxDuration != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TopRewardMaxDuration))
			i--
			dAtA[i] = 0x58
		}
		if x.TopRewardPayoutsPerMiner != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TopRewardPayoutsPerMiner))
			i--
			dAtA[i] = 0x50
		}
		if x.TopRewardPayouts != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TopRewardPayouts))
			i--
			dAtA[i] = 0x48
		}
		if x.TopRewardPeriod != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TopRewardPeriod))
			i--
			dAtA[i] = 0x40
		}
		if len(x.SupplyDenom) > 0 {
			i -= len(x.SupplyDenom)
			copy(dAtA[i:], x.SupplyDenom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SupplyDenom)))
			i--
			dAtA[i] = 0x3a
		}
		if x.TopRewards != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TopRewards))
			i--
			dAtA[i] = 0x30
		}
		if x.PreProgrammedSaleAmount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PreProgrammedSaleAmount))
			i--
			dAtA[i] = 0x28
		}
		if x.StandardRewardAmount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.StandardRewardAmount))
			i--
			dAtA[i] = 0x20
		}
		if x.TopRewardAmount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TopRewardAmount))
			i--
			dAtA[i] = 0x18
		}
		if x.OriginatorSupply != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.OriginatorSupply))
			i--
			dAtA[i] = 0x10
		}
		if x.TotalSupply != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TotalSupply))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*GenesisOnlyParams)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: GenesisOnlyParams: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: GenesisOnlyParams: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalSupply", wireType)
				}
				x.TotalSupply = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TotalSupply |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OriginatorSupply", wireType)
				}
				x.OriginatorSupply = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.OriginatorSupply |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TopRewardAmount", wireType)
				}
				x.TopRewardAmount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TopRewardAmount |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StandardRewardAmount", wireType)
				}
				x.StandardRewardAmount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.StandardRewardAmount |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PreProgrammedSaleAmount", wireType)
				}
				x.PreProgrammedSaleAmount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PreProgrammedSaleAmount |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TopRewards", wireType)
				}
				x.TopRewards = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TopRewards |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SupplyDenom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SupplyDenom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TopRewardPeriod", wireType)
				}
				x.TopRewardPeriod = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TopRewardPeriod |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TopRewardPayouts", wireType)
				}
				x.TopRewardPayouts = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TopRewardPayouts |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 10:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TopRewardPayoutsPerMiner", wireType)
				}
				x.TopRewardPayoutsPerMiner = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TopRewardPayoutsPerMiner |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 11:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TopRewardMaxDuration", wireType)
				}
				x.TopRewardMaxDuration = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TopRewardMaxDuration |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_TokenomicsParams                             protoreflect.MessageDescriptor
	fd_TokenomicsParams_subsidy_reduction_interval  protoreflect.FieldDescriptor
	fd_TokenomicsParams_subsidy_reduction_amount    protoreflect.FieldDescriptor
	fd_TokenomicsParams_current_subsidy_percentage  protoreflect.FieldDescriptor
	fd_TokenomicsParams_top_reward_allowed_failure  protoreflect.FieldDescriptor
	fd_TokenomicsParams_top_miner_poc_qualification protoreflect.FieldDescriptor
)

func init() {
	file_inference_inference_params_proto_init()
	md_TokenomicsParams = File_inference_inference_params_proto.Messages().ByName("TokenomicsParams")
	fd_TokenomicsParams_subsidy_reduction_interval = md_TokenomicsParams.Fields().ByName("subsidy_reduction_interval")
	fd_TokenomicsParams_subsidy_reduction_amount = md_TokenomicsParams.Fields().ByName("subsidy_reduction_amount")
	fd_TokenomicsParams_current_subsidy_percentage = md_TokenomicsParams.Fields().ByName("current_subsidy_percentage")
	fd_TokenomicsParams_top_reward_allowed_failure = md_TokenomicsParams.Fields().ByName("top_reward_allowed_failure")
	fd_TokenomicsParams_top_miner_poc_qualification = md_TokenomicsParams.Fields().ByName("top_miner_poc_qualification")
}

var _ protoreflect.Message = (*fastReflection_TokenomicsParams)(nil)

type fastReflection_TokenomicsParams TokenomicsParams

func (x *TokenomicsParams) ProtoReflect() protoreflect.Message {
	return (*fastReflection_TokenomicsParams)(x)
}

func (x *TokenomicsParams) slowProtoReflect() protoreflect.Message {
	mi := &file_inference_inference_params_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_TokenomicsParams_messageType fastReflection_TokenomicsParams_messageType
var _ protoreflect.MessageType = fastReflection_TokenomicsParams_messageType{}

type fastReflection_TokenomicsParams_messageType struct{}

func (x fastReflection_TokenomicsParams_messageType) Zero() protoreflect.Message {
	return (*fastReflection_TokenomicsParams)(nil)
}
func (x fastReflection_TokenomicsParams_messageType) New() protoreflect.Message {
	return new(fastReflection_TokenomicsParams)
}
func (x fastReflection_TokenomicsParams_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_TokenomicsParams
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_TokenomicsParams) Descriptor() protoreflect.MessageDescriptor {
	return md_TokenomicsParams
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_TokenomicsParams) Type() protoreflect.MessageType {
	return _fastReflection_TokenomicsParams_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_TokenomicsParams) New() protoreflect.Message {
	return new(fastReflection_TokenomicsParams)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_TokenomicsParams) Interface() protoreflect.ProtoMessage {
	return (*TokenomicsParams)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_TokenomicsParams) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.SubsidyReductionInterval != nil {
		value := protoreflect.ValueOfMessage(x.SubsidyReductionInterval.ProtoReflect())
		if !f(fd_TokenomicsParams_subsidy_reduction_interval, value) {
			return
		}
	}
	if x.SubsidyReductionAmount != nil {
		value := protoreflect.ValueOfMessage(x.SubsidyReductionAmount.ProtoReflect())
		if !f(fd_TokenomicsParams_subsidy_reduction_amount, value) {
			return
		}
	}
	if x.CurrentSubsidyPercentage != nil {
		value := protoreflect.ValueOfMessage(x.CurrentSubsidyPercentage.ProtoReflect())
		if !f(fd_TokenomicsParams_current_subsidy_percentage, value) {
			return
		}
	}
	if x.TopRewardAllowedFailure != nil {
		value := protoreflect.ValueOfMessage(x.TopRewardAllowedFailure.ProtoReflect())
		if !f(fd_TokenomicsParams_top_reward_allowed_failure, value) {
			return
		}
	}
	if x.TopMinerPocQualification != int64(0) {
		value := protoreflect.ValueOfInt64(x.TopMinerPocQualification)
		if !f(fd_TokenomicsParams_top_miner_poc_qualification, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_TokenomicsParams) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "inference.inference.TokenomicsParams.subsidy_reduction_interval":
		return x.SubsidyReductionInterval != nil
	case "inference.inference.TokenomicsParams.subsidy_reduction_amount":
		return x.SubsidyReductionAmount != nil
	case "inference.inference.TokenomicsParams.current_subsidy_percentage":
		return x.CurrentSubsidyPercentage != nil
	case "inference.inference.TokenomicsParams.top_reward_allowed_failure":
		return x.TopRewardAllowedFailure != nil
	case "inference.inference.TokenomicsParams.top_miner_poc_qualification":
		return x.TopMinerPocQualification != int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.TokenomicsParams"))
		}
		panic(fmt.Errorf("message inference.inference.TokenomicsParams does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TokenomicsParams) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "inference.inference.TokenomicsParams.subsidy_reduction_interval":
		x.SubsidyReductionInterval = nil
	case "inference.inference.TokenomicsParams.subsidy_reduction_amount":
		x.SubsidyReductionAmount = nil
	case "inference.inference.TokenomicsParams.current_subsidy_percentage":
		x.CurrentSubsidyPercentage = nil
	case "inference.inference.TokenomicsParams.top_reward_allowed_failure":
		x.TopRewardAllowedFailure = nil
	case "inference.inference.TokenomicsParams.top_miner_poc_qualification":
		x.TopMinerPocQualification = int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.TokenomicsParams"))
		}
		panic(fmt.Errorf("message inference.inference.TokenomicsParams does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_TokenomicsParams) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "inference.inference.TokenomicsParams.subsidy_reduction_interval":
		value := x.SubsidyReductionInterval
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "inference.inference.TokenomicsParams.subsidy_reduction_amount":
		value := x.SubsidyReductionAmount
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "inference.inference.TokenomicsParams.current_subsidy_percentage":
		value := x.CurrentSubsidyPercentage
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "inference.inference.TokenomicsParams.top_reward_allowed_failure":
		value := x.TopRewardAllowedFailure
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "inference.inference.TokenomicsParams.top_miner_poc_qualification":
		value := x.TopMinerPocQualification
		return protoreflect.ValueOfInt64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.TokenomicsParams"))
		}
		panic(fmt.Errorf("message inference.inference.TokenomicsParams does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TokenomicsParams) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "inference.inference.TokenomicsParams.subsidy_reduction_interval":
		x.SubsidyReductionInterval = value.Message().Interface().(*Decimal)
	case "inference.inference.TokenomicsParams.subsidy_reduction_amount":
		x.SubsidyReductionAmount = value.Message().Interface().(*Decimal)
	case "inference.inference.TokenomicsParams.current_subsidy_percentage":
		x.CurrentSubsidyPercentage = value.Message().Interface().(*Decimal)
	case "inference.inference.TokenomicsParams.top_reward_allowed_failure":
		x.TopRewardAllowedFailure = value.Message().Interface().(*Decimal)
	case "inference.inference.TokenomicsParams.top_miner_poc_qualification":
		x.TopMinerPocQualification = value.Int()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.TokenomicsParams"))
		}
		panic(fmt.Errorf("message inference.inference.TokenomicsParams does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TokenomicsParams) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.TokenomicsParams.subsidy_reduction_interval":
		if x.SubsidyReductionInterval == nil {
			x.SubsidyReductionInterval = new(Decimal)
		}
		return protoreflect.ValueOfMessage(x.SubsidyReductionInterval.ProtoReflect())
	case "inference.inference.TokenomicsParams.subsidy_reduction_amount":
		if x.SubsidyReductionAmount == nil {
			x.SubsidyReductionAmount = new(Decimal)
		}
		return protoreflect.ValueOfMessage(x.SubsidyReductionAmount.ProtoReflect())
	case "inference.inference.TokenomicsParams.current_subsidy_percentage":
		if x.CurrentSubsidyPercentage == nil {
			x.CurrentSubsidyPercentage = new(Decimal)
		}
		return protoreflect.ValueOfMessage(x.CurrentSubsidyPercentage.ProtoReflect())
	case "inference.inference.TokenomicsParams.top_reward_allowed_failure":
		if x.TopRewardAllowedFailure == nil {
			x.TopRewardAllowedFailure = new(Decimal)
		}
		return protoreflect.ValueOfMessage(x.TopRewardAllowedFailure.ProtoReflect())
	case "inference.inference.TokenomicsParams.top_miner_poc_qualification":
		panic(fmt.Errorf("field top_miner_poc_qualification of message inference.inference.TokenomicsParams is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.TokenomicsParams"))
		}
		panic(fmt.Errorf("message inference.inference.TokenomicsParams does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_TokenomicsParams) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.TokenomicsParams.subsidy_reduction_interval":
		m := new(Decimal)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "inference.inference.TokenomicsParams.subsidy_reduction_amount":
		m := new(Decimal)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "inference.inference.TokenomicsParams.current_subsidy_percentage":
		m := new(Decimal)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "inference.inference.TokenomicsParams.top_reward_allowed_failure":
		m := new(Decimal)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "inference.inference.TokenomicsParams.top_miner_poc_qualification":
		return protoreflect.ValueOfInt64(int64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.TokenomicsParams"))
		}
		panic(fmt.Errorf("message inference.inference.TokenomicsParams does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_TokenomicsParams) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in inference.inference.TokenomicsParams", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_TokenomicsParams) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TokenomicsParams) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_TokenomicsParams) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_TokenomicsParams) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*TokenomicsParams)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.SubsidyReductionInterval != nil {
			l = options.Size(x.SubsidyReductionInterval)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.SubsidyReductionAmount != nil {
			l = options.Size(x.SubsidyReductionAmount)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.CurrentSubsidyPercentage != nil {
			l = options.Size(x.CurrentSubsidyPercentage)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.TopRewardAllowedFailure != nil {
			l = options.Size(x.TopRewardAllowedFailure)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.TopMinerPocQualification != 0 {
			n += 1 + runtime.Sov(uint64(x.TopMinerPocQualification))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*TokenomicsParams)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.TopMinerPocQualification != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TopMinerPocQualification))
			i--
			dAtA[i] = 0x28
		}
		if x.TopRewardAllowedFailure != nil {
			encoded, err := options.Marshal(x.TopRewardAllowedFailure)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x22
		}
		if x.CurrentSubsidyPercentage != nil {
			encoded, err := options.Marshal(x.CurrentSubsidyPercentage)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if x.SubsidyReductionAmount != nil {
			encoded, err := options.Marshal(x.SubsidyReductionAmount)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if x.SubsidyReductionInterval != nil {
			encoded, err := options.Marshal(x.SubsidyReductionInterval)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*TokenomicsParams)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TokenomicsParams: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TokenomicsParams: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SubsidyReductionInterval", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.SubsidyReductionInterval == nil {
					x.SubsidyReductionInterval = &Decimal{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.SubsidyReductionInterval); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SubsidyReductionAmount", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.SubsidyReductionAmount == nil {
					x.SubsidyReductionAmount = &Decimal{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.SubsidyReductionAmount); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CurrentSubsidyPercentage", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.CurrentSubsidyPercentage == nil {
					x.CurrentSubsidyPercentage = &Decimal{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.CurrentSubsidyPercentage); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TopRewardAllowedFailure", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.TopRewardAllowedFailure == nil {
					x.TopRewardAllowedFailure = &Decimal{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.TopRewardAllowedFailure); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TopMinerPocQualification", wireType)
				}
				x.TopMinerPocQualification = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TopMinerPocQualification |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_EpochParams                                   protoreflect.MessageDescriptor
	fd_EpochParams_epoch_length                      protoreflect.FieldDescriptor
	fd_EpochParams_epoch_multiplier                  protoreflect.FieldDescriptor
	fd_EpochParams_epoch_shift                       protoreflect.FieldDescriptor
	fd_EpochParams_default_unit_of_compute_price     protoreflect.FieldDescriptor
	fd_EpochParams_poc_stage_duration                protoreflect.FieldDescriptor
	fd_EpochParams_poc_exchange_duration             protoreflect.FieldDescriptor
	fd_EpochParams_poc_validation_delay              protoreflect.FieldDescriptor
	fd_EpochParams_poc_validation_duration           protoreflect.FieldDescriptor
	fd_EpochParams_inference_pruning_epoch_threshold protoreflect.FieldDescriptor
)

func init() {
	file_inference_inference_params_proto_init()
	md_EpochParams = File_inference_inference_params_proto.Messages().ByName("EpochParams")
	fd_EpochParams_epoch_length = md_EpochParams.Fields().ByName("epoch_length")
	fd_EpochParams_epoch_multiplier = md_EpochParams.Fields().ByName("epoch_multiplier")
	fd_EpochParams_epoch_shift = md_EpochParams.Fields().ByName("epoch_shift")
	fd_EpochParams_default_unit_of_compute_price = md_EpochParams.Fields().ByName("default_unit_of_compute_price")
	fd_EpochParams_poc_stage_duration = md_EpochParams.Fields().ByName("poc_stage_duration")
	fd_EpochParams_poc_exchange_duration = md_EpochParams.Fields().ByName("poc_exchange_duration")
	fd_EpochParams_poc_validation_delay = md_EpochParams.Fields().ByName("poc_validation_delay")
	fd_EpochParams_poc_validation_duration = md_EpochParams.Fields().ByName("poc_validation_duration")
	fd_EpochParams_inference_pruning_epoch_threshold = md_EpochParams.Fields().ByName("inference_pruning_epoch_threshold")
}

var _ protoreflect.Message = (*fastReflection_EpochParams)(nil)

type fastReflection_EpochParams EpochParams

func (x *EpochParams) ProtoReflect() protoreflect.Message {
	return (*fastReflection_EpochParams)(x)
}

func (x *EpochParams) slowProtoReflect() protoreflect.Message {
	mi := &file_inference_inference_params_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_EpochParams_messageType fastReflection_EpochParams_messageType
var _ protoreflect.MessageType = fastReflection_EpochParams_messageType{}

type fastReflection_EpochParams_messageType struct{}

func (x fastReflection_EpochParams_messageType) Zero() protoreflect.Message {
	return (*fastReflection_EpochParams)(nil)
}
func (x fastReflection_EpochParams_messageType) New() protoreflect.Message {
	return new(fastReflection_EpochParams)
}
func (x fastReflection_EpochParams_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_EpochParams
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_EpochParams) Descriptor() protoreflect.MessageDescriptor {
	return md_EpochParams
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_EpochParams) Type() protoreflect.MessageType {
	return _fastReflection_EpochParams_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_EpochParams) New() protoreflect.Message {
	return new(fastReflection_EpochParams)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_EpochParams) Interface() protoreflect.ProtoMessage {
	return (*EpochParams)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_EpochParams) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.EpochLength != int64(0) {
		value := protoreflect.ValueOfInt64(x.EpochLength)
		if !f(fd_EpochParams_epoch_length, value) {
			return
		}
	}
	if x.EpochMultiplier != int64(0) {
		value := protoreflect.ValueOfInt64(x.EpochMultiplier)
		if !f(fd_EpochParams_epoch_multiplier, value) {
			return
		}
	}
	if x.EpochShift != int64(0) {
		value := protoreflect.ValueOfInt64(x.EpochShift)
		if !f(fd_EpochParams_epoch_shift, value) {
			return
		}
	}
	if x.DefaultUnitOfComputePrice != int64(0) {
		value := protoreflect.ValueOfInt64(x.DefaultUnitOfComputePrice)
		if !f(fd_EpochParams_default_unit_of_compute_price, value) {
			return
		}
	}
	if x.PocStageDuration != int64(0) {
		value := protoreflect.ValueOfInt64(x.PocStageDuration)
		if !f(fd_EpochParams_poc_stage_duration, value) {
			return
		}
	}
	if x.PocExchangeDuration != int64(0) {
		value := protoreflect.ValueOfInt64(x.PocExchangeDuration)
		if !f(fd_EpochParams_poc_exchange_duration, value) {
			return
		}
	}
	if x.PocValidationDelay != int64(0) {
		value := protoreflect.ValueOfInt64(x.PocValidationDelay)
		if !f(fd_EpochParams_poc_validation_delay, value) {
			return
		}
	}
	if x.PocValidationDuration != int64(0) {
		value := protoreflect.ValueOfInt64(x.PocValidationDuration)
		if !f(fd_EpochParams_poc_validation_duration, value) {
			return
		}
	}
	if x.InferencePruningEpochThreshold != uint64(0) {
		value := protoreflect.ValueOfUint64(x.InferencePruningEpochThreshold)
		if !f(fd_EpochParams_inference_pruning_epoch_threshold, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_EpochParams) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "inference.inference.EpochParams.epoch_length":
		return x.EpochLength != int64(0)
	case "inference.inference.EpochParams.epoch_multiplier":
		return x.EpochMultiplier != int64(0)
	case "inference.inference.EpochParams.epoch_shift":
		return x.EpochShift != int64(0)
	case "inference.inference.EpochParams.default_unit_of_compute_price":
		return x.DefaultUnitOfComputePrice != int64(0)
	case "inference.inference.EpochParams.poc_stage_duration":
		return x.PocStageDuration != int64(0)
	case "inference.inference.EpochParams.poc_exchange_duration":
		return x.PocExchangeDuration != int64(0)
	case "inference.inference.EpochParams.poc_validation_delay":
		return x.PocValidationDelay != int64(0)
	case "inference.inference.EpochParams.poc_validation_duration":
		return x.PocValidationDuration != int64(0)
	case "inference.inference.EpochParams.inference_pruning_epoch_threshold":
		return x.InferencePruningEpochThreshold != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.EpochParams"))
		}
		panic(fmt.Errorf("message inference.inference.EpochParams does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EpochParams) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "inference.inference.EpochParams.epoch_length":
		x.EpochLength = int64(0)
	case "inference.inference.EpochParams.epoch_multiplier":
		x.EpochMultiplier = int64(0)
	case "inference.inference.EpochParams.epoch_shift":
		x.EpochShift = int64(0)
	case "inference.inference.EpochParams.default_unit_of_compute_price":
		x.DefaultUnitOfComputePrice = int64(0)
	case "inference.inference.EpochParams.poc_stage_duration":
		x.PocStageDuration = int64(0)
	case "inference.inference.EpochParams.poc_exchange_duration":
		x.PocExchangeDuration = int64(0)
	case "inference.inference.EpochParams.poc_validation_delay":
		x.PocValidationDelay = int64(0)
	case "inference.inference.EpochParams.poc_validation_duration":
		x.PocValidationDuration = int64(0)
	case "inference.inference.EpochParams.inference_pruning_epoch_threshold":
		x.InferencePruningEpochThreshold = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.EpochParams"))
		}
		panic(fmt.Errorf("message inference.inference.EpochParams does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_EpochParams) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "inference.inference.EpochParams.epoch_length":
		value := x.EpochLength
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.EpochParams.epoch_multiplier":
		value := x.EpochMultiplier
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.EpochParams.epoch_shift":
		value := x.EpochShift
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.EpochParams.default_unit_of_compute_price":
		value := x.DefaultUnitOfComputePrice
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.EpochParams.poc_stage_duration":
		value := x.PocStageDuration
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.EpochParams.poc_exchange_duration":
		value := x.PocExchangeDuration
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.EpochParams.poc_validation_delay":
		value := x.PocValidationDelay
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.EpochParams.poc_validation_duration":
		value := x.PocValidationDuration
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.EpochParams.inference_pruning_epoch_threshold":
		value := x.InferencePruningEpochThreshold
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.EpochParams"))
		}
		panic(fmt.Errorf("message inference.inference.EpochParams does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EpochParams) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "inference.inference.EpochParams.epoch_length":
		x.EpochLength = value.Int()
	case "inference.inference.EpochParams.epoch_multiplier":
		x.EpochMultiplier = value.Int()
	case "inference.inference.EpochParams.epoch_shift":
		x.EpochShift = value.Int()
	case "inference.inference.EpochParams.default_unit_of_compute_price":
		x.DefaultUnitOfComputePrice = value.Int()
	case "inference.inference.EpochParams.poc_stage_duration":
		x.PocStageDuration = value.Int()
	case "inference.inference.EpochParams.poc_exchange_duration":
		x.PocExchangeDuration = value.Int()
	case "inference.inference.EpochParams.poc_validation_delay":
		x.PocValidationDelay = value.Int()
	case "inference.inference.EpochParams.poc_validation_duration":
		x.PocValidationDuration = value.Int()
	case "inference.inference.EpochParams.inference_pruning_epoch_threshold":
		x.InferencePruningEpochThreshold = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.EpochParams"))
		}
		panic(fmt.Errorf("message inference.inference.EpochParams does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EpochParams) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.EpochParams.epoch_length":
		panic(fmt.Errorf("field epoch_length of message inference.inference.EpochParams is not mutable"))
	case "inference.inference.EpochParams.epoch_multiplier":
		panic(fmt.Errorf("field epoch_multiplier of message inference.inference.EpochParams is not mutable"))
	case "inference.inference.EpochParams.epoch_shift":
		panic(fmt.Errorf("field epoch_shift of message inference.inference.EpochParams is not mutable"))
	case "inference.inference.EpochParams.default_unit_of_compute_price":
		panic(fmt.Errorf("field default_unit_of_compute_price of message inference.inference.EpochParams is not mutable"))
	case "inference.inference.EpochParams.poc_stage_duration":
		panic(fmt.Errorf("field poc_stage_duration of message inference.inference.EpochParams is not mutable"))
	case "inference.inference.EpochParams.poc_exchange_duration":
		panic(fmt.Errorf("field poc_exchange_duration of message inference.inference.EpochParams is not mutable"))
	case "inference.inference.EpochParams.poc_validation_delay":
		panic(fmt.Errorf("field poc_validation_delay of message inference.inference.EpochParams is not mutable"))
	case "inference.inference.EpochParams.poc_validation_duration":
		panic(fmt.Errorf("field poc_validation_duration of message inference.inference.EpochParams is not mutable"))
	case "inference.inference.EpochParams.inference_pruning_epoch_threshold":
		panic(fmt.Errorf("field inference_pruning_epoch_threshold of message inference.inference.EpochParams is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.EpochParams"))
		}
		panic(fmt.Errorf("message inference.inference.EpochParams does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_EpochParams) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.EpochParams.epoch_length":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.EpochParams.epoch_multiplier":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.EpochParams.epoch_shift":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.EpochParams.default_unit_of_compute_price":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.EpochParams.poc_stage_duration":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.EpochParams.poc_exchange_duration":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.EpochParams.poc_validation_delay":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.EpochParams.poc_validation_duration":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.EpochParams.inference_pruning_epoch_threshold":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.EpochParams"))
		}
		panic(fmt.Errorf("message inference.inference.EpochParams does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_EpochParams) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in inference.inference.EpochParams", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_EpochParams) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EpochParams) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_EpochParams) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_EpochParams) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*EpochParams)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.EpochLength != 0 {
			n += 1 + runtime.Sov(uint64(x.EpochLength))
		}
		if x.EpochMultiplier != 0 {
			n += 1 + runtime.Sov(uint64(x.EpochMultiplier))
		}
		if x.EpochShift != 0 {
			n += 1 + runtime.Sov(uint64(x.EpochShift))
		}
		if x.DefaultUnitOfComputePrice != 0 {
			n += 1 + runtime.Sov(uint64(x.DefaultUnitOfComputePrice))
		}
		if x.PocStageDuration != 0 {
			n += 1 + runtime.Sov(uint64(x.PocStageDuration))
		}
		if x.PocExchangeDuration != 0 {
			n += 1 + runtime.Sov(uint64(x.PocExchangeDuration))
		}
		if x.PocValidationDelay != 0 {
			n += 1 + runtime.Sov(uint64(x.PocValidationDelay))
		}
		if x.PocValidationDuration != 0 {
			n += 1 + runtime.Sov(uint64(x.PocValidationDuration))
		}
		if x.InferencePruningEpochThreshold != 0 {
			n += 1 + runtime.Sov(uint64(x.InferencePruningEpochThreshold))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*EpochParams)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.InferencePruningEpochThreshold != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.InferencePruningEpochThreshold))
			i--
			dAtA[i] = 0x48
		}
		if x.PocValidationDuration != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PocValidationDuration))
			i--
			dAtA[i] = 0x40
		}
		if x.PocValidationDelay != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PocValidationDelay))
			i--
			dAtA[i] = 0x38
		}
		if x.PocExchangeDuration != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PocExchangeDuration))
			i--
			dAtA[i] = 0x30
		}
		if x.PocStageDuration != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PocStageDuration))
			i--
			dAtA[i] = 0x28
		}
		if x.DefaultUnitOfComputePrice != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.DefaultUnitOfComputePrice))
			i--
			dAtA[i] = 0x20
		}
		if x.EpochShift != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EpochShift))
			i--
			dAtA[i] = 0x18
		}
		if x.EpochMultiplier != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EpochMultiplier))
			i--
			dAtA[i] = 0x10
		}
		if x.EpochLength != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EpochLength))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*EpochParams)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EpochParams: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EpochParams: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EpochLength", wireType)
				}
				x.EpochLength = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EpochLength |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EpochMultiplier", wireType)
				}
				x.EpochMultiplier = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EpochMultiplier |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EpochShift", wireType)
				}
				x.EpochShift = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EpochShift |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DefaultUnitOfComputePrice", wireType)
				}
				x.DefaultUnitOfComputePrice = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.DefaultUnitOfComputePrice |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PocStageDuration", wireType)
				}
				x.PocStageDuration = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PocStageDuration |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PocExchangeDuration", wireType)
				}
				x.PocExchangeDuration = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PocExchangeDuration |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PocValidationDelay", wireType)
				}
				x.PocValidationDelay = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PocValidationDelay |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PocValidationDuration", wireType)
				}
				x.PocValidationDuration = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PocValidationDuration |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field InferencePruningEpochThreshold", wireType)
				}
				x.InferencePruningEpochThreshold = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.InferencePruningEpochThreshold |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_ValidationParams                                protoreflect.MessageDescriptor
	fd_ValidationParams_false_positive_rate            protoreflect.FieldDescriptor
	fd_ValidationParams_min_ramp_up_measurements       protoreflect.FieldDescriptor
	fd_ValidationParams_pass_value                     protoreflect.FieldDescriptor
	fd_ValidationParams_min_validation_average         protoreflect.FieldDescriptor
	fd_ValidationParams_max_validation_average         protoreflect.FieldDescriptor
	fd_ValidationParams_expiration_blocks              protoreflect.FieldDescriptor
	fd_ValidationParams_epochs_to_max                  protoreflect.FieldDescriptor
	fd_ValidationParams_full_validation_traffic_cutoff protoreflect.FieldDescriptor
	fd_ValidationParams_min_validation_halfway         protoreflect.FieldDescriptor
	fd_ValidationParams_min_validation_traffic_cutoff  protoreflect.FieldDescriptor
	fd_ValidationParams_miss_percentage_cutoff         protoreflect.FieldDescriptor
	fd_ValidationParams_miss_requests_penalty          protoreflect.FieldDescriptor
	fd_ValidationParams_timestamp_expiration           protoreflect.FieldDescriptor
	fd_ValidationParams_timestamp_advance              protoreflect.FieldDescriptor
)

func init() {
	file_inference_inference_params_proto_init()
	md_ValidationParams = File_inference_inference_params_proto.Messages().ByName("ValidationParams")
	fd_ValidationParams_false_positive_rate = md_ValidationParams.Fields().ByName("false_positive_rate")
	fd_ValidationParams_min_ramp_up_measurements = md_ValidationParams.Fields().ByName("min_ramp_up_measurements")
	fd_ValidationParams_pass_value = md_ValidationParams.Fields().ByName("pass_value")
	fd_ValidationParams_min_validation_average = md_ValidationParams.Fields().ByName("min_validation_average")
	fd_ValidationParams_max_validation_average = md_ValidationParams.Fields().ByName("max_validation_average")
	fd_ValidationParams_expiration_blocks = md_ValidationParams.Fields().ByName("expiration_blocks")
	fd_ValidationParams_epochs_to_max = md_ValidationParams.Fields().ByName("epochs_to_max")
	fd_ValidationParams_full_validation_traffic_cutoff = md_ValidationParams.Fields().ByName("full_validation_traffic_cutoff")
	fd_ValidationParams_min_validation_halfway = md_ValidationParams.Fields().ByName("min_validation_halfway")
	fd_ValidationParams_min_validation_traffic_cutoff = md_ValidationParams.Fields().ByName("min_validation_traffic_cutoff")
	fd_ValidationParams_miss_percentage_cutoff = md_ValidationParams.Fields().ByName("miss_percentage_cutoff")
	fd_ValidationParams_miss_requests_penalty = md_ValidationParams.Fields().ByName("miss_requests_penalty")
	fd_ValidationParams_timestamp_expiration = md_ValidationParams.Fields().ByName("timestamp_expiration")
	fd_ValidationParams_timestamp_advance = md_ValidationParams.Fields().ByName("timestamp_advance")
}

var _ protoreflect.Message = (*fastReflection_ValidationParams)(nil)

type fastReflection_ValidationParams ValidationParams

func (x *ValidationParams) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ValidationParams)(x)
}

func (x *ValidationParams) slowProtoReflect() protoreflect.Message {
	mi := &file_inference_inference_params_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ValidationParams_messageType fastReflection_ValidationParams_messageType
var _ protoreflect.MessageType = fastReflection_ValidationParams_messageType{}

type fastReflection_ValidationParams_messageType struct{}

func (x fastReflection_ValidationParams_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ValidationParams)(nil)
}
func (x fastReflection_ValidationParams_messageType) New() protoreflect.Message {
	return new(fastReflection_ValidationParams)
}
func (x fastReflection_ValidationParams_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ValidationParams
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ValidationParams) Descriptor() protoreflect.MessageDescriptor {
	return md_ValidationParams
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ValidationParams) Type() protoreflect.MessageType {
	return _fastReflection_ValidationParams_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ValidationParams) New() protoreflect.Message {
	return new(fastReflection_ValidationParams)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ValidationParams) Interface() protoreflect.ProtoMessage {
	return (*ValidationParams)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ValidationParams) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.FalsePositiveRate != nil {
		value := protoreflect.ValueOfMessage(x.FalsePositiveRate.ProtoReflect())
		if !f(fd_ValidationParams_false_positive_rate, value) {
			return
		}
	}
	if x.MinRampUpMeasurements != int32(0) {
		value := protoreflect.ValueOfInt32(x.MinRampUpMeasurements)
		if !f(fd_ValidationParams_min_ramp_up_measurements, value) {
			return
		}
	}
	if x.PassValue != nil {
		value := protoreflect.ValueOfMessage(x.PassValue.ProtoReflect())
		if !f(fd_ValidationParams_pass_value, value) {
			return
		}
	}
	if x.MinValidationAverage != nil {
		value := protoreflect.ValueOfMessage(x.MinValidationAverage.ProtoReflect())
		if !f(fd_ValidationParams_min_validation_average, value) {
			return
		}
	}
	if x.MaxValidationAverage != nil {
		value := protoreflect.ValueOfMessage(x.MaxValidationAverage.ProtoReflect())
		if !f(fd_ValidationParams_max_validation_average, value) {
			return
		}
	}
	if x.ExpirationBlocks != int64(0) {
		value := protoreflect.ValueOfInt64(x.ExpirationBlocks)
		if !f(fd_ValidationParams_expiration_blocks, value) {
			return
		}
	}
	if x.EpochsToMax != int64(0) {
		value := protoreflect.ValueOfInt64(x.EpochsToMax)
		if !f(fd_ValidationParams_epochs_to_max, value) {
			return
		}
	}
	if x.FullValidationTrafficCutoff != int64(0) {
		value := protoreflect.ValueOfInt64(x.FullValidationTrafficCutoff)
		if !f(fd_ValidationParams_full_validation_traffic_cutoff, value) {
			return
		}
	}
	if x.MinValidationHalfway != nil {
		value := protoreflect.ValueOfMessage(x.MinValidationHalfway.ProtoReflect())
		if !f(fd_ValidationParams_min_validation_halfway, value) {
			return
		}
	}
	if x.MinValidationTrafficCutoff != int64(0) {
		value := protoreflect.ValueOfInt64(x.MinValidationTrafficCutoff)
		if !f(fd_ValidationParams_min_validation_traffic_cutoff, value) {
			return
		}
	}
	if x.MissPercentageCutoff != nil {
		value := protoreflect.ValueOfMessage(x.MissPercentageCutoff.ProtoReflect())
		if !f(fd_ValidationParams_miss_percentage_cutoff, value) {
			return
		}
	}
	if x.MissRequestsPenalty != nil {
		value := protoreflect.ValueOfMessage(x.MissRequestsPenalty.ProtoReflect())
		if !f(fd_ValidationParams_miss_requests_penalty, value) {
			return
		}
	}
	if x.TimestampExpiration != int64(0) {
		value := protoreflect.ValueOfInt64(x.TimestampExpiration)
		if !f(fd_ValidationParams_timestamp_expiration, value) {
			return
		}
	}
	if x.TimestampAdvance != int64(0) {
		value := protoreflect.ValueOfInt64(x.TimestampAdvance)
		if !f(fd_ValidationParams_timestamp_advance, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ValidationParams) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "inference.inference.ValidationParams.false_positive_rate":
		return x.FalsePositiveRate != nil
	case "inference.inference.ValidationParams.min_ramp_up_measurements":
		return x.MinRampUpMeasurements != int32(0)
	case "inference.inference.ValidationParams.pass_value":
		return x.PassValue != nil
	case "inference.inference.ValidationParams.min_validation_average":
		return x.MinValidationAverage != nil
	case "inference.inference.ValidationParams.max_validation_average":
		return x.MaxValidationAverage != nil
	case "inference.inference.ValidationParams.expiration_blocks":
		return x.ExpirationBlocks != int64(0)
	case "inference.inference.ValidationParams.epochs_to_max":
		return x.EpochsToMax != int64(0)
	case "inference.inference.ValidationParams.full_validation_traffic_cutoff":
		return x.FullValidationTrafficCutoff != int64(0)
	case "inference.inference.ValidationParams.min_validation_halfway":
		return x.MinValidationHalfway != nil
	case "inference.inference.ValidationParams.min_validation_traffic_cutoff":
		return x.MinValidationTrafficCutoff != int64(0)
	case "inference.inference.ValidationParams.miss_percentage_cutoff":
		return x.MissPercentageCutoff != nil
	case "inference.inference.ValidationParams.miss_requests_penalty":
		return x.MissRequestsPenalty != nil
	case "inference.inference.ValidationParams.timestamp_expiration":
		return x.TimestampExpiration != int64(0)
	case "inference.inference.ValidationParams.timestamp_advance":
		return x.TimestampAdvance != int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.ValidationParams"))
		}
		panic(fmt.Errorf("message inference.inference.ValidationParams does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ValidationParams) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "inference.inference.ValidationParams.false_positive_rate":
		x.FalsePositiveRate = nil
	case "inference.inference.ValidationParams.min_ramp_up_measurements":
		x.MinRampUpMeasurements = int32(0)
	case "inference.inference.ValidationParams.pass_value":
		x.PassValue = nil
	case "inference.inference.ValidationParams.min_validation_average":
		x.MinValidationAverage = nil
	case "inference.inference.ValidationParams.max_validation_average":
		x.MaxValidationAverage = nil
	case "inference.inference.ValidationParams.expiration_blocks":
		x.ExpirationBlocks = int64(0)
	case "inference.inference.ValidationParams.epochs_to_max":
		x.EpochsToMax = int64(0)
	case "inference.inference.ValidationParams.full_validation_traffic_cutoff":
		x.FullValidationTrafficCutoff = int64(0)
	case "inference.inference.ValidationParams.min_validation_halfway":
		x.MinValidationHalfway = nil
	case "inference.inference.ValidationParams.min_validation_traffic_cutoff":
		x.MinValidationTrafficCutoff = int64(0)
	case "inference.inference.ValidationParams.miss_percentage_cutoff":
		x.MissPercentageCutoff = nil
	case "inference.inference.ValidationParams.miss_requests_penalty":
		x.MissRequestsPenalty = nil
	case "inference.inference.ValidationParams.timestamp_expiration":
		x.TimestampExpiration = int64(0)
	case "inference.inference.ValidationParams.timestamp_advance":
		x.TimestampAdvance = int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.ValidationParams"))
		}
		panic(fmt.Errorf("message inference.inference.ValidationParams does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ValidationParams) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "inference.inference.ValidationParams.false_positive_rate":
		value := x.FalsePositiveRate
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "inference.inference.ValidationParams.min_ramp_up_measurements":
		value := x.MinRampUpMeasurements
		return protoreflect.ValueOfInt32(value)
	case "inference.inference.ValidationParams.pass_value":
		value := x.PassValue
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "inference.inference.ValidationParams.min_validation_average":
		value := x.MinValidationAverage
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "inference.inference.ValidationParams.max_validation_average":
		value := x.MaxValidationAverage
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "inference.inference.ValidationParams.expiration_blocks":
		value := x.ExpirationBlocks
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.ValidationParams.epochs_to_max":
		value := x.EpochsToMax
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.ValidationParams.full_validation_traffic_cutoff":
		value := x.FullValidationTrafficCutoff
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.ValidationParams.min_validation_halfway":
		value := x.MinValidationHalfway
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "inference.inference.ValidationParams.min_validation_traffic_cutoff":
		value := x.MinValidationTrafficCutoff
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.ValidationParams.miss_percentage_cutoff":
		value := x.MissPercentageCutoff
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "inference.inference.ValidationParams.miss_requests_penalty":
		value := x.MissRequestsPenalty
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "inference.inference.ValidationParams.timestamp_expiration":
		value := x.TimestampExpiration
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.ValidationParams.timestamp_advance":
		value := x.TimestampAdvance
		return protoreflect.ValueOfInt64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.ValidationParams"))
		}
		panic(fmt.Errorf("message inference.inference.ValidationParams does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ValidationParams) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "inference.inference.ValidationParams.false_positive_rate":
		x.FalsePositiveRate = value.Message().Interface().(*Decimal)
	case "inference.inference.ValidationParams.min_ramp_up_measurements":
		x.MinRampUpMeasurements = int32(value.Int())
	case "inference.inference.ValidationParams.pass_value":
		x.PassValue = value.Message().Interface().(*Decimal)
	case "inference.inference.ValidationParams.min_validation_average":
		x.MinValidationAverage = value.Message().Interface().(*Decimal)
	case "inference.inference.ValidationParams.max_validation_average":
		x.MaxValidationAverage = value.Message().Interface().(*Decimal)
	case "inference.inference.ValidationParams.expiration_blocks":
		x.ExpirationBlocks = value.Int()
	case "inference.inference.ValidationParams.epochs_to_max":
		x.EpochsToMax = value.Int()
	case "inference.inference.ValidationParams.full_validation_traffic_cutoff":
		x.FullValidationTrafficCutoff = value.Int()
	case "inference.inference.ValidationParams.min_validation_halfway":
		x.MinValidationHalfway = value.Message().Interface().(*Decimal)
	case "inference.inference.ValidationParams.min_validation_traffic_cutoff":
		x.MinValidationTrafficCutoff = value.Int()
	case "inference.inference.ValidationParams.miss_percentage_cutoff":
		x.MissPercentageCutoff = value.Message().Interface().(*Decimal)
	case "inference.inference.ValidationParams.miss_requests_penalty":
		x.MissRequestsPenalty = value.Message().Interface().(*Decimal)
	case "inference.inference.ValidationParams.timestamp_expiration":
		x.TimestampExpiration = value.Int()
	case "inference.inference.ValidationParams.timestamp_advance":
		x.TimestampAdvance = value.Int()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.ValidationParams"))
		}
		panic(fmt.Errorf("message inference.inference.ValidationParams does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ValidationParams) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.ValidationParams.false_positive_rate":
		if x.FalsePositiveRate == nil {
			x.FalsePositiveRate = new(Decimal)
		}
		return protoreflect.ValueOfMessage(x.FalsePositiveRate.ProtoReflect())
	case "inference.inference.ValidationParams.pass_value":
		if x.PassValue == nil {
			x.PassValue = new(Decimal)
		}
		return protoreflect.ValueOfMessage(x.PassValue.ProtoReflect())
	case "inference.inference.ValidationParams.min_validation_average":
		if x.MinValidationAverage == nil {
			x.MinValidationAverage = new(Decimal)
		}
		return protoreflect.ValueOfMessage(x.MinValidationAverage.ProtoReflect())
	case "inference.inference.ValidationParams.max_validation_average":
		if x.MaxValidationAverage == nil {
			x.MaxValidationAverage = new(Decimal)
		}
		return protoreflect.ValueOfMessage(x.MaxValidationAverage.ProtoReflect())
	case "inference.inference.ValidationParams.min_validation_halfway":
		if x.MinValidationHalfway == nil {
			x.MinValidationHalfway = new(Decimal)
		}
		return protoreflect.ValueOfMessage(x.MinValidationHalfway.ProtoReflect())
	case "inference.inference.ValidationParams.miss_percentage_cutoff":
		if x.MissPercentageCutoff == nil {
			x.MissPercentageCutoff = new(Decimal)
		}
		return protoreflect.ValueOfMessage(x.MissPercentageCutoff.ProtoReflect())
	case "inference.inference.ValidationParams.miss_requests_penalty":
		if x.MissRequestsPenalty == nil {
			x.MissRequestsPenalty = new(Decimal)
		}
		return protoreflect.ValueOfMessage(x.MissRequestsPenalty.ProtoReflect())
	case "inference.inference.ValidationParams.min_ramp_up_measurements":
		panic(fmt.Errorf("field min_ramp_up_measurements of message inference.inference.ValidationParams is not mutable"))
	case "inference.inference.ValidationParams.expiration_blocks":
		panic(fmt.Errorf("field expiration_blocks of message inference.inference.ValidationParams is not mutable"))
	case "inference.inference.ValidationParams.epochs_to_max":
		panic(fmt.Errorf("field epochs_to_max of message inference.inference.ValidationParams is not mutable"))
	case "inference.inference.ValidationParams.full_validation_traffic_cutoff":
		panic(fmt.Errorf("field full_validation_traffic_cutoff of message inference.inference.ValidationParams is not mutable"))
	case "inference.inference.ValidationParams.min_validation_traffic_cutoff":
		panic(fmt.Errorf("field min_validation_traffic_cutoff of message inference.inference.ValidationParams is not mutable"))
	case "inference.inference.ValidationParams.timestamp_expiration":
		panic(fmt.Errorf("field timestamp_expiration of message inference.inference.ValidationParams is not mutable"))
	case "inference.inference.ValidationParams.timestamp_advance":
		panic(fmt.Errorf("field timestamp_advance of message inference.inference.ValidationParams is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.ValidationParams"))
		}
		panic(fmt.Errorf("message inference.inference.ValidationParams does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ValidationParams) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.ValidationParams.false_positive_rate":
		m := new(Decimal)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "inference.inference.ValidationParams.min_ramp_up_measurements":
		return protoreflect.ValueOfInt32(int32(0))
	case "inference.inference.ValidationParams.pass_value":
		m := new(Decimal)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "inference.inference.ValidationParams.min_validation_average":
		m := new(Decimal)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "inference.inference.ValidationParams.max_validation_average":
		m := new(Decimal)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "inference.inference.ValidationParams.expiration_blocks":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.ValidationParams.epochs_to_max":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.ValidationParams.full_validation_traffic_cutoff":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.ValidationParams.min_validation_halfway":
		m := new(Decimal)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "inference.inference.ValidationParams.min_validation_traffic_cutoff":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.ValidationParams.miss_percentage_cutoff":
		m := new(Decimal)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "inference.inference.ValidationParams.miss_requests_penalty":
		m := new(Decimal)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "inference.inference.ValidationParams.timestamp_expiration":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.ValidationParams.timestamp_advance":
		return protoreflect.ValueOfInt64(int64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.ValidationParams"))
		}
		panic(fmt.Errorf("message inference.inference.ValidationParams does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ValidationParams) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in inference.inference.ValidationParams", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ValidationParams) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ValidationParams) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ValidationParams) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ValidationParams) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ValidationParams)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.FalsePositiveRate != nil {
			l = options.Size(x.FalsePositiveRate)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.MinRampUpMeasurements != 0 {
			n += 1 + runtime.Sov(uint64(x.MinRampUpMeasurements))
		}
		if x.PassValue != nil {
			l = options.Size(x.PassValue)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.MinValidationAverage != nil {
			l = options.Size(x.MinValidationAverage)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.MaxValidationAverage != nil {
			l = options.Size(x.MaxValidationAverage)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.ExpirationBlocks != 0 {
			n += 1 + runtime.Sov(uint64(x.ExpirationBlocks))
		}
		if x.EpochsToMax != 0 {
			n += 1 + runtime.Sov(uint64(x.EpochsToMax))
		}
		if x.FullValidationTrafficCutoff != 0 {
			n += 1 + runtime.Sov(uint64(x.FullValidationTrafficCutoff))
		}
		if x.MinValidationHalfway != nil {
			l = options.Size(x.MinValidationHalfway)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.MinValidationTrafficCutoff != 0 {
			n += 1 + runtime.Sov(uint64(x.MinValidationTrafficCutoff))
		}
		if x.MissPercentageCutoff != nil {
			l = options.Size(x.MissPercentageCutoff)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.MissRequestsPenalty != nil {
			l = options.Size(x.MissRequestsPenalty)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.TimestampExpiration != 0 {
			n += 1 + runtime.Sov(uint64(x.TimestampExpiration))
		}
		if x.TimestampAdvance != 0 {
			n += 1 + runtime.Sov(uint64(x.TimestampAdvance))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ValidationParams)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.TimestampAdvance != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TimestampAdvance))
			i--
			dAtA[i] = 0x70
		}
		if x.TimestampExpiration != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TimestampExpiration))
			i--
			dAtA[i] = 0x68
		}
		if x.MissRequestsPenalty != nil {
			encoded, err := options.Marshal(x.MissRequestsPenalty)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x62
		}
		if x.MissPercentageCutoff != nil {
			encoded, err := options.Marshal(x.MissPercentageCutoff)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x5a
		}
		if x.MinValidationTrafficCutoff != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MinValidationTrafficCutoff))
			i--
			dAtA[i] = 0x50
		}
		if x.MinValidationHalfway != nil {
			encoded, err := options.Marshal(x.MinValidationHalfway)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x4a
		}
		if x.FullValidationTrafficCutoff != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.FullValidationTrafficCutoff))
			i--
			dAtA[i] = 0x40
		}
		if x.EpochsToMax != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EpochsToMax))
			i--
			dAtA[i] = 0x38
		}
		if x.ExpirationBlocks != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ExpirationBlocks))
			i--
			dAtA[i] = 0x30
		}
		if x.MaxValidationAverage != nil {
			encoded, err := options.Marshal(x.MaxValidationAverage)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x2a
		}
		if x.MinValidationAverage != nil {
			encoded, err := options.Marshal(x.MinValidationAverage)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x22
		}
		if x.PassValue != nil {
			encoded, err := options.Marshal(x.PassValue)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if x.MinRampUpMeasurements != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MinRampUpMeasurements))
			i--
			dAtA[i] = 0x10
		}
		if x.FalsePositiveRate != nil {
			encoded, err := options.Marshal(x.FalsePositiveRate)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ValidationParams)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ValidationParams: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ValidationParams: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FalsePositiveRate", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.FalsePositiveRate == nil {
					x.FalsePositiveRate = &Decimal{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.FalsePositiveRate); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MinRampUpMeasurements", wireType)
				}
				x.MinRampUpMeasurements = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MinRampUpMeasurements |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PassValue", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.PassValue == nil {
					x.PassValue = &Decimal{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.PassValue); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MinValidationAverage", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.MinValidationAverage == nil {
					x.MinValidationAverage = &Decimal{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.MinValidationAverage); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxValidationAverage", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.MaxValidationAverage == nil {
					x.MaxValidationAverage = &Decimal{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.MaxValidationAverage); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ExpirationBlocks", wireType)
				}
				x.ExpirationBlocks = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ExpirationBlocks |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EpochsToMax", wireType)
				}
				x.EpochsToMax = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EpochsToMax |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FullValidationTrafficCutoff", wireType)
				}
				x.FullValidationTrafficCutoff = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.FullValidationTrafficCutoff |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MinValidationHalfway", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.MinValidationHalfway == nil {
					x.MinValidationHalfway = &Decimal{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.MinValidationHalfway); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 10:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MinValidationTrafficCutoff", wireType)
				}
				x.MinValidationTrafficCutoff = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MinValidationTrafficCutoff |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MissPercentageCutoff", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.MissPercentageCutoff == nil {
					x.MissPercentageCutoff = &Decimal{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.MissPercentageCutoff); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 12:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MissRequestsPenalty", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.MissRequestsPenalty == nil {
					x.MissRequestsPenalty = &Decimal{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.MissRequestsPenalty); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 13:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TimestampExpiration", wireType)
				}
				x.TimestampExpiration = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TimestampExpiration |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 14:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TimestampAdvance", wireType)
				}
				x.TimestampAdvance = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TimestampAdvance |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_PocParams                                  protoreflect.MessageDescriptor
	fd_PocParams_default_difficulty               protoreflect.FieldDescriptor
	fd_PocParams_validation_sample_size           protoreflect.FieldDescriptor
	fd_PocParams_poc_data_pruning_epoch_threshold protoreflect.FieldDescriptor
)

func init() {
	file_inference_inference_params_proto_init()
	md_PocParams = File_inference_inference_params_proto.Messages().ByName("PocParams")
	fd_PocParams_default_difficulty = md_PocParams.Fields().ByName("default_difficulty")
	fd_PocParams_validation_sample_size = md_PocParams.Fields().ByName("validation_sample_size")
	fd_PocParams_poc_data_pruning_epoch_threshold = md_PocParams.Fields().ByName("poc_data_pruning_epoch_threshold")
}

var _ protoreflect.Message = (*fastReflection_PocParams)(nil)

type fastReflection_PocParams PocParams

func (x *PocParams) ProtoReflect() protoreflect.Message {
	return (*fastReflection_PocParams)(x)
}

func (x *PocParams) slowProtoReflect() protoreflect.Message {
	mi := &file_inference_inference_params_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_PocParams_messageType fastReflection_PocParams_messageType
var _ protoreflect.MessageType = fastReflection_PocParams_messageType{}

type fastReflection_PocParams_messageType struct{}

func (x fastReflection_PocParams_messageType) Zero() protoreflect.Message {
	return (*fastReflection_PocParams)(nil)
}
func (x fastReflection_PocParams_messageType) New() protoreflect.Message {
	return new(fastReflection_PocParams)
}
func (x fastReflection_PocParams_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_PocParams
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_PocParams) Descriptor() protoreflect.MessageDescriptor {
	return md_PocParams
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_PocParams) Type() protoreflect.MessageType {
	return _fastReflection_PocParams_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_PocParams) New() protoreflect.Message {
	return new(fastReflection_PocParams)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_PocParams) Interface() protoreflect.ProtoMessage {
	return (*PocParams)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_PocParams) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.DefaultDifficulty != int32(0) {
		value := protoreflect.ValueOfInt32(x.DefaultDifficulty)
		if !f(fd_PocParams_default_difficulty, value) {
			return
		}
	}
	if x.ValidationSampleSize != int32(0) {
		value := protoreflect.ValueOfInt32(x.ValidationSampleSize)
		if !f(fd_PocParams_validation_sample_size, value) {
			return
		}
	}
	if x.PocDataPruningEpochThreshold != uint64(0) {
		value := protoreflect.ValueOfUint64(x.PocDataPruningEpochThreshold)
		if !f(fd_PocParams_poc_data_pruning_epoch_threshold, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_PocParams) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "inference.inference.PocParams.default_difficulty":
		return x.DefaultDifficulty != int32(0)
	case "inference.inference.PocParams.validation_sample_size":
		return x.ValidationSampleSize != int32(0)
	case "inference.inference.PocParams.poc_data_pruning_epoch_threshold":
		return x.PocDataPruningEpochThreshold != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.PocParams"))
		}
		panic(fmt.Errorf("message inference.inference.PocParams does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PocParams) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "inference.inference.PocParams.default_difficulty":
		x.DefaultDifficulty = int32(0)
	case "inference.inference.PocParams.validation_sample_size":
		x.ValidationSampleSize = int32(0)
	case "inference.inference.PocParams.poc_data_pruning_epoch_threshold":
		x.PocDataPruningEpochThreshold = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.PocParams"))
		}
		panic(fmt.Errorf("message inference.inference.PocParams does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_PocParams) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "inference.inference.PocParams.default_difficulty":
		value := x.DefaultDifficulty
		return protoreflect.ValueOfInt32(value)
	case "inference.inference.PocParams.validation_sample_size":
		value := x.ValidationSampleSize
		return protoreflect.ValueOfInt32(value)
	case "inference.inference.PocParams.poc_data_pruning_epoch_threshold":
		value := x.PocDataPruningEpochThreshold
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.PocParams"))
		}
		panic(fmt.Errorf("message inference.inference.PocParams does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PocParams) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "inference.inference.PocParams.default_difficulty":
		x.DefaultDifficulty = int32(value.Int())
	case "inference.inference.PocParams.validation_sample_size":
		x.ValidationSampleSize = int32(value.Int())
	case "inference.inference.PocParams.poc_data_pruning_epoch_threshold":
		x.PocDataPruningEpochThreshold = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.PocParams"))
		}
		panic(fmt.Errorf("message inference.inference.PocParams does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PocParams) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.PocParams.default_difficulty":
		panic(fmt.Errorf("field default_difficulty of message inference.inference.PocParams is not mutable"))
	case "inference.inference.PocParams.validation_sample_size":
		panic(fmt.Errorf("field validation_sample_size of message inference.inference.PocParams is not mutable"))
	case "inference.inference.PocParams.poc_data_pruning_epoch_threshold":
		panic(fmt.Errorf("field poc_data_pruning_epoch_threshold of message inference.inference.PocParams is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.PocParams"))
		}
		panic(fmt.Errorf("message inference.inference.PocParams does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_PocParams) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.PocParams.default_difficulty":
		return protoreflect.ValueOfInt32(int32(0))
	case "inference.inference.PocParams.validation_sample_size":
		return protoreflect.ValueOfInt32(int32(0))
	case "inference.inference.PocParams.poc_data_pruning_epoch_threshold":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.PocParams"))
		}
		panic(fmt.Errorf("message inference.inference.PocParams does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_PocParams) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in inference.inference.PocParams", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_PocParams) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PocParams) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_PocParams) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_PocParams) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*PocParams)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.DefaultDifficulty != 0 {
			n += 1 + runtime.Sov(uint64(x.DefaultDifficulty))
		}
		if x.ValidationSampleSize != 0 {
			n += 1 + runtime.Sov(uint64(x.ValidationSampleSize))
		}
		if x.PocDataPruningEpochThreshold != 0 {
			n += 1 + runtime.Sov(uint64(x.PocDataPruningEpochThreshold))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*PocParams)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.PocDataPruningEpochThreshold != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PocDataPruningEpochThreshold))
			i--
			dAtA[i] = 0x18
		}
		if x.ValidationSampleSize != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ValidationSampleSize))
			i--
			dAtA[i] = 0x10
		}
		if x.DefaultDifficulty != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.DefaultDifficulty))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*PocParams)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PocParams: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PocParams: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DefaultDifficulty", wireType)
				}
				x.DefaultDifficulty = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.DefaultDifficulty |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidationSampleSize", wireType)
				}
				x.ValidationSampleSize = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ValidationSampleSize |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PocDataPruningEpochThreshold", wireType)
				}
				x.PocDataPruningEpochThreshold = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PocDataPruningEpochThreshold |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_Decimal          protoreflect.MessageDescriptor
	fd_Decimal_value    protoreflect.FieldDescriptor
	fd_Decimal_exponent protoreflect.FieldDescriptor
)

func init() {
	file_inference_inference_params_proto_init()
	md_Decimal = File_inference_inference_params_proto.Messages().ByName("Decimal")
	fd_Decimal_value = md_Decimal.Fields().ByName("value")
	fd_Decimal_exponent = md_Decimal.Fields().ByName("exponent")
}

var _ protoreflect.Message = (*fastReflection_Decimal)(nil)

type fastReflection_Decimal Decimal

func (x *Decimal) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Decimal)(x)
}

func (x *Decimal) slowProtoReflect() protoreflect.Message {
	mi := &file_inference_inference_params_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Decimal_messageType fastReflection_Decimal_messageType
var _ protoreflect.MessageType = fastReflection_Decimal_messageType{}

type fastReflection_Decimal_messageType struct{}

func (x fastReflection_Decimal_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Decimal)(nil)
}
func (x fastReflection_Decimal_messageType) New() protoreflect.Message {
	return new(fastReflection_Decimal)
}
func (x fastReflection_Decimal_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Decimal
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Decimal) Descriptor() protoreflect.MessageDescriptor {
	return md_Decimal
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Decimal) Type() protoreflect.MessageType {
	return _fastReflection_Decimal_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Decimal) New() protoreflect.Message {
	return new(fastReflection_Decimal)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Decimal) Interface() protoreflect.ProtoMessage {
	return (*Decimal)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Decimal) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Value != int64(0) {
		value := protoreflect.ValueOfInt64(x.Value)
		if !f(fd_Decimal_value, value) {
			return
		}
	}
	if x.Exponent != int32(0) {
		value := protoreflect.ValueOfInt32(x.Exponent)
		if !f(fd_Decimal_exponent, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Decimal) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "inference.inference.Decimal.value":
		return x.Value != int64(0)
	case "inference.inference.Decimal.exponent":
		return x.Exponent != int32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.Decimal"))
		}
		panic(fmt.Errorf("message inference.inference.Decimal does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Decimal) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "inference.inference.Decimal.value":
		x.Value = int64(0)
	case "inference.inference.Decimal.exponent":
		x.Exponent = int32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.Decimal"))
		}
		panic(fmt.Errorf("message inference.inference.Decimal does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Decimal) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "inference.inference.Decimal.value":
		value := x.Value
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.Decimal.exponent":
		value := x.Exponent
		return protoreflect.ValueOfInt32(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.Decimal"))
		}
		panic(fmt.Errorf("message inference.inference.Decimal does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Decimal) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "inference.inference.Decimal.value":
		x.Value = value.Int()
	case "inference.inference.Decimal.exponent":
		x.Exponent = int32(value.Int())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.Decimal"))
		}
		panic(fmt.Errorf("message inference.inference.Decimal does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Decimal) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.Decimal.value":
		panic(fmt.Errorf("field value of message inference.inference.Decimal is not mutable"))
	case "inference.inference.Decimal.exponent":
		panic(fmt.Errorf("field exponent of message inference.inference.Decimal is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.Decimal"))
		}
		panic(fmt.Errorf("message inference.inference.Decimal does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Decimal) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.Decimal.value":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.Decimal.exponent":
		return protoreflect.ValueOfInt32(int32(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.Decimal"))
		}
		panic(fmt.Errorf("message inference.inference.Decimal does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Decimal) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in inference.inference.Decimal", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Decimal) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Decimal) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Decimal) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Decimal) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Decimal)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Value != 0 {
			n += 1 + runtime.Sov(uint64(x.Value))
		}
		if x.Exponent != 0 {
			n += 1 + runtime.Sov(uint64(x.Exponent))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Decimal)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Exponent != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Exponent))
			i--
			dAtA[i] = 0x10
		}
		if x.Value != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Value))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Decimal)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Decimal: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Decimal: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
				}
				x.Value = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Value |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Exponent", wireType)
				}
				x.Exponent = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Exponent |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: inference/inference/params.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Params defines the parameters for the module.
type Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EpochParams      *EpochParams      `protobuf:"bytes,1,opt,name=epoch_params,json=epochParams,proto3" json:"epoch_params,omitempty"`
	ValidationParams *ValidationParams `protobuf:"bytes,2,opt,name=validation_params,json=validationParams,proto3" json:"validation_params,omitempty"`
	PocParams        *PocParams        `protobuf:"bytes,3,opt,name=poc_params,json=pocParams,proto3" json:"poc_params,omitempty"`
	TokenomicsParams *TokenomicsParams `protobuf:"bytes,4,opt,name=tokenomics_params,json=tokenomicsParams,proto3" json:"tokenomics_params,omitempty"`
}

func (x *Params) Reset() {
	*x = Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_inference_params_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Params) ProtoMessage() {}

// Deprecated: Use Params.ProtoReflect.Descriptor instead.
func (*Params) Descriptor() ([]byte, []int) {
	return file_inference_inference_params_proto_rawDescGZIP(), []int{0}
}

func (x *Params) GetEpochParams() *EpochParams {
	if x != nil {
		return x.EpochParams
	}
	return nil
}

func (x *Params) GetValidationParams() *ValidationParams {
	if x != nil {
		return x.ValidationParams
	}
	return nil
}

func (x *Params) GetPocParams() *PocParams {
	if x != nil {
		return x.PocParams
	}
	return nil
}

func (x *Params) GetTokenomicsParams() *TokenomicsParams {
	if x != nil {
		return x.TokenomicsParams
	}
	return nil
}

type GenesisOnlyParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalSupply              int64  `protobuf:"varint,1,opt,name=total_supply,json=totalSupply,proto3" json:"total_supply,omitempty"`
	OriginatorSupply         int64  `protobuf:"varint,2,opt,name=originator_supply,json=originatorSupply,proto3" json:"originator_supply,omitempty"`
	TopRewardAmount          int64  `protobuf:"varint,3,opt,name=top_reward_amount,json=topRewardAmount,proto3" json:"top_reward_amount,omitempty"`
	StandardRewardAmount     int64  `protobuf:"varint,4,opt,name=standard_reward_amount,json=standardRewardAmount,proto3" json:"standard_reward_amount,omitempty"`
	PreProgrammedSaleAmount  int64  `protobuf:"varint,5,opt,name=pre_programmed_sale_amount,json=preProgrammedSaleAmount,proto3" json:"pre_programmed_sale_amount,omitempty"`
	TopRewards               int32  `protobuf:"varint,6,opt,name=top_rewards,json=topRewards,proto3" json:"top_rewards,omitempty"`
	SupplyDenom              string `protobuf:"bytes,7,opt,name=supply_denom,json=supplyDenom,proto3" json:"supply_denom,omitempty"`
	TopRewardPeriod          int64  `protobuf:"varint,8,opt,name=top_reward_period,json=topRewardPeriod,proto3" json:"top_reward_period,omitempty"`
	TopRewardPayouts         int64  `protobuf:"varint,9,opt,name=top_reward_payouts,json=topRewardPayouts,proto3" json:"top_reward_payouts,omitempty"`
	TopRewardPayoutsPerMiner int64  `protobuf:"varint,10,opt,name=top_reward_payouts_per_miner,json=topRewardPayoutsPerMiner,proto3" json:"top_reward_payouts_per_miner,omitempty"`
	TopRewardMaxDuration     int64  `protobuf:"varint,11,opt,name=top_reward_max_duration,json=topRewardMaxDuration,proto3" json:"top_reward_max_duration,omitempty"`
}

func (x *GenesisOnlyParams) Reset() {
	*x = GenesisOnlyParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_inference_params_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenesisOnlyParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenesisOnlyParams) ProtoMessage() {}

// Deprecated: Use GenesisOnlyParams.ProtoReflect.Descriptor instead.
func (*GenesisOnlyParams) Descriptor() ([]byte, []int) {
	return file_inference_inference_params_proto_rawDescGZIP(), []int{1}
}

func (x *GenesisOnlyParams) GetTotalSupply() int64 {
	if x != nil {
		return x.TotalSupply
	}
	return 0
}

func (x *GenesisOnlyParams) GetOriginatorSupply() int64 {
	if x != nil {
		return x.OriginatorSupply
	}
	return 0
}

func (x *GenesisOnlyParams) GetTopRewardAmount() int64 {
	if x != nil {
		return x.TopRewardAmount
	}
	return 0
}

func (x *GenesisOnlyParams) GetStandardRewardAmount() int64 {
	if x != nil {
		return x.StandardRewardAmount
	}
	return 0
}

func (x *GenesisOnlyParams) GetPreProgrammedSaleAmount() int64 {
	if x != nil {
		return x.PreProgrammedSaleAmount
	}
	return 0
}

func (x *GenesisOnlyParams) GetTopRewards() int32 {
	if x != nil {
		return x.TopRewards
	}
	return 0
}

func (x *GenesisOnlyParams) GetSupplyDenom() string {
	if x != nil {
		return x.SupplyDenom
	}
	return ""
}

func (x *GenesisOnlyParams) GetTopRewardPeriod() int64 {
	if x != nil {
		return x.TopRewardPeriod
	}
	return 0
}

func (x *GenesisOnlyParams) GetTopRewardPayouts() int64 {
	if x != nil {
		return x.TopRewardPayouts
	}
	return 0
}

func (x *GenesisOnlyParams) GetTopRewardPayoutsPerMiner() int64 {
	if x != nil {
		return x.TopRewardPayoutsPerMiner
	}
	return 0
}

func (x *GenesisOnlyParams) GetTopRewardMaxDuration() int64 {
	if x != nil {
		return x.TopRewardMaxDuration
	}
	return 0
}

type TokenomicsParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubsidyReductionInterval *Decimal `protobuf:"bytes,1,opt,name=subsidy_reduction_interval,json=subsidyReductionInterval,proto3" json:"subsidy_reduction_interval,omitempty"`
	SubsidyReductionAmount   *Decimal `protobuf:"bytes,2,opt,name=subsidy_reduction_amount,json=subsidyReductionAmount,proto3" json:"subsidy_reduction_amount,omitempty"`
	CurrentSubsidyPercentage *Decimal `protobuf:"bytes,3,opt,name=current_subsidy_percentage,json=currentSubsidyPercentage,proto3" json:"current_subsidy_percentage,omitempty"`
	TopRewardAllowedFailure  *Decimal `protobuf:"bytes,4,opt,name=top_reward_allowed_failure,json=topRewardAllowedFailure,proto3" json:"top_reward_allowed_failure,omitempty"`
	TopMinerPocQualification int64    `protobuf:"varint,5,opt,name=top_miner_poc_qualification,json=topMinerPocQualification,proto3" json:"top_miner_poc_qualification,omitempty"`
}

func (x *TokenomicsParams) Reset() {
	*x = TokenomicsParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_inference_params_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenomicsParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenomicsParams) ProtoMessage() {}

// Deprecated: Use TokenomicsParams.ProtoReflect.Descriptor instead.
func (*TokenomicsParams) Descriptor() ([]byte, []int) {
	return file_inference_inference_params_proto_rawDescGZIP(), []int{2}
}

func (x *TokenomicsParams) GetSubsidyReductionInterval() *Decimal {
	if x != nil {
		return x.SubsidyReductionInterval
	}
	return nil
}

func (x *TokenomicsParams) GetSubsidyReductionAmount() *Decimal {
	if x != nil {
		return x.SubsidyReductionAmount
	}
	return nil
}

func (x *TokenomicsParams) GetCurrentSubsidyPercentage() *Decimal {
	if x != nil {
		return x.CurrentSubsidyPercentage
	}
	return nil
}

func (x *TokenomicsParams) GetTopRewardAllowedFailure() *Decimal {
	if x != nil {
		return x.TopRewardAllowedFailure
	}
	return nil
}

func (x *TokenomicsParams) GetTopMinerPocQualification() int64 {
	if x != nil {
		return x.TopMinerPocQualification
	}
	return 0
}

type EpochParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EpochLength                    int64  `protobuf:"varint,1,opt,name=epoch_length,json=epochLength,proto3" json:"epoch_length,omitempty"`
	EpochMultiplier                int64  `protobuf:"varint,2,opt,name=epoch_multiplier,json=epochMultiplier,proto3" json:"epoch_multiplier,omitempty"`
	EpochShift                     int64  `protobuf:"varint,3,opt,name=epoch_shift,json=epochShift,proto3" json:"epoch_shift,omitempty"`
	DefaultUnitOfComputePrice      int64  `protobuf:"varint,4,opt,name=default_unit_of_compute_price,json=defaultUnitOfComputePrice,proto3" json:"default_unit_of_compute_price,omitempty"`
	PocStageDuration               int64  `protobuf:"varint,5,opt,name=poc_stage_duration,json=pocStageDuration,proto3" json:"poc_stage_duration,omitempty"`
	PocExchangeDuration            int64  `protobuf:"varint,6,opt,name=poc_exchange_duration,json=pocExchangeDuration,proto3" json:"poc_exchange_duration,omitempty"`
	PocValidationDelay             int64  `protobuf:"varint,7,opt,name=poc_validation_delay,json=pocValidationDelay,proto3" json:"poc_validation_delay,omitempty"`
	PocValidationDuration          int64  `protobuf:"varint,8,opt,name=poc_validation_duration,json=pocValidationDuration,proto3" json:"poc_validation_duration,omitempty"`
	InferencePruningEpochThreshold uint64 `protobuf:"varint,9,opt,name=inference_pruning_epoch_threshold,json=inferencePruningEpochThreshold,proto3" json:"inference_pruning_epoch_threshold,omitempty"` // Number of epochs after which inferences can be pruned
}

func (x *EpochParams) Reset() {
	*x = EpochParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_inference_params_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpochParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpochParams) ProtoMessage() {}

// Deprecated: Use EpochParams.ProtoReflect.Descriptor instead.
func (*EpochParams) Descriptor() ([]byte, []int) {
	return file_inference_inference_params_proto_rawDescGZIP(), []int{3}
}

func (x *EpochParams) GetEpochLength() int64 {
	if x != nil {
		return x.EpochLength
	}
	return 0
}

func (x *EpochParams) GetEpochMultiplier() int64 {
	if x != nil {
		return x.EpochMultiplier
	}
	return 0
}

func (x *EpochParams) GetEpochShift() int64 {
	if x != nil {
		return x.EpochShift
	}
	return 0
}

func (x *EpochParams) GetDefaultUnitOfComputePrice() int64 {
	if x != nil {
		return x.DefaultUnitOfComputePrice
	}
	return 0
}

func (x *EpochParams) GetPocStageDuration() int64 {
	if x != nil {
		return x.PocStageDuration
	}
	return 0
}

func (x *EpochParams) GetPocExchangeDuration() int64 {
	if x != nil {
		return x.PocExchangeDuration
	}
	return 0
}

func (x *EpochParams) GetPocValidationDelay() int64 {
	if x != nil {
		return x.PocValidationDelay
	}
	return 0
}

func (x *EpochParams) GetPocValidationDuration() int64 {
	if x != nil {
		return x.PocValidationDuration
	}
	return 0
}

func (x *EpochParams) GetInferencePruningEpochThreshold() uint64 {
	if x != nil {
		return x.InferencePruningEpochThreshold
	}
	return 0
}

type ValidationParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FalsePositiveRate           *Decimal `protobuf:"bytes,1,opt,name=false_positive_rate,json=falsePositiveRate,proto3" json:"false_positive_rate,omitempty"`
	MinRampUpMeasurements       int32    `protobuf:"varint,2,opt,name=min_ramp_up_measurements,json=minRampUpMeasurements,proto3" json:"min_ramp_up_measurements,omitempty"`
	PassValue                   *Decimal `protobuf:"bytes,3,opt,name=pass_value,json=passValue,proto3" json:"pass_value,omitempty"`
	MinValidationAverage        *Decimal `protobuf:"bytes,4,opt,name=min_validation_average,json=minValidationAverage,proto3" json:"min_validation_average,omitempty"`
	MaxValidationAverage        *Decimal `protobuf:"bytes,5,opt,name=max_validation_average,json=maxValidationAverage,proto3" json:"max_validation_average,omitempty"`
	ExpirationBlocks            int64    `protobuf:"varint,6,opt,name=expiration_blocks,json=expirationBlocks,proto3" json:"expiration_blocks,omitempty"`
	EpochsToMax                 int64    `protobuf:"varint,7,opt,name=epochs_to_max,json=epochsToMax,proto3" json:"epochs_to_max,omitempty"`
	FullValidationTrafficCutoff int64    `protobuf:"varint,8,opt,name=full_validation_traffic_cutoff,json=fullValidationTrafficCutoff,proto3" json:"full_validation_traffic_cutoff,omitempty"`
	MinValidationHalfway        *Decimal `protobuf:"bytes,9,opt,name=min_validation_halfway,json=minValidationHalfway,proto3" json:"min_validation_halfway,omitempty"`
	MinValidationTrafficCutoff  int64    `protobuf:"varint,10,opt,name=min_validation_traffic_cutoff,json=minValidationTrafficCutoff,proto3" json:"min_validation_traffic_cutoff,omitempty"`
	MissPercentageCutoff        *Decimal `protobuf:"bytes,11,opt,name=miss_percentage_cutoff,json=missPercentageCutoff,proto3" json:"miss_percentage_cutoff,omitempty"`
	MissRequestsPenalty         *Decimal `protobuf:"bytes,12,opt,name=miss_requests_penalty,json=missRequestsPenalty,proto3" json:"miss_requests_penalty,omitempty"`
	TimestampExpiration         int64    `protobuf:"varint,13,opt,name=timestamp_expiration,json=timestampExpiration,proto3" json:"timestamp_expiration,omitempty"` // Max time in seconds until timestamps are "too old"
	TimestampAdvance            int64    `protobuf:"varint,14,opt,name=timestamp_advance,json=timestampAdvance,proto3" json:"timestamp_advance,omitempty"`          // Max time in seconds until timestamps are "in the future"
}

func (x *ValidationParams) Reset() {
	*x = ValidationParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_inference_params_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidationParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationParams) ProtoMessage() {}

// Deprecated: Use ValidationParams.ProtoReflect.Descriptor instead.
func (*ValidationParams) Descriptor() ([]byte, []int) {
	return file_inference_inference_params_proto_rawDescGZIP(), []int{4}
}

func (x *ValidationParams) GetFalsePositiveRate() *Decimal {
	if x != nil {
		return x.FalsePositiveRate
	}
	return nil
}

func (x *ValidationParams) GetMinRampUpMeasurements() int32 {
	if x != nil {
		return x.MinRampUpMeasurements
	}
	return 0
}

func (x *ValidationParams) GetPassValue() *Decimal {
	if x != nil {
		return x.PassValue
	}
	return nil
}

func (x *ValidationParams) GetMinValidationAverage() *Decimal {
	if x != nil {
		return x.MinValidationAverage
	}
	return nil
}

func (x *ValidationParams) GetMaxValidationAverage() *Decimal {
	if x != nil {
		return x.MaxValidationAverage
	}
	return nil
}

func (x *ValidationParams) GetExpirationBlocks() int64 {
	if x != nil {
		return x.ExpirationBlocks
	}
	return 0
}

func (x *ValidationParams) GetEpochsToMax() int64 {
	if x != nil {
		return x.EpochsToMax
	}
	return 0
}

func (x *ValidationParams) GetFullValidationTrafficCutoff() int64 {
	if x != nil {
		return x.FullValidationTrafficCutoff
	}
	return 0
}

func (x *ValidationParams) GetMinValidationHalfway() *Decimal {
	if x != nil {
		return x.MinValidationHalfway
	}
	return nil
}

func (x *ValidationParams) GetMinValidationTrafficCutoff() int64 {
	if x != nil {
		return x.MinValidationTrafficCutoff
	}
	return 0
}

func (x *ValidationParams) GetMissPercentageCutoff() *Decimal {
	if x != nil {
		return x.MissPercentageCutoff
	}
	return nil
}

func (x *ValidationParams) GetMissRequestsPenalty() *Decimal {
	if x != nil {
		return x.MissRequestsPenalty
	}
	return nil
}

func (x *ValidationParams) GetTimestampExpiration() int64 {
	if x != nil {
		return x.TimestampExpiration
	}
	return 0
}

func (x *ValidationParams) GetTimestampAdvance() int64 {
	if x != nil {
		return x.TimestampAdvance
	}
	return 0
}

type PocParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultDifficulty            int32  `protobuf:"varint,1,opt,name=default_difficulty,json=defaultDifficulty,proto3" json:"default_difficulty,omitempty"`
	ValidationSampleSize         int32  `protobuf:"varint,2,opt,name=validation_sample_size,json=validationSampleSize,proto3" json:"validation_sample_size,omitempty"`
	PocDataPruningEpochThreshold uint64 `protobuf:"varint,3,opt,name=poc_data_pruning_epoch_threshold,json=pocDataPruningEpochThreshold,proto3" json:"poc_data_pruning_epoch_threshold,omitempty"` // Number of epochs after which PoC data can be pruned
}

func (x *PocParams) Reset() {
	*x = PocParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_inference_params_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PocParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PocParams) ProtoMessage() {}

// Deprecated: Use PocParams.ProtoReflect.Descriptor instead.
func (*PocParams) Descriptor() ([]byte, []int) {
	return file_inference_inference_params_proto_rawDescGZIP(), []int{5}
}

func (x *PocParams) GetDefaultDifficulty() int32 {
	if x != nil {
		return x.DefaultDifficulty
	}
	return 0
}

func (x *PocParams) GetValidationSampleSize() int32 {
	if x != nil {
		return x.ValidationSampleSize
	}
	return 0
}

func (x *PocParams) GetPocDataPruningEpochThreshold() uint64 {
	if x != nil {
		return x.PocDataPruningEpochThreshold
	}
	return 0
}

type Decimal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value    int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	Exponent int32 `protobuf:"varint,2,opt,name=exponent,proto3" json:"exponent,omitempty"`
}

func (x *Decimal) Reset() {
	*x = Decimal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_inference_params_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Decimal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Decimal) ProtoMessage() {}

// Deprecated: Use Decimal.ProtoReflect.Descriptor instead.
func (*Decimal) Descriptor() ([]byte, []int) {
	return file_inference_inference_params_proto_rawDescGZIP(), []int{6}
}

func (x *Decimal) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Decimal) GetExponent() int32 {
	if x != nil {
		return x.Exponent
	}
	return 0
}

var File_inference_inference_params_proto protoreflect.FileDescriptor

var file_inference_inference_params_proto_rawDesc = []byte{
	0x0a, 0x20, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x13, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0x11, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2f, 0x61,
	0x6d, 0x69, 0x6e, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x19, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdb, 0x02, 0x0a, 0x06,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0b,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x52, 0x0a, 0x11, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x10, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x3d, 0x0a, 0x0a, 0x70, 0x6f, 0x63, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x63, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x52, 0x09, 0x70, 0x6f, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x52,
	0x0a, 0x11, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x52, 0x10, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x3a, 0x25, 0xe8, 0xa0, 0x1f, 0x01, 0x8a, 0xe7, 0xb0, 0x2a, 0x1c, 0x69, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x78, 0x2f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x2f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x97, 0x04, 0x0a, 0x11, 0x47, 0x65,
	0x6e, 0x65, 0x73, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12,
	0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x6f, 0x70, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x70, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x6d, 0x65, 0x64, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x70, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x6d, 0x65, 0x64, 0x53, 0x61, 0x6c, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x65, 0x6e,
	0x6f, 0x6d, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74,
	0x6f, 0x70, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x2c,
	0x0a, 0x12, 0x74, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x6f, 0x70, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x1c,
	0x74, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x18, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x73, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x17,
	0x74, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x74,
	0x6f, 0x70, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x78, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xc2, 0x03, 0x0a, 0x10, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x6f, 0x6d, 0x69,
	0x63, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x5a, 0x0a, 0x1a, 0x73, 0x75, 0x62, 0x73,
	0x69, 0x64, 0x79, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x18, 0x73, 0x75, 0x62, 0x73,
	0x69, 0x64, 0x79, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x56, 0x0a, 0x18, 0x73, 0x75, 0x62, 0x73, 0x69, 0x64, 0x79, 0x5f,
	0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x52, 0x16, 0x73, 0x75, 0x62, 0x73, 0x69, 0x64, 0x79, 0x52, 0x65, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x1a,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x69, 0x64, 0x79, 0x5f,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x18,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x69, 0x64, 0x79, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x59, 0x0a, 0x1a, 0x74, 0x6f, 0x70, 0x5f,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x17, 0x74, 0x6f, 0x70, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x74, 0x6f, 0x70, 0x5f, 0x6d, 0x69, 0x6e, 0x65, 0x72,
	0x5f, 0x70, 0x6f, 0x63, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x74, 0x6f, 0x70, 0x4d, 0x69, 0x6e,
	0x65, 0x72, 0x50, 0x6f, 0x63, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x3a, 0x04, 0xe8, 0xa0, 0x1f, 0x01, 0x22, 0xdb, 0x03, 0x0a, 0x0b, 0x45, 0x70, 0x6f,
	0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x29, 0x0a, 0x10, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f,
	0x73, 0x68, 0x69, 0x66, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x53, 0x68, 0x69, 0x66, 0x74, 0x12, 0x40, 0x0a, 0x1d, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x4f, 0x66, 0x43, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x6f, 0x63,
	0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x70, 0x6f, 0x63, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x6f, 0x63, 0x5f, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x70, 0x6f, 0x63, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x70,
	0x6f, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70, 0x6f, 0x63, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x36, 0x0a,
	0x17, 0x70, 0x6f, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15,
	0x70, 0x6f, 0x63, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x21, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x70, 0x72, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x1e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x75, 0x6e, 0x69,
	0x6e, 0x67, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x3a, 0x04, 0xe8, 0xa0, 0x1f, 0x01, 0x22, 0xb7, 0x07, 0x0a, 0x10, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x4c, 0x0a, 0x13, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x11, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x6d, 0x69, 0x6e,
	0x5f, 0x72, 0x61, 0x6d, 0x70, 0x5f, 0x75, 0x70, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x6d, 0x69, 0x6e,
	0x52, 0x61, 0x6d, 0x70, 0x55, 0x70, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x52, 0x09, 0x70, 0x61, 0x73, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x52, 0x0a, 0x16, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x14, 0x6d,
	0x69, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x12, 0x52, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x73, 0x5f, 0x74,
	0x6f, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x73, 0x54, 0x6f, 0x4d, 0x61, 0x78, 0x12, 0x43, 0x0a, 0x1e, 0x66, 0x75, 0x6c, 0x6c,
	0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x5f, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x1b, 0x66, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x12, 0x52, 0x0a,
	0x16, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x68, 0x61, 0x6c, 0x66, 0x77, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x14, 0x6d, 0x69, 0x6e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6c, 0x66, 0x77, 0x61,
	0x79, 0x12, 0x41, 0x0a, 0x1d, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x75, 0x74, 0x6f,
	0x66, 0x66, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x75,
	0x74, 0x6f, 0x66, 0x66, 0x12, 0x52, 0x0a, 0x16, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x52, 0x14, 0x6d, 0x69, 0x73, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x43, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x12, 0x50, 0x0a, 0x15, 0x6d, 0x69, 0x73, 0x73,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74,
	0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x13, 0x6d, 0x69, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x31, 0x0a, 0x14, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a,
	0x11, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x61, 0x64, 0x76, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x3a, 0x04, 0xe8, 0xa0, 0x1f, 0x01,
	0x22, 0xbe, 0x01, 0x0a, 0x09, 0x50, 0x6f, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2d,
	0x0a, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63,
	0x75, 0x6c, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x34, 0x0a,
	0x16, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x46, 0x0a, 0x20, 0x70, 0x6f, 0x63, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x70, 0x72, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1c, 0x70,
	0x6f, 0x63, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x70, 0x6f,
	0x63, 0x68, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x3a, 0x04, 0xe8, 0xa0, 0x1f,
	0x01, 0x22, 0x41, 0x0a, 0x07, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x3a, 0x04,
	0xe8, 0xa0, 0x1f, 0x01, 0x42, 0xb9, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x0b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x24, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0xa2, 0x02, 0x03, 0x49, 0x49, 0x58, 0xaa, 0x02, 0x13, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0xca, 0x02, 0x13, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5c, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0xe2, 0x02, 0x1f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x5c, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x14, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x3a, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_inference_inference_params_proto_rawDescOnce sync.Once
	file_inference_inference_params_proto_rawDescData = file_inference_inference_params_proto_rawDesc
)

func file_inference_inference_params_proto_rawDescGZIP() []byte {
	file_inference_inference_params_proto_rawDescOnce.Do(func() {
		file_inference_inference_params_proto_rawDescData = protoimpl.X.CompressGZIP(file_inference_inference_params_proto_rawDescData)
	})
	return file_inference_inference_params_proto_rawDescData
}

var file_inference_inference_params_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_inference_inference_params_proto_goTypes = []interface{}{
	(*Params)(nil),            // 0: inference.inference.Params
	(*GenesisOnlyParams)(nil), // 1: inference.inference.GenesisOnlyParams
	(*TokenomicsParams)(nil),  // 2: inference.inference.TokenomicsParams
	(*EpochParams)(nil),       // 3: inference.inference.EpochParams
	(*ValidationParams)(nil),  // 4: inference.inference.ValidationParams
	(*PocParams)(nil),         // 5: inference.inference.PocParams
	(*Decimal)(nil),           // 6: inference.inference.Decimal
}
var file_inference_inference_params_proto_depIdxs = []int32{
	3,  // 0: inference.inference.Params.epoch_params:type_name -> inference.inference.EpochParams
	4,  // 1: inference.inference.Params.validation_params:type_name -> inference.inference.ValidationParams
	5,  // 2: inference.inference.Params.poc_params:type_name -> inference.inference.PocParams
	2,  // 3: inference.inference.Params.tokenomics_params:type_name -> inference.inference.TokenomicsParams
	6,  // 4: inference.inference.TokenomicsParams.subsidy_reduction_interval:type_name -> inference.inference.Decimal
	6,  // 5: inference.inference.TokenomicsParams.subsidy_reduction_amount:type_name -> inference.inference.Decimal
	6,  // 6: inference.inference.TokenomicsParams.current_subsidy_percentage:type_name -> inference.inference.Decimal
	6,  // 7: inference.inference.TokenomicsParams.top_reward_allowed_failure:type_name -> inference.inference.Decimal
	6,  // 8: inference.inference.ValidationParams.false_positive_rate:type_name -> inference.inference.Decimal
	6,  // 9: inference.inference.ValidationParams.pass_value:type_name -> inference.inference.Decimal
	6,  // 10: inference.inference.ValidationParams.min_validation_average:type_name -> inference.inference.Decimal
	6,  // 11: inference.inference.ValidationParams.max_validation_average:type_name -> inference.inference.Decimal
	6,  // 12: inference.inference.ValidationParams.min_validation_halfway:type_name -> inference.inference.Decimal
	6,  // 13: inference.inference.ValidationParams.miss_percentage_cutoff:type_name -> inference.inference.Decimal
	6,  // 14: inference.inference.ValidationParams.miss_requests_penalty:type_name -> inference.inference.Decimal
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_inference_inference_params_proto_init() }
func file_inference_inference_params_proto_init() {
	if File_inference_inference_params_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_inference_inference_params_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_inference_params_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenesisOnlyParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_inference_params_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenomicsParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_inference_params_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpochParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_inference_params_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidationParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_inference_params_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PocParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_inference_params_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Decimal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_inference_inference_params_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_inference_inference_params_proto_goTypes,
		DependencyIndexes: file_inference_inference_params_proto_depIdxs,
		MessageInfos:      file_inference_inference_params_proto_msgTypes,
	}.Build()
	File_inference_inference_params_proto = out.File
	file_inference_inference_params_proto_rawDesc = nil
	file_inference_inference_params_proto_goTypes = nil
	file_inference_inference_params_proto_depIdxs = nil
}

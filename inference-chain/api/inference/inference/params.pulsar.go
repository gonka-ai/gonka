// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package inference

import (
	_ "cosmossdk.io/api/amino"
	binary "encoding/binary"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	math "math"
	reflect "reflect"
	sync "sync"
)

var (
	md_Params                   protoreflect.MessageDescriptor
	fd_Params_epoch_params      protoreflect.FieldDescriptor
	fd_Params_validation_params protoreflect.FieldDescriptor
	fd_Params_poc_params        protoreflect.FieldDescriptor
	fd_Params_tokenomics_params protoreflect.FieldDescriptor
)

func init() {
	file_inference_inference_params_proto_init()
	md_Params = File_inference_inference_params_proto.Messages().ByName("Params")
	fd_Params_epoch_params = md_Params.Fields().ByName("epoch_params")
	fd_Params_validation_params = md_Params.Fields().ByName("validation_params")
	fd_Params_poc_params = md_Params.Fields().ByName("poc_params")
	fd_Params_tokenomics_params = md_Params.Fields().ByName("tokenomics_params")
}

var _ protoreflect.Message = (*fastReflection_Params)(nil)

type fastReflection_Params Params

func (x *Params) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Params)(x)
}

func (x *Params) slowProtoReflect() protoreflect.Message {
	mi := &file_inference_inference_params_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Params_messageType fastReflection_Params_messageType
var _ protoreflect.MessageType = fastReflection_Params_messageType{}

type fastReflection_Params_messageType struct{}

func (x fastReflection_Params_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Params)(nil)
}
func (x fastReflection_Params_messageType) New() protoreflect.Message {
	return new(fastReflection_Params)
}
func (x fastReflection_Params_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Params
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Params) Descriptor() protoreflect.MessageDescriptor {
	return md_Params
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Params) Type() protoreflect.MessageType {
	return _fastReflection_Params_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Params) New() protoreflect.Message {
	return new(fastReflection_Params)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Params) Interface() protoreflect.ProtoMessage {
	return (*Params)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Params) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.EpochParams != nil {
		value := protoreflect.ValueOfMessage(x.EpochParams.ProtoReflect())
		if !f(fd_Params_epoch_params, value) {
			return
		}
	}
	if x.ValidationParams != nil {
		value := protoreflect.ValueOfMessage(x.ValidationParams.ProtoReflect())
		if !f(fd_Params_validation_params, value) {
			return
		}
	}
	if x.PocParams != nil {
		value := protoreflect.ValueOfMessage(x.PocParams.ProtoReflect())
		if !f(fd_Params_poc_params, value) {
			return
		}
	}
	if x.TokenomicsParams != nil {
		value := protoreflect.ValueOfMessage(x.TokenomicsParams.ProtoReflect())
		if !f(fd_Params_tokenomics_params, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Params) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "inference.inference.Params.epoch_params":
		return x.EpochParams != nil
	case "inference.inference.Params.validation_params":
		return x.ValidationParams != nil
	case "inference.inference.Params.poc_params":
		return x.PocParams != nil
	case "inference.inference.Params.tokenomics_params":
		return x.TokenomicsParams != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.Params"))
		}
		panic(fmt.Errorf("message inference.inference.Params does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "inference.inference.Params.epoch_params":
		x.EpochParams = nil
	case "inference.inference.Params.validation_params":
		x.ValidationParams = nil
	case "inference.inference.Params.poc_params":
		x.PocParams = nil
	case "inference.inference.Params.tokenomics_params":
		x.TokenomicsParams = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.Params"))
		}
		panic(fmt.Errorf("message inference.inference.Params does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Params) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "inference.inference.Params.epoch_params":
		value := x.EpochParams
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "inference.inference.Params.validation_params":
		value := x.ValidationParams
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "inference.inference.Params.poc_params":
		value := x.PocParams
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "inference.inference.Params.tokenomics_params":
		value := x.TokenomicsParams
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.Params"))
		}
		panic(fmt.Errorf("message inference.inference.Params does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "inference.inference.Params.epoch_params":
		x.EpochParams = value.Message().Interface().(*EpochParams)
	case "inference.inference.Params.validation_params":
		x.ValidationParams = value.Message().Interface().(*ValidationParams)
	case "inference.inference.Params.poc_params":
		x.PocParams = value.Message().Interface().(*PocParams)
	case "inference.inference.Params.tokenomics_params":
		x.TokenomicsParams = value.Message().Interface().(*TokenomicsParams)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.Params"))
		}
		panic(fmt.Errorf("message inference.inference.Params does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.Params.epoch_params":
		if x.EpochParams == nil {
			x.EpochParams = new(EpochParams)
		}
		return protoreflect.ValueOfMessage(x.EpochParams.ProtoReflect())
	case "inference.inference.Params.validation_params":
		if x.ValidationParams == nil {
			x.ValidationParams = new(ValidationParams)
		}
		return protoreflect.ValueOfMessage(x.ValidationParams.ProtoReflect())
	case "inference.inference.Params.poc_params":
		if x.PocParams == nil {
			x.PocParams = new(PocParams)
		}
		return protoreflect.ValueOfMessage(x.PocParams.ProtoReflect())
	case "inference.inference.Params.tokenomics_params":
		if x.TokenomicsParams == nil {
			x.TokenomicsParams = new(TokenomicsParams)
		}
		return protoreflect.ValueOfMessage(x.TokenomicsParams.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.Params"))
		}
		panic(fmt.Errorf("message inference.inference.Params does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Params) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.Params.epoch_params":
		m := new(EpochParams)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "inference.inference.Params.validation_params":
		m := new(ValidationParams)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "inference.inference.Params.poc_params":
		m := new(PocParams)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "inference.inference.Params.tokenomics_params":
		m := new(TokenomicsParams)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.Params"))
		}
		panic(fmt.Errorf("message inference.inference.Params does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Params) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in inference.inference.Params", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Params) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Params) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Params) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.EpochParams != nil {
			l = options.Size(x.EpochParams)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.ValidationParams != nil {
			l = options.Size(x.ValidationParams)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.PocParams != nil {
			l = options.Size(x.PocParams)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.TokenomicsParams != nil {
			l = options.Size(x.TokenomicsParams)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.TokenomicsParams != nil {
			encoded, err := options.Marshal(x.TokenomicsParams)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x22
		}
		if x.PocParams != nil {
			encoded, err := options.Marshal(x.PocParams)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if x.ValidationParams != nil {
			encoded, err := options.Marshal(x.ValidationParams)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if x.EpochParams != nil {
			encoded, err := options.Marshal(x.EpochParams)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Params: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EpochParams", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.EpochParams == nil {
					x.EpochParams = &EpochParams{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.EpochParams); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidationParams", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.ValidationParams == nil {
					x.ValidationParams = &ValidationParams{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ValidationParams); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PocParams", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.PocParams == nil {
					x.PocParams = &PocParams{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.PocParams); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TokenomicsParams", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.TokenomicsParams == nil {
					x.TokenomicsParams = &TokenomicsParams{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.TokenomicsParams); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_GenesisOnlyParams                            protoreflect.MessageDescriptor
	fd_GenesisOnlyParams_total_supply               protoreflect.FieldDescriptor
	fd_GenesisOnlyParams_originator_supply          protoreflect.FieldDescriptor
	fd_GenesisOnlyParams_top_reward_amount          protoreflect.FieldDescriptor
	fd_GenesisOnlyParams_standard_reward_amount     protoreflect.FieldDescriptor
	fd_GenesisOnlyParams_pre_programmed_sale_amount protoreflect.FieldDescriptor
	fd_GenesisOnlyParams_top_rewards                protoreflect.FieldDescriptor
	fd_GenesisOnlyParams_supply_denom               protoreflect.FieldDescriptor
)

func init() {
	file_inference_inference_params_proto_init()
	md_GenesisOnlyParams = File_inference_inference_params_proto.Messages().ByName("GenesisOnlyParams")
	fd_GenesisOnlyParams_total_supply = md_GenesisOnlyParams.Fields().ByName("total_supply")
	fd_GenesisOnlyParams_originator_supply = md_GenesisOnlyParams.Fields().ByName("originator_supply")
	fd_GenesisOnlyParams_top_reward_amount = md_GenesisOnlyParams.Fields().ByName("top_reward_amount")
	fd_GenesisOnlyParams_standard_reward_amount = md_GenesisOnlyParams.Fields().ByName("standard_reward_amount")
	fd_GenesisOnlyParams_pre_programmed_sale_amount = md_GenesisOnlyParams.Fields().ByName("pre_programmed_sale_amount")
	fd_GenesisOnlyParams_top_rewards = md_GenesisOnlyParams.Fields().ByName("top_rewards")
	fd_GenesisOnlyParams_supply_denom = md_GenesisOnlyParams.Fields().ByName("supply_denom")
}

var _ protoreflect.Message = (*fastReflection_GenesisOnlyParams)(nil)

type fastReflection_GenesisOnlyParams GenesisOnlyParams

func (x *GenesisOnlyParams) ProtoReflect() protoreflect.Message {
	return (*fastReflection_GenesisOnlyParams)(x)
}

func (x *GenesisOnlyParams) slowProtoReflect() protoreflect.Message {
	mi := &file_inference_inference_params_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_GenesisOnlyParams_messageType fastReflection_GenesisOnlyParams_messageType
var _ protoreflect.MessageType = fastReflection_GenesisOnlyParams_messageType{}

type fastReflection_GenesisOnlyParams_messageType struct{}

func (x fastReflection_GenesisOnlyParams_messageType) Zero() protoreflect.Message {
	return (*fastReflection_GenesisOnlyParams)(nil)
}
func (x fastReflection_GenesisOnlyParams_messageType) New() protoreflect.Message {
	return new(fastReflection_GenesisOnlyParams)
}
func (x fastReflection_GenesisOnlyParams_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_GenesisOnlyParams
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_GenesisOnlyParams) Descriptor() protoreflect.MessageDescriptor {
	return md_GenesisOnlyParams
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_GenesisOnlyParams) Type() protoreflect.MessageType {
	return _fastReflection_GenesisOnlyParams_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_GenesisOnlyParams) New() protoreflect.Message {
	return new(fastReflection_GenesisOnlyParams)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_GenesisOnlyParams) Interface() protoreflect.ProtoMessage {
	return (*GenesisOnlyParams)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_GenesisOnlyParams) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.TotalSupply != int64(0) {
		value := protoreflect.ValueOfInt64(x.TotalSupply)
		if !f(fd_GenesisOnlyParams_total_supply, value) {
			return
		}
	}
	if x.OriginatorSupply != int64(0) {
		value := protoreflect.ValueOfInt64(x.OriginatorSupply)
		if !f(fd_GenesisOnlyParams_originator_supply, value) {
			return
		}
	}
	if x.TopRewardAmount != int64(0) {
		value := protoreflect.ValueOfInt64(x.TopRewardAmount)
		if !f(fd_GenesisOnlyParams_top_reward_amount, value) {
			return
		}
	}
	if x.StandardRewardAmount != int64(0) {
		value := protoreflect.ValueOfInt64(x.StandardRewardAmount)
		if !f(fd_GenesisOnlyParams_standard_reward_amount, value) {
			return
		}
	}
	if x.PreProgrammedSaleAmount != int64(0) {
		value := protoreflect.ValueOfInt64(x.PreProgrammedSaleAmount)
		if !f(fd_GenesisOnlyParams_pre_programmed_sale_amount, value) {
			return
		}
	}
	if x.TopRewards != int32(0) {
		value := protoreflect.ValueOfInt32(x.TopRewards)
		if !f(fd_GenesisOnlyParams_top_rewards, value) {
			return
		}
	}
	if x.SupplyDenom != "" {
		value := protoreflect.ValueOfString(x.SupplyDenom)
		if !f(fd_GenesisOnlyParams_supply_denom, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_GenesisOnlyParams) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "inference.inference.GenesisOnlyParams.total_supply":
		return x.TotalSupply != int64(0)
	case "inference.inference.GenesisOnlyParams.originator_supply":
		return x.OriginatorSupply != int64(0)
	case "inference.inference.GenesisOnlyParams.top_reward_amount":
		return x.TopRewardAmount != int64(0)
	case "inference.inference.GenesisOnlyParams.standard_reward_amount":
		return x.StandardRewardAmount != int64(0)
	case "inference.inference.GenesisOnlyParams.pre_programmed_sale_amount":
		return x.PreProgrammedSaleAmount != int64(0)
	case "inference.inference.GenesisOnlyParams.top_rewards":
		return x.TopRewards != int32(0)
	case "inference.inference.GenesisOnlyParams.supply_denom":
		return x.SupplyDenom != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.GenesisOnlyParams"))
		}
		panic(fmt.Errorf("message inference.inference.GenesisOnlyParams does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisOnlyParams) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "inference.inference.GenesisOnlyParams.total_supply":
		x.TotalSupply = int64(0)
	case "inference.inference.GenesisOnlyParams.originator_supply":
		x.OriginatorSupply = int64(0)
	case "inference.inference.GenesisOnlyParams.top_reward_amount":
		x.TopRewardAmount = int64(0)
	case "inference.inference.GenesisOnlyParams.standard_reward_amount":
		x.StandardRewardAmount = int64(0)
	case "inference.inference.GenesisOnlyParams.pre_programmed_sale_amount":
		x.PreProgrammedSaleAmount = int64(0)
	case "inference.inference.GenesisOnlyParams.top_rewards":
		x.TopRewards = int32(0)
	case "inference.inference.GenesisOnlyParams.supply_denom":
		x.SupplyDenom = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.GenesisOnlyParams"))
		}
		panic(fmt.Errorf("message inference.inference.GenesisOnlyParams does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_GenesisOnlyParams) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "inference.inference.GenesisOnlyParams.total_supply":
		value := x.TotalSupply
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.GenesisOnlyParams.originator_supply":
		value := x.OriginatorSupply
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.GenesisOnlyParams.top_reward_amount":
		value := x.TopRewardAmount
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.GenesisOnlyParams.standard_reward_amount":
		value := x.StandardRewardAmount
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.GenesisOnlyParams.pre_programmed_sale_amount":
		value := x.PreProgrammedSaleAmount
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.GenesisOnlyParams.top_rewards":
		value := x.TopRewards
		return protoreflect.ValueOfInt32(value)
	case "inference.inference.GenesisOnlyParams.supply_denom":
		value := x.SupplyDenom
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.GenesisOnlyParams"))
		}
		panic(fmt.Errorf("message inference.inference.GenesisOnlyParams does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisOnlyParams) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "inference.inference.GenesisOnlyParams.total_supply":
		x.TotalSupply = value.Int()
	case "inference.inference.GenesisOnlyParams.originator_supply":
		x.OriginatorSupply = value.Int()
	case "inference.inference.GenesisOnlyParams.top_reward_amount":
		x.TopRewardAmount = value.Int()
	case "inference.inference.GenesisOnlyParams.standard_reward_amount":
		x.StandardRewardAmount = value.Int()
	case "inference.inference.GenesisOnlyParams.pre_programmed_sale_amount":
		x.PreProgrammedSaleAmount = value.Int()
	case "inference.inference.GenesisOnlyParams.top_rewards":
		x.TopRewards = int32(value.Int())
	case "inference.inference.GenesisOnlyParams.supply_denom":
		x.SupplyDenom = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.GenesisOnlyParams"))
		}
		panic(fmt.Errorf("message inference.inference.GenesisOnlyParams does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisOnlyParams) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.GenesisOnlyParams.total_supply":
		panic(fmt.Errorf("field total_supply of message inference.inference.GenesisOnlyParams is not mutable"))
	case "inference.inference.GenesisOnlyParams.originator_supply":
		panic(fmt.Errorf("field originator_supply of message inference.inference.GenesisOnlyParams is not mutable"))
	case "inference.inference.GenesisOnlyParams.top_reward_amount":
		panic(fmt.Errorf("field top_reward_amount of message inference.inference.GenesisOnlyParams is not mutable"))
	case "inference.inference.GenesisOnlyParams.standard_reward_amount":
		panic(fmt.Errorf("field standard_reward_amount of message inference.inference.GenesisOnlyParams is not mutable"))
	case "inference.inference.GenesisOnlyParams.pre_programmed_sale_amount":
		panic(fmt.Errorf("field pre_programmed_sale_amount of message inference.inference.GenesisOnlyParams is not mutable"))
	case "inference.inference.GenesisOnlyParams.top_rewards":
		panic(fmt.Errorf("field top_rewards of message inference.inference.GenesisOnlyParams is not mutable"))
	case "inference.inference.GenesisOnlyParams.supply_denom":
		panic(fmt.Errorf("field supply_denom of message inference.inference.GenesisOnlyParams is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.GenesisOnlyParams"))
		}
		panic(fmt.Errorf("message inference.inference.GenesisOnlyParams does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_GenesisOnlyParams) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.GenesisOnlyParams.total_supply":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.GenesisOnlyParams.originator_supply":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.GenesisOnlyParams.top_reward_amount":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.GenesisOnlyParams.standard_reward_amount":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.GenesisOnlyParams.pre_programmed_sale_amount":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.GenesisOnlyParams.top_rewards":
		return protoreflect.ValueOfInt32(int32(0))
	case "inference.inference.GenesisOnlyParams.supply_denom":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.GenesisOnlyParams"))
		}
		panic(fmt.Errorf("message inference.inference.GenesisOnlyParams does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_GenesisOnlyParams) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in inference.inference.GenesisOnlyParams", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_GenesisOnlyParams) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisOnlyParams) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_GenesisOnlyParams) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_GenesisOnlyParams) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*GenesisOnlyParams)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.TotalSupply != 0 {
			n += 1 + runtime.Sov(uint64(x.TotalSupply))
		}
		if x.OriginatorSupply != 0 {
			n += 1 + runtime.Sov(uint64(x.OriginatorSupply))
		}
		if x.TopRewardAmount != 0 {
			n += 1 + runtime.Sov(uint64(x.TopRewardAmount))
		}
		if x.StandardRewardAmount != 0 {
			n += 1 + runtime.Sov(uint64(x.StandardRewardAmount))
		}
		if x.PreProgrammedSaleAmount != 0 {
			n += 1 + runtime.Sov(uint64(x.PreProgrammedSaleAmount))
		}
		if x.TopRewards != 0 {
			n += 1 + runtime.Sov(uint64(x.TopRewards))
		}
		l = len(x.SupplyDenom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*GenesisOnlyParams)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.SupplyDenom) > 0 {
			i -= len(x.SupplyDenom)
			copy(dAtA[i:], x.SupplyDenom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SupplyDenom)))
			i--
			dAtA[i] = 0x3a
		}
		if x.TopRewards != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TopRewards))
			i--
			dAtA[i] = 0x30
		}
		if x.PreProgrammedSaleAmount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PreProgrammedSaleAmount))
			i--
			dAtA[i] = 0x28
		}
		if x.StandardRewardAmount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.StandardRewardAmount))
			i--
			dAtA[i] = 0x20
		}
		if x.TopRewardAmount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TopRewardAmount))
			i--
			dAtA[i] = 0x18
		}
		if x.OriginatorSupply != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.OriginatorSupply))
			i--
			dAtA[i] = 0x10
		}
		if x.TotalSupply != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TotalSupply))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*GenesisOnlyParams)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: GenesisOnlyParams: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: GenesisOnlyParams: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalSupply", wireType)
				}
				x.TotalSupply = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TotalSupply |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OriginatorSupply", wireType)
				}
				x.OriginatorSupply = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.OriginatorSupply |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TopRewardAmount", wireType)
				}
				x.TopRewardAmount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TopRewardAmount |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StandardRewardAmount", wireType)
				}
				x.StandardRewardAmount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.StandardRewardAmount |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PreProgrammedSaleAmount", wireType)
				}
				x.PreProgrammedSaleAmount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PreProgrammedSaleAmount |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TopRewards", wireType)
				}
				x.TopRewards = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TopRewards |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SupplyDenom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SupplyDenom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_TokenomicsParams                            protoreflect.MessageDescriptor
	fd_TokenomicsParams_subsidy_reduction_interval protoreflect.FieldDescriptor
	fd_TokenomicsParams_subsidy_reduction_amount   protoreflect.FieldDescriptor
	fd_TokenomicsParams_current_subsidy_percentage protoreflect.FieldDescriptor
)

func init() {
	file_inference_inference_params_proto_init()
	md_TokenomicsParams = File_inference_inference_params_proto.Messages().ByName("TokenomicsParams")
	fd_TokenomicsParams_subsidy_reduction_interval = md_TokenomicsParams.Fields().ByName("subsidy_reduction_interval")
	fd_TokenomicsParams_subsidy_reduction_amount = md_TokenomicsParams.Fields().ByName("subsidy_reduction_amount")
	fd_TokenomicsParams_current_subsidy_percentage = md_TokenomicsParams.Fields().ByName("current_subsidy_percentage")
}

var _ protoreflect.Message = (*fastReflection_TokenomicsParams)(nil)

type fastReflection_TokenomicsParams TokenomicsParams

func (x *TokenomicsParams) ProtoReflect() protoreflect.Message {
	return (*fastReflection_TokenomicsParams)(x)
}

func (x *TokenomicsParams) slowProtoReflect() protoreflect.Message {
	mi := &file_inference_inference_params_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_TokenomicsParams_messageType fastReflection_TokenomicsParams_messageType
var _ protoreflect.MessageType = fastReflection_TokenomicsParams_messageType{}

type fastReflection_TokenomicsParams_messageType struct{}

func (x fastReflection_TokenomicsParams_messageType) Zero() protoreflect.Message {
	return (*fastReflection_TokenomicsParams)(nil)
}
func (x fastReflection_TokenomicsParams_messageType) New() protoreflect.Message {
	return new(fastReflection_TokenomicsParams)
}
func (x fastReflection_TokenomicsParams_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_TokenomicsParams
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_TokenomicsParams) Descriptor() protoreflect.MessageDescriptor {
	return md_TokenomicsParams
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_TokenomicsParams) Type() protoreflect.MessageType {
	return _fastReflection_TokenomicsParams_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_TokenomicsParams) New() protoreflect.Message {
	return new(fastReflection_TokenomicsParams)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_TokenomicsParams) Interface() protoreflect.ProtoMessage {
	return (*TokenomicsParams)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_TokenomicsParams) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.SubsidyReductionInterval != float64(0) || math.Signbit(x.SubsidyReductionInterval) {
		value := protoreflect.ValueOfFloat64(x.SubsidyReductionInterval)
		if !f(fd_TokenomicsParams_subsidy_reduction_interval, value) {
			return
		}
	}
	if x.SubsidyReductionAmount != float32(0) || math.Signbit(float64(x.SubsidyReductionAmount)) {
		value := protoreflect.ValueOfFloat32(x.SubsidyReductionAmount)
		if !f(fd_TokenomicsParams_subsidy_reduction_amount, value) {
			return
		}
	}
	if x.CurrentSubsidyPercentage != float32(0) || math.Signbit(float64(x.CurrentSubsidyPercentage)) {
		value := protoreflect.ValueOfFloat32(x.CurrentSubsidyPercentage)
		if !f(fd_TokenomicsParams_current_subsidy_percentage, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_TokenomicsParams) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "inference.inference.TokenomicsParams.subsidy_reduction_interval":
		return x.SubsidyReductionInterval != float64(0) || math.Signbit(x.SubsidyReductionInterval)
	case "inference.inference.TokenomicsParams.subsidy_reduction_amount":
		return x.SubsidyReductionAmount != float32(0) || math.Signbit(float64(x.SubsidyReductionAmount))
	case "inference.inference.TokenomicsParams.current_subsidy_percentage":
		return x.CurrentSubsidyPercentage != float32(0) || math.Signbit(float64(x.CurrentSubsidyPercentage))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.TokenomicsParams"))
		}
		panic(fmt.Errorf("message inference.inference.TokenomicsParams does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TokenomicsParams) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "inference.inference.TokenomicsParams.subsidy_reduction_interval":
		x.SubsidyReductionInterval = float64(0)
	case "inference.inference.TokenomicsParams.subsidy_reduction_amount":
		x.SubsidyReductionAmount = float32(0)
	case "inference.inference.TokenomicsParams.current_subsidy_percentage":
		x.CurrentSubsidyPercentage = float32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.TokenomicsParams"))
		}
		panic(fmt.Errorf("message inference.inference.TokenomicsParams does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_TokenomicsParams) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "inference.inference.TokenomicsParams.subsidy_reduction_interval":
		value := x.SubsidyReductionInterval
		return protoreflect.ValueOfFloat64(value)
	case "inference.inference.TokenomicsParams.subsidy_reduction_amount":
		value := x.SubsidyReductionAmount
		return protoreflect.ValueOfFloat32(value)
	case "inference.inference.TokenomicsParams.current_subsidy_percentage":
		value := x.CurrentSubsidyPercentage
		return protoreflect.ValueOfFloat32(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.TokenomicsParams"))
		}
		panic(fmt.Errorf("message inference.inference.TokenomicsParams does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TokenomicsParams) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "inference.inference.TokenomicsParams.subsidy_reduction_interval":
		x.SubsidyReductionInterval = value.Float()
	case "inference.inference.TokenomicsParams.subsidy_reduction_amount":
		x.SubsidyReductionAmount = float32(value.Float())
	case "inference.inference.TokenomicsParams.current_subsidy_percentage":
		x.CurrentSubsidyPercentage = float32(value.Float())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.TokenomicsParams"))
		}
		panic(fmt.Errorf("message inference.inference.TokenomicsParams does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TokenomicsParams) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.TokenomicsParams.subsidy_reduction_interval":
		panic(fmt.Errorf("field subsidy_reduction_interval of message inference.inference.TokenomicsParams is not mutable"))
	case "inference.inference.TokenomicsParams.subsidy_reduction_amount":
		panic(fmt.Errorf("field subsidy_reduction_amount of message inference.inference.TokenomicsParams is not mutable"))
	case "inference.inference.TokenomicsParams.current_subsidy_percentage":
		panic(fmt.Errorf("field current_subsidy_percentage of message inference.inference.TokenomicsParams is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.TokenomicsParams"))
		}
		panic(fmt.Errorf("message inference.inference.TokenomicsParams does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_TokenomicsParams) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.TokenomicsParams.subsidy_reduction_interval":
		return protoreflect.ValueOfFloat64(float64(0))
	case "inference.inference.TokenomicsParams.subsidy_reduction_amount":
		return protoreflect.ValueOfFloat32(float32(0))
	case "inference.inference.TokenomicsParams.current_subsidy_percentage":
		return protoreflect.ValueOfFloat32(float32(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.TokenomicsParams"))
		}
		panic(fmt.Errorf("message inference.inference.TokenomicsParams does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_TokenomicsParams) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in inference.inference.TokenomicsParams", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_TokenomicsParams) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TokenomicsParams) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_TokenomicsParams) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_TokenomicsParams) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*TokenomicsParams)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.SubsidyReductionInterval != 0 || math.Signbit(x.SubsidyReductionInterval) {
			n += 9
		}
		if x.SubsidyReductionAmount != 0 || math.Signbit(float64(x.SubsidyReductionAmount)) {
			n += 5
		}
		if x.CurrentSubsidyPercentage != 0 || math.Signbit(float64(x.CurrentSubsidyPercentage)) {
			n += 5
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*TokenomicsParams)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.CurrentSubsidyPercentage != 0 || math.Signbit(float64(x.CurrentSubsidyPercentage)) {
			i -= 4
			binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(x.CurrentSubsidyPercentage))))
			i--
			dAtA[i] = 0x1d
		}
		if x.SubsidyReductionAmount != 0 || math.Signbit(float64(x.SubsidyReductionAmount)) {
			i -= 4
			binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(x.SubsidyReductionAmount))))
			i--
			dAtA[i] = 0x15
		}
		if x.SubsidyReductionInterval != 0 || math.Signbit(x.SubsidyReductionInterval) {
			i -= 8
			binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(x.SubsidyReductionInterval))))
			i--
			dAtA[i] = 0x9
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*TokenomicsParams)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TokenomicsParams: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TokenomicsParams: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 1 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SubsidyReductionInterval", wireType)
				}
				var v uint64
				if (iNdEx + 8) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				x.SubsidyReductionInterval = float64(math.Float64frombits(v))
			case 2:
				if wireType != 5 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SubsidyReductionAmount", wireType)
				}
				var v uint32
				if (iNdEx + 4) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				x.SubsidyReductionAmount = float32(math.Float32frombits(v))
			case 3:
				if wireType != 5 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CurrentSubsidyPercentage", wireType)
				}
				var v uint32
				if (iNdEx + 4) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				x.CurrentSubsidyPercentage = float32(math.Float32frombits(v))
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_EpochParams                               protoreflect.MessageDescriptor
	fd_EpochParams_epoch_length                  protoreflect.FieldDescriptor
	fd_EpochParams_epoch_multiplier              protoreflect.FieldDescriptor
	fd_EpochParams_epoch_shift                   protoreflect.FieldDescriptor
	fd_EpochParams_epoch_new_coin                protoreflect.FieldDescriptor
	fd_EpochParams_coin_halving_interval         protoreflect.FieldDescriptor
	fd_EpochParams_default_unit_of_compute_price protoreflect.FieldDescriptor
)

func init() {
	file_inference_inference_params_proto_init()
	md_EpochParams = File_inference_inference_params_proto.Messages().ByName("EpochParams")
	fd_EpochParams_epoch_length = md_EpochParams.Fields().ByName("epoch_length")
	fd_EpochParams_epoch_multiplier = md_EpochParams.Fields().ByName("epoch_multiplier")
	fd_EpochParams_epoch_shift = md_EpochParams.Fields().ByName("epoch_shift")
	fd_EpochParams_epoch_new_coin = md_EpochParams.Fields().ByName("epoch_new_coin")
	fd_EpochParams_coin_halving_interval = md_EpochParams.Fields().ByName("coin_halving_interval")
	fd_EpochParams_default_unit_of_compute_price = md_EpochParams.Fields().ByName("default_unit_of_compute_price")
}

var _ protoreflect.Message = (*fastReflection_EpochParams)(nil)

type fastReflection_EpochParams EpochParams

func (x *EpochParams) ProtoReflect() protoreflect.Message {
	return (*fastReflection_EpochParams)(x)
}

func (x *EpochParams) slowProtoReflect() protoreflect.Message {
	mi := &file_inference_inference_params_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_EpochParams_messageType fastReflection_EpochParams_messageType
var _ protoreflect.MessageType = fastReflection_EpochParams_messageType{}

type fastReflection_EpochParams_messageType struct{}

func (x fastReflection_EpochParams_messageType) Zero() protoreflect.Message {
	return (*fastReflection_EpochParams)(nil)
}
func (x fastReflection_EpochParams_messageType) New() protoreflect.Message {
	return new(fastReflection_EpochParams)
}
func (x fastReflection_EpochParams_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_EpochParams
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_EpochParams) Descriptor() protoreflect.MessageDescriptor {
	return md_EpochParams
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_EpochParams) Type() protoreflect.MessageType {
	return _fastReflection_EpochParams_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_EpochParams) New() protoreflect.Message {
	return new(fastReflection_EpochParams)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_EpochParams) Interface() protoreflect.ProtoMessage {
	return (*EpochParams)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_EpochParams) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.EpochLength != int64(0) {
		value := protoreflect.ValueOfInt64(x.EpochLength)
		if !f(fd_EpochParams_epoch_length, value) {
			return
		}
	}
	if x.EpochMultiplier != int64(0) {
		value := protoreflect.ValueOfInt64(x.EpochMultiplier)
		if !f(fd_EpochParams_epoch_multiplier, value) {
			return
		}
	}
	if x.EpochShift != int64(0) {
		value := protoreflect.ValueOfInt64(x.EpochShift)
		if !f(fd_EpochParams_epoch_shift, value) {
			return
		}
	}
	if x.EpochNewCoin != uint64(0) {
		value := protoreflect.ValueOfUint64(x.EpochNewCoin)
		if !f(fd_EpochParams_epoch_new_coin, value) {
			return
		}
	}
	if x.CoinHalvingInterval != int64(0) {
		value := protoreflect.ValueOfInt64(x.CoinHalvingInterval)
		if !f(fd_EpochParams_coin_halving_interval, value) {
			return
		}
	}
	if x.DefaultUnitOfComputePrice != uint64(0) {
		value := protoreflect.ValueOfUint64(x.DefaultUnitOfComputePrice)
		if !f(fd_EpochParams_default_unit_of_compute_price, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_EpochParams) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "inference.inference.EpochParams.epoch_length":
		return x.EpochLength != int64(0)
	case "inference.inference.EpochParams.epoch_multiplier":
		return x.EpochMultiplier != int64(0)
	case "inference.inference.EpochParams.epoch_shift":
		return x.EpochShift != int64(0)
	case "inference.inference.EpochParams.epoch_new_coin":
		return x.EpochNewCoin != uint64(0)
	case "inference.inference.EpochParams.coin_halving_interval":
		return x.CoinHalvingInterval != int64(0)
	case "inference.inference.EpochParams.default_unit_of_compute_price":
		return x.DefaultUnitOfComputePrice != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.EpochParams"))
		}
		panic(fmt.Errorf("message inference.inference.EpochParams does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EpochParams) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "inference.inference.EpochParams.epoch_length":
		x.EpochLength = int64(0)
	case "inference.inference.EpochParams.epoch_multiplier":
		x.EpochMultiplier = int64(0)
	case "inference.inference.EpochParams.epoch_shift":
		x.EpochShift = int64(0)
	case "inference.inference.EpochParams.epoch_new_coin":
		x.EpochNewCoin = uint64(0)
	case "inference.inference.EpochParams.coin_halving_interval":
		x.CoinHalvingInterval = int64(0)
	case "inference.inference.EpochParams.default_unit_of_compute_price":
		x.DefaultUnitOfComputePrice = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.EpochParams"))
		}
		panic(fmt.Errorf("message inference.inference.EpochParams does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_EpochParams) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "inference.inference.EpochParams.epoch_length":
		value := x.EpochLength
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.EpochParams.epoch_multiplier":
		value := x.EpochMultiplier
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.EpochParams.epoch_shift":
		value := x.EpochShift
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.EpochParams.epoch_new_coin":
		value := x.EpochNewCoin
		return protoreflect.ValueOfUint64(value)
	case "inference.inference.EpochParams.coin_halving_interval":
		value := x.CoinHalvingInterval
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.EpochParams.default_unit_of_compute_price":
		value := x.DefaultUnitOfComputePrice
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.EpochParams"))
		}
		panic(fmt.Errorf("message inference.inference.EpochParams does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EpochParams) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "inference.inference.EpochParams.epoch_length":
		x.EpochLength = value.Int()
	case "inference.inference.EpochParams.epoch_multiplier":
		x.EpochMultiplier = value.Int()
	case "inference.inference.EpochParams.epoch_shift":
		x.EpochShift = value.Int()
	case "inference.inference.EpochParams.epoch_new_coin":
		x.EpochNewCoin = value.Uint()
	case "inference.inference.EpochParams.coin_halving_interval":
		x.CoinHalvingInterval = value.Int()
	case "inference.inference.EpochParams.default_unit_of_compute_price":
		x.DefaultUnitOfComputePrice = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.EpochParams"))
		}
		panic(fmt.Errorf("message inference.inference.EpochParams does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EpochParams) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.EpochParams.epoch_length":
		panic(fmt.Errorf("field epoch_length of message inference.inference.EpochParams is not mutable"))
	case "inference.inference.EpochParams.epoch_multiplier":
		panic(fmt.Errorf("field epoch_multiplier of message inference.inference.EpochParams is not mutable"))
	case "inference.inference.EpochParams.epoch_shift":
		panic(fmt.Errorf("field epoch_shift of message inference.inference.EpochParams is not mutable"))
	case "inference.inference.EpochParams.epoch_new_coin":
		panic(fmt.Errorf("field epoch_new_coin of message inference.inference.EpochParams is not mutable"))
	case "inference.inference.EpochParams.coin_halving_interval":
		panic(fmt.Errorf("field coin_halving_interval of message inference.inference.EpochParams is not mutable"))
	case "inference.inference.EpochParams.default_unit_of_compute_price":
		panic(fmt.Errorf("field default_unit_of_compute_price of message inference.inference.EpochParams is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.EpochParams"))
		}
		panic(fmt.Errorf("message inference.inference.EpochParams does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_EpochParams) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.EpochParams.epoch_length":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.EpochParams.epoch_multiplier":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.EpochParams.epoch_shift":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.EpochParams.epoch_new_coin":
		return protoreflect.ValueOfUint64(uint64(0))
	case "inference.inference.EpochParams.coin_halving_interval":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.EpochParams.default_unit_of_compute_price":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.EpochParams"))
		}
		panic(fmt.Errorf("message inference.inference.EpochParams does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_EpochParams) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in inference.inference.EpochParams", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_EpochParams) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EpochParams) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_EpochParams) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_EpochParams) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*EpochParams)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.EpochLength != 0 {
			n += 1 + runtime.Sov(uint64(x.EpochLength))
		}
		if x.EpochMultiplier != 0 {
			n += 1 + runtime.Sov(uint64(x.EpochMultiplier))
		}
		if x.EpochShift != 0 {
			n += 1 + runtime.Sov(uint64(x.EpochShift))
		}
		if x.EpochNewCoin != 0 {
			n += 1 + runtime.Sov(uint64(x.EpochNewCoin))
		}
		if x.CoinHalvingInterval != 0 {
			n += 1 + runtime.Sov(uint64(x.CoinHalvingInterval))
		}
		if x.DefaultUnitOfComputePrice != 0 {
			n += 1 + runtime.Sov(uint64(x.DefaultUnitOfComputePrice))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*EpochParams)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.DefaultUnitOfComputePrice != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.DefaultUnitOfComputePrice))
			i--
			dAtA[i] = 0x30
		}
		if x.CoinHalvingInterval != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CoinHalvingInterval))
			i--
			dAtA[i] = 0x28
		}
		if x.EpochNewCoin != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EpochNewCoin))
			i--
			dAtA[i] = 0x20
		}
		if x.EpochShift != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EpochShift))
			i--
			dAtA[i] = 0x18
		}
		if x.EpochMultiplier != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EpochMultiplier))
			i--
			dAtA[i] = 0x10
		}
		if x.EpochLength != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EpochLength))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*EpochParams)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EpochParams: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EpochParams: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EpochLength", wireType)
				}
				x.EpochLength = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EpochLength |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EpochMultiplier", wireType)
				}
				x.EpochMultiplier = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EpochMultiplier |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EpochShift", wireType)
				}
				x.EpochShift = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EpochShift |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EpochNewCoin", wireType)
				}
				x.EpochNewCoin = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EpochNewCoin |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CoinHalvingInterval", wireType)
				}
				x.CoinHalvingInterval = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CoinHalvingInterval |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DefaultUnitOfComputePrice", wireType)
				}
				x.DefaultUnitOfComputePrice = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.DefaultUnitOfComputePrice |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_ValidationParams                          protoreflect.MessageDescriptor
	fd_ValidationParams_false_positive_rate      protoreflect.FieldDescriptor
	fd_ValidationParams_min_ramp_up_measurements protoreflect.FieldDescriptor
	fd_ValidationParams_pass_value               protoreflect.FieldDescriptor
	fd_ValidationParams_min_validation_average   protoreflect.FieldDescriptor
	fd_ValidationParams_max_validation_average   protoreflect.FieldDescriptor
)

func init() {
	file_inference_inference_params_proto_init()
	md_ValidationParams = File_inference_inference_params_proto.Messages().ByName("ValidationParams")
	fd_ValidationParams_false_positive_rate = md_ValidationParams.Fields().ByName("false_positive_rate")
	fd_ValidationParams_min_ramp_up_measurements = md_ValidationParams.Fields().ByName("min_ramp_up_measurements")
	fd_ValidationParams_pass_value = md_ValidationParams.Fields().ByName("pass_value")
	fd_ValidationParams_min_validation_average = md_ValidationParams.Fields().ByName("min_validation_average")
	fd_ValidationParams_max_validation_average = md_ValidationParams.Fields().ByName("max_validation_average")
}

var _ protoreflect.Message = (*fastReflection_ValidationParams)(nil)

type fastReflection_ValidationParams ValidationParams

func (x *ValidationParams) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ValidationParams)(x)
}

func (x *ValidationParams) slowProtoReflect() protoreflect.Message {
	mi := &file_inference_inference_params_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ValidationParams_messageType fastReflection_ValidationParams_messageType
var _ protoreflect.MessageType = fastReflection_ValidationParams_messageType{}

type fastReflection_ValidationParams_messageType struct{}

func (x fastReflection_ValidationParams_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ValidationParams)(nil)
}
func (x fastReflection_ValidationParams_messageType) New() protoreflect.Message {
	return new(fastReflection_ValidationParams)
}
func (x fastReflection_ValidationParams_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ValidationParams
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ValidationParams) Descriptor() protoreflect.MessageDescriptor {
	return md_ValidationParams
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ValidationParams) Type() protoreflect.MessageType {
	return _fastReflection_ValidationParams_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ValidationParams) New() protoreflect.Message {
	return new(fastReflection_ValidationParams)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ValidationParams) Interface() protoreflect.ProtoMessage {
	return (*ValidationParams)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ValidationParams) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.FalsePositiveRate != float64(0) || math.Signbit(x.FalsePositiveRate) {
		value := protoreflect.ValueOfFloat64(x.FalsePositiveRate)
		if !f(fd_ValidationParams_false_positive_rate, value) {
			return
		}
	}
	if x.MinRampUpMeasurements != uint32(0) {
		value := protoreflect.ValueOfUint32(x.MinRampUpMeasurements)
		if !f(fd_ValidationParams_min_ramp_up_measurements, value) {
			return
		}
	}
	if x.PassValue != float64(0) || math.Signbit(x.PassValue) {
		value := protoreflect.ValueOfFloat64(x.PassValue)
		if !f(fd_ValidationParams_pass_value, value) {
			return
		}
	}
	if x.MinValidationAverage != float64(0) || math.Signbit(x.MinValidationAverage) {
		value := protoreflect.ValueOfFloat64(x.MinValidationAverage)
		if !f(fd_ValidationParams_min_validation_average, value) {
			return
		}
	}
	if x.MaxValidationAverage != float64(0) || math.Signbit(x.MaxValidationAverage) {
		value := protoreflect.ValueOfFloat64(x.MaxValidationAverage)
		if !f(fd_ValidationParams_max_validation_average, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ValidationParams) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "inference.inference.ValidationParams.false_positive_rate":
		return x.FalsePositiveRate != float64(0) || math.Signbit(x.FalsePositiveRate)
	case "inference.inference.ValidationParams.min_ramp_up_measurements":
		return x.MinRampUpMeasurements != uint32(0)
	case "inference.inference.ValidationParams.pass_value":
		return x.PassValue != float64(0) || math.Signbit(x.PassValue)
	case "inference.inference.ValidationParams.min_validation_average":
		return x.MinValidationAverage != float64(0) || math.Signbit(x.MinValidationAverage)
	case "inference.inference.ValidationParams.max_validation_average":
		return x.MaxValidationAverage != float64(0) || math.Signbit(x.MaxValidationAverage)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.ValidationParams"))
		}
		panic(fmt.Errorf("message inference.inference.ValidationParams does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ValidationParams) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "inference.inference.ValidationParams.false_positive_rate":
		x.FalsePositiveRate = float64(0)
	case "inference.inference.ValidationParams.min_ramp_up_measurements":
		x.MinRampUpMeasurements = uint32(0)
	case "inference.inference.ValidationParams.pass_value":
		x.PassValue = float64(0)
	case "inference.inference.ValidationParams.min_validation_average":
		x.MinValidationAverage = float64(0)
	case "inference.inference.ValidationParams.max_validation_average":
		x.MaxValidationAverage = float64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.ValidationParams"))
		}
		panic(fmt.Errorf("message inference.inference.ValidationParams does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ValidationParams) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "inference.inference.ValidationParams.false_positive_rate":
		value := x.FalsePositiveRate
		return protoreflect.ValueOfFloat64(value)
	case "inference.inference.ValidationParams.min_ramp_up_measurements":
		value := x.MinRampUpMeasurements
		return protoreflect.ValueOfUint32(value)
	case "inference.inference.ValidationParams.pass_value":
		value := x.PassValue
		return protoreflect.ValueOfFloat64(value)
	case "inference.inference.ValidationParams.min_validation_average":
		value := x.MinValidationAverage
		return protoreflect.ValueOfFloat64(value)
	case "inference.inference.ValidationParams.max_validation_average":
		value := x.MaxValidationAverage
		return protoreflect.ValueOfFloat64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.ValidationParams"))
		}
		panic(fmt.Errorf("message inference.inference.ValidationParams does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ValidationParams) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "inference.inference.ValidationParams.false_positive_rate":
		x.FalsePositiveRate = value.Float()
	case "inference.inference.ValidationParams.min_ramp_up_measurements":
		x.MinRampUpMeasurements = uint32(value.Uint())
	case "inference.inference.ValidationParams.pass_value":
		x.PassValue = value.Float()
	case "inference.inference.ValidationParams.min_validation_average":
		x.MinValidationAverage = value.Float()
	case "inference.inference.ValidationParams.max_validation_average":
		x.MaxValidationAverage = value.Float()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.ValidationParams"))
		}
		panic(fmt.Errorf("message inference.inference.ValidationParams does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ValidationParams) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.ValidationParams.false_positive_rate":
		panic(fmt.Errorf("field false_positive_rate of message inference.inference.ValidationParams is not mutable"))
	case "inference.inference.ValidationParams.min_ramp_up_measurements":
		panic(fmt.Errorf("field min_ramp_up_measurements of message inference.inference.ValidationParams is not mutable"))
	case "inference.inference.ValidationParams.pass_value":
		panic(fmt.Errorf("field pass_value of message inference.inference.ValidationParams is not mutable"))
	case "inference.inference.ValidationParams.min_validation_average":
		panic(fmt.Errorf("field min_validation_average of message inference.inference.ValidationParams is not mutable"))
	case "inference.inference.ValidationParams.max_validation_average":
		panic(fmt.Errorf("field max_validation_average of message inference.inference.ValidationParams is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.ValidationParams"))
		}
		panic(fmt.Errorf("message inference.inference.ValidationParams does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ValidationParams) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.ValidationParams.false_positive_rate":
		return protoreflect.ValueOfFloat64(float64(0))
	case "inference.inference.ValidationParams.min_ramp_up_measurements":
		return protoreflect.ValueOfUint32(uint32(0))
	case "inference.inference.ValidationParams.pass_value":
		return protoreflect.ValueOfFloat64(float64(0))
	case "inference.inference.ValidationParams.min_validation_average":
		return protoreflect.ValueOfFloat64(float64(0))
	case "inference.inference.ValidationParams.max_validation_average":
		return protoreflect.ValueOfFloat64(float64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.ValidationParams"))
		}
		panic(fmt.Errorf("message inference.inference.ValidationParams does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ValidationParams) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in inference.inference.ValidationParams", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ValidationParams) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ValidationParams) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ValidationParams) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ValidationParams) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ValidationParams)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.FalsePositiveRate != 0 || math.Signbit(x.FalsePositiveRate) {
			n += 9
		}
		if x.MinRampUpMeasurements != 0 {
			n += 1 + runtime.Sov(uint64(x.MinRampUpMeasurements))
		}
		if x.PassValue != 0 || math.Signbit(x.PassValue) {
			n += 9
		}
		if x.MinValidationAverage != 0 || math.Signbit(x.MinValidationAverage) {
			n += 9
		}
		if x.MaxValidationAverage != 0 || math.Signbit(x.MaxValidationAverage) {
			n += 9
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ValidationParams)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.MaxValidationAverage != 0 || math.Signbit(x.MaxValidationAverage) {
			i -= 8
			binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(x.MaxValidationAverage))))
			i--
			dAtA[i] = 0x29
		}
		if x.MinValidationAverage != 0 || math.Signbit(x.MinValidationAverage) {
			i -= 8
			binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(x.MinValidationAverage))))
			i--
			dAtA[i] = 0x21
		}
		if x.PassValue != 0 || math.Signbit(x.PassValue) {
			i -= 8
			binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(x.PassValue))))
			i--
			dAtA[i] = 0x19
		}
		if x.MinRampUpMeasurements != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MinRampUpMeasurements))
			i--
			dAtA[i] = 0x10
		}
		if x.FalsePositiveRate != 0 || math.Signbit(x.FalsePositiveRate) {
			i -= 8
			binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(x.FalsePositiveRate))))
			i--
			dAtA[i] = 0x9
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ValidationParams)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ValidationParams: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ValidationParams: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 1 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FalsePositiveRate", wireType)
				}
				var v uint64
				if (iNdEx + 8) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				x.FalsePositiveRate = float64(math.Float64frombits(v))
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MinRampUpMeasurements", wireType)
				}
				x.MinRampUpMeasurements = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MinRampUpMeasurements |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 1 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PassValue", wireType)
				}
				var v uint64
				if (iNdEx + 8) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				x.PassValue = float64(math.Float64frombits(v))
			case 4:
				if wireType != 1 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MinValidationAverage", wireType)
				}
				var v uint64
				if (iNdEx + 8) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				x.MinValidationAverage = float64(math.Float64frombits(v))
			case 5:
				if wireType != 1 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxValidationAverage", wireType)
				}
				var v uint64
				if (iNdEx + 8) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				x.MaxValidationAverage = float64(math.Float64frombits(v))
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_PocParams                    protoreflect.MessageDescriptor
	fd_PocParams_default_difficulty protoreflect.FieldDescriptor
)

func init() {
	file_inference_inference_params_proto_init()
	md_PocParams = File_inference_inference_params_proto.Messages().ByName("PocParams")
	fd_PocParams_default_difficulty = md_PocParams.Fields().ByName("default_difficulty")
}

var _ protoreflect.Message = (*fastReflection_PocParams)(nil)

type fastReflection_PocParams PocParams

func (x *PocParams) ProtoReflect() protoreflect.Message {
	return (*fastReflection_PocParams)(x)
}

func (x *PocParams) slowProtoReflect() protoreflect.Message {
	mi := &file_inference_inference_params_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_PocParams_messageType fastReflection_PocParams_messageType
var _ protoreflect.MessageType = fastReflection_PocParams_messageType{}

type fastReflection_PocParams_messageType struct{}

func (x fastReflection_PocParams_messageType) Zero() protoreflect.Message {
	return (*fastReflection_PocParams)(nil)
}
func (x fastReflection_PocParams_messageType) New() protoreflect.Message {
	return new(fastReflection_PocParams)
}
func (x fastReflection_PocParams_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_PocParams
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_PocParams) Descriptor() protoreflect.MessageDescriptor {
	return md_PocParams
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_PocParams) Type() protoreflect.MessageType {
	return _fastReflection_PocParams_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_PocParams) New() protoreflect.Message {
	return new(fastReflection_PocParams)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_PocParams) Interface() protoreflect.ProtoMessage {
	return (*PocParams)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_PocParams) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.DefaultDifficulty != uint32(0) {
		value := protoreflect.ValueOfUint32(x.DefaultDifficulty)
		if !f(fd_PocParams_default_difficulty, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_PocParams) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "inference.inference.PocParams.default_difficulty":
		return x.DefaultDifficulty != uint32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.PocParams"))
		}
		panic(fmt.Errorf("message inference.inference.PocParams does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PocParams) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "inference.inference.PocParams.default_difficulty":
		x.DefaultDifficulty = uint32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.PocParams"))
		}
		panic(fmt.Errorf("message inference.inference.PocParams does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_PocParams) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "inference.inference.PocParams.default_difficulty":
		value := x.DefaultDifficulty
		return protoreflect.ValueOfUint32(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.PocParams"))
		}
		panic(fmt.Errorf("message inference.inference.PocParams does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PocParams) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "inference.inference.PocParams.default_difficulty":
		x.DefaultDifficulty = uint32(value.Uint())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.PocParams"))
		}
		panic(fmt.Errorf("message inference.inference.PocParams does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PocParams) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.PocParams.default_difficulty":
		panic(fmt.Errorf("field default_difficulty of message inference.inference.PocParams is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.PocParams"))
		}
		panic(fmt.Errorf("message inference.inference.PocParams does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_PocParams) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.PocParams.default_difficulty":
		return protoreflect.ValueOfUint32(uint32(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.PocParams"))
		}
		panic(fmt.Errorf("message inference.inference.PocParams does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_PocParams) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in inference.inference.PocParams", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_PocParams) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PocParams) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_PocParams) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_PocParams) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*PocParams)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.DefaultDifficulty != 0 {
			n += 1 + runtime.Sov(uint64(x.DefaultDifficulty))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*PocParams)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.DefaultDifficulty != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.DefaultDifficulty))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*PocParams)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PocParams: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PocParams: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DefaultDifficulty", wireType)
				}
				x.DefaultDifficulty = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.DefaultDifficulty |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: inference/inference/params.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Params defines the parameters for the module.
type Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EpochParams      *EpochParams      `protobuf:"bytes,1,opt,name=epoch_params,json=epochParams,proto3" json:"epoch_params,omitempty"`
	ValidationParams *ValidationParams `protobuf:"bytes,2,opt,name=validation_params,json=validationParams,proto3" json:"validation_params,omitempty"`
	PocParams        *PocParams        `protobuf:"bytes,3,opt,name=poc_params,json=pocParams,proto3" json:"poc_params,omitempty"`
	TokenomicsParams *TokenomicsParams `protobuf:"bytes,4,opt,name=tokenomics_params,json=tokenomicsParams,proto3" json:"tokenomics_params,omitempty"`
}

func (x *Params) Reset() {
	*x = Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_inference_params_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Params) ProtoMessage() {}

// Deprecated: Use Params.ProtoReflect.Descriptor instead.
func (*Params) Descriptor() ([]byte, []int) {
	return file_inference_inference_params_proto_rawDescGZIP(), []int{0}
}

func (x *Params) GetEpochParams() *EpochParams {
	if x != nil {
		return x.EpochParams
	}
	return nil
}

func (x *Params) GetValidationParams() *ValidationParams {
	if x != nil {
		return x.ValidationParams
	}
	return nil
}

func (x *Params) GetPocParams() *PocParams {
	if x != nil {
		return x.PocParams
	}
	return nil
}

func (x *Params) GetTokenomicsParams() *TokenomicsParams {
	if x != nil {
		return x.TokenomicsParams
	}
	return nil
}

type GenesisOnlyParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalSupply             int64  `protobuf:"varint,1,opt,name=total_supply,json=totalSupply,proto3" json:"total_supply,omitempty"`
	OriginatorSupply        int64  `protobuf:"varint,2,opt,name=originator_supply,json=originatorSupply,proto3" json:"originator_supply,omitempty"`
	TopRewardAmount         int64  `protobuf:"varint,3,opt,name=top_reward_amount,json=topRewardAmount,proto3" json:"top_reward_amount,omitempty"`
	StandardRewardAmount    int64  `protobuf:"varint,4,opt,name=standard_reward_amount,json=standardRewardAmount,proto3" json:"standard_reward_amount,omitempty"`
	PreProgrammedSaleAmount int64  `protobuf:"varint,5,opt,name=pre_programmed_sale_amount,json=preProgrammedSaleAmount,proto3" json:"pre_programmed_sale_amount,omitempty"`
	TopRewards              int32  `protobuf:"varint,6,opt,name=top_rewards,json=topRewards,proto3" json:"top_rewards,omitempty"`
	SupplyDenom             string `protobuf:"bytes,7,opt,name=supply_denom,json=supplyDenom,proto3" json:"supply_denom,omitempty"`
}

func (x *GenesisOnlyParams) Reset() {
	*x = GenesisOnlyParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_inference_params_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenesisOnlyParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenesisOnlyParams) ProtoMessage() {}

// Deprecated: Use GenesisOnlyParams.ProtoReflect.Descriptor instead.
func (*GenesisOnlyParams) Descriptor() ([]byte, []int) {
	return file_inference_inference_params_proto_rawDescGZIP(), []int{1}
}

func (x *GenesisOnlyParams) GetTotalSupply() int64 {
	if x != nil {
		return x.TotalSupply
	}
	return 0
}

func (x *GenesisOnlyParams) GetOriginatorSupply() int64 {
	if x != nil {
		return x.OriginatorSupply
	}
	return 0
}

func (x *GenesisOnlyParams) GetTopRewardAmount() int64 {
	if x != nil {
		return x.TopRewardAmount
	}
	return 0
}

func (x *GenesisOnlyParams) GetStandardRewardAmount() int64 {
	if x != nil {
		return x.StandardRewardAmount
	}
	return 0
}

func (x *GenesisOnlyParams) GetPreProgrammedSaleAmount() int64 {
	if x != nil {
		return x.PreProgrammedSaleAmount
	}
	return 0
}

func (x *GenesisOnlyParams) GetTopRewards() int32 {
	if x != nil {
		return x.TopRewards
	}
	return 0
}

func (x *GenesisOnlyParams) GetSupplyDenom() string {
	if x != nil {
		return x.SupplyDenom
	}
	return ""
}

type TokenomicsParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubsidyReductionInterval float64 `protobuf:"fixed64,1,opt,name=subsidy_reduction_interval,json=subsidyReductionInterval,proto3" json:"subsidy_reduction_interval,omitempty"`
	SubsidyReductionAmount   float32 `protobuf:"fixed32,2,opt,name=subsidy_reduction_amount,json=subsidyReductionAmount,proto3" json:"subsidy_reduction_amount,omitempty"`
	CurrentSubsidyPercentage float32 `protobuf:"fixed32,3,opt,name=current_subsidy_percentage,json=currentSubsidyPercentage,proto3" json:"current_subsidy_percentage,omitempty"`
}

func (x *TokenomicsParams) Reset() {
	*x = TokenomicsParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_inference_params_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenomicsParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenomicsParams) ProtoMessage() {}

// Deprecated: Use TokenomicsParams.ProtoReflect.Descriptor instead.
func (*TokenomicsParams) Descriptor() ([]byte, []int) {
	return file_inference_inference_params_proto_rawDescGZIP(), []int{2}
}

func (x *TokenomicsParams) GetSubsidyReductionInterval() float64 {
	if x != nil {
		return x.SubsidyReductionInterval
	}
	return 0
}

func (x *TokenomicsParams) GetSubsidyReductionAmount() float32 {
	if x != nil {
		return x.SubsidyReductionAmount
	}
	return 0
}

func (x *TokenomicsParams) GetCurrentSubsidyPercentage() float32 {
	if x != nil {
		return x.CurrentSubsidyPercentage
	}
	return 0
}

type EpochParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EpochLength               int64  `protobuf:"varint,1,opt,name=epoch_length,json=epochLength,proto3" json:"epoch_length,omitempty"`
	EpochMultiplier           int64  `protobuf:"varint,2,opt,name=epoch_multiplier,json=epochMultiplier,proto3" json:"epoch_multiplier,omitempty"`
	EpochShift                int64  `protobuf:"varint,3,opt,name=epoch_shift,json=epochShift,proto3" json:"epoch_shift,omitempty"`
	EpochNewCoin              uint64 `protobuf:"varint,4,opt,name=epoch_new_coin,json=epochNewCoin,proto3" json:"epoch_new_coin,omitempty"`
	CoinHalvingInterval       int64  `protobuf:"varint,5,opt,name=coin_halving_interval,json=coinHalvingInterval,proto3" json:"coin_halving_interval,omitempty"`
	DefaultUnitOfComputePrice uint64 `protobuf:"varint,6,opt,name=default_unit_of_compute_price,json=defaultUnitOfComputePrice,proto3" json:"default_unit_of_compute_price,omitempty"`
}

func (x *EpochParams) Reset() {
	*x = EpochParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_inference_params_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpochParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpochParams) ProtoMessage() {}

// Deprecated: Use EpochParams.ProtoReflect.Descriptor instead.
func (*EpochParams) Descriptor() ([]byte, []int) {
	return file_inference_inference_params_proto_rawDescGZIP(), []int{3}
}

func (x *EpochParams) GetEpochLength() int64 {
	if x != nil {
		return x.EpochLength
	}
	return 0
}

func (x *EpochParams) GetEpochMultiplier() int64 {
	if x != nil {
		return x.EpochMultiplier
	}
	return 0
}

func (x *EpochParams) GetEpochShift() int64 {
	if x != nil {
		return x.EpochShift
	}
	return 0
}

func (x *EpochParams) GetEpochNewCoin() uint64 {
	if x != nil {
		return x.EpochNewCoin
	}
	return 0
}

func (x *EpochParams) GetCoinHalvingInterval() int64 {
	if x != nil {
		return x.CoinHalvingInterval
	}
	return 0
}

func (x *EpochParams) GetDefaultUnitOfComputePrice() uint64 {
	if x != nil {
		return x.DefaultUnitOfComputePrice
	}
	return 0
}

type ValidationParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FalsePositiveRate     float64 `protobuf:"fixed64,1,opt,name=false_positive_rate,json=falsePositiveRate,proto3" json:"false_positive_rate,omitempty"`
	MinRampUpMeasurements uint32  `protobuf:"varint,2,opt,name=min_ramp_up_measurements,json=minRampUpMeasurements,proto3" json:"min_ramp_up_measurements,omitempty"`
	PassValue             float64 `protobuf:"fixed64,3,opt,name=pass_value,json=passValue,proto3" json:"pass_value,omitempty"`
	MinValidationAverage  float64 `protobuf:"fixed64,4,opt,name=min_validation_average,json=minValidationAverage,proto3" json:"min_validation_average,omitempty"`
	MaxValidationAverage  float64 `protobuf:"fixed64,5,opt,name=max_validation_average,json=maxValidationAverage,proto3" json:"max_validation_average,omitempty"`
}

func (x *ValidationParams) Reset() {
	*x = ValidationParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_inference_params_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidationParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationParams) ProtoMessage() {}

// Deprecated: Use ValidationParams.ProtoReflect.Descriptor instead.
func (*ValidationParams) Descriptor() ([]byte, []int) {
	return file_inference_inference_params_proto_rawDescGZIP(), []int{4}
}

func (x *ValidationParams) GetFalsePositiveRate() float64 {
	if x != nil {
		return x.FalsePositiveRate
	}
	return 0
}

func (x *ValidationParams) GetMinRampUpMeasurements() uint32 {
	if x != nil {
		return x.MinRampUpMeasurements
	}
	return 0
}

func (x *ValidationParams) GetPassValue() float64 {
	if x != nil {
		return x.PassValue
	}
	return 0
}

func (x *ValidationParams) GetMinValidationAverage() float64 {
	if x != nil {
		return x.MinValidationAverage
	}
	return 0
}

func (x *ValidationParams) GetMaxValidationAverage() float64 {
	if x != nil {
		return x.MaxValidationAverage
	}
	return 0
}

type PocParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultDifficulty uint32 `protobuf:"varint,1,opt,name=default_difficulty,json=defaultDifficulty,proto3" json:"default_difficulty,omitempty"`
}

func (x *PocParams) Reset() {
	*x = PocParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_inference_params_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PocParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PocParams) ProtoMessage() {}

// Deprecated: Use PocParams.ProtoReflect.Descriptor instead.
func (*PocParams) Descriptor() ([]byte, []int) {
	return file_inference_inference_params_proto_rawDescGZIP(), []int{5}
}

func (x *PocParams) GetDefaultDifficulty() uint32 {
	if x != nil {
		return x.DefaultDifficulty
	}
	return 0
}

var File_inference_inference_params_proto protoreflect.FileDescriptor

var file_inference_inference_params_proto_rawDesc = []byte{
	0x0a, 0x20, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x13, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0x11, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2f, 0x61,
	0x6d, 0x69, 0x6e, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x19, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdb, 0x02, 0x0a, 0x06,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0b,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x52, 0x0a, 0x11, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x10, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x3d, 0x0a, 0x0a, 0x70, 0x6f, 0x63, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x63, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x52, 0x09, 0x70, 0x6f, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x52,
	0x0a, 0x11, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x52, 0x10, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x3a, 0x25, 0xe8, 0xa0, 0x1f, 0x01, 0x8a, 0xe7, 0xb0, 0x2a, 0x1c, 0x69, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x78, 0x2f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x2f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xc6, 0x02, 0x0a, 0x11, 0x47, 0x65,
	0x6e, 0x65, 0x73, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12,
	0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x6f, 0x70, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x70, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x6d, 0x65, 0x64, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x70, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x6d, 0x65, 0x64, 0x53, 0x61, 0x6c, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x65, 0x6e,
	0x6f, 0x6d, 0x22, 0xce, 0x01, 0x0a, 0x10, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63,
	0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x73, 0x75, 0x62, 0x73, 0x69,
	0x64, 0x79, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x73, 0x75, 0x62,
	0x73, 0x69, 0x64, 0x79, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x75, 0x62, 0x73, 0x69, 0x64, 0x79,
	0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x73, 0x75, 0x62, 0x73, 0x69, 0x64, 0x79,
	0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x3c, 0x0a, 0x1a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x69,
	0x64, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x18, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73,
	0x69, 0x64, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x3a, 0x04, 0xe8,
	0xa0, 0x1f, 0x01, 0x22, 0x9e, 0x02, 0x0a, 0x0b, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x68, 0x69,
	0x66, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x6e, 0x65, 0x77, 0x5f,
	0x63, 0x6f, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x69, 0x6e,
	0x5f, 0x68, 0x61, 0x6c, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x63, 0x6f, 0x69, 0x6e, 0x48, 0x61, 0x6c,
	0x76, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x40, 0x0a, 0x1d,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6f, 0x66, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x19, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x4f, 0x66, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x3a, 0x04,
	0xe8, 0xa0, 0x1f, 0x01, 0x22, 0x8c, 0x02, 0x0a, 0x10, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x6d, 0x69, 0x6e,
	0x5f, 0x72, 0x61, 0x6d, 0x70, 0x5f, 0x75, 0x70, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x6d, 0x69, 0x6e,
	0x52, 0x61, 0x6d, 0x70, 0x55, 0x70, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x70, 0x61, 0x73, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x14, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x3a, 0x04, 0xe8,
	0xa0, 0x1f, 0x01, 0x22, 0x40, 0x0a, 0x09, 0x50, 0x6f, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x2d, 0x0a, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x69, 0x66, 0x66,
	0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x3a,
	0x04, 0xe8, 0xa0, 0x1f, 0x01, 0x42, 0xb9, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x0b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x24, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0xa2, 0x02, 0x03, 0x49, 0x49, 0x58, 0xaa, 0x02, 0x13, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0xca, 0x02, 0x13, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5c, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0xe2, 0x02, 0x1f, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x5c, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x14, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x3a, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_inference_inference_params_proto_rawDescOnce sync.Once
	file_inference_inference_params_proto_rawDescData = file_inference_inference_params_proto_rawDesc
)

func file_inference_inference_params_proto_rawDescGZIP() []byte {
	file_inference_inference_params_proto_rawDescOnce.Do(func() {
		file_inference_inference_params_proto_rawDescData = protoimpl.X.CompressGZIP(file_inference_inference_params_proto_rawDescData)
	})
	return file_inference_inference_params_proto_rawDescData
}

var file_inference_inference_params_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_inference_inference_params_proto_goTypes = []interface{}{
	(*Params)(nil),            // 0: inference.inference.Params
	(*GenesisOnlyParams)(nil), // 1: inference.inference.GenesisOnlyParams
	(*TokenomicsParams)(nil),  // 2: inference.inference.TokenomicsParams
	(*EpochParams)(nil),       // 3: inference.inference.EpochParams
	(*ValidationParams)(nil),  // 4: inference.inference.ValidationParams
	(*PocParams)(nil),         // 5: inference.inference.PocParams
}
var file_inference_inference_params_proto_depIdxs = []int32{
	3, // 0: inference.inference.Params.epoch_params:type_name -> inference.inference.EpochParams
	4, // 1: inference.inference.Params.validation_params:type_name -> inference.inference.ValidationParams
	5, // 2: inference.inference.Params.poc_params:type_name -> inference.inference.PocParams
	2, // 3: inference.inference.Params.tokenomics_params:type_name -> inference.inference.TokenomicsParams
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_inference_inference_params_proto_init() }
func file_inference_inference_params_proto_init() {
	if File_inference_inference_params_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_inference_inference_params_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_inference_params_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenesisOnlyParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_inference_params_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenomicsParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_inference_params_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpochParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_inference_params_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidationParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_inference_params_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PocParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_inference_inference_params_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_inference_inference_params_proto_goTypes,
		DependencyIndexes: file_inference_inference_params_proto_depIdxs,
		MessageInfos:      file_inference_inference_params_proto_msgTypes,
	}.Build()
	File_inference_inference_params_proto = out.File
	file_inference_inference_params_proto_rawDesc = nil
	file_inference_inference_params_proto_goTypes = nil
	file_inference_inference_params_proto_depIdxs = nil
}

// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package inference

import (
	binary "encoding/binary"
	fmt "fmt"
	io "io"
	math "math"
	reflect "reflect"
	sync "sync"

	_ "cosmossdk.io/api/amino"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

var (
	md_ParamsV1                   protoreflect.MessageDescriptor
	fd_ParamsV1_epoch_params      protoreflect.FieldDescriptor
	fd_ParamsV1_validation_params protoreflect.FieldDescriptor
	fd_ParamsV1_poc_params        protoreflect.FieldDescriptor
	fd_ParamsV1_tokenomics_params protoreflect.FieldDescriptor
)

func init() {
	file_inference_inference_paramsv1_proto_init()
	md_ParamsV1 = File_inference_inference_paramsv1_proto.Messages().ByName("ParamsV1")
	fd_ParamsV1_epoch_params = md_ParamsV1.Fields().ByName("epoch_params")
	fd_ParamsV1_validation_params = md_ParamsV1.Fields().ByName("validation_params")
	fd_ParamsV1_poc_params = md_ParamsV1.Fields().ByName("poc_params")
	fd_ParamsV1_tokenomics_params = md_ParamsV1.Fields().ByName("tokenomics_params")
}

var _ protoreflect.Message = (*fastReflection_ParamsV1)(nil)

type fastReflection_ParamsV1 ParamsV1

func (x *ParamsV1) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ParamsV1)(x)
}

func (x *ParamsV1) slowProtoReflect() protoreflect.Message {
	mi := &file_inference_inference_paramsv1_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ParamsV1_messageType fastReflection_ParamsV1_messageType
var _ protoreflect.MessageType = fastReflection_ParamsV1_messageType{}

type fastReflection_ParamsV1_messageType struct{}

func (x fastReflection_ParamsV1_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ParamsV1)(nil)
}
func (x fastReflection_ParamsV1_messageType) New() protoreflect.Message {
	return new(fastReflection_ParamsV1)
}
func (x fastReflection_ParamsV1_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ParamsV1
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ParamsV1) Descriptor() protoreflect.MessageDescriptor {
	return md_ParamsV1
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ParamsV1) Type() protoreflect.MessageType {
	return _fastReflection_ParamsV1_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ParamsV1) New() protoreflect.Message {
	return new(fastReflection_ParamsV1)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ParamsV1) Interface() protoreflect.ProtoMessage {
	return (*ParamsV1)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ParamsV1) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.EpochParams != nil {
		value := protoreflect.ValueOfMessage(x.EpochParams.ProtoReflect())
		if !f(fd_ParamsV1_epoch_params, value) {
			return
		}
	}
	if x.ValidationParams != nil {
		value := protoreflect.ValueOfMessage(x.ValidationParams.ProtoReflect())
		if !f(fd_ParamsV1_validation_params, value) {
			return
		}
	}
	if x.PocParams != nil {
		value := protoreflect.ValueOfMessage(x.PocParams.ProtoReflect())
		if !f(fd_ParamsV1_poc_params, value) {
			return
		}
	}
	if x.TokenomicsParams != nil {
		value := protoreflect.ValueOfMessage(x.TokenomicsParams.ProtoReflect())
		if !f(fd_ParamsV1_tokenomics_params, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ParamsV1) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "inference.inference.ParamsV1.epoch_params":
		return x.EpochParams != nil
	case "inference.inference.ParamsV1.validation_params":
		return x.ValidationParams != nil
	case "inference.inference.ParamsV1.poc_params":
		return x.PocParams != nil
	case "inference.inference.ParamsV1.tokenomics_params":
		return x.TokenomicsParams != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.ParamsV1"))
		}
		panic(fmt.Errorf("message inference.inference.ParamsV1 does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ParamsV1) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "inference.inference.ParamsV1.epoch_params":
		x.EpochParams = nil
	case "inference.inference.ParamsV1.validation_params":
		x.ValidationParams = nil
	case "inference.inference.ParamsV1.poc_params":
		x.PocParams = nil
	case "inference.inference.ParamsV1.tokenomics_params":
		x.TokenomicsParams = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.ParamsV1"))
		}
		panic(fmt.Errorf("message inference.inference.ParamsV1 does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ParamsV1) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "inference.inference.ParamsV1.epoch_params":
		value := x.EpochParams
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "inference.inference.ParamsV1.validation_params":
		value := x.ValidationParams
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "inference.inference.ParamsV1.poc_params":
		value := x.PocParams
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "inference.inference.ParamsV1.tokenomics_params":
		value := x.TokenomicsParams
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.ParamsV1"))
		}
		panic(fmt.Errorf("message inference.inference.ParamsV1 does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ParamsV1) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "inference.inference.ParamsV1.epoch_params":
		x.EpochParams = value.Message().Interface().(*EpochParamsV1)
	case "inference.inference.ParamsV1.validation_params":
		x.ValidationParams = value.Message().Interface().(*ValidationParamsV1)
	case "inference.inference.ParamsV1.poc_params":
		x.PocParams = value.Message().Interface().(*PocParamsV1)
	case "inference.inference.ParamsV1.tokenomics_params":
		x.TokenomicsParams = value.Message().Interface().(*TokenomicsParamsV1)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.ParamsV1"))
		}
		panic(fmt.Errorf("message inference.inference.ParamsV1 does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ParamsV1) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.ParamsV1.epoch_params":
		if x.EpochParams == nil {
			x.EpochParams = new(EpochParamsV1)
		}
		return protoreflect.ValueOfMessage(x.EpochParams.ProtoReflect())
	case "inference.inference.ParamsV1.validation_params":
		if x.ValidationParams == nil {
			x.ValidationParams = new(ValidationParamsV1)
		}
		return protoreflect.ValueOfMessage(x.ValidationParams.ProtoReflect())
	case "inference.inference.ParamsV1.poc_params":
		if x.PocParams == nil {
			x.PocParams = new(PocParamsV1)
		}
		return protoreflect.ValueOfMessage(x.PocParams.ProtoReflect())
	case "inference.inference.ParamsV1.tokenomics_params":
		if x.TokenomicsParams == nil {
			x.TokenomicsParams = new(TokenomicsParamsV1)
		}
		return protoreflect.ValueOfMessage(x.TokenomicsParams.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.ParamsV1"))
		}
		panic(fmt.Errorf("message inference.inference.ParamsV1 does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ParamsV1) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.ParamsV1.epoch_params":
		m := new(EpochParamsV1)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "inference.inference.ParamsV1.validation_params":
		m := new(ValidationParamsV1)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "inference.inference.ParamsV1.poc_params":
		m := new(PocParamsV1)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "inference.inference.ParamsV1.tokenomics_params":
		m := new(TokenomicsParamsV1)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.ParamsV1"))
		}
		panic(fmt.Errorf("message inference.inference.ParamsV1 does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ParamsV1) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in inference.inference.ParamsV1", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ParamsV1) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ParamsV1) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ParamsV1) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ParamsV1) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ParamsV1)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.EpochParams != nil {
			l = options.Size(x.EpochParams)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.ValidationParams != nil {
			l = options.Size(x.ValidationParams)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.PocParams != nil {
			l = options.Size(x.PocParams)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.TokenomicsParams != nil {
			l = options.Size(x.TokenomicsParams)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ParamsV1)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.TokenomicsParams != nil {
			encoded, err := options.Marshal(x.TokenomicsParams)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x22
		}
		if x.PocParams != nil {
			encoded, err := options.Marshal(x.PocParams)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if x.ValidationParams != nil {
			encoded, err := options.Marshal(x.ValidationParams)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if x.EpochParams != nil {
			encoded, err := options.Marshal(x.EpochParams)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ParamsV1)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ParamsV1: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ParamsV1: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EpochParams", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.EpochParams == nil {
					x.EpochParams = &EpochParamsV1{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.EpochParams); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidationParams", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.ValidationParams == nil {
					x.ValidationParams = &ValidationParamsV1{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ValidationParams); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PocParams", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.PocParams == nil {
					x.PocParams = &PocParamsV1{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.PocParams); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TokenomicsParams", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.TokenomicsParams == nil {
					x.TokenomicsParams = &TokenomicsParamsV1{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.TokenomicsParams); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_TokenomicsParamsV1                             protoreflect.MessageDescriptor
	fd_TokenomicsParamsV1_subsidy_reduction_interval  protoreflect.FieldDescriptor
	fd_TokenomicsParamsV1_subsidy_reduction_amount    protoreflect.FieldDescriptor
	fd_TokenomicsParamsV1_current_subsidy_percentage  protoreflect.FieldDescriptor
	fd_TokenomicsParamsV1_top_reward_allowed_failure  protoreflect.FieldDescriptor
	fd_TokenomicsParamsV1_top_miner_poc_qualification protoreflect.FieldDescriptor
)

func init() {
	file_inference_inference_paramsv1_proto_init()
	md_TokenomicsParamsV1 = File_inference_inference_paramsv1_proto.Messages().ByName("TokenomicsParamsV1")
	fd_TokenomicsParamsV1_subsidy_reduction_interval = md_TokenomicsParamsV1.Fields().ByName("subsidy_reduction_interval")
	fd_TokenomicsParamsV1_subsidy_reduction_amount = md_TokenomicsParamsV1.Fields().ByName("subsidy_reduction_amount")
	fd_TokenomicsParamsV1_current_subsidy_percentage = md_TokenomicsParamsV1.Fields().ByName("current_subsidy_percentage")
	fd_TokenomicsParamsV1_top_reward_allowed_failure = md_TokenomicsParamsV1.Fields().ByName("top_reward_allowed_failure")
	fd_TokenomicsParamsV1_top_miner_poc_qualification = md_TokenomicsParamsV1.Fields().ByName("top_miner_poc_qualification")
}

var _ protoreflect.Message = (*fastReflection_TokenomicsParamsV1)(nil)

type fastReflection_TokenomicsParamsV1 TokenomicsParamsV1

func (x *TokenomicsParamsV1) ProtoReflect() protoreflect.Message {
	return (*fastReflection_TokenomicsParamsV1)(x)
}

func (x *TokenomicsParamsV1) slowProtoReflect() protoreflect.Message {
	mi := &file_inference_inference_paramsv1_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_TokenomicsParamsV1_messageType fastReflection_TokenomicsParamsV1_messageType
var _ protoreflect.MessageType = fastReflection_TokenomicsParamsV1_messageType{}

type fastReflection_TokenomicsParamsV1_messageType struct{}

func (x fastReflection_TokenomicsParamsV1_messageType) Zero() protoreflect.Message {
	return (*fastReflection_TokenomicsParamsV1)(nil)
}
func (x fastReflection_TokenomicsParamsV1_messageType) New() protoreflect.Message {
	return new(fastReflection_TokenomicsParamsV1)
}
func (x fastReflection_TokenomicsParamsV1_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_TokenomicsParamsV1
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_TokenomicsParamsV1) Descriptor() protoreflect.MessageDescriptor {
	return md_TokenomicsParamsV1
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_TokenomicsParamsV1) Type() protoreflect.MessageType {
	return _fastReflection_TokenomicsParamsV1_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_TokenomicsParamsV1) New() protoreflect.Message {
	return new(fastReflection_TokenomicsParamsV1)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_TokenomicsParamsV1) Interface() protoreflect.ProtoMessage {
	return (*TokenomicsParamsV1)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_TokenomicsParamsV1) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.SubsidyReductionInterval != float64(0) || math.Signbit(x.SubsidyReductionInterval) {
		value := protoreflect.ValueOfFloat64(x.SubsidyReductionInterval)
		if !f(fd_TokenomicsParamsV1_subsidy_reduction_interval, value) {
			return
		}
	}
	if x.SubsidyReductionAmount != float32(0) || math.Signbit(float64(x.SubsidyReductionAmount)) {
		value := protoreflect.ValueOfFloat32(x.SubsidyReductionAmount)
		if !f(fd_TokenomicsParamsV1_subsidy_reduction_amount, value) {
			return
		}
	}
	if x.CurrentSubsidyPercentage != float32(0) || math.Signbit(float64(x.CurrentSubsidyPercentage)) {
		value := protoreflect.ValueOfFloat32(x.CurrentSubsidyPercentage)
		if !f(fd_TokenomicsParamsV1_current_subsidy_percentage, value) {
			return
		}
	}
	if x.TopRewardAllowedFailure != float32(0) || math.Signbit(float64(x.TopRewardAllowedFailure)) {
		value := protoreflect.ValueOfFloat32(x.TopRewardAllowedFailure)
		if !f(fd_TokenomicsParamsV1_top_reward_allowed_failure, value) {
			return
		}
	}
	if x.TopMinerPocQualification != int64(0) {
		value := protoreflect.ValueOfInt64(x.TopMinerPocQualification)
		if !f(fd_TokenomicsParamsV1_top_miner_poc_qualification, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_TokenomicsParamsV1) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "inference.inference.TokenomicsParamsV1.subsidy_reduction_interval":
		return x.SubsidyReductionInterval != float64(0) || math.Signbit(x.SubsidyReductionInterval)
	case "inference.inference.TokenomicsParamsV1.subsidy_reduction_amount":
		return x.SubsidyReductionAmount != float32(0) || math.Signbit(float64(x.SubsidyReductionAmount))
	case "inference.inference.TokenomicsParamsV1.current_subsidy_percentage":
		return x.CurrentSubsidyPercentage != float32(0) || math.Signbit(float64(x.CurrentSubsidyPercentage))
	case "inference.inference.TokenomicsParamsV1.top_reward_allowed_failure":
		return x.TopRewardAllowedFailure != float32(0) || math.Signbit(float64(x.TopRewardAllowedFailure))
	case "inference.inference.TokenomicsParamsV1.top_miner_poc_qualification":
		return x.TopMinerPocQualification != int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.TokenomicsParamsV1"))
		}
		panic(fmt.Errorf("message inference.inference.TokenomicsParamsV1 does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TokenomicsParamsV1) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "inference.inference.TokenomicsParamsV1.subsidy_reduction_interval":
		x.SubsidyReductionInterval = float64(0)
	case "inference.inference.TokenomicsParamsV1.subsidy_reduction_amount":
		x.SubsidyReductionAmount = float32(0)
	case "inference.inference.TokenomicsParamsV1.current_subsidy_percentage":
		x.CurrentSubsidyPercentage = float32(0)
	case "inference.inference.TokenomicsParamsV1.top_reward_allowed_failure":
		x.TopRewardAllowedFailure = float32(0)
	case "inference.inference.TokenomicsParamsV1.top_miner_poc_qualification":
		x.TopMinerPocQualification = int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.TokenomicsParamsV1"))
		}
		panic(fmt.Errorf("message inference.inference.TokenomicsParamsV1 does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_TokenomicsParamsV1) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "inference.inference.TokenomicsParamsV1.subsidy_reduction_interval":
		value := x.SubsidyReductionInterval
		return protoreflect.ValueOfFloat64(value)
	case "inference.inference.TokenomicsParamsV1.subsidy_reduction_amount":
		value := x.SubsidyReductionAmount
		return protoreflect.ValueOfFloat32(value)
	case "inference.inference.TokenomicsParamsV1.current_subsidy_percentage":
		value := x.CurrentSubsidyPercentage
		return protoreflect.ValueOfFloat32(value)
	case "inference.inference.TokenomicsParamsV1.top_reward_allowed_failure":
		value := x.TopRewardAllowedFailure
		return protoreflect.ValueOfFloat32(value)
	case "inference.inference.TokenomicsParamsV1.top_miner_poc_qualification":
		value := x.TopMinerPocQualification
		return protoreflect.ValueOfInt64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.TokenomicsParamsV1"))
		}
		panic(fmt.Errorf("message inference.inference.TokenomicsParamsV1 does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TokenomicsParamsV1) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "inference.inference.TokenomicsParamsV1.subsidy_reduction_interval":
		x.SubsidyReductionInterval = value.Float()
	case "inference.inference.TokenomicsParamsV1.subsidy_reduction_amount":
		x.SubsidyReductionAmount = float32(value.Float())
	case "inference.inference.TokenomicsParamsV1.current_subsidy_percentage":
		x.CurrentSubsidyPercentage = float32(value.Float())
	case "inference.inference.TokenomicsParamsV1.top_reward_allowed_failure":
		x.TopRewardAllowedFailure = float32(value.Float())
	case "inference.inference.TokenomicsParamsV1.top_miner_poc_qualification":
		x.TopMinerPocQualification = value.Int()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.TokenomicsParamsV1"))
		}
		panic(fmt.Errorf("message inference.inference.TokenomicsParamsV1 does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TokenomicsParamsV1) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.TokenomicsParamsV1.subsidy_reduction_interval":
		panic(fmt.Errorf("field subsidy_reduction_interval of message inference.inference.TokenomicsParamsV1 is not mutable"))
	case "inference.inference.TokenomicsParamsV1.subsidy_reduction_amount":
		panic(fmt.Errorf("field subsidy_reduction_amount of message inference.inference.TokenomicsParamsV1 is not mutable"))
	case "inference.inference.TokenomicsParamsV1.current_subsidy_percentage":
		panic(fmt.Errorf("field current_subsidy_percentage of message inference.inference.TokenomicsParamsV1 is not mutable"))
	case "inference.inference.TokenomicsParamsV1.top_reward_allowed_failure":
		panic(fmt.Errorf("field top_reward_allowed_failure of message inference.inference.TokenomicsParamsV1 is not mutable"))
	case "inference.inference.TokenomicsParamsV1.top_miner_poc_qualification":
		panic(fmt.Errorf("field top_miner_poc_qualification of message inference.inference.TokenomicsParamsV1 is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.TokenomicsParamsV1"))
		}
		panic(fmt.Errorf("message inference.inference.TokenomicsParamsV1 does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_TokenomicsParamsV1) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.TokenomicsParamsV1.subsidy_reduction_interval":
		return protoreflect.ValueOfFloat64(float64(0))
	case "inference.inference.TokenomicsParamsV1.subsidy_reduction_amount":
		return protoreflect.ValueOfFloat32(float32(0))
	case "inference.inference.TokenomicsParamsV1.current_subsidy_percentage":
		return protoreflect.ValueOfFloat32(float32(0))
	case "inference.inference.TokenomicsParamsV1.top_reward_allowed_failure":
		return protoreflect.ValueOfFloat32(float32(0))
	case "inference.inference.TokenomicsParamsV1.top_miner_poc_qualification":
		return protoreflect.ValueOfInt64(int64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.TokenomicsParamsV1"))
		}
		panic(fmt.Errorf("message inference.inference.TokenomicsParamsV1 does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_TokenomicsParamsV1) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in inference.inference.TokenomicsParamsV1", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_TokenomicsParamsV1) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TokenomicsParamsV1) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_TokenomicsParamsV1) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_TokenomicsParamsV1) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*TokenomicsParamsV1)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.SubsidyReductionInterval != 0 || math.Signbit(x.SubsidyReductionInterval) {
			n += 9
		}
		if x.SubsidyReductionAmount != 0 || math.Signbit(float64(x.SubsidyReductionAmount)) {
			n += 5
		}
		if x.CurrentSubsidyPercentage != 0 || math.Signbit(float64(x.CurrentSubsidyPercentage)) {
			n += 5
		}
		if x.TopRewardAllowedFailure != 0 || math.Signbit(float64(x.TopRewardAllowedFailure)) {
			n += 5
		}
		if x.TopMinerPocQualification != 0 {
			n += 1 + runtime.Sov(uint64(x.TopMinerPocQualification))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*TokenomicsParamsV1)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.TopMinerPocQualification != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TopMinerPocQualification))
			i--
			dAtA[i] = 0x28
		}
		if x.TopRewardAllowedFailure != 0 || math.Signbit(float64(x.TopRewardAllowedFailure)) {
			i -= 4
			binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(x.TopRewardAllowedFailure))))
			i--
			dAtA[i] = 0x25
		}
		if x.CurrentSubsidyPercentage != 0 || math.Signbit(float64(x.CurrentSubsidyPercentage)) {
			i -= 4
			binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(x.CurrentSubsidyPercentage))))
			i--
			dAtA[i] = 0x1d
		}
		if x.SubsidyReductionAmount != 0 || math.Signbit(float64(x.SubsidyReductionAmount)) {
			i -= 4
			binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(x.SubsidyReductionAmount))))
			i--
			dAtA[i] = 0x15
		}
		if x.SubsidyReductionInterval != 0 || math.Signbit(x.SubsidyReductionInterval) {
			i -= 8
			binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(x.SubsidyReductionInterval))))
			i--
			dAtA[i] = 0x9
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*TokenomicsParamsV1)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TokenomicsParamsV1: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TokenomicsParamsV1: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 1 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SubsidyReductionInterval", wireType)
				}
				var v uint64
				if (iNdEx + 8) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				x.SubsidyReductionInterval = float64(math.Float64frombits(v))
			case 2:
				if wireType != 5 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SubsidyReductionAmount", wireType)
				}
				var v uint32
				if (iNdEx + 4) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				x.SubsidyReductionAmount = float32(math.Float32frombits(v))
			case 3:
				if wireType != 5 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CurrentSubsidyPercentage", wireType)
				}
				var v uint32
				if (iNdEx + 4) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				x.CurrentSubsidyPercentage = float32(math.Float32frombits(v))
			case 4:
				if wireType != 5 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TopRewardAllowedFailure", wireType)
				}
				var v uint32
				if (iNdEx + 4) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				x.TopRewardAllowedFailure = float32(math.Float32frombits(v))
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TopMinerPocQualification", wireType)
				}
				x.TopMinerPocQualification = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TopMinerPocQualification |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_EpochParamsV1                               protoreflect.MessageDescriptor
	fd_EpochParamsV1_epoch_length                  protoreflect.FieldDescriptor
	fd_EpochParamsV1_epoch_multiplier              protoreflect.FieldDescriptor
	fd_EpochParamsV1_epoch_shift                   protoreflect.FieldDescriptor
	fd_EpochParamsV1_default_unit_of_compute_price protoreflect.FieldDescriptor
	fd_EpochParamsV1_poc_stage_duration            protoreflect.FieldDescriptor
	fd_EpochParamsV1_poc_exchange_duration         protoreflect.FieldDescriptor
	fd_EpochParamsV1_poc_validation_delay          protoreflect.FieldDescriptor
	fd_EpochParamsV1_poc_validation_duration       protoreflect.FieldDescriptor
)

func init() {
	file_inference_inference_paramsv1_proto_init()
	md_EpochParamsV1 = File_inference_inference_paramsv1_proto.Messages().ByName("EpochParamsV1")
	fd_EpochParamsV1_epoch_length = md_EpochParamsV1.Fields().ByName("epoch_length")
	fd_EpochParamsV1_epoch_multiplier = md_EpochParamsV1.Fields().ByName("epoch_multiplier")
	fd_EpochParamsV1_epoch_shift = md_EpochParamsV1.Fields().ByName("epoch_shift")
	fd_EpochParamsV1_default_unit_of_compute_price = md_EpochParamsV1.Fields().ByName("default_unit_of_compute_price")
	fd_EpochParamsV1_poc_stage_duration = md_EpochParamsV1.Fields().ByName("poc_stage_duration")
	fd_EpochParamsV1_poc_exchange_duration = md_EpochParamsV1.Fields().ByName("poc_exchange_duration")
	fd_EpochParamsV1_poc_validation_delay = md_EpochParamsV1.Fields().ByName("poc_validation_delay")
	fd_EpochParamsV1_poc_validation_duration = md_EpochParamsV1.Fields().ByName("poc_validation_duration")
}

var _ protoreflect.Message = (*fastReflection_EpochParamsV1)(nil)

type fastReflection_EpochParamsV1 EpochParamsV1

func (x *EpochParamsV1) ProtoReflect() protoreflect.Message {
	return (*fastReflection_EpochParamsV1)(x)
}

func (x *EpochParamsV1) slowProtoReflect() protoreflect.Message {
	mi := &file_inference_inference_paramsv1_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_EpochParamsV1_messageType fastReflection_EpochParamsV1_messageType
var _ protoreflect.MessageType = fastReflection_EpochParamsV1_messageType{}

type fastReflection_EpochParamsV1_messageType struct{}

func (x fastReflection_EpochParamsV1_messageType) Zero() protoreflect.Message {
	return (*fastReflection_EpochParamsV1)(nil)
}
func (x fastReflection_EpochParamsV1_messageType) New() protoreflect.Message {
	return new(fastReflection_EpochParamsV1)
}
func (x fastReflection_EpochParamsV1_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_EpochParamsV1
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_EpochParamsV1) Descriptor() protoreflect.MessageDescriptor {
	return md_EpochParamsV1
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_EpochParamsV1) Type() protoreflect.MessageType {
	return _fastReflection_EpochParamsV1_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_EpochParamsV1) New() protoreflect.Message {
	return new(fastReflection_EpochParamsV1)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_EpochParamsV1) Interface() protoreflect.ProtoMessage {
	return (*EpochParamsV1)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_EpochParamsV1) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.EpochLength != int64(0) {
		value := protoreflect.ValueOfInt64(x.EpochLength)
		if !f(fd_EpochParamsV1_epoch_length, value) {
			return
		}
	}
	if x.EpochMultiplier != int64(0) {
		value := protoreflect.ValueOfInt64(x.EpochMultiplier)
		if !f(fd_EpochParamsV1_epoch_multiplier, value) {
			return
		}
	}
	if x.EpochShift != int64(0) {
		value := protoreflect.ValueOfInt64(x.EpochShift)
		if !f(fd_EpochParamsV1_epoch_shift, value) {
			return
		}
	}
	if x.DefaultUnitOfComputePrice != uint64(0) {
		value := protoreflect.ValueOfUint64(x.DefaultUnitOfComputePrice)
		if !f(fd_EpochParamsV1_default_unit_of_compute_price, value) {
			return
		}
	}
	if x.PocStageDuration != int64(0) {
		value := protoreflect.ValueOfInt64(x.PocStageDuration)
		if !f(fd_EpochParamsV1_poc_stage_duration, value) {
			return
		}
	}
	if x.PocExchangeDuration != int64(0) {
		value := protoreflect.ValueOfInt64(x.PocExchangeDuration)
		if !f(fd_EpochParamsV1_poc_exchange_duration, value) {
			return
		}
	}
	if x.PocValidationDelay != int64(0) {
		value := protoreflect.ValueOfInt64(x.PocValidationDelay)
		if !f(fd_EpochParamsV1_poc_validation_delay, value) {
			return
		}
	}
	if x.PocValidationDuration != int64(0) {
		value := protoreflect.ValueOfInt64(x.PocValidationDuration)
		if !f(fd_EpochParamsV1_poc_validation_duration, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_EpochParamsV1) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "inference.inference.EpochParamsV1.epoch_length":
		return x.EpochLength != int64(0)
	case "inference.inference.EpochParamsV1.epoch_multiplier":
		return x.EpochMultiplier != int64(0)
	case "inference.inference.EpochParamsV1.epoch_shift":
		return x.EpochShift != int64(0)
	case "inference.inference.EpochParamsV1.default_unit_of_compute_price":
		return x.DefaultUnitOfComputePrice != uint64(0)
	case "inference.inference.EpochParamsV1.poc_stage_duration":
		return x.PocStageDuration != int64(0)
	case "inference.inference.EpochParamsV1.poc_exchange_duration":
		return x.PocExchangeDuration != int64(0)
	case "inference.inference.EpochParamsV1.poc_validation_delay":
		return x.PocValidationDelay != int64(0)
	case "inference.inference.EpochParamsV1.poc_validation_duration":
		return x.PocValidationDuration != int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.EpochParamsV1"))
		}
		panic(fmt.Errorf("message inference.inference.EpochParamsV1 does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EpochParamsV1) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "inference.inference.EpochParamsV1.epoch_length":
		x.EpochLength = int64(0)
	case "inference.inference.EpochParamsV1.epoch_multiplier":
		x.EpochMultiplier = int64(0)
	case "inference.inference.EpochParamsV1.epoch_shift":
		x.EpochShift = int64(0)
	case "inference.inference.EpochParamsV1.default_unit_of_compute_price":
		x.DefaultUnitOfComputePrice = uint64(0)
	case "inference.inference.EpochParamsV1.poc_stage_duration":
		x.PocStageDuration = int64(0)
	case "inference.inference.EpochParamsV1.poc_exchange_duration":
		x.PocExchangeDuration = int64(0)
	case "inference.inference.EpochParamsV1.poc_validation_delay":
		x.PocValidationDelay = int64(0)
	case "inference.inference.EpochParamsV1.poc_validation_duration":
		x.PocValidationDuration = int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.EpochParamsV1"))
		}
		panic(fmt.Errorf("message inference.inference.EpochParamsV1 does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_EpochParamsV1) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "inference.inference.EpochParamsV1.epoch_length":
		value := x.EpochLength
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.EpochParamsV1.epoch_multiplier":
		value := x.EpochMultiplier
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.EpochParamsV1.epoch_shift":
		value := x.EpochShift
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.EpochParamsV1.default_unit_of_compute_price":
		value := x.DefaultUnitOfComputePrice
		return protoreflect.ValueOfUint64(value)
	case "inference.inference.EpochParamsV1.poc_stage_duration":
		value := x.PocStageDuration
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.EpochParamsV1.poc_exchange_duration":
		value := x.PocExchangeDuration
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.EpochParamsV1.poc_validation_delay":
		value := x.PocValidationDelay
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.EpochParamsV1.poc_validation_duration":
		value := x.PocValidationDuration
		return protoreflect.ValueOfInt64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.EpochParamsV1"))
		}
		panic(fmt.Errorf("message inference.inference.EpochParamsV1 does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EpochParamsV1) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "inference.inference.EpochParamsV1.epoch_length":
		x.EpochLength = value.Int()
	case "inference.inference.EpochParamsV1.epoch_multiplier":
		x.EpochMultiplier = value.Int()
	case "inference.inference.EpochParamsV1.epoch_shift":
		x.EpochShift = value.Int()
	case "inference.inference.EpochParamsV1.default_unit_of_compute_price":
		x.DefaultUnitOfComputePrice = value.Uint()
	case "inference.inference.EpochParamsV1.poc_stage_duration":
		x.PocStageDuration = value.Int()
	case "inference.inference.EpochParamsV1.poc_exchange_duration":
		x.PocExchangeDuration = value.Int()
	case "inference.inference.EpochParamsV1.poc_validation_delay":
		x.PocValidationDelay = value.Int()
	case "inference.inference.EpochParamsV1.poc_validation_duration":
		x.PocValidationDuration = value.Int()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.EpochParamsV1"))
		}
		panic(fmt.Errorf("message inference.inference.EpochParamsV1 does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EpochParamsV1) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.EpochParamsV1.epoch_length":
		panic(fmt.Errorf("field epoch_length of message inference.inference.EpochParamsV1 is not mutable"))
	case "inference.inference.EpochParamsV1.epoch_multiplier":
		panic(fmt.Errorf("field epoch_multiplier of message inference.inference.EpochParamsV1 is not mutable"))
	case "inference.inference.EpochParamsV1.epoch_shift":
		panic(fmt.Errorf("field epoch_shift of message inference.inference.EpochParamsV1 is not mutable"))
	case "inference.inference.EpochParamsV1.default_unit_of_compute_price":
		panic(fmt.Errorf("field default_unit_of_compute_price of message inference.inference.EpochParamsV1 is not mutable"))
	case "inference.inference.EpochParamsV1.poc_stage_duration":
		panic(fmt.Errorf("field poc_stage_duration of message inference.inference.EpochParamsV1 is not mutable"))
	case "inference.inference.EpochParamsV1.poc_exchange_duration":
		panic(fmt.Errorf("field poc_exchange_duration of message inference.inference.EpochParamsV1 is not mutable"))
	case "inference.inference.EpochParamsV1.poc_validation_delay":
		panic(fmt.Errorf("field poc_validation_delay of message inference.inference.EpochParamsV1 is not mutable"))
	case "inference.inference.EpochParamsV1.poc_validation_duration":
		panic(fmt.Errorf("field poc_validation_duration of message inference.inference.EpochParamsV1 is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.EpochParamsV1"))
		}
		panic(fmt.Errorf("message inference.inference.EpochParamsV1 does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_EpochParamsV1) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.EpochParamsV1.epoch_length":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.EpochParamsV1.epoch_multiplier":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.EpochParamsV1.epoch_shift":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.EpochParamsV1.default_unit_of_compute_price":
		return protoreflect.ValueOfUint64(uint64(0))
	case "inference.inference.EpochParamsV1.poc_stage_duration":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.EpochParamsV1.poc_exchange_duration":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.EpochParamsV1.poc_validation_delay":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.EpochParamsV1.poc_validation_duration":
		return protoreflect.ValueOfInt64(int64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.EpochParamsV1"))
		}
		panic(fmt.Errorf("message inference.inference.EpochParamsV1 does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_EpochParamsV1) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in inference.inference.EpochParamsV1", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_EpochParamsV1) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EpochParamsV1) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_EpochParamsV1) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_EpochParamsV1) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*EpochParamsV1)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.EpochLength != 0 {
			n += 1 + runtime.Sov(uint64(x.EpochLength))
		}
		if x.EpochMultiplier != 0 {
			n += 1 + runtime.Sov(uint64(x.EpochMultiplier))
		}
		if x.EpochShift != 0 {
			n += 1 + runtime.Sov(uint64(x.EpochShift))
		}
		if x.DefaultUnitOfComputePrice != 0 {
			n += 1 + runtime.Sov(uint64(x.DefaultUnitOfComputePrice))
		}
		if x.PocStageDuration != 0 {
			n += 1 + runtime.Sov(uint64(x.PocStageDuration))
		}
		if x.PocExchangeDuration != 0 {
			n += 1 + runtime.Sov(uint64(x.PocExchangeDuration))
		}
		if x.PocValidationDelay != 0 {
			n += 1 + runtime.Sov(uint64(x.PocValidationDelay))
		}
		if x.PocValidationDuration != 0 {
			n += 1 + runtime.Sov(uint64(x.PocValidationDuration))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*EpochParamsV1)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.PocValidationDuration != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PocValidationDuration))
			i--
			dAtA[i] = 0x40
		}
		if x.PocValidationDelay != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PocValidationDelay))
			i--
			dAtA[i] = 0x38
		}
		if x.PocExchangeDuration != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PocExchangeDuration))
			i--
			dAtA[i] = 0x30
		}
		if x.PocStageDuration != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PocStageDuration))
			i--
			dAtA[i] = 0x28
		}
		if x.DefaultUnitOfComputePrice != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.DefaultUnitOfComputePrice))
			i--
			dAtA[i] = 0x20
		}
		if x.EpochShift != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EpochShift))
			i--
			dAtA[i] = 0x18
		}
		if x.EpochMultiplier != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EpochMultiplier))
			i--
			dAtA[i] = 0x10
		}
		if x.EpochLength != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EpochLength))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*EpochParamsV1)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EpochParamsV1: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EpochParamsV1: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EpochLength", wireType)
				}
				x.EpochLength = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EpochLength |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EpochMultiplier", wireType)
				}
				x.EpochMultiplier = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EpochMultiplier |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EpochShift", wireType)
				}
				x.EpochShift = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EpochShift |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DefaultUnitOfComputePrice", wireType)
				}
				x.DefaultUnitOfComputePrice = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.DefaultUnitOfComputePrice |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PocStageDuration", wireType)
				}
				x.PocStageDuration = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PocStageDuration |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PocExchangeDuration", wireType)
				}
				x.PocExchangeDuration = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PocExchangeDuration |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PocValidationDelay", wireType)
				}
				x.PocValidationDelay = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PocValidationDelay |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PocValidationDuration", wireType)
				}
				x.PocValidationDuration = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PocValidationDuration |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_ValidationParamsV1                                protoreflect.MessageDescriptor
	fd_ValidationParamsV1_false_positive_rate            protoreflect.FieldDescriptor
	fd_ValidationParamsV1_min_ramp_up_measurements       protoreflect.FieldDescriptor
	fd_ValidationParamsV1_pass_value                     protoreflect.FieldDescriptor
	fd_ValidationParamsV1_min_validation_average         protoreflect.FieldDescriptor
	fd_ValidationParamsV1_max_validation_average         protoreflect.FieldDescriptor
	fd_ValidationParamsV1_expiration_blocks              protoreflect.FieldDescriptor
	fd_ValidationParamsV1_epochs_to_max                  protoreflect.FieldDescriptor
	fd_ValidationParamsV1_full_validation_traffic_cutoff protoreflect.FieldDescriptor
	fd_ValidationParamsV1_min_validation_halfway         protoreflect.FieldDescriptor
	fd_ValidationParamsV1_min_validation_traffic_cutoff  protoreflect.FieldDescriptor
	fd_ValidationParamsV1_miss_percentage_cutoff         protoreflect.FieldDescriptor
	fd_ValidationParamsV1_miss_requests_penalty          protoreflect.FieldDescriptor
)

func init() {
	file_inference_inference_paramsv1_proto_init()
	md_ValidationParamsV1 = File_inference_inference_paramsv1_proto.Messages().ByName("ValidationParamsV1")
	fd_ValidationParamsV1_false_positive_rate = md_ValidationParamsV1.Fields().ByName("false_positive_rate")
	fd_ValidationParamsV1_min_ramp_up_measurements = md_ValidationParamsV1.Fields().ByName("min_ramp_up_measurements")
	fd_ValidationParamsV1_pass_value = md_ValidationParamsV1.Fields().ByName("pass_value")
	fd_ValidationParamsV1_min_validation_average = md_ValidationParamsV1.Fields().ByName("min_validation_average")
	fd_ValidationParamsV1_max_validation_average = md_ValidationParamsV1.Fields().ByName("max_validation_average")
	fd_ValidationParamsV1_expiration_blocks = md_ValidationParamsV1.Fields().ByName("expiration_blocks")
	fd_ValidationParamsV1_epochs_to_max = md_ValidationParamsV1.Fields().ByName("epochs_to_max")
	fd_ValidationParamsV1_full_validation_traffic_cutoff = md_ValidationParamsV1.Fields().ByName("full_validation_traffic_cutoff")
	fd_ValidationParamsV1_min_validation_halfway = md_ValidationParamsV1.Fields().ByName("min_validation_halfway")
	fd_ValidationParamsV1_min_validation_traffic_cutoff = md_ValidationParamsV1.Fields().ByName("min_validation_traffic_cutoff")
	fd_ValidationParamsV1_miss_percentage_cutoff = md_ValidationParamsV1.Fields().ByName("miss_percentage_cutoff")
	fd_ValidationParamsV1_miss_requests_penalty = md_ValidationParamsV1.Fields().ByName("miss_requests_penalty")
}

var _ protoreflect.Message = (*fastReflection_ValidationParamsV1)(nil)

type fastReflection_ValidationParamsV1 ValidationParamsV1

func (x *ValidationParamsV1) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ValidationParamsV1)(x)
}

func (x *ValidationParamsV1) slowProtoReflect() protoreflect.Message {
	mi := &file_inference_inference_paramsv1_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ValidationParamsV1_messageType fastReflection_ValidationParamsV1_messageType
var _ protoreflect.MessageType = fastReflection_ValidationParamsV1_messageType{}

type fastReflection_ValidationParamsV1_messageType struct{}

func (x fastReflection_ValidationParamsV1_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ValidationParamsV1)(nil)
}
func (x fastReflection_ValidationParamsV1_messageType) New() protoreflect.Message {
	return new(fastReflection_ValidationParamsV1)
}
func (x fastReflection_ValidationParamsV1_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ValidationParamsV1
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ValidationParamsV1) Descriptor() protoreflect.MessageDescriptor {
	return md_ValidationParamsV1
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ValidationParamsV1) Type() protoreflect.MessageType {
	return _fastReflection_ValidationParamsV1_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ValidationParamsV1) New() protoreflect.Message {
	return new(fastReflection_ValidationParamsV1)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ValidationParamsV1) Interface() protoreflect.ProtoMessage {
	return (*ValidationParamsV1)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ValidationParamsV1) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.FalsePositiveRate != float64(0) || math.Signbit(x.FalsePositiveRate) {
		value := protoreflect.ValueOfFloat64(x.FalsePositiveRate)
		if !f(fd_ValidationParamsV1_false_positive_rate, value) {
			return
		}
	}
	if x.MinRampUpMeasurements != uint32(0) {
		value := protoreflect.ValueOfUint32(x.MinRampUpMeasurements)
		if !f(fd_ValidationParamsV1_min_ramp_up_measurements, value) {
			return
		}
	}
	if x.PassValue != float64(0) || math.Signbit(x.PassValue) {
		value := protoreflect.ValueOfFloat64(x.PassValue)
		if !f(fd_ValidationParamsV1_pass_value, value) {
			return
		}
	}
	if x.MinValidationAverage != float64(0) || math.Signbit(x.MinValidationAverage) {
		value := protoreflect.ValueOfFloat64(x.MinValidationAverage)
		if !f(fd_ValidationParamsV1_min_validation_average, value) {
			return
		}
	}
	if x.MaxValidationAverage != float64(0) || math.Signbit(x.MaxValidationAverage) {
		value := protoreflect.ValueOfFloat64(x.MaxValidationAverage)
		if !f(fd_ValidationParamsV1_max_validation_average, value) {
			return
		}
	}
	if x.ExpirationBlocks != int64(0) {
		value := protoreflect.ValueOfInt64(x.ExpirationBlocks)
		if !f(fd_ValidationParamsV1_expiration_blocks, value) {
			return
		}
	}
	if x.EpochsToMax != int64(0) {
		value := protoreflect.ValueOfInt64(x.EpochsToMax)
		if !f(fd_ValidationParamsV1_epochs_to_max, value) {
			return
		}
	}
	if x.FullValidationTrafficCutoff != int64(0) {
		value := protoreflect.ValueOfInt64(x.FullValidationTrafficCutoff)
		if !f(fd_ValidationParamsV1_full_validation_traffic_cutoff, value) {
			return
		}
	}
	if x.MinValidationHalfway != float64(0) || math.Signbit(x.MinValidationHalfway) {
		value := protoreflect.ValueOfFloat64(x.MinValidationHalfway)
		if !f(fd_ValidationParamsV1_min_validation_halfway, value) {
			return
		}
	}
	if x.MinValidationTrafficCutoff != int64(0) {
		value := protoreflect.ValueOfInt64(x.MinValidationTrafficCutoff)
		if !f(fd_ValidationParamsV1_min_validation_traffic_cutoff, value) {
			return
		}
	}
	if x.MissPercentageCutoff != float64(0) || math.Signbit(x.MissPercentageCutoff) {
		value := protoreflect.ValueOfFloat64(x.MissPercentageCutoff)
		if !f(fd_ValidationParamsV1_miss_percentage_cutoff, value) {
			return
		}
	}
	if x.MissRequestsPenalty != float64(0) || math.Signbit(x.MissRequestsPenalty) {
		value := protoreflect.ValueOfFloat64(x.MissRequestsPenalty)
		if !f(fd_ValidationParamsV1_miss_requests_penalty, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ValidationParamsV1) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "inference.inference.ValidationParamsV1.false_positive_rate":
		return x.FalsePositiveRate != float64(0) || math.Signbit(x.FalsePositiveRate)
	case "inference.inference.ValidationParamsV1.min_ramp_up_measurements":
		return x.MinRampUpMeasurements != uint32(0)
	case "inference.inference.ValidationParamsV1.pass_value":
		return x.PassValue != float64(0) || math.Signbit(x.PassValue)
	case "inference.inference.ValidationParamsV1.min_validation_average":
		return x.MinValidationAverage != float64(0) || math.Signbit(x.MinValidationAverage)
	case "inference.inference.ValidationParamsV1.max_validation_average":
		return x.MaxValidationAverage != float64(0) || math.Signbit(x.MaxValidationAverage)
	case "inference.inference.ValidationParamsV1.expiration_blocks":
		return x.ExpirationBlocks != int64(0)
	case "inference.inference.ValidationParamsV1.epochs_to_max":
		return x.EpochsToMax != int64(0)
	case "inference.inference.ValidationParamsV1.full_validation_traffic_cutoff":
		return x.FullValidationTrafficCutoff != int64(0)
	case "inference.inference.ValidationParamsV1.min_validation_halfway":
		return x.MinValidationHalfway != float64(0) || math.Signbit(x.MinValidationHalfway)
	case "inference.inference.ValidationParamsV1.min_validation_traffic_cutoff":
		return x.MinValidationTrafficCutoff != int64(0)
	case "inference.inference.ValidationParamsV1.miss_percentage_cutoff":
		return x.MissPercentageCutoff != float64(0) || math.Signbit(x.MissPercentageCutoff)
	case "inference.inference.ValidationParamsV1.miss_requests_penalty":
		return x.MissRequestsPenalty != float64(0) || math.Signbit(x.MissRequestsPenalty)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.ValidationParamsV1"))
		}
		panic(fmt.Errorf("message inference.inference.ValidationParamsV1 does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ValidationParamsV1) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "inference.inference.ValidationParamsV1.false_positive_rate":
		x.FalsePositiveRate = float64(0)
	case "inference.inference.ValidationParamsV1.min_ramp_up_measurements":
		x.MinRampUpMeasurements = uint32(0)
	case "inference.inference.ValidationParamsV1.pass_value":
		x.PassValue = float64(0)
	case "inference.inference.ValidationParamsV1.min_validation_average":
		x.MinValidationAverage = float64(0)
	case "inference.inference.ValidationParamsV1.max_validation_average":
		x.MaxValidationAverage = float64(0)
	case "inference.inference.ValidationParamsV1.expiration_blocks":
		x.ExpirationBlocks = int64(0)
	case "inference.inference.ValidationParamsV1.epochs_to_max":
		x.EpochsToMax = int64(0)
	case "inference.inference.ValidationParamsV1.full_validation_traffic_cutoff":
		x.FullValidationTrafficCutoff = int64(0)
	case "inference.inference.ValidationParamsV1.min_validation_halfway":
		x.MinValidationHalfway = float64(0)
	case "inference.inference.ValidationParamsV1.min_validation_traffic_cutoff":
		x.MinValidationTrafficCutoff = int64(0)
	case "inference.inference.ValidationParamsV1.miss_percentage_cutoff":
		x.MissPercentageCutoff = float64(0)
	case "inference.inference.ValidationParamsV1.miss_requests_penalty":
		x.MissRequestsPenalty = float64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.ValidationParamsV1"))
		}
		panic(fmt.Errorf("message inference.inference.ValidationParamsV1 does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ValidationParamsV1) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "inference.inference.ValidationParamsV1.false_positive_rate":
		value := x.FalsePositiveRate
		return protoreflect.ValueOfFloat64(value)
	case "inference.inference.ValidationParamsV1.min_ramp_up_measurements":
		value := x.MinRampUpMeasurements
		return protoreflect.ValueOfUint32(value)
	case "inference.inference.ValidationParamsV1.pass_value":
		value := x.PassValue
		return protoreflect.ValueOfFloat64(value)
	case "inference.inference.ValidationParamsV1.min_validation_average":
		value := x.MinValidationAverage
		return protoreflect.ValueOfFloat64(value)
	case "inference.inference.ValidationParamsV1.max_validation_average":
		value := x.MaxValidationAverage
		return protoreflect.ValueOfFloat64(value)
	case "inference.inference.ValidationParamsV1.expiration_blocks":
		value := x.ExpirationBlocks
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.ValidationParamsV1.epochs_to_max":
		value := x.EpochsToMax
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.ValidationParamsV1.full_validation_traffic_cutoff":
		value := x.FullValidationTrafficCutoff
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.ValidationParamsV1.min_validation_halfway":
		value := x.MinValidationHalfway
		return protoreflect.ValueOfFloat64(value)
	case "inference.inference.ValidationParamsV1.min_validation_traffic_cutoff":
		value := x.MinValidationTrafficCutoff
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.ValidationParamsV1.miss_percentage_cutoff":
		value := x.MissPercentageCutoff
		return protoreflect.ValueOfFloat64(value)
	case "inference.inference.ValidationParamsV1.miss_requests_penalty":
		value := x.MissRequestsPenalty
		return protoreflect.ValueOfFloat64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.ValidationParamsV1"))
		}
		panic(fmt.Errorf("message inference.inference.ValidationParamsV1 does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ValidationParamsV1) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "inference.inference.ValidationParamsV1.false_positive_rate":
		x.FalsePositiveRate = value.Float()
	case "inference.inference.ValidationParamsV1.min_ramp_up_measurements":
		x.MinRampUpMeasurements = uint32(value.Uint())
	case "inference.inference.ValidationParamsV1.pass_value":
		x.PassValue = value.Float()
	case "inference.inference.ValidationParamsV1.min_validation_average":
		x.MinValidationAverage = value.Float()
	case "inference.inference.ValidationParamsV1.max_validation_average":
		x.MaxValidationAverage = value.Float()
	case "inference.inference.ValidationParamsV1.expiration_blocks":
		x.ExpirationBlocks = value.Int()
	case "inference.inference.ValidationParamsV1.epochs_to_max":
		x.EpochsToMax = value.Int()
	case "inference.inference.ValidationParamsV1.full_validation_traffic_cutoff":
		x.FullValidationTrafficCutoff = value.Int()
	case "inference.inference.ValidationParamsV1.min_validation_halfway":
		x.MinValidationHalfway = value.Float()
	case "inference.inference.ValidationParamsV1.min_validation_traffic_cutoff":
		x.MinValidationTrafficCutoff = value.Int()
	case "inference.inference.ValidationParamsV1.miss_percentage_cutoff":
		x.MissPercentageCutoff = value.Float()
	case "inference.inference.ValidationParamsV1.miss_requests_penalty":
		x.MissRequestsPenalty = value.Float()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.ValidationParamsV1"))
		}
		panic(fmt.Errorf("message inference.inference.ValidationParamsV1 does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ValidationParamsV1) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.ValidationParamsV1.false_positive_rate":
		panic(fmt.Errorf("field false_positive_rate of message inference.inference.ValidationParamsV1 is not mutable"))
	case "inference.inference.ValidationParamsV1.min_ramp_up_measurements":
		panic(fmt.Errorf("field min_ramp_up_measurements of message inference.inference.ValidationParamsV1 is not mutable"))
	case "inference.inference.ValidationParamsV1.pass_value":
		panic(fmt.Errorf("field pass_value of message inference.inference.ValidationParamsV1 is not mutable"))
	case "inference.inference.ValidationParamsV1.min_validation_average":
		panic(fmt.Errorf("field min_validation_average of message inference.inference.ValidationParamsV1 is not mutable"))
	case "inference.inference.ValidationParamsV1.max_validation_average":
		panic(fmt.Errorf("field max_validation_average of message inference.inference.ValidationParamsV1 is not mutable"))
	case "inference.inference.ValidationParamsV1.expiration_blocks":
		panic(fmt.Errorf("field expiration_blocks of message inference.inference.ValidationParamsV1 is not mutable"))
	case "inference.inference.ValidationParamsV1.epochs_to_max":
		panic(fmt.Errorf("field epochs_to_max of message inference.inference.ValidationParamsV1 is not mutable"))
	case "inference.inference.ValidationParamsV1.full_validation_traffic_cutoff":
		panic(fmt.Errorf("field full_validation_traffic_cutoff of message inference.inference.ValidationParamsV1 is not mutable"))
	case "inference.inference.ValidationParamsV1.min_validation_halfway":
		panic(fmt.Errorf("field min_validation_halfway of message inference.inference.ValidationParamsV1 is not mutable"))
	case "inference.inference.ValidationParamsV1.min_validation_traffic_cutoff":
		panic(fmt.Errorf("field min_validation_traffic_cutoff of message inference.inference.ValidationParamsV1 is not mutable"))
	case "inference.inference.ValidationParamsV1.miss_percentage_cutoff":
		panic(fmt.Errorf("field miss_percentage_cutoff of message inference.inference.ValidationParamsV1 is not mutable"))
	case "inference.inference.ValidationParamsV1.miss_requests_penalty":
		panic(fmt.Errorf("field miss_requests_penalty of message inference.inference.ValidationParamsV1 is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.ValidationParamsV1"))
		}
		panic(fmt.Errorf("message inference.inference.ValidationParamsV1 does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ValidationParamsV1) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.ValidationParamsV1.false_positive_rate":
		return protoreflect.ValueOfFloat64(float64(0))
	case "inference.inference.ValidationParamsV1.min_ramp_up_measurements":
		return protoreflect.ValueOfUint32(uint32(0))
	case "inference.inference.ValidationParamsV1.pass_value":
		return protoreflect.ValueOfFloat64(float64(0))
	case "inference.inference.ValidationParamsV1.min_validation_average":
		return protoreflect.ValueOfFloat64(float64(0))
	case "inference.inference.ValidationParamsV1.max_validation_average":
		return protoreflect.ValueOfFloat64(float64(0))
	case "inference.inference.ValidationParamsV1.expiration_blocks":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.ValidationParamsV1.epochs_to_max":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.ValidationParamsV1.full_validation_traffic_cutoff":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.ValidationParamsV1.min_validation_halfway":
		return protoreflect.ValueOfFloat64(float64(0))
	case "inference.inference.ValidationParamsV1.min_validation_traffic_cutoff":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.ValidationParamsV1.miss_percentage_cutoff":
		return protoreflect.ValueOfFloat64(float64(0))
	case "inference.inference.ValidationParamsV1.miss_requests_penalty":
		return protoreflect.ValueOfFloat64(float64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.ValidationParamsV1"))
		}
		panic(fmt.Errorf("message inference.inference.ValidationParamsV1 does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ValidationParamsV1) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in inference.inference.ValidationParamsV1", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ValidationParamsV1) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ValidationParamsV1) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ValidationParamsV1) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ValidationParamsV1) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ValidationParamsV1)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.FalsePositiveRate != 0 || math.Signbit(x.FalsePositiveRate) {
			n += 9
		}
		if x.MinRampUpMeasurements != 0 {
			n += 1 + runtime.Sov(uint64(x.MinRampUpMeasurements))
		}
		if x.PassValue != 0 || math.Signbit(x.PassValue) {
			n += 9
		}
		if x.MinValidationAverage != 0 || math.Signbit(x.MinValidationAverage) {
			n += 9
		}
		if x.MaxValidationAverage != 0 || math.Signbit(x.MaxValidationAverage) {
			n += 9
		}
		if x.ExpirationBlocks != 0 {
			n += 1 + runtime.Sov(uint64(x.ExpirationBlocks))
		}
		if x.EpochsToMax != 0 {
			n += 1 + runtime.Sov(uint64(x.EpochsToMax))
		}
		if x.FullValidationTrafficCutoff != 0 {
			n += 1 + runtime.Sov(uint64(x.FullValidationTrafficCutoff))
		}
		if x.MinValidationHalfway != 0 || math.Signbit(x.MinValidationHalfway) {
			n += 9
		}
		if x.MinValidationTrafficCutoff != 0 {
			n += 1 + runtime.Sov(uint64(x.MinValidationTrafficCutoff))
		}
		if x.MissPercentageCutoff != 0 || math.Signbit(x.MissPercentageCutoff) {
			n += 9
		}
		if x.MissRequestsPenalty != 0 || math.Signbit(x.MissRequestsPenalty) {
			n += 9
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ValidationParamsV1)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.MissRequestsPenalty != 0 || math.Signbit(x.MissRequestsPenalty) {
			i -= 8
			binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(x.MissRequestsPenalty))))
			i--
			dAtA[i] = 0x61
		}
		if x.MissPercentageCutoff != 0 || math.Signbit(x.MissPercentageCutoff) {
			i -= 8
			binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(x.MissPercentageCutoff))))
			i--
			dAtA[i] = 0x59
		}
		if x.MinValidationTrafficCutoff != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MinValidationTrafficCutoff))
			i--
			dAtA[i] = 0x50
		}
		if x.MinValidationHalfway != 0 || math.Signbit(x.MinValidationHalfway) {
			i -= 8
			binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(x.MinValidationHalfway))))
			i--
			dAtA[i] = 0x49
		}
		if x.FullValidationTrafficCutoff != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.FullValidationTrafficCutoff))
			i--
			dAtA[i] = 0x40
		}
		if x.EpochsToMax != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EpochsToMax))
			i--
			dAtA[i] = 0x38
		}
		if x.ExpirationBlocks != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ExpirationBlocks))
			i--
			dAtA[i] = 0x30
		}
		if x.MaxValidationAverage != 0 || math.Signbit(x.MaxValidationAverage) {
			i -= 8
			binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(x.MaxValidationAverage))))
			i--
			dAtA[i] = 0x29
		}
		if x.MinValidationAverage != 0 || math.Signbit(x.MinValidationAverage) {
			i -= 8
			binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(x.MinValidationAverage))))
			i--
			dAtA[i] = 0x21
		}
		if x.PassValue != 0 || math.Signbit(x.PassValue) {
			i -= 8
			binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(x.PassValue))))
			i--
			dAtA[i] = 0x19
		}
		if x.MinRampUpMeasurements != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MinRampUpMeasurements))
			i--
			dAtA[i] = 0x10
		}
		if x.FalsePositiveRate != 0 || math.Signbit(x.FalsePositiveRate) {
			i -= 8
			binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(x.FalsePositiveRate))))
			i--
			dAtA[i] = 0x9
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ValidationParamsV1)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ValidationParamsV1: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ValidationParamsV1: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 1 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FalsePositiveRate", wireType)
				}
				var v uint64
				if (iNdEx + 8) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				x.FalsePositiveRate = float64(math.Float64frombits(v))
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MinRampUpMeasurements", wireType)
				}
				x.MinRampUpMeasurements = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MinRampUpMeasurements |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 1 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PassValue", wireType)
				}
				var v uint64
				if (iNdEx + 8) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				x.PassValue = float64(math.Float64frombits(v))
			case 4:
				if wireType != 1 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MinValidationAverage", wireType)
				}
				var v uint64
				if (iNdEx + 8) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				x.MinValidationAverage = float64(math.Float64frombits(v))
			case 5:
				if wireType != 1 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxValidationAverage", wireType)
				}
				var v uint64
				if (iNdEx + 8) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				x.MaxValidationAverage = float64(math.Float64frombits(v))
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ExpirationBlocks", wireType)
				}
				x.ExpirationBlocks = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ExpirationBlocks |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EpochsToMax", wireType)
				}
				x.EpochsToMax = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EpochsToMax |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FullValidationTrafficCutoff", wireType)
				}
				x.FullValidationTrafficCutoff = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.FullValidationTrafficCutoff |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 9:
				if wireType != 1 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MinValidationHalfway", wireType)
				}
				var v uint64
				if (iNdEx + 8) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				x.MinValidationHalfway = float64(math.Float64frombits(v))
			case 10:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MinValidationTrafficCutoff", wireType)
				}
				x.MinValidationTrafficCutoff = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MinValidationTrafficCutoff |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 11:
				if wireType != 1 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MissPercentageCutoff", wireType)
				}
				var v uint64
				if (iNdEx + 8) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				x.MissPercentageCutoff = float64(math.Float64frombits(v))
			case 12:
				if wireType != 1 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MissRequestsPenalty", wireType)
				}
				var v uint64
				if (iNdEx + 8) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				x.MissRequestsPenalty = float64(math.Float64frombits(v))
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_PocParamsV1                    protoreflect.MessageDescriptor
	fd_PocParamsV1_default_difficulty protoreflect.FieldDescriptor
)

func init() {
	file_inference_inference_paramsv1_proto_init()
	md_PocParamsV1 = File_inference_inference_paramsv1_proto.Messages().ByName("PocParamsV1")
	fd_PocParamsV1_default_difficulty = md_PocParamsV1.Fields().ByName("default_difficulty")
}

var _ protoreflect.Message = (*fastReflection_PocParamsV1)(nil)

type fastReflection_PocParamsV1 PocParamsV1

func (x *PocParamsV1) ProtoReflect() protoreflect.Message {
	return (*fastReflection_PocParamsV1)(x)
}

func (x *PocParamsV1) slowProtoReflect() protoreflect.Message {
	mi := &file_inference_inference_paramsv1_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_PocParamsV1_messageType fastReflection_PocParamsV1_messageType
var _ protoreflect.MessageType = fastReflection_PocParamsV1_messageType{}

type fastReflection_PocParamsV1_messageType struct{}

func (x fastReflection_PocParamsV1_messageType) Zero() protoreflect.Message {
	return (*fastReflection_PocParamsV1)(nil)
}
func (x fastReflection_PocParamsV1_messageType) New() protoreflect.Message {
	return new(fastReflection_PocParamsV1)
}
func (x fastReflection_PocParamsV1_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_PocParamsV1
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_PocParamsV1) Descriptor() protoreflect.MessageDescriptor {
	return md_PocParamsV1
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_PocParamsV1) Type() protoreflect.MessageType {
	return _fastReflection_PocParamsV1_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_PocParamsV1) New() protoreflect.Message {
	return new(fastReflection_PocParamsV1)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_PocParamsV1) Interface() protoreflect.ProtoMessage {
	return (*PocParamsV1)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_PocParamsV1) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.DefaultDifficulty != uint32(0) {
		value := protoreflect.ValueOfUint32(x.DefaultDifficulty)
		if !f(fd_PocParamsV1_default_difficulty, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_PocParamsV1) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "inference.inference.PocParamsV1.default_difficulty":
		return x.DefaultDifficulty != uint32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.PocParamsV1"))
		}
		panic(fmt.Errorf("message inference.inference.PocParamsV1 does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PocParamsV1) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "inference.inference.PocParamsV1.default_difficulty":
		x.DefaultDifficulty = uint32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.PocParamsV1"))
		}
		panic(fmt.Errorf("message inference.inference.PocParamsV1 does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_PocParamsV1) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "inference.inference.PocParamsV1.default_difficulty":
		value := x.DefaultDifficulty
		return protoreflect.ValueOfUint32(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.PocParamsV1"))
		}
		panic(fmt.Errorf("message inference.inference.PocParamsV1 does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PocParamsV1) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "inference.inference.PocParamsV1.default_difficulty":
		x.DefaultDifficulty = uint32(value.Uint())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.PocParamsV1"))
		}
		panic(fmt.Errorf("message inference.inference.PocParamsV1 does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PocParamsV1) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.PocParamsV1.default_difficulty":
		panic(fmt.Errorf("field default_difficulty of message inference.inference.PocParamsV1 is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.PocParamsV1"))
		}
		panic(fmt.Errorf("message inference.inference.PocParamsV1 does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_PocParamsV1) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.PocParamsV1.default_difficulty":
		return protoreflect.ValueOfUint32(uint32(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.PocParamsV1"))
		}
		panic(fmt.Errorf("message inference.inference.PocParamsV1 does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_PocParamsV1) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in inference.inference.PocParamsV1", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_PocParamsV1) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PocParamsV1) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_PocParamsV1) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_PocParamsV1) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*PocParamsV1)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.DefaultDifficulty != 0 {
			n += 1 + runtime.Sov(uint64(x.DefaultDifficulty))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*PocParamsV1)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.DefaultDifficulty != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.DefaultDifficulty))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*PocParamsV1)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PocParamsV1: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PocParamsV1: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DefaultDifficulty", wireType)
				}
				x.DefaultDifficulty = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.DefaultDifficulty |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: inference/inference/paramsv1.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Params defines the parameters for the module.
type ParamsV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EpochParams      *EpochParamsV1      `protobuf:"bytes,1,opt,name=epoch_params,json=epochParams,proto3" json:"epoch_params,omitempty"`
	ValidationParams *ValidationParamsV1 `protobuf:"bytes,2,opt,name=validation_params,json=validationParams,proto3" json:"validation_params,omitempty"`
	PocParams        *PocParamsV1        `protobuf:"bytes,3,opt,name=poc_params,json=pocParams,proto3" json:"poc_params,omitempty"`
	TokenomicsParams *TokenomicsParamsV1 `protobuf:"bytes,4,opt,name=tokenomics_params,json=tokenomicsParams,proto3" json:"tokenomics_params,omitempty"`
}

func (x *ParamsV1) Reset() {
	*x = ParamsV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_inference_paramsv1_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParamsV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParamsV1) ProtoMessage() {}

// Deprecated: Use ParamsV1.ProtoReflect.Descriptor instead.
func (*ParamsV1) Descriptor() ([]byte, []int) {
	return file_inference_inference_paramsv1_proto_rawDescGZIP(), []int{0}
}

func (x *ParamsV1) GetEpochParams() *EpochParamsV1 {
	if x != nil {
		return x.EpochParams
	}
	return nil
}

func (x *ParamsV1) GetValidationParams() *ValidationParamsV1 {
	if x != nil {
		return x.ValidationParams
	}
	return nil
}

func (x *ParamsV1) GetPocParams() *PocParamsV1 {
	if x != nil {
		return x.PocParams
	}
	return nil
}

func (x *ParamsV1) GetTokenomicsParams() *TokenomicsParamsV1 {
	if x != nil {
		return x.TokenomicsParams
	}
	return nil
}

type TokenomicsParamsV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubsidyReductionInterval float64 `protobuf:"fixed64,1,opt,name=subsidy_reduction_interval,json=subsidyReductionInterval,proto3" json:"subsidy_reduction_interval,omitempty"`
	SubsidyReductionAmount   float32 `protobuf:"fixed32,2,opt,name=subsidy_reduction_amount,json=subsidyReductionAmount,proto3" json:"subsidy_reduction_amount,omitempty"`
	CurrentSubsidyPercentage float32 `protobuf:"fixed32,3,opt,name=current_subsidy_percentage,json=currentSubsidyPercentage,proto3" json:"current_subsidy_percentage,omitempty"`
	TopRewardAllowedFailure  float32 `protobuf:"fixed32,4,opt,name=top_reward_allowed_failure,json=topRewardAllowedFailure,proto3" json:"top_reward_allowed_failure,omitempty"`
	TopMinerPocQualification int64   `protobuf:"varint,5,opt,name=top_miner_poc_qualification,json=topMinerPocQualification,proto3" json:"top_miner_poc_qualification,omitempty"`
}

func (x *TokenomicsParamsV1) Reset() {
	*x = TokenomicsParamsV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_inference_paramsv1_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenomicsParamsV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenomicsParamsV1) ProtoMessage() {}

// Deprecated: Use TokenomicsParamsV1.ProtoReflect.Descriptor instead.
func (*TokenomicsParamsV1) Descriptor() ([]byte, []int) {
	return file_inference_inference_paramsv1_proto_rawDescGZIP(), []int{1}
}

func (x *TokenomicsParamsV1) GetSubsidyReductionInterval() float64 {
	if x != nil {
		return x.SubsidyReductionInterval
	}
	return 0
}

func (x *TokenomicsParamsV1) GetSubsidyReductionAmount() float32 {
	if x != nil {
		return x.SubsidyReductionAmount
	}
	return 0
}

func (x *TokenomicsParamsV1) GetCurrentSubsidyPercentage() float32 {
	if x != nil {
		return x.CurrentSubsidyPercentage
	}
	return 0
}

func (x *TokenomicsParamsV1) GetTopRewardAllowedFailure() float32 {
	if x != nil {
		return x.TopRewardAllowedFailure
	}
	return 0
}

func (x *TokenomicsParamsV1) GetTopMinerPocQualification() int64 {
	if x != nil {
		return x.TopMinerPocQualification
	}
	return 0
}

type EpochParamsV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EpochLength               int64  `protobuf:"varint,1,opt,name=epoch_length,json=epochLength,proto3" json:"epoch_length,omitempty"`
	EpochMultiplier           int64  `protobuf:"varint,2,opt,name=epoch_multiplier,json=epochMultiplier,proto3" json:"epoch_multiplier,omitempty"`
	EpochShift                int64  `protobuf:"varint,3,opt,name=epoch_shift,json=epochShift,proto3" json:"epoch_shift,omitempty"`
	DefaultUnitOfComputePrice uint64 `protobuf:"varint,4,opt,name=default_unit_of_compute_price,json=defaultUnitOfComputePrice,proto3" json:"default_unit_of_compute_price,omitempty"`
	PocStageDuration          int64  `protobuf:"varint,5,opt,name=poc_stage_duration,json=pocStageDuration,proto3" json:"poc_stage_duration,omitempty"`
	PocExchangeDuration       int64  `protobuf:"varint,6,opt,name=poc_exchange_duration,json=pocExchangeDuration,proto3" json:"poc_exchange_duration,omitempty"`
	PocValidationDelay        int64  `protobuf:"varint,7,opt,name=poc_validation_delay,json=pocValidationDelay,proto3" json:"poc_validation_delay,omitempty"`
	PocValidationDuration     int64  `protobuf:"varint,8,opt,name=poc_validation_duration,json=pocValidationDuration,proto3" json:"poc_validation_duration,omitempty"`
}

func (x *EpochParamsV1) Reset() {
	*x = EpochParamsV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_inference_paramsv1_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpochParamsV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpochParamsV1) ProtoMessage() {}

// Deprecated: Use EpochParamsV1.ProtoReflect.Descriptor instead.
func (*EpochParamsV1) Descriptor() ([]byte, []int) {
	return file_inference_inference_paramsv1_proto_rawDescGZIP(), []int{2}
}

func (x *EpochParamsV1) GetEpochLength() int64 {
	if x != nil {
		return x.EpochLength
	}
	return 0
}

func (x *EpochParamsV1) GetEpochMultiplier() int64 {
	if x != nil {
		return x.EpochMultiplier
	}
	return 0
}

func (x *EpochParamsV1) GetEpochShift() int64 {
	if x != nil {
		return x.EpochShift
	}
	return 0
}

func (x *EpochParamsV1) GetDefaultUnitOfComputePrice() uint64 {
	if x != nil {
		return x.DefaultUnitOfComputePrice
	}
	return 0
}

func (x *EpochParamsV1) GetPocStageDuration() int64 {
	if x != nil {
		return x.PocStageDuration
	}
	return 0
}

func (x *EpochParamsV1) GetPocExchangeDuration() int64 {
	if x != nil {
		return x.PocExchangeDuration
	}
	return 0
}

func (x *EpochParamsV1) GetPocValidationDelay() int64 {
	if x != nil {
		return x.PocValidationDelay
	}
	return 0
}

func (x *EpochParamsV1) GetPocValidationDuration() int64 {
	if x != nil {
		return x.PocValidationDuration
	}
	return 0
}

type ValidationParamsV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FalsePositiveRate           float64 `protobuf:"fixed64,1,opt,name=false_positive_rate,json=falsePositiveRate,proto3" json:"false_positive_rate,omitempty"`
	MinRampUpMeasurements       uint32  `protobuf:"varint,2,opt,name=min_ramp_up_measurements,json=minRampUpMeasurements,proto3" json:"min_ramp_up_measurements,omitempty"`
	PassValue                   float64 `protobuf:"fixed64,3,opt,name=pass_value,json=passValue,proto3" json:"pass_value,omitempty"`
	MinValidationAverage        float64 `protobuf:"fixed64,4,opt,name=min_validation_average,json=minValidationAverage,proto3" json:"min_validation_average,omitempty"`
	MaxValidationAverage        float64 `protobuf:"fixed64,5,opt,name=max_validation_average,json=maxValidationAverage,proto3" json:"max_validation_average,omitempty"`
	ExpirationBlocks            int64   `protobuf:"varint,6,opt,name=expiration_blocks,json=expirationBlocks,proto3" json:"expiration_blocks,omitempty"`
	EpochsToMax                 int64   `protobuf:"varint,7,opt,name=epochs_to_max,json=epochsToMax,proto3" json:"epochs_to_max,omitempty"`
	FullValidationTrafficCutoff int64   `protobuf:"varint,8,opt,name=full_validation_traffic_cutoff,json=fullValidationTrafficCutoff,proto3" json:"full_validation_traffic_cutoff,omitempty"`
	MinValidationHalfway        float64 `protobuf:"fixed64,9,opt,name=min_validation_halfway,json=minValidationHalfway,proto3" json:"min_validation_halfway,omitempty"`
	MinValidationTrafficCutoff  int64   `protobuf:"varint,10,opt,name=min_validation_traffic_cutoff,json=minValidationTrafficCutoff,proto3" json:"min_validation_traffic_cutoff,omitempty"`
	MissPercentageCutoff        float64 `protobuf:"fixed64,11,opt,name=miss_percentage_cutoff,json=missPercentageCutoff,proto3" json:"miss_percentage_cutoff,omitempty"`
	MissRequestsPenalty         float64 `protobuf:"fixed64,12,opt,name=miss_requests_penalty,json=missRequestsPenalty,proto3" json:"miss_requests_penalty,omitempty"`
}

func (x *ValidationParamsV1) Reset() {
	*x = ValidationParamsV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_inference_paramsv1_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidationParamsV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationParamsV1) ProtoMessage() {}

// Deprecated: Use ValidationParamsV1.ProtoReflect.Descriptor instead.
func (*ValidationParamsV1) Descriptor() ([]byte, []int) {
	return file_inference_inference_paramsv1_proto_rawDescGZIP(), []int{3}
}

func (x *ValidationParamsV1) GetFalsePositiveRate() float64 {
	if x != nil {
		return x.FalsePositiveRate
	}
	return 0
}

func (x *ValidationParamsV1) GetMinRampUpMeasurements() uint32 {
	if x != nil {
		return x.MinRampUpMeasurements
	}
	return 0
}

func (x *ValidationParamsV1) GetPassValue() float64 {
	if x != nil {
		return x.PassValue
	}
	return 0
}

func (x *ValidationParamsV1) GetMinValidationAverage() float64 {
	if x != nil {
		return x.MinValidationAverage
	}
	return 0
}

func (x *ValidationParamsV1) GetMaxValidationAverage() float64 {
	if x != nil {
		return x.MaxValidationAverage
	}
	return 0
}

func (x *ValidationParamsV1) GetExpirationBlocks() int64 {
	if x != nil {
		return x.ExpirationBlocks
	}
	return 0
}

func (x *ValidationParamsV1) GetEpochsToMax() int64 {
	if x != nil {
		return x.EpochsToMax
	}
	return 0
}

func (x *ValidationParamsV1) GetFullValidationTrafficCutoff() int64 {
	if x != nil {
		return x.FullValidationTrafficCutoff
	}
	return 0
}

func (x *ValidationParamsV1) GetMinValidationHalfway() float64 {
	if x != nil {
		return x.MinValidationHalfway
	}
	return 0
}

func (x *ValidationParamsV1) GetMinValidationTrafficCutoff() int64 {
	if x != nil {
		return x.MinValidationTrafficCutoff
	}
	return 0
}

func (x *ValidationParamsV1) GetMissPercentageCutoff() float64 {
	if x != nil {
		return x.MissPercentageCutoff
	}
	return 0
}

func (x *ValidationParamsV1) GetMissRequestsPenalty() float64 {
	if x != nil {
		return x.MissRequestsPenalty
	}
	return 0
}

type PocParamsV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultDifficulty uint32 `protobuf:"varint,1,opt,name=default_difficulty,json=defaultDifficulty,proto3" json:"default_difficulty,omitempty"`
}

func (x *PocParamsV1) Reset() {
	*x = PocParamsV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_inference_paramsv1_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PocParamsV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PocParamsV1) ProtoMessage() {}

// Deprecated: Use PocParamsV1.ProtoReflect.Descriptor instead.
func (*PocParamsV1) Descriptor() ([]byte, []int) {
	return file_inference_inference_paramsv1_proto_rawDescGZIP(), []int{4}
}

func (x *PocParamsV1) GetDefaultDifficulty() uint32 {
	if x != nil {
		return x.DefaultDifficulty
	}
	return 0
}

var File_inference_inference_paramsv1_proto protoreflect.FileDescriptor

var file_inference_inference_paramsv1_proto_rawDesc = []byte{
	0x0a, 0x22, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x76, 0x31, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0x11, 0x61, 0x6d, 0x69, 0x6e, 0x6f,
	0x2f, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f,
	0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x19, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe5, 0x02,
	0x0a, 0x08, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x56, 0x31, 0x12, 0x45, 0x0a, 0x0c, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x56, 0x31, 0x52, 0x0b, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x54, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x56, 0x31, 0x52, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x3f, 0x0a, 0x0a, 0x70, 0x6f, 0x63, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x2e, 0x50, 0x6f, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x56, 0x31, 0x52, 0x09, 0x70,
	0x6f, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x54, 0x0a, 0x11, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x6f,
	0x6d, 0x69, 0x63, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x56, 0x31, 0x52, 0x10, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x3a, 0x25,
	0xe8, 0xa0, 0x1f, 0x01, 0x8a, 0xe7, 0xb0, 0x2a, 0x1c, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x2f, 0x78, 0x2f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xcc, 0x02, 0x0a, 0x12, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x6f,
	0x6d, 0x69, 0x63, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x56, 0x31, 0x12, 0x3c, 0x0a, 0x1a,
	0x73, 0x75, 0x62, 0x73, 0x69, 0x64, 0x79, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x18, 0x73, 0x75, 0x62, 0x73, 0x69, 0x64, 0x79, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x75,
	0x62, 0x73, 0x69, 0x64, 0x79, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x73, 0x75,
	0x62, 0x73, 0x69, 0x64, 0x79, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x1a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x75, 0x62, 0x73, 0x69, 0x64, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x53, 0x75, 0x62, 0x73, 0x69, 0x64, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x74, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x17, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12,
	0x3d, 0x0a, 0x1b, 0x74, 0x6f, 0x70, 0x5f, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x63,
	0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x74, 0x6f, 0x70, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x50, 0x6f,
	0x63, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x04,
	0xe8, 0xa0, 0x1f, 0x01, 0x22, 0x92, 0x03, 0x0a, 0x0d, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x56, 0x31, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x69, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x53, 0x68, 0x69, 0x66, 0x74, 0x12, 0x40, 0x0a, 0x1d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x4f, 0x66, 0x43, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x6f, 0x63, 0x5f, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x70, 0x6f, 0x63, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x6f, 0x63, 0x5f, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x70, 0x6f, 0x63, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x6f, 0x63,
	0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70, 0x6f, 0x63, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x36, 0x0a, 0x17, 0x70,
	0x6f, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x70, 0x6f,
	0x63, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x3a, 0x04, 0xe8, 0xa0, 0x1f, 0x01, 0x22, 0x87, 0x05, 0x0a, 0x12, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x56, 0x31,
	0x12, 0x2e, 0x0a, 0x13, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x37, 0x0a, 0x18, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x6d, 0x70, 0x5f, 0x75, 0x70, 0x5f,
	0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x15, 0x6d, 0x69, 0x6e, 0x52, 0x61, 0x6d, 0x70, 0x55, 0x70, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x73,
	0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x70,
	0x61, 0x73, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x69, 0x6e, 0x5f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x34,
	0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14,
	0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x12, 0x22, 0x0a, 0x0d, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x6d,
	0x61, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x73,
	0x54, 0x6f, 0x4d, 0x61, 0x78, 0x12, 0x43, 0x0a, 0x1e, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x5f, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x66,
	0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x43, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x69,
	0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x6c,
	0x66, 0x77, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x6d, 0x69, 0x6e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6c, 0x66, 0x77, 0x61, 0x79,
	0x12, 0x41, 0x0a, 0x1d, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x75, 0x74, 0x6f, 0x66,
	0x66, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x75, 0x74,
	0x6f, 0x66, 0x66, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x14, 0x6d, 0x69, 0x73, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x43, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x69, 0x73,
	0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c,
	0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x6d, 0x69, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x3a, 0x04, 0xe8,
	0xa0, 0x1f, 0x01, 0x22, 0x42, 0x0a, 0x0b, 0x50, 0x6f, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x56, 0x31, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x69,
	0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74,
	0x79, 0x3a, 0x04, 0xe8, 0xa0, 0x1f, 0x01, 0x42, 0xbb, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e,
	0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x0d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x76, 0x31, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x24, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e,
	0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x2f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0xa2, 0x02, 0x03, 0x49, 0x49, 0x58,
	0xaa, 0x02, 0x13, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0xca, 0x02, 0x13, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5c, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0xe2, 0x02, 0x1f, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5c, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x14, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x3a, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_inference_inference_paramsv1_proto_rawDescOnce sync.Once
	file_inference_inference_paramsv1_proto_rawDescData = file_inference_inference_paramsv1_proto_rawDesc
)

func file_inference_inference_paramsv1_proto_rawDescGZIP() []byte {
	file_inference_inference_paramsv1_proto_rawDescOnce.Do(func() {
		file_inference_inference_paramsv1_proto_rawDescData = protoimpl.X.CompressGZIP(file_inference_inference_paramsv1_proto_rawDescData)
	})
	return file_inference_inference_paramsv1_proto_rawDescData
}

var file_inference_inference_paramsv1_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_inference_inference_paramsv1_proto_goTypes = []interface{}{
	(*ParamsV1)(nil),           // 0: inference.inference.ParamsV1
	(*TokenomicsParamsV1)(nil), // 1: inference.inference.TokenomicsParamsV1
	(*EpochParamsV1)(nil),      // 2: inference.inference.EpochParamsV1
	(*ValidationParamsV1)(nil), // 3: inference.inference.ValidationParamsV1
	(*PocParamsV1)(nil),        // 4: inference.inference.PocParamsV1
}
var file_inference_inference_paramsv1_proto_depIdxs = []int32{
	2, // 0: inference.inference.ParamsV1.epoch_params:type_name -> inference.inference.EpochParamsV1
	3, // 1: inference.inference.ParamsV1.validation_params:type_name -> inference.inference.ValidationParamsV1
	4, // 2: inference.inference.ParamsV1.poc_params:type_name -> inference.inference.PocParamsV1
	1, // 3: inference.inference.ParamsV1.tokenomics_params:type_name -> inference.inference.TokenomicsParamsV1
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_inference_inference_paramsv1_proto_init() }
func file_inference_inference_paramsv1_proto_init() {
	if File_inference_inference_paramsv1_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_inference_inference_paramsv1_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParamsV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_inference_paramsv1_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenomicsParamsV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_inference_paramsv1_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpochParamsV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_inference_paramsv1_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidationParamsV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_inference_paramsv1_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PocParamsV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_inference_inference_paramsv1_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_inference_inference_paramsv1_proto_goTypes,
		DependencyIndexes: file_inference_inference_paramsv1_proto_depIdxs,
		MessageInfos:      file_inference_inference_paramsv1_proto_msgTypes,
	}.Build()
	File_inference_inference_paramsv1_proto = out.File
	file_inference_inference_paramsv1_proto_rawDesc = nil
	file_inference_inference_paramsv1_proto_goTypes = nil
	file_inference_inference_paramsv1_proto_depIdxs = nil
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: inference/inference/query.proto

package inference

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName                                    = "/inference.inference.Query/Params"
	Query_Inference_FullMethodName                                 = "/inference.inference.Query/Inference"
	Query_InferenceAll_FullMethodName                              = "/inference.inference.Query/InferenceAll"
	Query_Participant_FullMethodName                               = "/inference.inference.Query/Participant"
	Query_ParticipantAll_FullMethodName                            = "/inference.inference.Query/ParticipantAll"
	Query_InferenceParticipant_FullMethodName                      = "/inference.inference.Query/InferenceParticipant"
	Query_GetRandomExecutor_FullMethodName                         = "/inference.inference.Query/GetRandomExecutor"
	Query_EpochGroupData_FullMethodName                            = "/inference.inference.Query/EpochGroupData"
	Query_EpochGroupDataAll_FullMethodName                         = "/inference.inference.Query/EpochGroupDataAll"
	Query_SettleAmount_FullMethodName                              = "/inference.inference.Query/SettleAmount"
	Query_SettleAmountAll_FullMethodName                           = "/inference.inference.Query/SettleAmountAll"
	Query_EpochGroupValidations_FullMethodName                     = "/inference.inference.Query/EpochGroupValidations"
	Query_EpochGroupValidationsAll_FullMethodName                  = "/inference.inference.Query/EpochGroupValidationsAll"
	Query_PocBatchesForStage_FullMethodName                        = "/inference.inference.Query/PocBatchesForStage"
	Query_GetCurrentEpoch_FullMethodName                           = "/inference.inference.Query/GetCurrentEpoch"
	Query_TokenomicsData_FullMethodName                            = "/inference.inference.Query/TokenomicsData"
	Query_GetUnitOfComputePriceProposal_FullMethodName             = "/inference.inference.Query/GetUnitOfComputePriceProposal"
	Query_CurrentEpochGroupData_FullMethodName                     = "/inference.inference.Query/CurrentEpochGroupData"
	Query_ModelsAll_FullMethodName                                 = "/inference.inference.Query/ModelsAll"
	Query_TopMiner_FullMethodName                                  = "/inference.inference.Query/TopMiner"
	Query_TopMinerAll_FullMethodName                               = "/inference.inference.Query/TopMinerAll"
	Query_InferenceTimeout_FullMethodName                          = "/inference.inference.Query/InferenceTimeout"
	Query_InferenceTimeoutAll_FullMethodName                       = "/inference.inference.Query/InferenceTimeoutAll"
	Query_InferenceValidationDetails_FullMethodName                = "/inference.inference.Query/InferenceValidationDetails"
	Query_InferenceValidationDetailsAll_FullMethodName             = "/inference.inference.Query/InferenceValidationDetailsAll"
	Query_GetInferenceValidationParameters_FullMethodName          = "/inference.inference.Query/GetInferenceValidationParameters"
	Query_EpochPerformanceSummary_FullMethodName                   = "/inference.inference.Query/EpochPerformanceSummary"
	Query_EpochPerformanceSummaryAll_FullMethodName                = "/inference.inference.Query/EpochPerformanceSummaryAll"
	Query_TrainingTask_FullMethodName                              = "/inference.inference.Query/TrainingTask"
	Query_HardwareNodes_FullMethodName                             = "/inference.inference.Query/HardwareNodes"
	Query_HardwareNodesAll_FullMethodName                          = "/inference.inference.Query/HardwareNodesAll"
	Query_QueuedTrainingTasks_FullMethodName                       = "/inference.inference.Query/QueuedTrainingTasks"
	Query_TrainingTaskAll_FullMethodName                           = "/inference.inference.Query/TrainingTaskAll"
	Query_GetParticipantCurrentStats_FullMethodName                = "/inference.inference.Query/GetParticipantCurrentStats"
	Query_GetAllParticipantCurrentStats_FullMethodName             = "/inference.inference.Query/GetAllParticipantCurrentStats"
	Query_GetParticipantsFullStats_FullMethodName                  = "/inference.inference.Query/GetParticipantsFullStats"
	Query_StatsByTimePeriodByDeveloper_FullMethodName              = "/inference.inference.Query/StatsByTimePeriodByDeveloper"
	Query_StatsByDeveloperAndEpochsBackwards_FullMethodName        = "/inference.inference.Query/StatsByDeveloperAndEpochsBackwards"
	Query_CountParticipants_FullMethodName                         = "/inference.inference.Query/CountParticipants"
	Query_DebugStatsDeveloperStats_FullMethodName                  = "/inference.inference.Query/DebugStatsDeveloperStats"
	Query_InferencesAndTokensStatsByEpochsBackwards_FullMethodName = "/inference.inference.Query/InferencesAndTokensStatsByEpochsBackwards"
	Query_InferencesAndTokensStatsByTimePeriod_FullMethodName      = "/inference.inference.Query/InferencesAndTokensStatsByTimePeriod"
	Query_InferencesAndTokensStatsByModels_FullMethodName          = "/inference.inference.Query/InferencesAndTokensStatsByModels"
	Query_GetMinimumValidationAverage_FullMethodName               = "/inference.inference.Query/GetMinimumValidationAverage"
	Query_InProgressTrainingTasks_FullMethodName                   = "/inference.inference.Query/InProgressTrainingTasks"
	Query_PartialUpgrade_FullMethodName                            = "/inference.inference.Query/PartialUpgrade"
	Query_PartialUpgradeAll_FullMethodName                         = "/inference.inference.Query/PartialUpgradeAll"
	Query_BridgeTransaction_FullMethodName                         = "/inference.inference.Query/BridgeTransaction"
	Query_BridgeTransactions_FullMethodName                        = "/inference.inference.Query/BridgeTransactions"
	Query_TrainingKvRecord_FullMethodName                          = "/inference.inference.Query/TrainingKvRecord"
	Query_ListTrainingKvRecordKeys_FullMethodName                  = "/inference.inference.Query/ListTrainingKvRecordKeys"
	Query_TrainingBarrier_FullMethodName                           = "/inference.inference.Query/TrainingBarrier"
	Query_TrainingAliveNodes_FullMethodName                        = "/inference.inference.Query/TrainingAliveNodes"
	Query_EpochInfo_FullMethodName                                 = "/inference.inference.Query/EpochInfo"
	Query_CountPoCbatchesAtHeight_FullMethodName                   = "/inference.inference.Query/CountPoCbatchesAtHeight"
	Query_CountPoCvalidationsAtHeight_FullMethodName               = "/inference.inference.Query/CountPoCvalidationsAtHeight"
	Query_GranteesByMessageType_FullMethodName                     = "/inference.inference.Query/GranteesByMessageType"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of Inference items.
	Inference(ctx context.Context, in *QueryGetInferenceRequest, opts ...grpc.CallOption) (*QueryGetInferenceResponse, error)
	InferenceAll(ctx context.Context, in *QueryAllInferenceRequest, opts ...grpc.CallOption) (*QueryAllInferenceResponse, error)
	// Queries a list of Participant items.
	Participant(ctx context.Context, in *QueryGetParticipantRequest, opts ...grpc.CallOption) (*QueryGetParticipantResponse, error)
	ParticipantAll(ctx context.Context, in *QueryAllParticipantRequest, opts ...grpc.CallOption) (*QueryAllParticipantResponse, error)
	// Queries a list of InferenceParticipant items.
	InferenceParticipant(ctx context.Context, in *QueryInferenceParticipantRequest, opts ...grpc.CallOption) (*QueryInferenceParticipantResponse, error)
	// Queries a list of GetRandomExecutor items.
	GetRandomExecutor(ctx context.Context, in *QueryGetRandomExecutorRequest, opts ...grpc.CallOption) (*QueryGetRandomExecutorResponse, error)
	// Queries a list of EpochGroupData items.
	EpochGroupData(ctx context.Context, in *QueryGetEpochGroupDataRequest, opts ...grpc.CallOption) (*QueryGetEpochGroupDataResponse, error)
	EpochGroupDataAll(ctx context.Context, in *QueryAllEpochGroupDataRequest, opts ...grpc.CallOption) (*QueryAllEpochGroupDataResponse, error)
	// Queries a list of SettleAmount items.
	SettleAmount(ctx context.Context, in *QueryGetSettleAmountRequest, opts ...grpc.CallOption) (*QueryGetSettleAmountResponse, error)
	SettleAmountAll(ctx context.Context, in *QueryAllSettleAmountRequest, opts ...grpc.CallOption) (*QueryAllSettleAmountResponse, error)
	// Queries a list of EpochGroupValidations items.
	EpochGroupValidations(ctx context.Context, in *QueryGetEpochGroupValidationsRequest, opts ...grpc.CallOption) (*QueryGetEpochGroupValidationsResponse, error)
	EpochGroupValidationsAll(ctx context.Context, in *QueryAllEpochGroupValidationsRequest, opts ...grpc.CallOption) (*QueryAllEpochGroupValidationsResponse, error)
	// Queries a list of PocBatchesForStage items.
	PocBatchesForStage(ctx context.Context, in *QueryPocBatchesForStageRequest, opts ...grpc.CallOption) (*QueryPocBatchesForStageResponse, error)
	// Queries a list of GetCurrentEpoch items.
	GetCurrentEpoch(ctx context.Context, in *QueryGetCurrentEpochRequest, opts ...grpc.CallOption) (*QueryGetCurrentEpochResponse, error)
	// Queries a TokenomicsData by index.
	TokenomicsData(ctx context.Context, in *QueryGetTokenomicsDataRequest, opts ...grpc.CallOption) (*QueryGetTokenomicsDataResponse, error)
	// Queries a list of GetUnitOfComputePriceProposal items.
	GetUnitOfComputePriceProposal(ctx context.Context, in *QueryGetUnitOfComputePriceProposalRequest, opts ...grpc.CallOption) (*QueryGetUnitOfComputePriceProposalResponse, error)
	// Queries a list of CurrentEpochGroupData items.
	CurrentEpochGroupData(ctx context.Context, in *QueryCurrentEpochGroupDataRequest, opts ...grpc.CallOption) (*QueryCurrentEpochGroupDataResponse, error)
	// Queries a list of ModelsAll items.
	ModelsAll(ctx context.Context, in *QueryModelsAllRequest, opts ...grpc.CallOption) (*QueryModelsAllResponse, error)
	// Queries a list of TopMiner items.
	TopMiner(ctx context.Context, in *QueryGetTopMinerRequest, opts ...grpc.CallOption) (*QueryGetTopMinerResponse, error)
	TopMinerAll(ctx context.Context, in *QueryAllTopMinerRequest, opts ...grpc.CallOption) (*QueryAllTopMinerResponse, error)
	// Queries a list of InferenceTimeout items.
	InferenceTimeout(ctx context.Context, in *QueryGetInferenceTimeoutRequest, opts ...grpc.CallOption) (*QueryGetInferenceTimeoutResponse, error)
	InferenceTimeoutAll(ctx context.Context, in *QueryAllInferenceTimeoutRequest, opts ...grpc.CallOption) (*QueryAllInferenceTimeoutResponse, error)
	// BE CAREFUL, epoch_id in the request body meand epoch_group_id!!
	InferenceValidationDetails(ctx context.Context, in *QueryGetInferenceValidationDetailsRequest, opts ...grpc.CallOption) (*QueryGetInferenceValidationDetailsResponse, error)
	// Queries a list of InferenceValidationDetails items.
	InferenceValidationDetailsAll(ctx context.Context, in *QueryAllInferenceValidationDetailsRequest, opts ...grpc.CallOption) (*QueryAllInferenceValidationDetailsResponse, error)
	// Queries a list of GetInferenceValidationParameters items.
	GetInferenceValidationParameters(ctx context.Context, in *QueryGetInferenceValidationParametersRequest, opts ...grpc.CallOption) (*QueryGetInferenceValidationParametersResponse, error)
	// Queries a list of EpochPerformanceSummary items.
	EpochPerformanceSummary(ctx context.Context, in *QueryGetEpochPerformanceSummaryRequest, opts ...grpc.CallOption) (*QueryGetEpochPerformanceSummaryResponse, error)
	EpochPerformanceSummaryAll(ctx context.Context, in *QueryAllEpochPerformanceSummaryRequest, opts ...grpc.CallOption) (*QueryAllEpochPerformanceSummaryResponse, error)
	// Queries a list of TrainingTask items.
	TrainingTask(ctx context.Context, in *QueryTrainingTaskRequest, opts ...grpc.CallOption) (*QueryTrainingTaskResponse, error)
	// Queries a list of HardwareNodes items.
	HardwareNodes(ctx context.Context, in *QueryHardwareNodesRequest, opts ...grpc.CallOption) (*QueryHardwareNodesResponse, error)
	// Queries a list of HardwareNodesAll items.
	HardwareNodesAll(ctx context.Context, in *QueryHardwareNodesAllRequest, opts ...grpc.CallOption) (*QueryHardwareNodesAllResponse, error)
	// Queries a list of QueuedTrainingTasks items.
	QueuedTrainingTasks(ctx context.Context, in *QueryQueuedTrainingTasksRequest, opts ...grpc.CallOption) (*QueryQueuedTrainingTasksResponse, error)
	// Queries a list of TrainingTaskAll items.
	TrainingTaskAll(ctx context.Context, in *QueryTrainingTaskAllRequest, opts ...grpc.CallOption) (*QueryTrainingTaskAllResponse, error)
	// Queries a list of GetParticipantCurrentStats items.
	GetParticipantCurrentStats(ctx context.Context, in *QueryGetParticipantCurrentStatsRequest, opts ...grpc.CallOption) (*QueryGetParticipantCurrentStatsResponse, error)
	// Queries a list of GetAllParticipantCurrentStats items.
	GetAllParticipantCurrentStats(ctx context.Context, in *QueryGetAllParticipantCurrentStatsRequest, opts ...grpc.CallOption) (*QueryGetAllParticipantCurrentStatsResponse, error)
	GetParticipantsFullStats(ctx context.Context, in *QueryParticipantsFullStatsRequest, opts ...grpc.CallOption) (*QueryParticipantsFullStatsResponse, error)
	StatsByTimePeriodByDeveloper(ctx context.Context, in *QueryStatsByTimePeriodByDeveloperRequest, opts ...grpc.CallOption) (*QueryStatsByTimePeriodByDeveloperResponse, error)
	StatsByDeveloperAndEpochsBackwards(ctx context.Context, in *QueryStatsByDeveloperAndEpochBackwardsRequest, opts ...grpc.CallOption) (*QueryInferencesAndTokensStatsResponse, error)
	CountParticipants(ctx context.Context, in *QueryCountAllParticipantsRequest, opts ...grpc.CallOption) (*QueryCountAllParticipantsResponse, error)
	DebugStatsDeveloperStats(ctx context.Context, in *QueryDebugStatsRequest, opts ...grpc.CallOption) (*QueryDebugStatsResponse, error)
	InferencesAndTokensStatsByEpochsBackwards(ctx context.Context, in *QueryInferencesAndTokensStatsByEpochsBackwardsRequest, opts ...grpc.CallOption) (*QueryInferencesAndTokensStatsResponse, error)
	InferencesAndTokensStatsByTimePeriod(ctx context.Context, in *QueryInferencesAndTokensStatsByTimePeriodRequest, opts ...grpc.CallOption) (*QueryInferencesAndTokensStatsResponse, error)
	InferencesAndTokensStatsByModels(ctx context.Context, in *QueryInferencesAndTokensStatsByModelsRequest, opts ...grpc.CallOption) (*QueryInferencesAndTokensStatsByModelsResponse, error)
	// Queries a list of GetMinimumValidationAverage items.
	GetMinimumValidationAverage(ctx context.Context, in *QueryGetMinimumValidationAverageRequest, opts ...grpc.CallOption) (*QueryGetMinimumValidationAverageResponse, error)
	// Queries a list of InProgressTrainingTasks items.
	InProgressTrainingTasks(ctx context.Context, in *QueryInProgressTrainingTasksRequest, opts ...grpc.CallOption) (*QueryInProgressTrainingTasksResponse, error)
	// Queries a list of PartialUpgrade items.
	PartialUpgrade(ctx context.Context, in *QueryGetPartialUpgradeRequest, opts ...grpc.CallOption) (*QueryGetPartialUpgradeResponse, error)
	PartialUpgradeAll(ctx context.Context, in *QueryAllPartialUpgradeRequest, opts ...grpc.CallOption) (*QueryAllPartialUpgradeResponse, error)
	// Queries a bridge transaction by its composite key
	BridgeTransaction(ctx context.Context, in *QueryGetBridgeTransactionRequest, opts ...grpc.CallOption) (*QueryGetBridgeTransactionResponse, error)
	// Queries all bridge transactions
	BridgeTransactions(ctx context.Context, in *QueryAllBridgeTransactionsRequest, opts ...grpc.CallOption) (*QueryAllBridgeTransactionsResponse, error)
	// Queries a list of TrainingKvRecord items.
	TrainingKvRecord(ctx context.Context, in *QueryTrainingKvRecordRequest, opts ...grpc.CallOption) (*QueryTrainingKvRecordResponse, error)
	// Queries a list of ListTrainingKvRecordKeys items.
	ListTrainingKvRecordKeys(ctx context.Context, in *QueryListTrainingKvRecordKeysRequest, opts ...grpc.CallOption) (*QueryListTrainingKvRecordKeysResponse, error)
	// Queries a list of TrainingBarrier items.
	TrainingBarrier(ctx context.Context, in *QueryTrainingBarrierRequest, opts ...grpc.CallOption) (*QueryTrainingBarrierResponse, error)
	// Queries a list of TrainingAliveNodes items.
	TrainingAliveNodes(ctx context.Context, in *QueryTrainingAliveNodesRequest, opts ...grpc.CallOption) (*QueryTrainingAliveNodesResponse, error)
	// Queries a list of EpochInfo items.
	EpochInfo(ctx context.Context, in *QueryEpochInfoRequest, opts ...grpc.CallOption) (*QueryEpochInfoResponse, error)
	// Queries a list of CountPoCbatchesAtHeight items.
	CountPoCbatchesAtHeight(ctx context.Context, in *QueryCountPoCbatchesAtHeightRequest, opts ...grpc.CallOption) (*QueryCountPoCbatchesAtHeightResponse, error)
	// Queries a list of CountPoCvalidationsAtHeight items.
	CountPoCvalidationsAtHeight(ctx context.Context, in *QueryCountPoCvalidationsAtHeightRequest, opts ...grpc.CallOption) (*QueryCountPoCvalidationsAtHeightResponse, error)
	// Queries all authz grantees with specific message type for an account
	GranteesByMessageType(ctx context.Context, in *QueryGranteesByMessageTypeRequest, opts ...grpc.CallOption) (*QueryGranteesByMessageTypeResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Inference(ctx context.Context, in *QueryGetInferenceRequest, opts ...grpc.CallOption) (*QueryGetInferenceResponse, error) {
	out := new(QueryGetInferenceResponse)
	err := c.cc.Invoke(ctx, Query_Inference_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InferenceAll(ctx context.Context, in *QueryAllInferenceRequest, opts ...grpc.CallOption) (*QueryAllInferenceResponse, error) {
	out := new(QueryAllInferenceResponse)
	err := c.cc.Invoke(ctx, Query_InferenceAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Participant(ctx context.Context, in *QueryGetParticipantRequest, opts ...grpc.CallOption) (*QueryGetParticipantResponse, error) {
	out := new(QueryGetParticipantResponse)
	err := c.cc.Invoke(ctx, Query_Participant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ParticipantAll(ctx context.Context, in *QueryAllParticipantRequest, opts ...grpc.CallOption) (*QueryAllParticipantResponse, error) {
	out := new(QueryAllParticipantResponse)
	err := c.cc.Invoke(ctx, Query_ParticipantAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InferenceParticipant(ctx context.Context, in *QueryInferenceParticipantRequest, opts ...grpc.CallOption) (*QueryInferenceParticipantResponse, error) {
	out := new(QueryInferenceParticipantResponse)
	err := c.cc.Invoke(ctx, Query_InferenceParticipant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetRandomExecutor(ctx context.Context, in *QueryGetRandomExecutorRequest, opts ...grpc.CallOption) (*QueryGetRandomExecutorResponse, error) {
	out := new(QueryGetRandomExecutorResponse)
	err := c.cc.Invoke(ctx, Query_GetRandomExecutor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EpochGroupData(ctx context.Context, in *QueryGetEpochGroupDataRequest, opts ...grpc.CallOption) (*QueryGetEpochGroupDataResponse, error) {
	out := new(QueryGetEpochGroupDataResponse)
	err := c.cc.Invoke(ctx, Query_EpochGroupData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EpochGroupDataAll(ctx context.Context, in *QueryAllEpochGroupDataRequest, opts ...grpc.CallOption) (*QueryAllEpochGroupDataResponse, error) {
	out := new(QueryAllEpochGroupDataResponse)
	err := c.cc.Invoke(ctx, Query_EpochGroupDataAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SettleAmount(ctx context.Context, in *QueryGetSettleAmountRequest, opts ...grpc.CallOption) (*QueryGetSettleAmountResponse, error) {
	out := new(QueryGetSettleAmountResponse)
	err := c.cc.Invoke(ctx, Query_SettleAmount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SettleAmountAll(ctx context.Context, in *QueryAllSettleAmountRequest, opts ...grpc.CallOption) (*QueryAllSettleAmountResponse, error) {
	out := new(QueryAllSettleAmountResponse)
	err := c.cc.Invoke(ctx, Query_SettleAmountAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EpochGroupValidations(ctx context.Context, in *QueryGetEpochGroupValidationsRequest, opts ...grpc.CallOption) (*QueryGetEpochGroupValidationsResponse, error) {
	out := new(QueryGetEpochGroupValidationsResponse)
	err := c.cc.Invoke(ctx, Query_EpochGroupValidations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EpochGroupValidationsAll(ctx context.Context, in *QueryAllEpochGroupValidationsRequest, opts ...grpc.CallOption) (*QueryAllEpochGroupValidationsResponse, error) {
	out := new(QueryAllEpochGroupValidationsResponse)
	err := c.cc.Invoke(ctx, Query_EpochGroupValidationsAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PocBatchesForStage(ctx context.Context, in *QueryPocBatchesForStageRequest, opts ...grpc.CallOption) (*QueryPocBatchesForStageResponse, error) {
	out := new(QueryPocBatchesForStageResponse)
	err := c.cc.Invoke(ctx, Query_PocBatchesForStage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetCurrentEpoch(ctx context.Context, in *QueryGetCurrentEpochRequest, opts ...grpc.CallOption) (*QueryGetCurrentEpochResponse, error) {
	out := new(QueryGetCurrentEpochResponse)
	err := c.cc.Invoke(ctx, Query_GetCurrentEpoch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenomicsData(ctx context.Context, in *QueryGetTokenomicsDataRequest, opts ...grpc.CallOption) (*QueryGetTokenomicsDataResponse, error) {
	out := new(QueryGetTokenomicsDataResponse)
	err := c.cc.Invoke(ctx, Query_TokenomicsData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetUnitOfComputePriceProposal(ctx context.Context, in *QueryGetUnitOfComputePriceProposalRequest, opts ...grpc.CallOption) (*QueryGetUnitOfComputePriceProposalResponse, error) {
	out := new(QueryGetUnitOfComputePriceProposalResponse)
	err := c.cc.Invoke(ctx, Query_GetUnitOfComputePriceProposal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CurrentEpochGroupData(ctx context.Context, in *QueryCurrentEpochGroupDataRequest, opts ...grpc.CallOption) (*QueryCurrentEpochGroupDataResponse, error) {
	out := new(QueryCurrentEpochGroupDataResponse)
	err := c.cc.Invoke(ctx, Query_CurrentEpochGroupData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ModelsAll(ctx context.Context, in *QueryModelsAllRequest, opts ...grpc.CallOption) (*QueryModelsAllResponse, error) {
	out := new(QueryModelsAllResponse)
	err := c.cc.Invoke(ctx, Query_ModelsAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TopMiner(ctx context.Context, in *QueryGetTopMinerRequest, opts ...grpc.CallOption) (*QueryGetTopMinerResponse, error) {
	out := new(QueryGetTopMinerResponse)
	err := c.cc.Invoke(ctx, Query_TopMiner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TopMinerAll(ctx context.Context, in *QueryAllTopMinerRequest, opts ...grpc.CallOption) (*QueryAllTopMinerResponse, error) {
	out := new(QueryAllTopMinerResponse)
	err := c.cc.Invoke(ctx, Query_TopMinerAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InferenceTimeout(ctx context.Context, in *QueryGetInferenceTimeoutRequest, opts ...grpc.CallOption) (*QueryGetInferenceTimeoutResponse, error) {
	out := new(QueryGetInferenceTimeoutResponse)
	err := c.cc.Invoke(ctx, Query_InferenceTimeout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InferenceTimeoutAll(ctx context.Context, in *QueryAllInferenceTimeoutRequest, opts ...grpc.CallOption) (*QueryAllInferenceTimeoutResponse, error) {
	out := new(QueryAllInferenceTimeoutResponse)
	err := c.cc.Invoke(ctx, Query_InferenceTimeoutAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InferenceValidationDetails(ctx context.Context, in *QueryGetInferenceValidationDetailsRequest, opts ...grpc.CallOption) (*QueryGetInferenceValidationDetailsResponse, error) {
	out := new(QueryGetInferenceValidationDetailsResponse)
	err := c.cc.Invoke(ctx, Query_InferenceValidationDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InferenceValidationDetailsAll(ctx context.Context, in *QueryAllInferenceValidationDetailsRequest, opts ...grpc.CallOption) (*QueryAllInferenceValidationDetailsResponse, error) {
	out := new(QueryAllInferenceValidationDetailsResponse)
	err := c.cc.Invoke(ctx, Query_InferenceValidationDetailsAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetInferenceValidationParameters(ctx context.Context, in *QueryGetInferenceValidationParametersRequest, opts ...grpc.CallOption) (*QueryGetInferenceValidationParametersResponse, error) {
	out := new(QueryGetInferenceValidationParametersResponse)
	err := c.cc.Invoke(ctx, Query_GetInferenceValidationParameters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EpochPerformanceSummary(ctx context.Context, in *QueryGetEpochPerformanceSummaryRequest, opts ...grpc.CallOption) (*QueryGetEpochPerformanceSummaryResponse, error) {
	out := new(QueryGetEpochPerformanceSummaryResponse)
	err := c.cc.Invoke(ctx, Query_EpochPerformanceSummary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EpochPerformanceSummaryAll(ctx context.Context, in *QueryAllEpochPerformanceSummaryRequest, opts ...grpc.CallOption) (*QueryAllEpochPerformanceSummaryResponse, error) {
	out := new(QueryAllEpochPerformanceSummaryResponse)
	err := c.cc.Invoke(ctx, Query_EpochPerformanceSummaryAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TrainingTask(ctx context.Context, in *QueryTrainingTaskRequest, opts ...grpc.CallOption) (*QueryTrainingTaskResponse, error) {
	out := new(QueryTrainingTaskResponse)
	err := c.cc.Invoke(ctx, Query_TrainingTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HardwareNodes(ctx context.Context, in *QueryHardwareNodesRequest, opts ...grpc.CallOption) (*QueryHardwareNodesResponse, error) {
	out := new(QueryHardwareNodesResponse)
	err := c.cc.Invoke(ctx, Query_HardwareNodes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HardwareNodesAll(ctx context.Context, in *QueryHardwareNodesAllRequest, opts ...grpc.CallOption) (*QueryHardwareNodesAllResponse, error) {
	out := new(QueryHardwareNodesAllResponse)
	err := c.cc.Invoke(ctx, Query_HardwareNodesAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueuedTrainingTasks(ctx context.Context, in *QueryQueuedTrainingTasksRequest, opts ...grpc.CallOption) (*QueryQueuedTrainingTasksResponse, error) {
	out := new(QueryQueuedTrainingTasksResponse)
	err := c.cc.Invoke(ctx, Query_QueuedTrainingTasks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TrainingTaskAll(ctx context.Context, in *QueryTrainingTaskAllRequest, opts ...grpc.CallOption) (*QueryTrainingTaskAllResponse, error) {
	out := new(QueryTrainingTaskAllResponse)
	err := c.cc.Invoke(ctx, Query_TrainingTaskAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetParticipantCurrentStats(ctx context.Context, in *QueryGetParticipantCurrentStatsRequest, opts ...grpc.CallOption) (*QueryGetParticipantCurrentStatsResponse, error) {
	out := new(QueryGetParticipantCurrentStatsResponse)
	err := c.cc.Invoke(ctx, Query_GetParticipantCurrentStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAllParticipantCurrentStats(ctx context.Context, in *QueryGetAllParticipantCurrentStatsRequest, opts ...grpc.CallOption) (*QueryGetAllParticipantCurrentStatsResponse, error) {
	out := new(QueryGetAllParticipantCurrentStatsResponse)
	err := c.cc.Invoke(ctx, Query_GetAllParticipantCurrentStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetParticipantsFullStats(ctx context.Context, in *QueryParticipantsFullStatsRequest, opts ...grpc.CallOption) (*QueryParticipantsFullStatsResponse, error) {
	out := new(QueryParticipantsFullStatsResponse)
	err := c.cc.Invoke(ctx, Query_GetParticipantsFullStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StatsByTimePeriodByDeveloper(ctx context.Context, in *QueryStatsByTimePeriodByDeveloperRequest, opts ...grpc.CallOption) (*QueryStatsByTimePeriodByDeveloperResponse, error) {
	out := new(QueryStatsByTimePeriodByDeveloperResponse)
	err := c.cc.Invoke(ctx, Query_StatsByTimePeriodByDeveloper_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StatsByDeveloperAndEpochsBackwards(ctx context.Context, in *QueryStatsByDeveloperAndEpochBackwardsRequest, opts ...grpc.CallOption) (*QueryInferencesAndTokensStatsResponse, error) {
	out := new(QueryInferencesAndTokensStatsResponse)
	err := c.cc.Invoke(ctx, Query_StatsByDeveloperAndEpochsBackwards_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CountParticipants(ctx context.Context, in *QueryCountAllParticipantsRequest, opts ...grpc.CallOption) (*QueryCountAllParticipantsResponse, error) {
	out := new(QueryCountAllParticipantsResponse)
	err := c.cc.Invoke(ctx, Query_CountParticipants_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DebugStatsDeveloperStats(ctx context.Context, in *QueryDebugStatsRequest, opts ...grpc.CallOption) (*QueryDebugStatsResponse, error) {
	out := new(QueryDebugStatsResponse)
	err := c.cc.Invoke(ctx, Query_DebugStatsDeveloperStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InferencesAndTokensStatsByEpochsBackwards(ctx context.Context, in *QueryInferencesAndTokensStatsByEpochsBackwardsRequest, opts ...grpc.CallOption) (*QueryInferencesAndTokensStatsResponse, error) {
	out := new(QueryInferencesAndTokensStatsResponse)
	err := c.cc.Invoke(ctx, Query_InferencesAndTokensStatsByEpochsBackwards_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InferencesAndTokensStatsByTimePeriod(ctx context.Context, in *QueryInferencesAndTokensStatsByTimePeriodRequest, opts ...grpc.CallOption) (*QueryInferencesAndTokensStatsResponse, error) {
	out := new(QueryInferencesAndTokensStatsResponse)
	err := c.cc.Invoke(ctx, Query_InferencesAndTokensStatsByTimePeriod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InferencesAndTokensStatsByModels(ctx context.Context, in *QueryInferencesAndTokensStatsByModelsRequest, opts ...grpc.CallOption) (*QueryInferencesAndTokensStatsByModelsResponse, error) {
	out := new(QueryInferencesAndTokensStatsByModelsResponse)
	err := c.cc.Invoke(ctx, Query_InferencesAndTokensStatsByModels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetMinimumValidationAverage(ctx context.Context, in *QueryGetMinimumValidationAverageRequest, opts ...grpc.CallOption) (*QueryGetMinimumValidationAverageResponse, error) {
	out := new(QueryGetMinimumValidationAverageResponse)
	err := c.cc.Invoke(ctx, Query_GetMinimumValidationAverage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InProgressTrainingTasks(ctx context.Context, in *QueryInProgressTrainingTasksRequest, opts ...grpc.CallOption) (*QueryInProgressTrainingTasksResponse, error) {
	out := new(QueryInProgressTrainingTasksResponse)
	err := c.cc.Invoke(ctx, Query_InProgressTrainingTasks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PartialUpgrade(ctx context.Context, in *QueryGetPartialUpgradeRequest, opts ...grpc.CallOption) (*QueryGetPartialUpgradeResponse, error) {
	out := new(QueryGetPartialUpgradeResponse)
	err := c.cc.Invoke(ctx, Query_PartialUpgrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PartialUpgradeAll(ctx context.Context, in *QueryAllPartialUpgradeRequest, opts ...grpc.CallOption) (*QueryAllPartialUpgradeResponse, error) {
	out := new(QueryAllPartialUpgradeResponse)
	err := c.cc.Invoke(ctx, Query_PartialUpgradeAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BridgeTransaction(ctx context.Context, in *QueryGetBridgeTransactionRequest, opts ...grpc.CallOption) (*QueryGetBridgeTransactionResponse, error) {
	out := new(QueryGetBridgeTransactionResponse)
	err := c.cc.Invoke(ctx, Query_BridgeTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BridgeTransactions(ctx context.Context, in *QueryAllBridgeTransactionsRequest, opts ...grpc.CallOption) (*QueryAllBridgeTransactionsResponse, error) {
	out := new(QueryAllBridgeTransactionsResponse)
	err := c.cc.Invoke(ctx, Query_BridgeTransactions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TrainingKvRecord(ctx context.Context, in *QueryTrainingKvRecordRequest, opts ...grpc.CallOption) (*QueryTrainingKvRecordResponse, error) {
	out := new(QueryTrainingKvRecordResponse)
	err := c.cc.Invoke(ctx, Query_TrainingKvRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListTrainingKvRecordKeys(ctx context.Context, in *QueryListTrainingKvRecordKeysRequest, opts ...grpc.CallOption) (*QueryListTrainingKvRecordKeysResponse, error) {
	out := new(QueryListTrainingKvRecordKeysResponse)
	err := c.cc.Invoke(ctx, Query_ListTrainingKvRecordKeys_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TrainingBarrier(ctx context.Context, in *QueryTrainingBarrierRequest, opts ...grpc.CallOption) (*QueryTrainingBarrierResponse, error) {
	out := new(QueryTrainingBarrierResponse)
	err := c.cc.Invoke(ctx, Query_TrainingBarrier_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TrainingAliveNodes(ctx context.Context, in *QueryTrainingAliveNodesRequest, opts ...grpc.CallOption) (*QueryTrainingAliveNodesResponse, error) {
	out := new(QueryTrainingAliveNodesResponse)
	err := c.cc.Invoke(ctx, Query_TrainingAliveNodes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EpochInfo(ctx context.Context, in *QueryEpochInfoRequest, opts ...grpc.CallOption) (*QueryEpochInfoResponse, error) {
	out := new(QueryEpochInfoResponse)
	err := c.cc.Invoke(ctx, Query_EpochInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CountPoCbatchesAtHeight(ctx context.Context, in *QueryCountPoCbatchesAtHeightRequest, opts ...grpc.CallOption) (*QueryCountPoCbatchesAtHeightResponse, error) {
	out := new(QueryCountPoCbatchesAtHeightResponse)
	err := c.cc.Invoke(ctx, Query_CountPoCbatchesAtHeight_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CountPoCvalidationsAtHeight(ctx context.Context, in *QueryCountPoCvalidationsAtHeightRequest, opts ...grpc.CallOption) (*QueryCountPoCvalidationsAtHeightResponse, error) {
	out := new(QueryCountPoCvalidationsAtHeightResponse)
	err := c.cc.Invoke(ctx, Query_CountPoCvalidationsAtHeight_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GranteesByMessageType(ctx context.Context, in *QueryGranteesByMessageTypeRequest, opts ...grpc.CallOption) (*QueryGranteesByMessageTypeResponse, error) {
	out := new(QueryGranteesByMessageTypeResponse)
	err := c.cc.Invoke(ctx, Query_GranteesByMessageType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of Inference items.
	Inference(context.Context, *QueryGetInferenceRequest) (*QueryGetInferenceResponse, error)
	InferenceAll(context.Context, *QueryAllInferenceRequest) (*QueryAllInferenceResponse, error)
	// Queries a list of Participant items.
	Participant(context.Context, *QueryGetParticipantRequest) (*QueryGetParticipantResponse, error)
	ParticipantAll(context.Context, *QueryAllParticipantRequest) (*QueryAllParticipantResponse, error)
	// Queries a list of InferenceParticipant items.
	InferenceParticipant(context.Context, *QueryInferenceParticipantRequest) (*QueryInferenceParticipantResponse, error)
	// Queries a list of GetRandomExecutor items.
	GetRandomExecutor(context.Context, *QueryGetRandomExecutorRequest) (*QueryGetRandomExecutorResponse, error)
	// Queries a list of EpochGroupData items.
	EpochGroupData(context.Context, *QueryGetEpochGroupDataRequest) (*QueryGetEpochGroupDataResponse, error)
	EpochGroupDataAll(context.Context, *QueryAllEpochGroupDataRequest) (*QueryAllEpochGroupDataResponse, error)
	// Queries a list of SettleAmount items.
	SettleAmount(context.Context, *QueryGetSettleAmountRequest) (*QueryGetSettleAmountResponse, error)
	SettleAmountAll(context.Context, *QueryAllSettleAmountRequest) (*QueryAllSettleAmountResponse, error)
	// Queries a list of EpochGroupValidations items.
	EpochGroupValidations(context.Context, *QueryGetEpochGroupValidationsRequest) (*QueryGetEpochGroupValidationsResponse, error)
	EpochGroupValidationsAll(context.Context, *QueryAllEpochGroupValidationsRequest) (*QueryAllEpochGroupValidationsResponse, error)
	// Queries a list of PocBatchesForStage items.
	PocBatchesForStage(context.Context, *QueryPocBatchesForStageRequest) (*QueryPocBatchesForStageResponse, error)
	// Queries a list of GetCurrentEpoch items.
	GetCurrentEpoch(context.Context, *QueryGetCurrentEpochRequest) (*QueryGetCurrentEpochResponse, error)
	// Queries a TokenomicsData by index.
	TokenomicsData(context.Context, *QueryGetTokenomicsDataRequest) (*QueryGetTokenomicsDataResponse, error)
	// Queries a list of GetUnitOfComputePriceProposal items.
	GetUnitOfComputePriceProposal(context.Context, *QueryGetUnitOfComputePriceProposalRequest) (*QueryGetUnitOfComputePriceProposalResponse, error)
	// Queries a list of CurrentEpochGroupData items.
	CurrentEpochGroupData(context.Context, *QueryCurrentEpochGroupDataRequest) (*QueryCurrentEpochGroupDataResponse, error)
	// Queries a list of ModelsAll items.
	ModelsAll(context.Context, *QueryModelsAllRequest) (*QueryModelsAllResponse, error)
	// Queries a list of TopMiner items.
	TopMiner(context.Context, *QueryGetTopMinerRequest) (*QueryGetTopMinerResponse, error)
	TopMinerAll(context.Context, *QueryAllTopMinerRequest) (*QueryAllTopMinerResponse, error)
	// Queries a list of InferenceTimeout items.
	InferenceTimeout(context.Context, *QueryGetInferenceTimeoutRequest) (*QueryGetInferenceTimeoutResponse, error)
	InferenceTimeoutAll(context.Context, *QueryAllInferenceTimeoutRequest) (*QueryAllInferenceTimeoutResponse, error)
	// BE CAREFUL, epoch_id in the request body meand epoch_group_id!!
	InferenceValidationDetails(context.Context, *QueryGetInferenceValidationDetailsRequest) (*QueryGetInferenceValidationDetailsResponse, error)
	// Queries a list of InferenceValidationDetails items.
	InferenceValidationDetailsAll(context.Context, *QueryAllInferenceValidationDetailsRequest) (*QueryAllInferenceValidationDetailsResponse, error)
	// Queries a list of GetInferenceValidationParameters items.
	GetInferenceValidationParameters(context.Context, *QueryGetInferenceValidationParametersRequest) (*QueryGetInferenceValidationParametersResponse, error)
	// Queries a list of EpochPerformanceSummary items.
	EpochPerformanceSummary(context.Context, *QueryGetEpochPerformanceSummaryRequest) (*QueryGetEpochPerformanceSummaryResponse, error)
	EpochPerformanceSummaryAll(context.Context, *QueryAllEpochPerformanceSummaryRequest) (*QueryAllEpochPerformanceSummaryResponse, error)
	// Queries a list of TrainingTask items.
	TrainingTask(context.Context, *QueryTrainingTaskRequest) (*QueryTrainingTaskResponse, error)
	// Queries a list of HardwareNodes items.
	HardwareNodes(context.Context, *QueryHardwareNodesRequest) (*QueryHardwareNodesResponse, error)
	// Queries a list of HardwareNodesAll items.
	HardwareNodesAll(context.Context, *QueryHardwareNodesAllRequest) (*QueryHardwareNodesAllResponse, error)
	// Queries a list of QueuedTrainingTasks items.
	QueuedTrainingTasks(context.Context, *QueryQueuedTrainingTasksRequest) (*QueryQueuedTrainingTasksResponse, error)
	// Queries a list of TrainingTaskAll items.
	TrainingTaskAll(context.Context, *QueryTrainingTaskAllRequest) (*QueryTrainingTaskAllResponse, error)
	// Queries a list of GetParticipantCurrentStats items.
	GetParticipantCurrentStats(context.Context, *QueryGetParticipantCurrentStatsRequest) (*QueryGetParticipantCurrentStatsResponse, error)
	// Queries a list of GetAllParticipantCurrentStats items.
	GetAllParticipantCurrentStats(context.Context, *QueryGetAllParticipantCurrentStatsRequest) (*QueryGetAllParticipantCurrentStatsResponse, error)
	GetParticipantsFullStats(context.Context, *QueryParticipantsFullStatsRequest) (*QueryParticipantsFullStatsResponse, error)
	StatsByTimePeriodByDeveloper(context.Context, *QueryStatsByTimePeriodByDeveloperRequest) (*QueryStatsByTimePeriodByDeveloperResponse, error)
	StatsByDeveloperAndEpochsBackwards(context.Context, *QueryStatsByDeveloperAndEpochBackwardsRequest) (*QueryInferencesAndTokensStatsResponse, error)
	CountParticipants(context.Context, *QueryCountAllParticipantsRequest) (*QueryCountAllParticipantsResponse, error)
	DebugStatsDeveloperStats(context.Context, *QueryDebugStatsRequest) (*QueryDebugStatsResponse, error)
	InferencesAndTokensStatsByEpochsBackwards(context.Context, *QueryInferencesAndTokensStatsByEpochsBackwardsRequest) (*QueryInferencesAndTokensStatsResponse, error)
	InferencesAndTokensStatsByTimePeriod(context.Context, *QueryInferencesAndTokensStatsByTimePeriodRequest) (*QueryInferencesAndTokensStatsResponse, error)
	InferencesAndTokensStatsByModels(context.Context, *QueryInferencesAndTokensStatsByModelsRequest) (*QueryInferencesAndTokensStatsByModelsResponse, error)
	// Queries a list of GetMinimumValidationAverage items.
	GetMinimumValidationAverage(context.Context, *QueryGetMinimumValidationAverageRequest) (*QueryGetMinimumValidationAverageResponse, error)
	// Queries a list of InProgressTrainingTasks items.
	InProgressTrainingTasks(context.Context, *QueryInProgressTrainingTasksRequest) (*QueryInProgressTrainingTasksResponse, error)
	// Queries a list of PartialUpgrade items.
	PartialUpgrade(context.Context, *QueryGetPartialUpgradeRequest) (*QueryGetPartialUpgradeResponse, error)
	PartialUpgradeAll(context.Context, *QueryAllPartialUpgradeRequest) (*QueryAllPartialUpgradeResponse, error)
	// Queries a bridge transaction by its composite key
	BridgeTransaction(context.Context, *QueryGetBridgeTransactionRequest) (*QueryGetBridgeTransactionResponse, error)
	// Queries all bridge transactions
	BridgeTransactions(context.Context, *QueryAllBridgeTransactionsRequest) (*QueryAllBridgeTransactionsResponse, error)
	// Queries a list of TrainingKvRecord items.
	TrainingKvRecord(context.Context, *QueryTrainingKvRecordRequest) (*QueryTrainingKvRecordResponse, error)
	// Queries a list of ListTrainingKvRecordKeys items.
	ListTrainingKvRecordKeys(context.Context, *QueryListTrainingKvRecordKeysRequest) (*QueryListTrainingKvRecordKeysResponse, error)
	// Queries a list of TrainingBarrier items.
	TrainingBarrier(context.Context, *QueryTrainingBarrierRequest) (*QueryTrainingBarrierResponse, error)
	// Queries a list of TrainingAliveNodes items.
	TrainingAliveNodes(context.Context, *QueryTrainingAliveNodesRequest) (*QueryTrainingAliveNodesResponse, error)
	// Queries a list of EpochInfo items.
	EpochInfo(context.Context, *QueryEpochInfoRequest) (*QueryEpochInfoResponse, error)
	// Queries a list of CountPoCbatchesAtHeight items.
	CountPoCbatchesAtHeight(context.Context, *QueryCountPoCbatchesAtHeightRequest) (*QueryCountPoCbatchesAtHeightResponse, error)
	// Queries a list of CountPoCvalidationsAtHeight items.
	CountPoCvalidationsAtHeight(context.Context, *QueryCountPoCvalidationsAtHeightRequest) (*QueryCountPoCvalidationsAtHeightResponse, error)
	// Queries all authz grantees with specific message type for an account
	GranteesByMessageType(context.Context, *QueryGranteesByMessageTypeRequest) (*QueryGranteesByMessageTypeResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) Inference(context.Context, *QueryGetInferenceRequest) (*QueryGetInferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inference not implemented")
}
func (UnimplementedQueryServer) InferenceAll(context.Context, *QueryAllInferenceRequest) (*QueryAllInferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InferenceAll not implemented")
}
func (UnimplementedQueryServer) Participant(context.Context, *QueryGetParticipantRequest) (*QueryGetParticipantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Participant not implemented")
}
func (UnimplementedQueryServer) ParticipantAll(context.Context, *QueryAllParticipantRequest) (*QueryAllParticipantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParticipantAll not implemented")
}
func (UnimplementedQueryServer) InferenceParticipant(context.Context, *QueryInferenceParticipantRequest) (*QueryInferenceParticipantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InferenceParticipant not implemented")
}
func (UnimplementedQueryServer) GetRandomExecutor(context.Context, *QueryGetRandomExecutorRequest) (*QueryGetRandomExecutorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandomExecutor not implemented")
}
func (UnimplementedQueryServer) EpochGroupData(context.Context, *QueryGetEpochGroupDataRequest) (*QueryGetEpochGroupDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EpochGroupData not implemented")
}
func (UnimplementedQueryServer) EpochGroupDataAll(context.Context, *QueryAllEpochGroupDataRequest) (*QueryAllEpochGroupDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EpochGroupDataAll not implemented")
}
func (UnimplementedQueryServer) SettleAmount(context.Context, *QueryGetSettleAmountRequest) (*QueryGetSettleAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SettleAmount not implemented")
}
func (UnimplementedQueryServer) SettleAmountAll(context.Context, *QueryAllSettleAmountRequest) (*QueryAllSettleAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SettleAmountAll not implemented")
}
func (UnimplementedQueryServer) EpochGroupValidations(context.Context, *QueryGetEpochGroupValidationsRequest) (*QueryGetEpochGroupValidationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EpochGroupValidations not implemented")
}
func (UnimplementedQueryServer) EpochGroupValidationsAll(context.Context, *QueryAllEpochGroupValidationsRequest) (*QueryAllEpochGroupValidationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EpochGroupValidationsAll not implemented")
}
func (UnimplementedQueryServer) PocBatchesForStage(context.Context, *QueryPocBatchesForStageRequest) (*QueryPocBatchesForStageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PocBatchesForStage not implemented")
}
func (UnimplementedQueryServer) GetCurrentEpoch(context.Context, *QueryGetCurrentEpochRequest) (*QueryGetCurrentEpochResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentEpoch not implemented")
}
func (UnimplementedQueryServer) TokenomicsData(context.Context, *QueryGetTokenomicsDataRequest) (*QueryGetTokenomicsDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenomicsData not implemented")
}
func (UnimplementedQueryServer) GetUnitOfComputePriceProposal(context.Context, *QueryGetUnitOfComputePriceProposalRequest) (*QueryGetUnitOfComputePriceProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnitOfComputePriceProposal not implemented")
}
func (UnimplementedQueryServer) CurrentEpochGroupData(context.Context, *QueryCurrentEpochGroupDataRequest) (*QueryCurrentEpochGroupDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentEpochGroupData not implemented")
}
func (UnimplementedQueryServer) ModelsAll(context.Context, *QueryModelsAllRequest) (*QueryModelsAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModelsAll not implemented")
}
func (UnimplementedQueryServer) TopMiner(context.Context, *QueryGetTopMinerRequest) (*QueryGetTopMinerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopMiner not implemented")
}
func (UnimplementedQueryServer) TopMinerAll(context.Context, *QueryAllTopMinerRequest) (*QueryAllTopMinerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopMinerAll not implemented")
}
func (UnimplementedQueryServer) InferenceTimeout(context.Context, *QueryGetInferenceTimeoutRequest) (*QueryGetInferenceTimeoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InferenceTimeout not implemented")
}
func (UnimplementedQueryServer) InferenceTimeoutAll(context.Context, *QueryAllInferenceTimeoutRequest) (*QueryAllInferenceTimeoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InferenceTimeoutAll not implemented")
}
func (UnimplementedQueryServer) InferenceValidationDetails(context.Context, *QueryGetInferenceValidationDetailsRequest) (*QueryGetInferenceValidationDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InferenceValidationDetails not implemented")
}
func (UnimplementedQueryServer) InferenceValidationDetailsAll(context.Context, *QueryAllInferenceValidationDetailsRequest) (*QueryAllInferenceValidationDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InferenceValidationDetailsAll not implemented")
}
func (UnimplementedQueryServer) GetInferenceValidationParameters(context.Context, *QueryGetInferenceValidationParametersRequest) (*QueryGetInferenceValidationParametersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInferenceValidationParameters not implemented")
}
func (UnimplementedQueryServer) EpochPerformanceSummary(context.Context, *QueryGetEpochPerformanceSummaryRequest) (*QueryGetEpochPerformanceSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EpochPerformanceSummary not implemented")
}
func (UnimplementedQueryServer) EpochPerformanceSummaryAll(context.Context, *QueryAllEpochPerformanceSummaryRequest) (*QueryAllEpochPerformanceSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EpochPerformanceSummaryAll not implemented")
}
func (UnimplementedQueryServer) TrainingTask(context.Context, *QueryTrainingTaskRequest) (*QueryTrainingTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrainingTask not implemented")
}
func (UnimplementedQueryServer) HardwareNodes(context.Context, *QueryHardwareNodesRequest) (*QueryHardwareNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HardwareNodes not implemented")
}
func (UnimplementedQueryServer) HardwareNodesAll(context.Context, *QueryHardwareNodesAllRequest) (*QueryHardwareNodesAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HardwareNodesAll not implemented")
}
func (UnimplementedQueryServer) QueuedTrainingTasks(context.Context, *QueryQueuedTrainingTasksRequest) (*QueryQueuedTrainingTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueuedTrainingTasks not implemented")
}
func (UnimplementedQueryServer) TrainingTaskAll(context.Context, *QueryTrainingTaskAllRequest) (*QueryTrainingTaskAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrainingTaskAll not implemented")
}
func (UnimplementedQueryServer) GetParticipantCurrentStats(context.Context, *QueryGetParticipantCurrentStatsRequest) (*QueryGetParticipantCurrentStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParticipantCurrentStats not implemented")
}
func (UnimplementedQueryServer) GetAllParticipantCurrentStats(context.Context, *QueryGetAllParticipantCurrentStatsRequest) (*QueryGetAllParticipantCurrentStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllParticipantCurrentStats not implemented")
}
func (UnimplementedQueryServer) GetParticipantsFullStats(context.Context, *QueryParticipantsFullStatsRequest) (*QueryParticipantsFullStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParticipantsFullStats not implemented")
}
func (UnimplementedQueryServer) StatsByTimePeriodByDeveloper(context.Context, *QueryStatsByTimePeriodByDeveloperRequest) (*QueryStatsByTimePeriodByDeveloperResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatsByTimePeriodByDeveloper not implemented")
}
func (UnimplementedQueryServer) StatsByDeveloperAndEpochsBackwards(context.Context, *QueryStatsByDeveloperAndEpochBackwardsRequest) (*QueryInferencesAndTokensStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatsByDeveloperAndEpochsBackwards not implemented")
}
func (UnimplementedQueryServer) CountParticipants(context.Context, *QueryCountAllParticipantsRequest) (*QueryCountAllParticipantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountParticipants not implemented")
}
func (UnimplementedQueryServer) DebugStatsDeveloperStats(context.Context, *QueryDebugStatsRequest) (*QueryDebugStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DebugStatsDeveloperStats not implemented")
}
func (UnimplementedQueryServer) InferencesAndTokensStatsByEpochsBackwards(context.Context, *QueryInferencesAndTokensStatsByEpochsBackwardsRequest) (*QueryInferencesAndTokensStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InferencesAndTokensStatsByEpochsBackwards not implemented")
}
func (UnimplementedQueryServer) InferencesAndTokensStatsByTimePeriod(context.Context, *QueryInferencesAndTokensStatsByTimePeriodRequest) (*QueryInferencesAndTokensStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InferencesAndTokensStatsByTimePeriod not implemented")
}
func (UnimplementedQueryServer) InferencesAndTokensStatsByModels(context.Context, *QueryInferencesAndTokensStatsByModelsRequest) (*QueryInferencesAndTokensStatsByModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InferencesAndTokensStatsByModels not implemented")
}
func (UnimplementedQueryServer) GetMinimumValidationAverage(context.Context, *QueryGetMinimumValidationAverageRequest) (*QueryGetMinimumValidationAverageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMinimumValidationAverage not implemented")
}
func (UnimplementedQueryServer) InProgressTrainingTasks(context.Context, *QueryInProgressTrainingTasksRequest) (*QueryInProgressTrainingTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InProgressTrainingTasks not implemented")
}
func (UnimplementedQueryServer) PartialUpgrade(context.Context, *QueryGetPartialUpgradeRequest) (*QueryGetPartialUpgradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpgrade not implemented")
}
func (UnimplementedQueryServer) PartialUpgradeAll(context.Context, *QueryAllPartialUpgradeRequest) (*QueryAllPartialUpgradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpgradeAll not implemented")
}
func (UnimplementedQueryServer) BridgeTransaction(context.Context, *QueryGetBridgeTransactionRequest) (*QueryGetBridgeTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BridgeTransaction not implemented")
}
func (UnimplementedQueryServer) BridgeTransactions(context.Context, *QueryAllBridgeTransactionsRequest) (*QueryAllBridgeTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BridgeTransactions not implemented")
}
func (UnimplementedQueryServer) TrainingKvRecord(context.Context, *QueryTrainingKvRecordRequest) (*QueryTrainingKvRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrainingKvRecord not implemented")
}
func (UnimplementedQueryServer) ListTrainingKvRecordKeys(context.Context, *QueryListTrainingKvRecordKeysRequest) (*QueryListTrainingKvRecordKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTrainingKvRecordKeys not implemented")
}
func (UnimplementedQueryServer) TrainingBarrier(context.Context, *QueryTrainingBarrierRequest) (*QueryTrainingBarrierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrainingBarrier not implemented")
}
func (UnimplementedQueryServer) TrainingAliveNodes(context.Context, *QueryTrainingAliveNodesRequest) (*QueryTrainingAliveNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrainingAliveNodes not implemented")
}
func (UnimplementedQueryServer) EpochInfo(context.Context, *QueryEpochInfoRequest) (*QueryEpochInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EpochInfo not implemented")
}
func (UnimplementedQueryServer) CountPoCbatchesAtHeight(context.Context, *QueryCountPoCbatchesAtHeightRequest) (*QueryCountPoCbatchesAtHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountPoCbatchesAtHeight not implemented")
}
func (UnimplementedQueryServer) CountPoCvalidationsAtHeight(context.Context, *QueryCountPoCvalidationsAtHeightRequest) (*QueryCountPoCvalidationsAtHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountPoCvalidationsAtHeight not implemented")
}
func (UnimplementedQueryServer) GranteesByMessageType(context.Context, *QueryGranteesByMessageTypeRequest) (*QueryGranteesByMessageTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GranteesByMessageType not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Inference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetInferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Inference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Inference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Inference(ctx, req.(*QueryGetInferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InferenceAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllInferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InferenceAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_InferenceAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InferenceAll(ctx, req.(*QueryAllInferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Participant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetParticipantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Participant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Participant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Participant(ctx, req.(*QueryGetParticipantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ParticipantAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllParticipantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ParticipantAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ParticipantAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ParticipantAll(ctx, req.(*QueryAllParticipantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InferenceParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInferenceParticipantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InferenceParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_InferenceParticipant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InferenceParticipant(ctx, req.(*QueryInferenceParticipantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetRandomExecutor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRandomExecutorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetRandomExecutor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetRandomExecutor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetRandomExecutor(ctx, req.(*QueryGetRandomExecutorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EpochGroupData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEpochGroupDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EpochGroupData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_EpochGroupData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EpochGroupData(ctx, req.(*QueryGetEpochGroupDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EpochGroupDataAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllEpochGroupDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EpochGroupDataAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_EpochGroupDataAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EpochGroupDataAll(ctx, req.(*QueryAllEpochGroupDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SettleAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSettleAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SettleAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SettleAmount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SettleAmount(ctx, req.(*QueryGetSettleAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SettleAmountAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSettleAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SettleAmountAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SettleAmountAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SettleAmountAll(ctx, req.(*QueryAllSettleAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EpochGroupValidations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEpochGroupValidationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EpochGroupValidations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_EpochGroupValidations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EpochGroupValidations(ctx, req.(*QueryGetEpochGroupValidationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EpochGroupValidationsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllEpochGroupValidationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EpochGroupValidationsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_EpochGroupValidationsAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EpochGroupValidationsAll(ctx, req.(*QueryAllEpochGroupValidationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PocBatchesForStage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPocBatchesForStageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PocBatchesForStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PocBatchesForStage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PocBatchesForStage(ctx, req.(*QueryPocBatchesForStageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetCurrentEpoch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCurrentEpochRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCurrentEpoch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetCurrentEpoch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCurrentEpoch(ctx, req.(*QueryGetCurrentEpochRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenomicsData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTokenomicsDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenomicsData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TokenomicsData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenomicsData(ctx, req.(*QueryGetTokenomicsDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetUnitOfComputePriceProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetUnitOfComputePriceProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetUnitOfComputePriceProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetUnitOfComputePriceProposal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetUnitOfComputePriceProposal(ctx, req.(*QueryGetUnitOfComputePriceProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CurrentEpochGroupData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCurrentEpochGroupDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CurrentEpochGroupData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CurrentEpochGroupData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CurrentEpochGroupData(ctx, req.(*QueryCurrentEpochGroupDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ModelsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryModelsAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ModelsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ModelsAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ModelsAll(ctx, req.(*QueryModelsAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TopMiner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTopMinerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TopMiner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TopMiner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TopMiner(ctx, req.(*QueryGetTopMinerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TopMinerAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllTopMinerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TopMinerAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TopMinerAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TopMinerAll(ctx, req.(*QueryAllTopMinerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InferenceTimeout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetInferenceTimeoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InferenceTimeout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_InferenceTimeout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InferenceTimeout(ctx, req.(*QueryGetInferenceTimeoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InferenceTimeoutAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllInferenceTimeoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InferenceTimeoutAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_InferenceTimeoutAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InferenceTimeoutAll(ctx, req.(*QueryAllInferenceTimeoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InferenceValidationDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetInferenceValidationDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InferenceValidationDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_InferenceValidationDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InferenceValidationDetails(ctx, req.(*QueryGetInferenceValidationDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InferenceValidationDetailsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllInferenceValidationDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InferenceValidationDetailsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_InferenceValidationDetailsAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InferenceValidationDetailsAll(ctx, req.(*QueryAllInferenceValidationDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetInferenceValidationParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetInferenceValidationParametersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetInferenceValidationParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetInferenceValidationParameters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetInferenceValidationParameters(ctx, req.(*QueryGetInferenceValidationParametersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EpochPerformanceSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEpochPerformanceSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EpochPerformanceSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_EpochPerformanceSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EpochPerformanceSummary(ctx, req.(*QueryGetEpochPerformanceSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EpochPerformanceSummaryAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllEpochPerformanceSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EpochPerformanceSummaryAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_EpochPerformanceSummaryAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EpochPerformanceSummaryAll(ctx, req.(*QueryAllEpochPerformanceSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TrainingTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTrainingTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TrainingTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TrainingTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TrainingTask(ctx, req.(*QueryTrainingTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HardwareNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHardwareNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HardwareNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_HardwareNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HardwareNodes(ctx, req.(*QueryHardwareNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HardwareNodesAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHardwareNodesAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HardwareNodesAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_HardwareNodesAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HardwareNodesAll(ctx, req.(*QueryHardwareNodesAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueuedTrainingTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryQueuedTrainingTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueuedTrainingTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueuedTrainingTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueuedTrainingTasks(ctx, req.(*QueryQueuedTrainingTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TrainingTaskAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTrainingTaskAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TrainingTaskAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TrainingTaskAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TrainingTaskAll(ctx, req.(*QueryTrainingTaskAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetParticipantCurrentStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetParticipantCurrentStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetParticipantCurrentStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetParticipantCurrentStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetParticipantCurrentStats(ctx, req.(*QueryGetParticipantCurrentStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAllParticipantCurrentStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllParticipantCurrentStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAllParticipantCurrentStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetAllParticipantCurrentStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAllParticipantCurrentStats(ctx, req.(*QueryGetAllParticipantCurrentStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetParticipantsFullStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParticipantsFullStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetParticipantsFullStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetParticipantsFullStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetParticipantsFullStats(ctx, req.(*QueryParticipantsFullStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StatsByTimePeriodByDeveloper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStatsByTimePeriodByDeveloperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StatsByTimePeriodByDeveloper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_StatsByTimePeriodByDeveloper_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StatsByTimePeriodByDeveloper(ctx, req.(*QueryStatsByTimePeriodByDeveloperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StatsByDeveloperAndEpochsBackwards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStatsByDeveloperAndEpochBackwardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StatsByDeveloperAndEpochsBackwards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_StatsByDeveloperAndEpochsBackwards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StatsByDeveloperAndEpochsBackwards(ctx, req.(*QueryStatsByDeveloperAndEpochBackwardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CountParticipants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCountAllParticipantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CountParticipants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CountParticipants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CountParticipants(ctx, req.(*QueryCountAllParticipantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DebugStatsDeveloperStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDebugStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DebugStatsDeveloperStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DebugStatsDeveloperStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DebugStatsDeveloperStats(ctx, req.(*QueryDebugStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InferencesAndTokensStatsByEpochsBackwards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInferencesAndTokensStatsByEpochsBackwardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InferencesAndTokensStatsByEpochsBackwards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_InferencesAndTokensStatsByEpochsBackwards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InferencesAndTokensStatsByEpochsBackwards(ctx, req.(*QueryInferencesAndTokensStatsByEpochsBackwardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InferencesAndTokensStatsByTimePeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInferencesAndTokensStatsByTimePeriodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InferencesAndTokensStatsByTimePeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_InferencesAndTokensStatsByTimePeriod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InferencesAndTokensStatsByTimePeriod(ctx, req.(*QueryInferencesAndTokensStatsByTimePeriodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InferencesAndTokensStatsByModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInferencesAndTokensStatsByModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InferencesAndTokensStatsByModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_InferencesAndTokensStatsByModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InferencesAndTokensStatsByModels(ctx, req.(*QueryInferencesAndTokensStatsByModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetMinimumValidationAverage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetMinimumValidationAverageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetMinimumValidationAverage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetMinimumValidationAverage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetMinimumValidationAverage(ctx, req.(*QueryGetMinimumValidationAverageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InProgressTrainingTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInProgressTrainingTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InProgressTrainingTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_InProgressTrainingTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InProgressTrainingTasks(ctx, req.(*QueryInProgressTrainingTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PartialUpgrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPartialUpgradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PartialUpgrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PartialUpgrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PartialUpgrade(ctx, req.(*QueryGetPartialUpgradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PartialUpgradeAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPartialUpgradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PartialUpgradeAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PartialUpgradeAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PartialUpgradeAll(ctx, req.(*QueryAllPartialUpgradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BridgeTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBridgeTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BridgeTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_BridgeTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BridgeTransaction(ctx, req.(*QueryGetBridgeTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BridgeTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllBridgeTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BridgeTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_BridgeTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BridgeTransactions(ctx, req.(*QueryAllBridgeTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TrainingKvRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTrainingKvRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TrainingKvRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TrainingKvRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TrainingKvRecord(ctx, req.(*QueryTrainingKvRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListTrainingKvRecordKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListTrainingKvRecordKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListTrainingKvRecordKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ListTrainingKvRecordKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListTrainingKvRecordKeys(ctx, req.(*QueryListTrainingKvRecordKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TrainingBarrier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTrainingBarrierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TrainingBarrier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TrainingBarrier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TrainingBarrier(ctx, req.(*QueryTrainingBarrierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TrainingAliveNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTrainingAliveNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TrainingAliveNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TrainingAliveNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TrainingAliveNodes(ctx, req.(*QueryTrainingAliveNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EpochInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEpochInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EpochInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_EpochInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EpochInfo(ctx, req.(*QueryEpochInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CountPoCbatchesAtHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCountPoCbatchesAtHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CountPoCbatchesAtHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CountPoCbatchesAtHeight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CountPoCbatchesAtHeight(ctx, req.(*QueryCountPoCbatchesAtHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CountPoCvalidationsAtHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCountPoCvalidationsAtHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CountPoCvalidationsAtHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CountPoCvalidationsAtHeight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CountPoCvalidationsAtHeight(ctx, req.(*QueryCountPoCvalidationsAtHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GranteesByMessageType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGranteesByMessageTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GranteesByMessageType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GranteesByMessageType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GranteesByMessageType(ctx, req.(*QueryGranteesByMessageTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inference.inference.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Inference",
			Handler:    _Query_Inference_Handler,
		},
		{
			MethodName: "InferenceAll",
			Handler:    _Query_InferenceAll_Handler,
		},
		{
			MethodName: "Participant",
			Handler:    _Query_Participant_Handler,
		},
		{
			MethodName: "ParticipantAll",
			Handler:    _Query_ParticipantAll_Handler,
		},
		{
			MethodName: "InferenceParticipant",
			Handler:    _Query_InferenceParticipant_Handler,
		},
		{
			MethodName: "GetRandomExecutor",
			Handler:    _Query_GetRandomExecutor_Handler,
		},
		{
			MethodName: "EpochGroupData",
			Handler:    _Query_EpochGroupData_Handler,
		},
		{
			MethodName: "EpochGroupDataAll",
			Handler:    _Query_EpochGroupDataAll_Handler,
		},
		{
			MethodName: "SettleAmount",
			Handler:    _Query_SettleAmount_Handler,
		},
		{
			MethodName: "SettleAmountAll",
			Handler:    _Query_SettleAmountAll_Handler,
		},
		{
			MethodName: "EpochGroupValidations",
			Handler:    _Query_EpochGroupValidations_Handler,
		},
		{
			MethodName: "EpochGroupValidationsAll",
			Handler:    _Query_EpochGroupValidationsAll_Handler,
		},
		{
			MethodName: "PocBatchesForStage",
			Handler:    _Query_PocBatchesForStage_Handler,
		},
		{
			MethodName: "GetCurrentEpoch",
			Handler:    _Query_GetCurrentEpoch_Handler,
		},
		{
			MethodName: "TokenomicsData",
			Handler:    _Query_TokenomicsData_Handler,
		},
		{
			MethodName: "GetUnitOfComputePriceProposal",
			Handler:    _Query_GetUnitOfComputePriceProposal_Handler,
		},
		{
			MethodName: "CurrentEpochGroupData",
			Handler:    _Query_CurrentEpochGroupData_Handler,
		},
		{
			MethodName: "ModelsAll",
			Handler:    _Query_ModelsAll_Handler,
		},
		{
			MethodName: "TopMiner",
			Handler:    _Query_TopMiner_Handler,
		},
		{
			MethodName: "TopMinerAll",
			Handler:    _Query_TopMinerAll_Handler,
		},
		{
			MethodName: "InferenceTimeout",
			Handler:    _Query_InferenceTimeout_Handler,
		},
		{
			MethodName: "InferenceTimeoutAll",
			Handler:    _Query_InferenceTimeoutAll_Handler,
		},
		{
			MethodName: "InferenceValidationDetails",
			Handler:    _Query_InferenceValidationDetails_Handler,
		},
		{
			MethodName: "InferenceValidationDetailsAll",
			Handler:    _Query_InferenceValidationDetailsAll_Handler,
		},
		{
			MethodName: "GetInferenceValidationParameters",
			Handler:    _Query_GetInferenceValidationParameters_Handler,
		},
		{
			MethodName: "EpochPerformanceSummary",
			Handler:    _Query_EpochPerformanceSummary_Handler,
		},
		{
			MethodName: "EpochPerformanceSummaryAll",
			Handler:    _Query_EpochPerformanceSummaryAll_Handler,
		},
		{
			MethodName: "TrainingTask",
			Handler:    _Query_TrainingTask_Handler,
		},
		{
			MethodName: "HardwareNodes",
			Handler:    _Query_HardwareNodes_Handler,
		},
		{
			MethodName: "HardwareNodesAll",
			Handler:    _Query_HardwareNodesAll_Handler,
		},
		{
			MethodName: "QueuedTrainingTasks",
			Handler:    _Query_QueuedTrainingTasks_Handler,
		},
		{
			MethodName: "TrainingTaskAll",
			Handler:    _Query_TrainingTaskAll_Handler,
		},
		{
			MethodName: "GetParticipantCurrentStats",
			Handler:    _Query_GetParticipantCurrentStats_Handler,
		},
		{
			MethodName: "GetAllParticipantCurrentStats",
			Handler:    _Query_GetAllParticipantCurrentStats_Handler,
		},
		{
			MethodName: "GetParticipantsFullStats",
			Handler:    _Query_GetParticipantsFullStats_Handler,
		},
		{
			MethodName: "StatsByTimePeriodByDeveloper",
			Handler:    _Query_StatsByTimePeriodByDeveloper_Handler,
		},
		{
			MethodName: "StatsByDeveloperAndEpochsBackwards",
			Handler:    _Query_StatsByDeveloperAndEpochsBackwards_Handler,
		},
		{
			MethodName: "CountParticipants",
			Handler:    _Query_CountParticipants_Handler,
		},
		{
			MethodName: "DebugStatsDeveloperStats",
			Handler:    _Query_DebugStatsDeveloperStats_Handler,
		},
		{
			MethodName: "InferencesAndTokensStatsByEpochsBackwards",
			Handler:    _Query_InferencesAndTokensStatsByEpochsBackwards_Handler,
		},
		{
			MethodName: "InferencesAndTokensStatsByTimePeriod",
			Handler:    _Query_InferencesAndTokensStatsByTimePeriod_Handler,
		},
		{
			MethodName: "InferencesAndTokensStatsByModels",
			Handler:    _Query_InferencesAndTokensStatsByModels_Handler,
		},
		{
			MethodName: "GetMinimumValidationAverage",
			Handler:    _Query_GetMinimumValidationAverage_Handler,
		},
		{
			MethodName: "InProgressTrainingTasks",
			Handler:    _Query_InProgressTrainingTasks_Handler,
		},
		{
			MethodName: "PartialUpgrade",
			Handler:    _Query_PartialUpgrade_Handler,
		},
		{
			MethodName: "PartialUpgradeAll",
			Handler:    _Query_PartialUpgradeAll_Handler,
		},
		{
			MethodName: "BridgeTransaction",
			Handler:    _Query_BridgeTransaction_Handler,
		},
		{
			MethodName: "BridgeTransactions",
			Handler:    _Query_BridgeTransactions_Handler,
		},
		{
			MethodName: "TrainingKvRecord",
			Handler:    _Query_TrainingKvRecord_Handler,
		},
		{
			MethodName: "ListTrainingKvRecordKeys",
			Handler:    _Query_ListTrainingKvRecordKeys_Handler,
		},
		{
			MethodName: "TrainingBarrier",
			Handler:    _Query_TrainingBarrier_Handler,
		},
		{
			MethodName: "TrainingAliveNodes",
			Handler:    _Query_TrainingAliveNodes_Handler,
		},
		{
			MethodName: "EpochInfo",
			Handler:    _Query_EpochInfo_Handler,
		},
		{
			MethodName: "CountPoCbatchesAtHeight",
			Handler:    _Query_CountPoCbatchesAtHeight_Handler,
		},
		{
			MethodName: "CountPoCvalidationsAtHeight",
			Handler:    _Query_CountPoCvalidationsAtHeight_Handler,
		},
		{
			MethodName: "GranteesByMessageType",
			Handler:    _Query_GranteesByMessageType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inference/inference/query.proto",
}

// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package inference

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_DeveloperStatsByEpoch_2_list)(nil)

type _DeveloperStatsByEpoch_2_list struct {
	list *[]string
}

func (x *_DeveloperStatsByEpoch_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_DeveloperStatsByEpoch_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_DeveloperStatsByEpoch_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_DeveloperStatsByEpoch_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_DeveloperStatsByEpoch_2_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message DeveloperStatsByEpoch at list field InferenceIds as it is not of Message kind"))
}

func (x *_DeveloperStatsByEpoch_2_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_DeveloperStatsByEpoch_2_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_DeveloperStatsByEpoch_2_list) IsValid() bool {
	return x.list != nil
}

var (
	md_DeveloperStatsByEpoch               protoreflect.MessageDescriptor
	fd_DeveloperStatsByEpoch_epoch_id      protoreflect.FieldDescriptor
	fd_DeveloperStatsByEpoch_inference_ids protoreflect.FieldDescriptor
)

func init() {
	file_inference_inference_developer_proto_init()
	md_DeveloperStatsByEpoch = File_inference_inference_developer_proto.Messages().ByName("DeveloperStatsByEpoch")
	fd_DeveloperStatsByEpoch_epoch_id = md_DeveloperStatsByEpoch.Fields().ByName("epoch_id")
	fd_DeveloperStatsByEpoch_inference_ids = md_DeveloperStatsByEpoch.Fields().ByName("inference_ids")
}

var _ protoreflect.Message = (*fastReflection_DeveloperStatsByEpoch)(nil)

type fastReflection_DeveloperStatsByEpoch DeveloperStatsByEpoch

func (x *DeveloperStatsByEpoch) ProtoReflect() protoreflect.Message {
	return (*fastReflection_DeveloperStatsByEpoch)(x)
}

func (x *DeveloperStatsByEpoch) slowProtoReflect() protoreflect.Message {
	mi := &file_inference_inference_developer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_DeveloperStatsByEpoch_messageType fastReflection_DeveloperStatsByEpoch_messageType
var _ protoreflect.MessageType = fastReflection_DeveloperStatsByEpoch_messageType{}

type fastReflection_DeveloperStatsByEpoch_messageType struct{}

func (x fastReflection_DeveloperStatsByEpoch_messageType) Zero() protoreflect.Message {
	return (*fastReflection_DeveloperStatsByEpoch)(nil)
}
func (x fastReflection_DeveloperStatsByEpoch_messageType) New() protoreflect.Message {
	return new(fastReflection_DeveloperStatsByEpoch)
}
func (x fastReflection_DeveloperStatsByEpoch_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_DeveloperStatsByEpoch
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_DeveloperStatsByEpoch) Descriptor() protoreflect.MessageDescriptor {
	return md_DeveloperStatsByEpoch
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_DeveloperStatsByEpoch) Type() protoreflect.MessageType {
	return _fastReflection_DeveloperStatsByEpoch_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_DeveloperStatsByEpoch) New() protoreflect.Message {
	return new(fastReflection_DeveloperStatsByEpoch)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_DeveloperStatsByEpoch) Interface() protoreflect.ProtoMessage {
	return (*DeveloperStatsByEpoch)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_DeveloperStatsByEpoch) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.EpochId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.EpochId)
		if !f(fd_DeveloperStatsByEpoch_epoch_id, value) {
			return
		}
	}
	if len(x.InferenceIds) != 0 {
		value := protoreflect.ValueOfList(&_DeveloperStatsByEpoch_2_list{list: &x.InferenceIds})
		if !f(fd_DeveloperStatsByEpoch_inference_ids, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_DeveloperStatsByEpoch) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "inference.inference.DeveloperStatsByEpoch.epoch_id":
		return x.EpochId != uint64(0)
	case "inference.inference.DeveloperStatsByEpoch.inference_ids":
		return len(x.InferenceIds) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.DeveloperStatsByEpoch"))
		}
		panic(fmt.Errorf("message inference.inference.DeveloperStatsByEpoch does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DeveloperStatsByEpoch) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "inference.inference.DeveloperStatsByEpoch.epoch_id":
		x.EpochId = uint64(0)
	case "inference.inference.DeveloperStatsByEpoch.inference_ids":
		x.InferenceIds = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.DeveloperStatsByEpoch"))
		}
		panic(fmt.Errorf("message inference.inference.DeveloperStatsByEpoch does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_DeveloperStatsByEpoch) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "inference.inference.DeveloperStatsByEpoch.epoch_id":
		value := x.EpochId
		return protoreflect.ValueOfUint64(value)
	case "inference.inference.DeveloperStatsByEpoch.inference_ids":
		if len(x.InferenceIds) == 0 {
			return protoreflect.ValueOfList(&_DeveloperStatsByEpoch_2_list{})
		}
		listValue := &_DeveloperStatsByEpoch_2_list{list: &x.InferenceIds}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.DeveloperStatsByEpoch"))
		}
		panic(fmt.Errorf("message inference.inference.DeveloperStatsByEpoch does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DeveloperStatsByEpoch) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "inference.inference.DeveloperStatsByEpoch.epoch_id":
		x.EpochId = value.Uint()
	case "inference.inference.DeveloperStatsByEpoch.inference_ids":
		lv := value.List()
		clv := lv.(*_DeveloperStatsByEpoch_2_list)
		x.InferenceIds = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.DeveloperStatsByEpoch"))
		}
		panic(fmt.Errorf("message inference.inference.DeveloperStatsByEpoch does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DeveloperStatsByEpoch) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.DeveloperStatsByEpoch.inference_ids":
		if x.InferenceIds == nil {
			x.InferenceIds = []string{}
		}
		value := &_DeveloperStatsByEpoch_2_list{list: &x.InferenceIds}
		return protoreflect.ValueOfList(value)
	case "inference.inference.DeveloperStatsByEpoch.epoch_id":
		panic(fmt.Errorf("field epoch_id of message inference.inference.DeveloperStatsByEpoch is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.DeveloperStatsByEpoch"))
		}
		panic(fmt.Errorf("message inference.inference.DeveloperStatsByEpoch does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_DeveloperStatsByEpoch) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.DeveloperStatsByEpoch.epoch_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "inference.inference.DeveloperStatsByEpoch.inference_ids":
		list := []string{}
		return protoreflect.ValueOfList(&_DeveloperStatsByEpoch_2_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.DeveloperStatsByEpoch"))
		}
		panic(fmt.Errorf("message inference.inference.DeveloperStatsByEpoch does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_DeveloperStatsByEpoch) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in inference.inference.DeveloperStatsByEpoch", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_DeveloperStatsByEpoch) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DeveloperStatsByEpoch) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_DeveloperStatsByEpoch) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_DeveloperStatsByEpoch) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*DeveloperStatsByEpoch)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.EpochId != 0 {
			n += 1 + runtime.Sov(uint64(x.EpochId))
		}
		if len(x.InferenceIds) > 0 {
			for _, s := range x.InferenceIds {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*DeveloperStatsByEpoch)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.InferenceIds) > 0 {
			for iNdEx := len(x.InferenceIds) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.InferenceIds[iNdEx])
				copy(dAtA[i:], x.InferenceIds[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.InferenceIds[iNdEx])))
				i--
				dAtA[i] = 0x12
			}
		}
		if x.EpochId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EpochId))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*DeveloperStatsByEpoch)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DeveloperStatsByEpoch: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DeveloperStatsByEpoch: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EpochId", wireType)
				}
				x.EpochId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EpochId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field InferenceIds", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.InferenceIds = append(x.InferenceIds, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_InferenceStats                      protoreflect.MessageDescriptor
	fd_InferenceStats_inference_id         protoreflect.FieldDescriptor
	fd_InferenceStats_epoch_id             protoreflect.FieldDescriptor
	fd_InferenceStats_status               protoreflect.FieldDescriptor
	fd_InferenceStats_total_token_count    protoreflect.FieldDescriptor
	fd_InferenceStats_model                protoreflect.FieldDescriptor
	fd_InferenceStats_actual_cost_in_coins protoreflect.FieldDescriptor
)

func init() {
	file_inference_inference_developer_proto_init()
	md_InferenceStats = File_inference_inference_developer_proto.Messages().ByName("InferenceStats")
	fd_InferenceStats_inference_id = md_InferenceStats.Fields().ByName("inference_id")
	fd_InferenceStats_epoch_id = md_InferenceStats.Fields().ByName("epoch_id")
	fd_InferenceStats_status = md_InferenceStats.Fields().ByName("status")
	fd_InferenceStats_total_token_count = md_InferenceStats.Fields().ByName("total_token_count")
	fd_InferenceStats_model = md_InferenceStats.Fields().ByName("model")
	fd_InferenceStats_actual_cost_in_coins = md_InferenceStats.Fields().ByName("actual_cost_in_coins")
}

var _ protoreflect.Message = (*fastReflection_InferenceStats)(nil)

type fastReflection_InferenceStats InferenceStats

func (x *InferenceStats) ProtoReflect() protoreflect.Message {
	return (*fastReflection_InferenceStats)(x)
}

func (x *InferenceStats) slowProtoReflect() protoreflect.Message {
	mi := &file_inference_inference_developer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_InferenceStats_messageType fastReflection_InferenceStats_messageType
var _ protoreflect.MessageType = fastReflection_InferenceStats_messageType{}

type fastReflection_InferenceStats_messageType struct{}

func (x fastReflection_InferenceStats_messageType) Zero() protoreflect.Message {
	return (*fastReflection_InferenceStats)(nil)
}
func (x fastReflection_InferenceStats_messageType) New() protoreflect.Message {
	return new(fastReflection_InferenceStats)
}
func (x fastReflection_InferenceStats_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_InferenceStats
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_InferenceStats) Descriptor() protoreflect.MessageDescriptor {
	return md_InferenceStats
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_InferenceStats) Type() protoreflect.MessageType {
	return _fastReflection_InferenceStats_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_InferenceStats) New() protoreflect.Message {
	return new(fastReflection_InferenceStats)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_InferenceStats) Interface() protoreflect.ProtoMessage {
	return (*InferenceStats)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_InferenceStats) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.InferenceId != "" {
		value := protoreflect.ValueOfString(x.InferenceId)
		if !f(fd_InferenceStats_inference_id, value) {
			return
		}
	}
	if x.EpochId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.EpochId)
		if !f(fd_InferenceStats_epoch_id, value) {
			return
		}
	}
	if x.Status != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Status))
		if !f(fd_InferenceStats_status, value) {
			return
		}
	}
	if x.TotalTokenCount != uint64(0) {
		value := protoreflect.ValueOfUint64(x.TotalTokenCount)
		if !f(fd_InferenceStats_total_token_count, value) {
			return
		}
	}
	if x.Model != "" {
		value := protoreflect.ValueOfString(x.Model)
		if !f(fd_InferenceStats_model, value) {
			return
		}
	}
	if x.ActualCostInCoins != int64(0) {
		value := protoreflect.ValueOfInt64(x.ActualCostInCoins)
		if !f(fd_InferenceStats_actual_cost_in_coins, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_InferenceStats) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "inference.inference.InferenceStats.inference_id":
		return x.InferenceId != ""
	case "inference.inference.InferenceStats.epoch_id":
		return x.EpochId != uint64(0)
	case "inference.inference.InferenceStats.status":
		return x.Status != 0
	case "inference.inference.InferenceStats.total_token_count":
		return x.TotalTokenCount != uint64(0)
	case "inference.inference.InferenceStats.model":
		return x.Model != ""
	case "inference.inference.InferenceStats.actual_cost_in_coins":
		return x.ActualCostInCoins != int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.InferenceStats"))
		}
		panic(fmt.Errorf("message inference.inference.InferenceStats does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_InferenceStats) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "inference.inference.InferenceStats.inference_id":
		x.InferenceId = ""
	case "inference.inference.InferenceStats.epoch_id":
		x.EpochId = uint64(0)
	case "inference.inference.InferenceStats.status":
		x.Status = 0
	case "inference.inference.InferenceStats.total_token_count":
		x.TotalTokenCount = uint64(0)
	case "inference.inference.InferenceStats.model":
		x.Model = ""
	case "inference.inference.InferenceStats.actual_cost_in_coins":
		x.ActualCostInCoins = int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.InferenceStats"))
		}
		panic(fmt.Errorf("message inference.inference.InferenceStats does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_InferenceStats) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "inference.inference.InferenceStats.inference_id":
		value := x.InferenceId
		return protoreflect.ValueOfString(value)
	case "inference.inference.InferenceStats.epoch_id":
		value := x.EpochId
		return protoreflect.ValueOfUint64(value)
	case "inference.inference.InferenceStats.status":
		value := x.Status
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "inference.inference.InferenceStats.total_token_count":
		value := x.TotalTokenCount
		return protoreflect.ValueOfUint64(value)
	case "inference.inference.InferenceStats.model":
		value := x.Model
		return protoreflect.ValueOfString(value)
	case "inference.inference.InferenceStats.actual_cost_in_coins":
		value := x.ActualCostInCoins
		return protoreflect.ValueOfInt64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.InferenceStats"))
		}
		panic(fmt.Errorf("message inference.inference.InferenceStats does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_InferenceStats) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "inference.inference.InferenceStats.inference_id":
		x.InferenceId = value.Interface().(string)
	case "inference.inference.InferenceStats.epoch_id":
		x.EpochId = value.Uint()
	case "inference.inference.InferenceStats.status":
		x.Status = (InferenceStatus)(value.Enum())
	case "inference.inference.InferenceStats.total_token_count":
		x.TotalTokenCount = value.Uint()
	case "inference.inference.InferenceStats.model":
		x.Model = value.Interface().(string)
	case "inference.inference.InferenceStats.actual_cost_in_coins":
		x.ActualCostInCoins = value.Int()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.InferenceStats"))
		}
		panic(fmt.Errorf("message inference.inference.InferenceStats does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_InferenceStats) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.InferenceStats.inference_id":
		panic(fmt.Errorf("field inference_id of message inference.inference.InferenceStats is not mutable"))
	case "inference.inference.InferenceStats.epoch_id":
		panic(fmt.Errorf("field epoch_id of message inference.inference.InferenceStats is not mutable"))
	case "inference.inference.InferenceStats.status":
		panic(fmt.Errorf("field status of message inference.inference.InferenceStats is not mutable"))
	case "inference.inference.InferenceStats.total_token_count":
		panic(fmt.Errorf("field total_token_count of message inference.inference.InferenceStats is not mutable"))
	case "inference.inference.InferenceStats.model":
		panic(fmt.Errorf("field model of message inference.inference.InferenceStats is not mutable"))
	case "inference.inference.InferenceStats.actual_cost_in_coins":
		panic(fmt.Errorf("field actual_cost_in_coins of message inference.inference.InferenceStats is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.InferenceStats"))
		}
		panic(fmt.Errorf("message inference.inference.InferenceStats does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_InferenceStats) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.InferenceStats.inference_id":
		return protoreflect.ValueOfString("")
	case "inference.inference.InferenceStats.epoch_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "inference.inference.InferenceStats.status":
		return protoreflect.ValueOfEnum(0)
	case "inference.inference.InferenceStats.total_token_count":
		return protoreflect.ValueOfUint64(uint64(0))
	case "inference.inference.InferenceStats.model":
		return protoreflect.ValueOfString("")
	case "inference.inference.InferenceStats.actual_cost_in_coins":
		return protoreflect.ValueOfInt64(int64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.InferenceStats"))
		}
		panic(fmt.Errorf("message inference.inference.InferenceStats does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_InferenceStats) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in inference.inference.InferenceStats", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_InferenceStats) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_InferenceStats) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_InferenceStats) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_InferenceStats) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*InferenceStats)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.InferenceId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.EpochId != 0 {
			n += 1 + runtime.Sov(uint64(x.EpochId))
		}
		if x.Status != 0 {
			n += 1 + runtime.Sov(uint64(x.Status))
		}
		if x.TotalTokenCount != 0 {
			n += 1 + runtime.Sov(uint64(x.TotalTokenCount))
		}
		l = len(x.Model)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.ActualCostInCoins != 0 {
			n += 1 + runtime.Sov(uint64(x.ActualCostInCoins))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*InferenceStats)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.ActualCostInCoins != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ActualCostInCoins))
			i--
			dAtA[i] = 0x30
		}
		if len(x.Model) > 0 {
			i -= len(x.Model)
			copy(dAtA[i:], x.Model)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Model)))
			i--
			dAtA[i] = 0x2a
		}
		if x.TotalTokenCount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TotalTokenCount))
			i--
			dAtA[i] = 0x20
		}
		if x.Status != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Status))
			i--
			dAtA[i] = 0x18
		}
		if x.EpochId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EpochId))
			i--
			dAtA[i] = 0x10
		}
		if len(x.InferenceId) > 0 {
			i -= len(x.InferenceId)
			copy(dAtA[i:], x.InferenceId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.InferenceId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*InferenceStats)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: InferenceStats: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: InferenceStats: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field InferenceId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.InferenceId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EpochId", wireType)
				}
				x.EpochId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EpochId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				x.Status = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Status |= InferenceStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalTokenCount", wireType)
				}
				x.TotalTokenCount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TotalTokenCount |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Model = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ActualCostInCoins", wireType)
				}
				x.ActualCostInCoins = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ActualCostInCoins |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_DeveloperStatsByTime           protoreflect.MessageDescriptor
	fd_DeveloperStatsByTime_epoch_id  protoreflect.FieldDescriptor
	fd_DeveloperStatsByTime_timestamp protoreflect.FieldDescriptor
	fd_DeveloperStatsByTime_inference protoreflect.FieldDescriptor
)

func init() {
	file_inference_inference_developer_proto_init()
	md_DeveloperStatsByTime = File_inference_inference_developer_proto.Messages().ByName("DeveloperStatsByTime")
	fd_DeveloperStatsByTime_epoch_id = md_DeveloperStatsByTime.Fields().ByName("epoch_id")
	fd_DeveloperStatsByTime_timestamp = md_DeveloperStatsByTime.Fields().ByName("timestamp")
	fd_DeveloperStatsByTime_inference = md_DeveloperStatsByTime.Fields().ByName("inference")
}

var _ protoreflect.Message = (*fastReflection_DeveloperStatsByTime)(nil)

type fastReflection_DeveloperStatsByTime DeveloperStatsByTime

func (x *DeveloperStatsByTime) ProtoReflect() protoreflect.Message {
	return (*fastReflection_DeveloperStatsByTime)(x)
}

func (x *DeveloperStatsByTime) slowProtoReflect() protoreflect.Message {
	mi := &file_inference_inference_developer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_DeveloperStatsByTime_messageType fastReflection_DeveloperStatsByTime_messageType
var _ protoreflect.MessageType = fastReflection_DeveloperStatsByTime_messageType{}

type fastReflection_DeveloperStatsByTime_messageType struct{}

func (x fastReflection_DeveloperStatsByTime_messageType) Zero() protoreflect.Message {
	return (*fastReflection_DeveloperStatsByTime)(nil)
}
func (x fastReflection_DeveloperStatsByTime_messageType) New() protoreflect.Message {
	return new(fastReflection_DeveloperStatsByTime)
}
func (x fastReflection_DeveloperStatsByTime_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_DeveloperStatsByTime
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_DeveloperStatsByTime) Descriptor() protoreflect.MessageDescriptor {
	return md_DeveloperStatsByTime
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_DeveloperStatsByTime) Type() protoreflect.MessageType {
	return _fastReflection_DeveloperStatsByTime_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_DeveloperStatsByTime) New() protoreflect.Message {
	return new(fastReflection_DeveloperStatsByTime)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_DeveloperStatsByTime) Interface() protoreflect.ProtoMessage {
	return (*DeveloperStatsByTime)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_DeveloperStatsByTime) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.EpochId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.EpochId)
		if !f(fd_DeveloperStatsByTime_epoch_id, value) {
			return
		}
	}
	if x.Timestamp != int64(0) {
		value := protoreflect.ValueOfInt64(x.Timestamp)
		if !f(fd_DeveloperStatsByTime_timestamp, value) {
			return
		}
	}
	if x.Inference != nil {
		value := protoreflect.ValueOfMessage(x.Inference.ProtoReflect())
		if !f(fd_DeveloperStatsByTime_inference, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_DeveloperStatsByTime) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "inference.inference.DeveloperStatsByTime.epoch_id":
		return x.EpochId != uint64(0)
	case "inference.inference.DeveloperStatsByTime.timestamp":
		return x.Timestamp != int64(0)
	case "inference.inference.DeveloperStatsByTime.inference":
		return x.Inference != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.DeveloperStatsByTime"))
		}
		panic(fmt.Errorf("message inference.inference.DeveloperStatsByTime does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DeveloperStatsByTime) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "inference.inference.DeveloperStatsByTime.epoch_id":
		x.EpochId = uint64(0)
	case "inference.inference.DeveloperStatsByTime.timestamp":
		x.Timestamp = int64(0)
	case "inference.inference.DeveloperStatsByTime.inference":
		x.Inference = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.DeveloperStatsByTime"))
		}
		panic(fmt.Errorf("message inference.inference.DeveloperStatsByTime does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_DeveloperStatsByTime) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "inference.inference.DeveloperStatsByTime.epoch_id":
		value := x.EpochId
		return protoreflect.ValueOfUint64(value)
	case "inference.inference.DeveloperStatsByTime.timestamp":
		value := x.Timestamp
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.DeveloperStatsByTime.inference":
		value := x.Inference
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.DeveloperStatsByTime"))
		}
		panic(fmt.Errorf("message inference.inference.DeveloperStatsByTime does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DeveloperStatsByTime) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "inference.inference.DeveloperStatsByTime.epoch_id":
		x.EpochId = value.Uint()
	case "inference.inference.DeveloperStatsByTime.timestamp":
		x.Timestamp = value.Int()
	case "inference.inference.DeveloperStatsByTime.inference":
		x.Inference = value.Message().Interface().(*InferenceStats)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.DeveloperStatsByTime"))
		}
		panic(fmt.Errorf("message inference.inference.DeveloperStatsByTime does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DeveloperStatsByTime) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.DeveloperStatsByTime.inference":
		if x.Inference == nil {
			x.Inference = new(InferenceStats)
		}
		return protoreflect.ValueOfMessage(x.Inference.ProtoReflect())
	case "inference.inference.DeveloperStatsByTime.epoch_id":
		panic(fmt.Errorf("field epoch_id of message inference.inference.DeveloperStatsByTime is not mutable"))
	case "inference.inference.DeveloperStatsByTime.timestamp":
		panic(fmt.Errorf("field timestamp of message inference.inference.DeveloperStatsByTime is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.DeveloperStatsByTime"))
		}
		panic(fmt.Errorf("message inference.inference.DeveloperStatsByTime does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_DeveloperStatsByTime) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.DeveloperStatsByTime.epoch_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "inference.inference.DeveloperStatsByTime.timestamp":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.DeveloperStatsByTime.inference":
		m := new(InferenceStats)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.DeveloperStatsByTime"))
		}
		panic(fmt.Errorf("message inference.inference.DeveloperStatsByTime does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_DeveloperStatsByTime) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in inference.inference.DeveloperStatsByTime", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_DeveloperStatsByTime) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DeveloperStatsByTime) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_DeveloperStatsByTime) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_DeveloperStatsByTime) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*DeveloperStatsByTime)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.EpochId != 0 {
			n += 1 + runtime.Sov(uint64(x.EpochId))
		}
		if x.Timestamp != 0 {
			n += 1 + runtime.Sov(uint64(x.Timestamp))
		}
		if x.Inference != nil {
			l = options.Size(x.Inference)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*DeveloperStatsByTime)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Inference != nil {
			encoded, err := options.Marshal(x.Inference)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if x.Timestamp != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Timestamp))
			i--
			dAtA[i] = 0x10
		}
		if x.EpochId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EpochId))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*DeveloperStatsByTime)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DeveloperStatsByTime: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DeveloperStatsByTime: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EpochId", wireType)
				}
				x.EpochId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EpochId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
				}
				x.Timestamp = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Timestamp |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Inference", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Inference == nil {
					x.Inference = &InferenceStats{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Inference); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: inference/inference/developer.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DeveloperStatsByEpoch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EpochId      uint64   `protobuf:"varint,1,opt,name=epoch_id,json=epochId,proto3" json:"epoch_id,omitempty"`
	InferenceIds []string `protobuf:"bytes,2,rep,name=inference_ids,json=inferenceIds,proto3" json:"inference_ids,omitempty"`
}

func (x *DeveloperStatsByEpoch) Reset() {
	*x = DeveloperStatsByEpoch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_inference_developer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeveloperStatsByEpoch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeveloperStatsByEpoch) ProtoMessage() {}

// Deprecated: Use DeveloperStatsByEpoch.ProtoReflect.Descriptor instead.
func (*DeveloperStatsByEpoch) Descriptor() ([]byte, []int) {
	return file_inference_inference_developer_proto_rawDescGZIP(), []int{0}
}

func (x *DeveloperStatsByEpoch) GetEpochId() uint64 {
	if x != nil {
		return x.EpochId
	}
	return 0
}

func (x *DeveloperStatsByEpoch) GetInferenceIds() []string {
	if x != nil {
		return x.InferenceIds
	}
	return nil
}

type InferenceStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InferenceId       string          `protobuf:"bytes,1,opt,name=inference_id,json=inferenceId,proto3" json:"inference_id,omitempty"`
	EpochId           uint64          `protobuf:"varint,2,opt,name=epoch_id,json=epochId,proto3" json:"epoch_id,omitempty"`
	Status            InferenceStatus `protobuf:"varint,3,opt,name=status,proto3,enum=inference.inference.InferenceStatus" json:"status,omitempty"`
	TotalTokenCount   uint64          `protobuf:"varint,4,opt,name=total_token_count,json=totalTokenCount,proto3" json:"total_token_count,omitempty"`
	Model             string          `protobuf:"bytes,5,opt,name=model,proto3" json:"model,omitempty"`
	ActualCostInCoins int64           `protobuf:"varint,6,opt,name=actual_cost_in_coins,json=actualCostInCoins,proto3" json:"actual_cost_in_coins,omitempty"`
}

func (x *InferenceStats) Reset() {
	*x = InferenceStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_inference_developer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InferenceStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InferenceStats) ProtoMessage() {}

// Deprecated: Use InferenceStats.ProtoReflect.Descriptor instead.
func (*InferenceStats) Descriptor() ([]byte, []int) {
	return file_inference_inference_developer_proto_rawDescGZIP(), []int{1}
}

func (x *InferenceStats) GetInferenceId() string {
	if x != nil {
		return x.InferenceId
	}
	return ""
}

func (x *InferenceStats) GetEpochId() uint64 {
	if x != nil {
		return x.EpochId
	}
	return 0
}

func (x *InferenceStats) GetStatus() InferenceStatus {
	if x != nil {
		return x.Status
	}
	return InferenceStatus_STARTED
}

func (x *InferenceStats) GetTotalTokenCount() uint64 {
	if x != nil {
		return x.TotalTokenCount
	}
	return 0
}

func (x *InferenceStats) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *InferenceStats) GetActualCostInCoins() int64 {
	if x != nil {
		return x.ActualCostInCoins
	}
	return 0
}

type DeveloperStatsByTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EpochId   uint64          `protobuf:"varint,1,opt,name=epoch_id,json=epochId,proto3" json:"epoch_id,omitempty"`
	Timestamp int64           `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Inference *InferenceStats `protobuf:"bytes,3,opt,name=inference,proto3" json:"inference,omitempty"`
}

func (x *DeveloperStatsByTime) Reset() {
	*x = DeveloperStatsByTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_inference_developer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeveloperStatsByTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeveloperStatsByTime) ProtoMessage() {}

// Deprecated: Use DeveloperStatsByTime.ProtoReflect.Descriptor instead.
func (*DeveloperStatsByTime) Descriptor() ([]byte, []int) {
	return file_inference_inference_developer_proto_rawDescGZIP(), []int{2}
}

func (x *DeveloperStatsByTime) GetEpochId() uint64 {
	if x != nil {
		return x.EpochId
	}
	return 0
}

func (x *DeveloperStatsByTime) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DeveloperStatsByTime) GetInference() *InferenceStats {
	if x != nil {
		return x.Inference
	}
	return nil
}

var File_inference_inference_developer_proto protoreflect.FileDescriptor

var file_inference_inference_developer_proto_rawDesc = []byte{
	0x0a, 0x23, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0x23, 0x69, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f,
	0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x57, 0x0a, 0x15, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x42, 0x79, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x73, 0x22, 0xff, 0x01, 0x0a, 0x0e, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x69, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x2f, 0x0a, 0x14, 0x61, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x69, 0x6e,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x43,
	0x6f, 0x73, 0x74, 0x49, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x14, 0x44,
	0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x41, 0x0a, 0x09,
	0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x09, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0xbc, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0x44, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x24, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0xa2, 0x02, 0x03, 0x49, 0x49, 0x58, 0xaa, 0x02, 0x13, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0xca,
	0x02, 0x13, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5c, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0xe2, 0x02, 0x1f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x5c, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x14, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x3a, 0x3a, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_inference_inference_developer_proto_rawDescOnce sync.Once
	file_inference_inference_developer_proto_rawDescData = file_inference_inference_developer_proto_rawDesc
)

func file_inference_inference_developer_proto_rawDescGZIP() []byte {
	file_inference_inference_developer_proto_rawDescOnce.Do(func() {
		file_inference_inference_developer_proto_rawDescData = protoimpl.X.CompressGZIP(file_inference_inference_developer_proto_rawDescData)
	})
	return file_inference_inference_developer_proto_rawDescData
}

var file_inference_inference_developer_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_inference_inference_developer_proto_goTypes = []interface{}{
	(*DeveloperStatsByEpoch)(nil), // 0: inference.inference.DeveloperStatsByEpoch
	(*InferenceStats)(nil),        // 1: inference.inference.InferenceStats
	(*DeveloperStatsByTime)(nil),  // 2: inference.inference.DeveloperStatsByTime
	(InferenceStatus)(0),          // 3: inference.inference.InferenceStatus
}
var file_inference_inference_developer_proto_depIdxs = []int32{
	3, // 0: inference.inference.InferenceStats.status:type_name -> inference.inference.InferenceStatus
	1, // 1: inference.inference.DeveloperStatsByTime.inference:type_name -> inference.inference.InferenceStats
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_inference_inference_developer_proto_init() }
func file_inference_inference_developer_proto_init() {
	if File_inference_inference_developer_proto != nil {
		return
	}
	file_inference_inference_inference_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_inference_inference_developer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeveloperStatsByEpoch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_inference_developer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InferenceStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_inference_developer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeveloperStatsByTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_inference_inference_developer_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_inference_inference_developer_proto_goTypes,
		DependencyIndexes: file_inference_inference_developer_proto_depIdxs,
		MessageInfos:      file_inference_inference_developer_proto_msgTypes,
	}.Build()
	File_inference_inference_developer_proto = out.File
	file_inference_inference_developer_proto_rawDesc = nil
	file_inference_inference_developer_proto_goTypes = nil
	file_inference_inference_developer_proto_depIdxs = nil
}

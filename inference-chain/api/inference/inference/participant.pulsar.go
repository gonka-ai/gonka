// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package inference

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_Participant                                protoreflect.MessageDescriptor
	fd_Participant_index                          protoreflect.FieldDescriptor
	fd_Participant_address                        protoreflect.FieldDescriptor
	fd_Participant_weight                         protoreflect.FieldDescriptor
	fd_Participant_join_time                      protoreflect.FieldDescriptor
	fd_Participant_join_height                    protoreflect.FieldDescriptor
	fd_Participant_last_inference_time            protoreflect.FieldDescriptor
	fd_Participant_inference_url                  protoreflect.FieldDescriptor
	fd_Participant_status                         protoreflect.FieldDescriptor
	fd_Participant_coin_balance                   protoreflect.FieldDescriptor
	fd_Participant_validator_key                  protoreflect.FieldDescriptor
	fd_Participant_consecutive_invalid_inferences protoreflect.FieldDescriptor
	fd_Participant_worker_public_key              protoreflect.FieldDescriptor
	fd_Participant_epochs_completed               protoreflect.FieldDescriptor
	fd_Participant_current_epoch_stats            protoreflect.FieldDescriptor
)

func init() {
	file_inference_inference_participant_proto_init()
	md_Participant = File_inference_inference_participant_proto.Messages().ByName("Participant")
	fd_Participant_index = md_Participant.Fields().ByName("index")
	fd_Participant_address = md_Participant.Fields().ByName("address")
	fd_Participant_weight = md_Participant.Fields().ByName("weight")
	fd_Participant_join_time = md_Participant.Fields().ByName("join_time")
	fd_Participant_join_height = md_Participant.Fields().ByName("join_height")
	fd_Participant_last_inference_time = md_Participant.Fields().ByName("last_inference_time")
	fd_Participant_inference_url = md_Participant.Fields().ByName("inference_url")
	fd_Participant_status = md_Participant.Fields().ByName("status")
	fd_Participant_coin_balance = md_Participant.Fields().ByName("coin_balance")
	fd_Participant_validator_key = md_Participant.Fields().ByName("validator_key")
	fd_Participant_consecutive_invalid_inferences = md_Participant.Fields().ByName("consecutive_invalid_inferences")
	fd_Participant_worker_public_key = md_Participant.Fields().ByName("worker_public_key")
	fd_Participant_epochs_completed = md_Participant.Fields().ByName("epochs_completed")
	fd_Participant_current_epoch_stats = md_Participant.Fields().ByName("current_epoch_stats")
}

var _ protoreflect.Message = (*fastReflection_Participant)(nil)

type fastReflection_Participant Participant

func (x *Participant) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Participant)(x)
}

func (x *Participant) slowProtoReflect() protoreflect.Message {
	mi := &file_inference_inference_participant_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Participant_messageType fastReflection_Participant_messageType
var _ protoreflect.MessageType = fastReflection_Participant_messageType{}

type fastReflection_Participant_messageType struct{}

func (x fastReflection_Participant_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Participant)(nil)
}
func (x fastReflection_Participant_messageType) New() protoreflect.Message {
	return new(fastReflection_Participant)
}
func (x fastReflection_Participant_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Participant
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Participant) Descriptor() protoreflect.MessageDescriptor {
	return md_Participant
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Participant) Type() protoreflect.MessageType {
	return _fastReflection_Participant_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Participant) New() protoreflect.Message {
	return new(fastReflection_Participant)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Participant) Interface() protoreflect.ProtoMessage {
	return (*Participant)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Participant) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Index != "" {
		value := protoreflect.ValueOfString(x.Index)
		if !f(fd_Participant_index, value) {
			return
		}
	}
	if x.Address != "" {
		value := protoreflect.ValueOfString(x.Address)
		if !f(fd_Participant_address, value) {
			return
		}
	}
	if x.Weight != int32(0) {
		value := protoreflect.ValueOfInt32(x.Weight)
		if !f(fd_Participant_weight, value) {
			return
		}
	}
	if x.JoinTime != int64(0) {
		value := protoreflect.ValueOfInt64(x.JoinTime)
		if !f(fd_Participant_join_time, value) {
			return
		}
	}
	if x.JoinHeight != int64(0) {
		value := protoreflect.ValueOfInt64(x.JoinHeight)
		if !f(fd_Participant_join_height, value) {
			return
		}
	}
	if x.LastInferenceTime != int64(0) {
		value := protoreflect.ValueOfInt64(x.LastInferenceTime)
		if !f(fd_Participant_last_inference_time, value) {
			return
		}
	}
	if x.InferenceUrl != "" {
		value := protoreflect.ValueOfString(x.InferenceUrl)
		if !f(fd_Participant_inference_url, value) {
			return
		}
	}
	if x.Status != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Status))
		if !f(fd_Participant_status, value) {
			return
		}
	}
	if x.CoinBalance != int64(0) {
		value := protoreflect.ValueOfInt64(x.CoinBalance)
		if !f(fd_Participant_coin_balance, value) {
			return
		}
	}
	if x.ValidatorKey != "" {
		value := protoreflect.ValueOfString(x.ValidatorKey)
		if !f(fd_Participant_validator_key, value) {
			return
		}
	}
	if x.ConsecutiveInvalidInferences != int64(0) {
		value := protoreflect.ValueOfInt64(x.ConsecutiveInvalidInferences)
		if !f(fd_Participant_consecutive_invalid_inferences, value) {
			return
		}
	}
	if x.WorkerPublicKey != "" {
		value := protoreflect.ValueOfString(x.WorkerPublicKey)
		if !f(fd_Participant_worker_public_key, value) {
			return
		}
	}
	if x.EpochsCompleted != uint32(0) {
		value := protoreflect.ValueOfUint32(x.EpochsCompleted)
		if !f(fd_Participant_epochs_completed, value) {
			return
		}
	}
	if x.CurrentEpochStats != nil {
		value := protoreflect.ValueOfMessage(x.CurrentEpochStats.ProtoReflect())
		if !f(fd_Participant_current_epoch_stats, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Participant) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "inference.inference.Participant.index":
		return x.Index != ""
	case "inference.inference.Participant.address":
		return x.Address != ""
	case "inference.inference.Participant.weight":
		return x.Weight != int32(0)
	case "inference.inference.Participant.join_time":
		return x.JoinTime != int64(0)
	case "inference.inference.Participant.join_height":
		return x.JoinHeight != int64(0)
	case "inference.inference.Participant.last_inference_time":
		return x.LastInferenceTime != int64(0)
	case "inference.inference.Participant.inference_url":
		return x.InferenceUrl != ""
	case "inference.inference.Participant.status":
		return x.Status != 0
	case "inference.inference.Participant.coin_balance":
		return x.CoinBalance != int64(0)
	case "inference.inference.Participant.validator_key":
		return x.ValidatorKey != ""
	case "inference.inference.Participant.consecutive_invalid_inferences":
		return x.ConsecutiveInvalidInferences != int64(0)
	case "inference.inference.Participant.worker_public_key":
		return x.WorkerPublicKey != ""
	case "inference.inference.Participant.epochs_completed":
		return x.EpochsCompleted != uint32(0)
	case "inference.inference.Participant.current_epoch_stats":
		return x.CurrentEpochStats != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.Participant"))
		}
		panic(fmt.Errorf("message inference.inference.Participant does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Participant) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "inference.inference.Participant.index":
		x.Index = ""
	case "inference.inference.Participant.address":
		x.Address = ""
	case "inference.inference.Participant.weight":
		x.Weight = int32(0)
	case "inference.inference.Participant.join_time":
		x.JoinTime = int64(0)
	case "inference.inference.Participant.join_height":
		x.JoinHeight = int64(0)
	case "inference.inference.Participant.last_inference_time":
		x.LastInferenceTime = int64(0)
	case "inference.inference.Participant.inference_url":
		x.InferenceUrl = ""
	case "inference.inference.Participant.status":
		x.Status = 0
	case "inference.inference.Participant.coin_balance":
		x.CoinBalance = int64(0)
	case "inference.inference.Participant.validator_key":
		x.ValidatorKey = ""
	case "inference.inference.Participant.consecutive_invalid_inferences":
		x.ConsecutiveInvalidInferences = int64(0)
	case "inference.inference.Participant.worker_public_key":
		x.WorkerPublicKey = ""
	case "inference.inference.Participant.epochs_completed":
		x.EpochsCompleted = uint32(0)
	case "inference.inference.Participant.current_epoch_stats":
		x.CurrentEpochStats = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.Participant"))
		}
		panic(fmt.Errorf("message inference.inference.Participant does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Participant) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "inference.inference.Participant.index":
		value := x.Index
		return protoreflect.ValueOfString(value)
	case "inference.inference.Participant.address":
		value := x.Address
		return protoreflect.ValueOfString(value)
	case "inference.inference.Participant.weight":
		value := x.Weight
		return protoreflect.ValueOfInt32(value)
	case "inference.inference.Participant.join_time":
		value := x.JoinTime
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.Participant.join_height":
		value := x.JoinHeight
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.Participant.last_inference_time":
		value := x.LastInferenceTime
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.Participant.inference_url":
		value := x.InferenceUrl
		return protoreflect.ValueOfString(value)
	case "inference.inference.Participant.status":
		value := x.Status
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "inference.inference.Participant.coin_balance":
		value := x.CoinBalance
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.Participant.validator_key":
		value := x.ValidatorKey
		return protoreflect.ValueOfString(value)
	case "inference.inference.Participant.consecutive_invalid_inferences":
		value := x.ConsecutiveInvalidInferences
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.Participant.worker_public_key":
		value := x.WorkerPublicKey
		return protoreflect.ValueOfString(value)
	case "inference.inference.Participant.epochs_completed":
		value := x.EpochsCompleted
		return protoreflect.ValueOfUint32(value)
	case "inference.inference.Participant.current_epoch_stats":
		value := x.CurrentEpochStats
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.Participant"))
		}
		panic(fmt.Errorf("message inference.inference.Participant does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Participant) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "inference.inference.Participant.index":
		x.Index = value.Interface().(string)
	case "inference.inference.Participant.address":
		x.Address = value.Interface().(string)
	case "inference.inference.Participant.weight":
		x.Weight = int32(value.Int())
	case "inference.inference.Participant.join_time":
		x.JoinTime = value.Int()
	case "inference.inference.Participant.join_height":
		x.JoinHeight = value.Int()
	case "inference.inference.Participant.last_inference_time":
		x.LastInferenceTime = value.Int()
	case "inference.inference.Participant.inference_url":
		x.InferenceUrl = value.Interface().(string)
	case "inference.inference.Participant.status":
		x.Status = (ParticipantStatus)(value.Enum())
	case "inference.inference.Participant.coin_balance":
		x.CoinBalance = value.Int()
	case "inference.inference.Participant.validator_key":
		x.ValidatorKey = value.Interface().(string)
	case "inference.inference.Participant.consecutive_invalid_inferences":
		x.ConsecutiveInvalidInferences = value.Int()
	case "inference.inference.Participant.worker_public_key":
		x.WorkerPublicKey = value.Interface().(string)
	case "inference.inference.Participant.epochs_completed":
		x.EpochsCompleted = uint32(value.Uint())
	case "inference.inference.Participant.current_epoch_stats":
		x.CurrentEpochStats = value.Message().Interface().(*CurrentEpochStats)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.Participant"))
		}
		panic(fmt.Errorf("message inference.inference.Participant does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Participant) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.Participant.current_epoch_stats":
		if x.CurrentEpochStats == nil {
			x.CurrentEpochStats = new(CurrentEpochStats)
		}
		return protoreflect.ValueOfMessage(x.CurrentEpochStats.ProtoReflect())
	case "inference.inference.Participant.index":
		panic(fmt.Errorf("field index of message inference.inference.Participant is not mutable"))
	case "inference.inference.Participant.address":
		panic(fmt.Errorf("field address of message inference.inference.Participant is not mutable"))
	case "inference.inference.Participant.weight":
		panic(fmt.Errorf("field weight of message inference.inference.Participant is not mutable"))
	case "inference.inference.Participant.join_time":
		panic(fmt.Errorf("field join_time of message inference.inference.Participant is not mutable"))
	case "inference.inference.Participant.join_height":
		panic(fmt.Errorf("field join_height of message inference.inference.Participant is not mutable"))
	case "inference.inference.Participant.last_inference_time":
		panic(fmt.Errorf("field last_inference_time of message inference.inference.Participant is not mutable"))
	case "inference.inference.Participant.inference_url":
		panic(fmt.Errorf("field inference_url of message inference.inference.Participant is not mutable"))
	case "inference.inference.Participant.status":
		panic(fmt.Errorf("field status of message inference.inference.Participant is not mutable"))
	case "inference.inference.Participant.coin_balance":
		panic(fmt.Errorf("field coin_balance of message inference.inference.Participant is not mutable"))
	case "inference.inference.Participant.validator_key":
		panic(fmt.Errorf("field validator_key of message inference.inference.Participant is not mutable"))
	case "inference.inference.Participant.consecutive_invalid_inferences":
		panic(fmt.Errorf("field consecutive_invalid_inferences of message inference.inference.Participant is not mutable"))
	case "inference.inference.Participant.worker_public_key":
		panic(fmt.Errorf("field worker_public_key of message inference.inference.Participant is not mutable"))
	case "inference.inference.Participant.epochs_completed":
		panic(fmt.Errorf("field epochs_completed of message inference.inference.Participant is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.Participant"))
		}
		panic(fmt.Errorf("message inference.inference.Participant does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Participant) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.Participant.index":
		return protoreflect.ValueOfString("")
	case "inference.inference.Participant.address":
		return protoreflect.ValueOfString("")
	case "inference.inference.Participant.weight":
		return protoreflect.ValueOfInt32(int32(0))
	case "inference.inference.Participant.join_time":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.Participant.join_height":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.Participant.last_inference_time":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.Participant.inference_url":
		return protoreflect.ValueOfString("")
	case "inference.inference.Participant.status":
		return protoreflect.ValueOfEnum(0)
	case "inference.inference.Participant.coin_balance":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.Participant.validator_key":
		return protoreflect.ValueOfString("")
	case "inference.inference.Participant.consecutive_invalid_inferences":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.Participant.worker_public_key":
		return protoreflect.ValueOfString("")
	case "inference.inference.Participant.epochs_completed":
		return protoreflect.ValueOfUint32(uint32(0))
	case "inference.inference.Participant.current_epoch_stats":
		m := new(CurrentEpochStats)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.Participant"))
		}
		panic(fmt.Errorf("message inference.inference.Participant does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Participant) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in inference.inference.Participant", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Participant) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Participant) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Participant) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Participant) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Participant)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Index)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Address)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Weight != 0 {
			n += 1 + runtime.Sov(uint64(x.Weight))
		}
		if x.JoinTime != 0 {
			n += 1 + runtime.Sov(uint64(x.JoinTime))
		}
		if x.JoinHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.JoinHeight))
		}
		if x.LastInferenceTime != 0 {
			n += 1 + runtime.Sov(uint64(x.LastInferenceTime))
		}
		l = len(x.InferenceUrl)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Status != 0 {
			n += 1 + runtime.Sov(uint64(x.Status))
		}
		if x.CoinBalance != 0 {
			n += 1 + runtime.Sov(uint64(x.CoinBalance))
		}
		l = len(x.ValidatorKey)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.ConsecutiveInvalidInferences != 0 {
			n += 1 + runtime.Sov(uint64(x.ConsecutiveInvalidInferences))
		}
		l = len(x.WorkerPublicKey)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.EpochsCompleted != 0 {
			n += 1 + runtime.Sov(uint64(x.EpochsCompleted))
		}
		if x.CurrentEpochStats != nil {
			l = options.Size(x.CurrentEpochStats)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Participant)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.CurrentEpochStats != nil {
			encoded, err := options.Marshal(x.CurrentEpochStats)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x72
		}
		if x.EpochsCompleted != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EpochsCompleted))
			i--
			dAtA[i] = 0x68
		}
		if len(x.WorkerPublicKey) > 0 {
			i -= len(x.WorkerPublicKey)
			copy(dAtA[i:], x.WorkerPublicKey)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.WorkerPublicKey)))
			i--
			dAtA[i] = 0x62
		}
		if x.ConsecutiveInvalidInferences != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ConsecutiveInvalidInferences))
			i--
			dAtA[i] = 0x58
		}
		if len(x.ValidatorKey) > 0 {
			i -= len(x.ValidatorKey)
			copy(dAtA[i:], x.ValidatorKey)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ValidatorKey)))
			i--
			dAtA[i] = 0x52
		}
		if x.CoinBalance != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CoinBalance))
			i--
			dAtA[i] = 0x48
		}
		if x.Status != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Status))
			i--
			dAtA[i] = 0x40
		}
		if len(x.InferenceUrl) > 0 {
			i -= len(x.InferenceUrl)
			copy(dAtA[i:], x.InferenceUrl)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.InferenceUrl)))
			i--
			dAtA[i] = 0x3a
		}
		if x.LastInferenceTime != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.LastInferenceTime))
			i--
			dAtA[i] = 0x30
		}
		if x.JoinHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.JoinHeight))
			i--
			dAtA[i] = 0x28
		}
		if x.JoinTime != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.JoinTime))
			i--
			dAtA[i] = 0x20
		}
		if x.Weight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Weight))
			i--
			dAtA[i] = 0x18
		}
		if len(x.Address) > 0 {
			i -= len(x.Address)
			copy(dAtA[i:], x.Address)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Address)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Index) > 0 {
			i -= len(x.Index)
			copy(dAtA[i:], x.Index)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Index)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Participant)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Participant: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Participant: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Index = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Address = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
				}
				x.Weight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Weight |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field JoinTime", wireType)
				}
				x.JoinTime = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.JoinTime |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field JoinHeight", wireType)
				}
				x.JoinHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.JoinHeight |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastInferenceTime", wireType)
				}
				x.LastInferenceTime = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.LastInferenceTime |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field InferenceUrl", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.InferenceUrl = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				x.Status = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Status |= ParticipantStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CoinBalance", wireType)
				}
				x.CoinBalance = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CoinBalance |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidatorKey", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ValidatorKey = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 11:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ConsecutiveInvalidInferences", wireType)
				}
				x.ConsecutiveInvalidInferences = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ConsecutiveInvalidInferences |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 12:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field WorkerPublicKey", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.WorkerPublicKey = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 13:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EpochsCompleted", wireType)
				}
				x.EpochsCompleted = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EpochsCompleted |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 14:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CurrentEpochStats", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.CurrentEpochStats == nil {
					x.CurrentEpochStats = &CurrentEpochStats{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.CurrentEpochStats); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_CurrentEpochStats                        protoreflect.MessageDescriptor
	fd_CurrentEpochStats_inference_count        protoreflect.FieldDescriptor
	fd_CurrentEpochStats_missed_requests        protoreflect.FieldDescriptor
	fd_CurrentEpochStats_earned_coins           protoreflect.FieldDescriptor
	fd_CurrentEpochStats_rewarded_coins         protoreflect.FieldDescriptor
	fd_CurrentEpochStats_burned_coins           protoreflect.FieldDescriptor
	fd_CurrentEpochStats_validated_inferences   protoreflect.FieldDescriptor
	fd_CurrentEpochStats_invalidated_inferences protoreflect.FieldDescriptor
)

func init() {
	file_inference_inference_participant_proto_init()
	md_CurrentEpochStats = File_inference_inference_participant_proto.Messages().ByName("CurrentEpochStats")
	fd_CurrentEpochStats_inference_count = md_CurrentEpochStats.Fields().ByName("inference_count")
	fd_CurrentEpochStats_missed_requests = md_CurrentEpochStats.Fields().ByName("missed_requests")
	fd_CurrentEpochStats_earned_coins = md_CurrentEpochStats.Fields().ByName("earned_coins")
	fd_CurrentEpochStats_rewarded_coins = md_CurrentEpochStats.Fields().ByName("rewarded_coins")
	fd_CurrentEpochStats_burned_coins = md_CurrentEpochStats.Fields().ByName("burned_coins")
	fd_CurrentEpochStats_validated_inferences = md_CurrentEpochStats.Fields().ByName("validated_inferences")
	fd_CurrentEpochStats_invalidated_inferences = md_CurrentEpochStats.Fields().ByName("invalidated_inferences")
}

var _ protoreflect.Message = (*fastReflection_CurrentEpochStats)(nil)

type fastReflection_CurrentEpochStats CurrentEpochStats

func (x *CurrentEpochStats) ProtoReflect() protoreflect.Message {
	return (*fastReflection_CurrentEpochStats)(x)
}

func (x *CurrentEpochStats) slowProtoReflect() protoreflect.Message {
	mi := &file_inference_inference_participant_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_CurrentEpochStats_messageType fastReflection_CurrentEpochStats_messageType
var _ protoreflect.MessageType = fastReflection_CurrentEpochStats_messageType{}

type fastReflection_CurrentEpochStats_messageType struct{}

func (x fastReflection_CurrentEpochStats_messageType) Zero() protoreflect.Message {
	return (*fastReflection_CurrentEpochStats)(nil)
}
func (x fastReflection_CurrentEpochStats_messageType) New() protoreflect.Message {
	return new(fastReflection_CurrentEpochStats)
}
func (x fastReflection_CurrentEpochStats_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_CurrentEpochStats
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_CurrentEpochStats) Descriptor() protoreflect.MessageDescriptor {
	return md_CurrentEpochStats
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_CurrentEpochStats) Type() protoreflect.MessageType {
	return _fastReflection_CurrentEpochStats_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_CurrentEpochStats) New() protoreflect.Message {
	return new(fastReflection_CurrentEpochStats)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_CurrentEpochStats) Interface() protoreflect.ProtoMessage {
	return (*CurrentEpochStats)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_CurrentEpochStats) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.InferenceCount != uint64(0) {
		value := protoreflect.ValueOfUint64(x.InferenceCount)
		if !f(fd_CurrentEpochStats_inference_count, value) {
			return
		}
	}
	if x.MissedRequests != uint64(0) {
		value := protoreflect.ValueOfUint64(x.MissedRequests)
		if !f(fd_CurrentEpochStats_missed_requests, value) {
			return
		}
	}
	if x.EarnedCoins != uint64(0) {
		value := protoreflect.ValueOfUint64(x.EarnedCoins)
		if !f(fd_CurrentEpochStats_earned_coins, value) {
			return
		}
	}
	if x.RewardedCoins != uint64(0) {
		value := protoreflect.ValueOfUint64(x.RewardedCoins)
		if !f(fd_CurrentEpochStats_rewarded_coins, value) {
			return
		}
	}
	if x.BurnedCoins != uint64(0) {
		value := protoreflect.ValueOfUint64(x.BurnedCoins)
		if !f(fd_CurrentEpochStats_burned_coins, value) {
			return
		}
	}
	if x.ValidatedInferences != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ValidatedInferences)
		if !f(fd_CurrentEpochStats_validated_inferences, value) {
			return
		}
	}
	if x.InvalidatedInferences != uint64(0) {
		value := protoreflect.ValueOfUint64(x.InvalidatedInferences)
		if !f(fd_CurrentEpochStats_invalidated_inferences, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_CurrentEpochStats) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "inference.inference.CurrentEpochStats.inference_count":
		return x.InferenceCount != uint64(0)
	case "inference.inference.CurrentEpochStats.missed_requests":
		return x.MissedRequests != uint64(0)
	case "inference.inference.CurrentEpochStats.earned_coins":
		return x.EarnedCoins != uint64(0)
	case "inference.inference.CurrentEpochStats.rewarded_coins":
		return x.RewardedCoins != uint64(0)
	case "inference.inference.CurrentEpochStats.burned_coins":
		return x.BurnedCoins != uint64(0)
	case "inference.inference.CurrentEpochStats.validated_inferences":
		return x.ValidatedInferences != uint64(0)
	case "inference.inference.CurrentEpochStats.invalidated_inferences":
		return x.InvalidatedInferences != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.CurrentEpochStats"))
		}
		panic(fmt.Errorf("message inference.inference.CurrentEpochStats does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CurrentEpochStats) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "inference.inference.CurrentEpochStats.inference_count":
		x.InferenceCount = uint64(0)
	case "inference.inference.CurrentEpochStats.missed_requests":
		x.MissedRequests = uint64(0)
	case "inference.inference.CurrentEpochStats.earned_coins":
		x.EarnedCoins = uint64(0)
	case "inference.inference.CurrentEpochStats.rewarded_coins":
		x.RewardedCoins = uint64(0)
	case "inference.inference.CurrentEpochStats.burned_coins":
		x.BurnedCoins = uint64(0)
	case "inference.inference.CurrentEpochStats.validated_inferences":
		x.ValidatedInferences = uint64(0)
	case "inference.inference.CurrentEpochStats.invalidated_inferences":
		x.InvalidatedInferences = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.CurrentEpochStats"))
		}
		panic(fmt.Errorf("message inference.inference.CurrentEpochStats does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_CurrentEpochStats) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "inference.inference.CurrentEpochStats.inference_count":
		value := x.InferenceCount
		return protoreflect.ValueOfUint64(value)
	case "inference.inference.CurrentEpochStats.missed_requests":
		value := x.MissedRequests
		return protoreflect.ValueOfUint64(value)
	case "inference.inference.CurrentEpochStats.earned_coins":
		value := x.EarnedCoins
		return protoreflect.ValueOfUint64(value)
	case "inference.inference.CurrentEpochStats.rewarded_coins":
		value := x.RewardedCoins
		return protoreflect.ValueOfUint64(value)
	case "inference.inference.CurrentEpochStats.burned_coins":
		value := x.BurnedCoins
		return protoreflect.ValueOfUint64(value)
	case "inference.inference.CurrentEpochStats.validated_inferences":
		value := x.ValidatedInferences
		return protoreflect.ValueOfUint64(value)
	case "inference.inference.CurrentEpochStats.invalidated_inferences":
		value := x.InvalidatedInferences
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.CurrentEpochStats"))
		}
		panic(fmt.Errorf("message inference.inference.CurrentEpochStats does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CurrentEpochStats) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "inference.inference.CurrentEpochStats.inference_count":
		x.InferenceCount = value.Uint()
	case "inference.inference.CurrentEpochStats.missed_requests":
		x.MissedRequests = value.Uint()
	case "inference.inference.CurrentEpochStats.earned_coins":
		x.EarnedCoins = value.Uint()
	case "inference.inference.CurrentEpochStats.rewarded_coins":
		x.RewardedCoins = value.Uint()
	case "inference.inference.CurrentEpochStats.burned_coins":
		x.BurnedCoins = value.Uint()
	case "inference.inference.CurrentEpochStats.validated_inferences":
		x.ValidatedInferences = value.Uint()
	case "inference.inference.CurrentEpochStats.invalidated_inferences":
		x.InvalidatedInferences = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.CurrentEpochStats"))
		}
		panic(fmt.Errorf("message inference.inference.CurrentEpochStats does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CurrentEpochStats) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.CurrentEpochStats.inference_count":
		panic(fmt.Errorf("field inference_count of message inference.inference.CurrentEpochStats is not mutable"))
	case "inference.inference.CurrentEpochStats.missed_requests":
		panic(fmt.Errorf("field missed_requests of message inference.inference.CurrentEpochStats is not mutable"))
	case "inference.inference.CurrentEpochStats.earned_coins":
		panic(fmt.Errorf("field earned_coins of message inference.inference.CurrentEpochStats is not mutable"))
	case "inference.inference.CurrentEpochStats.rewarded_coins":
		panic(fmt.Errorf("field rewarded_coins of message inference.inference.CurrentEpochStats is not mutable"))
	case "inference.inference.CurrentEpochStats.burned_coins":
		panic(fmt.Errorf("field burned_coins of message inference.inference.CurrentEpochStats is not mutable"))
	case "inference.inference.CurrentEpochStats.validated_inferences":
		panic(fmt.Errorf("field validated_inferences of message inference.inference.CurrentEpochStats is not mutable"))
	case "inference.inference.CurrentEpochStats.invalidated_inferences":
		panic(fmt.Errorf("field invalidated_inferences of message inference.inference.CurrentEpochStats is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.CurrentEpochStats"))
		}
		panic(fmt.Errorf("message inference.inference.CurrentEpochStats does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_CurrentEpochStats) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.CurrentEpochStats.inference_count":
		return protoreflect.ValueOfUint64(uint64(0))
	case "inference.inference.CurrentEpochStats.missed_requests":
		return protoreflect.ValueOfUint64(uint64(0))
	case "inference.inference.CurrentEpochStats.earned_coins":
		return protoreflect.ValueOfUint64(uint64(0))
	case "inference.inference.CurrentEpochStats.rewarded_coins":
		return protoreflect.ValueOfUint64(uint64(0))
	case "inference.inference.CurrentEpochStats.burned_coins":
		return protoreflect.ValueOfUint64(uint64(0))
	case "inference.inference.CurrentEpochStats.validated_inferences":
		return protoreflect.ValueOfUint64(uint64(0))
	case "inference.inference.CurrentEpochStats.invalidated_inferences":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.CurrentEpochStats"))
		}
		panic(fmt.Errorf("message inference.inference.CurrentEpochStats does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_CurrentEpochStats) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in inference.inference.CurrentEpochStats", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_CurrentEpochStats) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CurrentEpochStats) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_CurrentEpochStats) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_CurrentEpochStats) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*CurrentEpochStats)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.InferenceCount != 0 {
			n += 1 + runtime.Sov(uint64(x.InferenceCount))
		}
		if x.MissedRequests != 0 {
			n += 1 + runtime.Sov(uint64(x.MissedRequests))
		}
		if x.EarnedCoins != 0 {
			n += 1 + runtime.Sov(uint64(x.EarnedCoins))
		}
		if x.RewardedCoins != 0 {
			n += 1 + runtime.Sov(uint64(x.RewardedCoins))
		}
		if x.BurnedCoins != 0 {
			n += 1 + runtime.Sov(uint64(x.BurnedCoins))
		}
		if x.ValidatedInferences != 0 {
			n += 1 + runtime.Sov(uint64(x.ValidatedInferences))
		}
		if x.InvalidatedInferences != 0 {
			n += 1 + runtime.Sov(uint64(x.InvalidatedInferences))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*CurrentEpochStats)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.InvalidatedInferences != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.InvalidatedInferences))
			i--
			dAtA[i] = 0x38
		}
		if x.ValidatedInferences != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ValidatedInferences))
			i--
			dAtA[i] = 0x30
		}
		if x.BurnedCoins != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.BurnedCoins))
			i--
			dAtA[i] = 0x28
		}
		if x.RewardedCoins != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.RewardedCoins))
			i--
			dAtA[i] = 0x20
		}
		if x.EarnedCoins != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EarnedCoins))
			i--
			dAtA[i] = 0x18
		}
		if x.MissedRequests != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MissedRequests))
			i--
			dAtA[i] = 0x10
		}
		if x.InferenceCount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.InferenceCount))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*CurrentEpochStats)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CurrentEpochStats: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CurrentEpochStats: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field InferenceCount", wireType)
				}
				x.InferenceCount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.InferenceCount |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MissedRequests", wireType)
				}
				x.MissedRequests = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MissedRequests |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EarnedCoins", wireType)
				}
				x.EarnedCoins = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EarnedCoins |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RewardedCoins", wireType)
				}
				x.RewardedCoins = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.RewardedCoins |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BurnedCoins", wireType)
				}
				x.BurnedCoins = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.BurnedCoins |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidatedInferences", wireType)
				}
				x.ValidatedInferences = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ValidatedInferences |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field InvalidatedInferences", wireType)
				}
				x.InvalidatedInferences = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.InvalidatedInferences |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: inference/inference/participant.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ParticipantStatus int32

const (
	ParticipantStatus_UNSPECIFIED ParticipantStatus = 0
	ParticipantStatus_ACTIVE      ParticipantStatus = 1
	ParticipantStatus_INACTIVE    ParticipantStatus = 2
	ParticipantStatus_INVALID     ParticipantStatus = 3
	ParticipantStatus_RAMPING     ParticipantStatus = 4
)

// Enum value maps for ParticipantStatus.
var (
	ParticipantStatus_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "ACTIVE",
		2: "INACTIVE",
		3: "INVALID",
		4: "RAMPING",
	}
	ParticipantStatus_value = map[string]int32{
		"UNSPECIFIED": 0,
		"ACTIVE":      1,
		"INACTIVE":    2,
		"INVALID":     3,
		"RAMPING":     4,
	}
)

func (x ParticipantStatus) Enum() *ParticipantStatus {
	p := new(ParticipantStatus)
	*p = x
	return p
}

func (x ParticipantStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParticipantStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_inference_inference_participant_proto_enumTypes[0].Descriptor()
}

func (ParticipantStatus) Type() protoreflect.EnumType {
	return &file_inference_inference_participant_proto_enumTypes[0]
}

func (x ParticipantStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParticipantStatus.Descriptor instead.
func (ParticipantStatus) EnumDescriptor() ([]byte, []int) {
	return file_inference_inference_participant_proto_rawDescGZIP(), []int{0}
}

type Participant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index                        string             `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Address                      string             `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Weight                       int32              `protobuf:"varint,3,opt,name=weight,proto3" json:"weight,omitempty"`
	JoinTime                     int64              `protobuf:"varint,4,opt,name=join_time,json=joinTime,proto3" json:"join_time,omitempty"`
	JoinHeight                   int64              `protobuf:"varint,5,opt,name=join_height,json=joinHeight,proto3" json:"join_height,omitempty"`
	LastInferenceTime            int64              `protobuf:"varint,6,opt,name=last_inference_time,json=lastInferenceTime,proto3" json:"last_inference_time,omitempty"`
	InferenceUrl                 string             `protobuf:"bytes,7,opt,name=inference_url,json=inferenceUrl,proto3" json:"inference_url,omitempty"`
	Status                       ParticipantStatus  `protobuf:"varint,8,opt,name=status,proto3,enum=inference.inference.ParticipantStatus" json:"status,omitempty"`
	CoinBalance                  int64              `protobuf:"varint,9,opt,name=coin_balance,json=coinBalance,proto3" json:"coin_balance,omitempty"`
	ValidatorKey                 string             `protobuf:"bytes,10,opt,name=validator_key,json=validatorKey,proto3" json:"validator_key,omitempty"`
	ConsecutiveInvalidInferences int64              `protobuf:"varint,11,opt,name=consecutive_invalid_inferences,json=consecutiveInvalidInferences,proto3" json:"consecutive_invalid_inferences,omitempty"`
	WorkerPublicKey              string             `protobuf:"bytes,12,opt,name=worker_public_key,json=workerPublicKey,proto3" json:"worker_public_key,omitempty"`
	EpochsCompleted              uint32             `protobuf:"varint,13,opt,name=epochs_completed,json=epochsCompleted,proto3" json:"epochs_completed,omitempty"`
	CurrentEpochStats            *CurrentEpochStats `protobuf:"bytes,14,opt,name=current_epoch_stats,json=currentEpochStats,proto3" json:"current_epoch_stats,omitempty"`
}

func (x *Participant) Reset() {
	*x = Participant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_inference_participant_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Participant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Participant) ProtoMessage() {}

// Deprecated: Use Participant.ProtoReflect.Descriptor instead.
func (*Participant) Descriptor() ([]byte, []int) {
	return file_inference_inference_participant_proto_rawDescGZIP(), []int{0}
}

func (x *Participant) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

func (x *Participant) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Participant) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Participant) GetJoinTime() int64 {
	if x != nil {
		return x.JoinTime
	}
	return 0
}

func (x *Participant) GetJoinHeight() int64 {
	if x != nil {
		return x.JoinHeight
	}
	return 0
}

func (x *Participant) GetLastInferenceTime() int64 {
	if x != nil {
		return x.LastInferenceTime
	}
	return 0
}

func (x *Participant) GetInferenceUrl() string {
	if x != nil {
		return x.InferenceUrl
	}
	return ""
}

func (x *Participant) GetStatus() ParticipantStatus {
	if x != nil {
		return x.Status
	}
	return ParticipantStatus_UNSPECIFIED
}

func (x *Participant) GetCoinBalance() int64 {
	if x != nil {
		return x.CoinBalance
	}
	return 0
}

func (x *Participant) GetValidatorKey() string {
	if x != nil {
		return x.ValidatorKey
	}
	return ""
}

func (x *Participant) GetConsecutiveInvalidInferences() int64 {
	if x != nil {
		return x.ConsecutiveInvalidInferences
	}
	return 0
}

func (x *Participant) GetWorkerPublicKey() string {
	if x != nil {
		return x.WorkerPublicKey
	}
	return ""
}

func (x *Participant) GetEpochsCompleted() uint32 {
	if x != nil {
		return x.EpochsCompleted
	}
	return 0
}

func (x *Participant) GetCurrentEpochStats() *CurrentEpochStats {
	if x != nil {
		return x.CurrentEpochStats
	}
	return nil
}

type CurrentEpochStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InferenceCount        uint64 `protobuf:"varint,1,opt,name=inference_count,json=inferenceCount,proto3" json:"inference_count,omitempty"`
	MissedRequests        uint64 `protobuf:"varint,2,opt,name=missed_requests,json=missedRequests,proto3" json:"missed_requests,omitempty"`
	EarnedCoins           uint64 `protobuf:"varint,3,opt,name=earned_coins,json=earnedCoins,proto3" json:"earned_coins,omitempty"`
	RewardedCoins         uint64 `protobuf:"varint,4,opt,name=rewarded_coins,json=rewardedCoins,proto3" json:"rewarded_coins,omitempty"`
	BurnedCoins           uint64 `protobuf:"varint,5,opt,name=burned_coins,json=burnedCoins,proto3" json:"burned_coins,omitempty"`
	ValidatedInferences   uint64 `protobuf:"varint,6,opt,name=validated_inferences,json=validatedInferences,proto3" json:"validated_inferences,omitempty"`
	InvalidatedInferences uint64 `protobuf:"varint,7,opt,name=invalidated_inferences,json=invalidatedInferences,proto3" json:"invalidated_inferences,omitempty"`
}

func (x *CurrentEpochStats) Reset() {
	*x = CurrentEpochStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_inference_participant_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentEpochStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentEpochStats) ProtoMessage() {}

// Deprecated: Use CurrentEpochStats.ProtoReflect.Descriptor instead.
func (*CurrentEpochStats) Descriptor() ([]byte, []int) {
	return file_inference_inference_participant_proto_rawDescGZIP(), []int{1}
}

func (x *CurrentEpochStats) GetInferenceCount() uint64 {
	if x != nil {
		return x.InferenceCount
	}
	return 0
}

func (x *CurrentEpochStats) GetMissedRequests() uint64 {
	if x != nil {
		return x.MissedRequests
	}
	return 0
}

func (x *CurrentEpochStats) GetEarnedCoins() uint64 {
	if x != nil {
		return x.EarnedCoins
	}
	return 0
}

func (x *CurrentEpochStats) GetRewardedCoins() uint64 {
	if x != nil {
		return x.RewardedCoins
	}
	return 0
}

func (x *CurrentEpochStats) GetBurnedCoins() uint64 {
	if x != nil {
		return x.BurnedCoins
	}
	return 0
}

func (x *CurrentEpochStats) GetValidatedInferences() uint64 {
	if x != nil {
		return x.ValidatedInferences
	}
	return 0
}

func (x *CurrentEpochStats) GetInvalidatedInferences() uint64 {
	if x != nil {
		return x.InvalidatedInferences
	}
	return 0
}

var File_inference_inference_participant_proto protoreflect.FileDescriptor

var file_inference_inference_participant_proto_rawDesc = []byte{
	0x0a, 0x25, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xe5, 0x04, 0x0a,
	0x0b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6a, 0x6f, 0x69, 0x6e, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x69, 0x6e, 0x5f,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63,
	0x6f, 0x69, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x12,
	0x44, 0x0a, 0x1e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x56, 0x0a, 0x13,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x22, 0xbc, 0x02, 0x0a, 0x11, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x45, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6d, 0x69,
	0x73, 0x73, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x69, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x64, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75, 0x72, 0x6e, 0x65, 0x64,
	0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x75,
	0x72, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x16,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x69, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x2a, 0x58, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x03,
	0x12, 0x0b, 0x0a, 0x07, 0x52, 0x41, 0x4d, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x42, 0xbe, 0x01,
	0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x10, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x24, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0xa2, 0x02, 0x03, 0x49, 0x49, 0x58, 0xaa, 0x02, 0x13, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0xca,
	0x02, 0x13, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5c, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0xe2, 0x02, 0x1f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x5c, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x14, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x3a, 0x3a, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_inference_inference_participant_proto_rawDescOnce sync.Once
	file_inference_inference_participant_proto_rawDescData = file_inference_inference_participant_proto_rawDesc
)

func file_inference_inference_participant_proto_rawDescGZIP() []byte {
	file_inference_inference_participant_proto_rawDescOnce.Do(func() {
		file_inference_inference_participant_proto_rawDescData = protoimpl.X.CompressGZIP(file_inference_inference_participant_proto_rawDescData)
	})
	return file_inference_inference_participant_proto_rawDescData
}

var file_inference_inference_participant_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_inference_inference_participant_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_inference_inference_participant_proto_goTypes = []interface{}{
	(ParticipantStatus)(0),    // 0: inference.inference.ParticipantStatus
	(*Participant)(nil),       // 1: inference.inference.Participant
	(*CurrentEpochStats)(nil), // 2: inference.inference.CurrentEpochStats
}
var file_inference_inference_participant_proto_depIdxs = []int32{
	0, // 0: inference.inference.Participant.status:type_name -> inference.inference.ParticipantStatus
	2, // 1: inference.inference.Participant.current_epoch_stats:type_name -> inference.inference.CurrentEpochStats
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_inference_inference_participant_proto_init() }
func file_inference_inference_participant_proto_init() {
	if File_inference_inference_participant_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_inference_inference_participant_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Participant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_inference_participant_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrentEpochStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_inference_inference_participant_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_inference_inference_participant_proto_goTypes,
		DependencyIndexes: file_inference_inference_participant_proto_depIdxs,
		EnumInfos:         file_inference_inference_participant_proto_enumTypes,
		MessageInfos:      file_inference_inference_participant_proto_msgTypes,
	}.Build()
	File_inference_inference_participant_proto = out.File
	file_inference_inference_participant_proto_rawDesc = nil
	file_inference_inference_participant_proto_goTypes = nil
	file_inference_inference_participant_proto_depIdxs = nil
}

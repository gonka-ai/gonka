// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package inference

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/anypb"
	io "io"
	reflect "reflect"
	sort "sort"
	sync "sync"
)

var _ protoreflect.List = (*_Participant_9_list)(nil)

type _Participant_9_list struct {
	list *[]string
}

func (x *_Participant_9_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Participant_9_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_Participant_9_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_Participant_9_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_Participant_9_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message Participant at list field Models as it is not of Message kind"))
}

func (x *_Participant_9_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_Participant_9_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_Participant_9_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.Map = (*_Participant_11_map)(nil)

type _Participant_11_map struct {
	m *map[string]uint64
}

func (x *_Participant_11_map) Len() int {
	if x.m == nil {
		return 0
	}
	return len(*x.m)
}

func (x *_Participant_11_map) Range(f func(protoreflect.MapKey, protoreflect.Value) bool) {
	if x.m == nil {
		return
	}
	for k, v := range *x.m {
		mapKey := (protoreflect.MapKey)(protoreflect.ValueOfString(k))
		mapValue := protoreflect.ValueOfUint64(v)
		if !f(mapKey, mapValue) {
			break
		}
	}
}

func (x *_Participant_11_map) Has(key protoreflect.MapKey) bool {
	if x.m == nil {
		return false
	}
	keyUnwrapped := key.String()
	concreteValue := keyUnwrapped
	_, ok := (*x.m)[concreteValue]
	return ok
}

func (x *_Participant_11_map) Clear(key protoreflect.MapKey) {
	if x.m == nil {
		return
	}
	keyUnwrapped := key.String()
	concreteKey := keyUnwrapped
	delete(*x.m, concreteKey)
}

func (x *_Participant_11_map) Get(key protoreflect.MapKey) protoreflect.Value {
	if x.m == nil {
		return protoreflect.Value{}
	}
	keyUnwrapped := key.String()
	concreteKey := keyUnwrapped
	v, ok := (*x.m)[concreteKey]
	if !ok {
		return protoreflect.Value{}
	}
	return protoreflect.ValueOfUint64(v)
}

func (x *_Participant_11_map) Set(key protoreflect.MapKey, value protoreflect.Value) {
	if !key.IsValid() || !value.IsValid() {
		panic("invalid key or value provided")
	}
	keyUnwrapped := key.String()
	concreteKey := keyUnwrapped
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	(*x.m)[concreteKey] = concreteValue
}

func (x *_Participant_11_map) Mutable(key protoreflect.MapKey) protoreflect.Value {
	panic("should not call Mutable on protoreflect.Map whose value is not of type protoreflect.Message")
}

func (x *_Participant_11_map) NewValue() protoreflect.Value {
	v := uint64(0)
	return protoreflect.ValueOfUint64(v)
}

func (x *_Participant_11_map) IsValid() bool {
	return x.m != nil
}

var _ protoreflect.Map = (*_Participant_12_map)(nil)

type _Participant_12_map struct {
	m *map[string]uint64
}

func (x *_Participant_12_map) Len() int {
	if x.m == nil {
		return 0
	}
	return len(*x.m)
}

func (x *_Participant_12_map) Range(f func(protoreflect.MapKey, protoreflect.Value) bool) {
	if x.m == nil {
		return
	}
	for k, v := range *x.m {
		mapKey := (protoreflect.MapKey)(protoreflect.ValueOfString(k))
		mapValue := protoreflect.ValueOfUint64(v)
		if !f(mapKey, mapValue) {
			break
		}
	}
}

func (x *_Participant_12_map) Has(key protoreflect.MapKey) bool {
	if x.m == nil {
		return false
	}
	keyUnwrapped := key.String()
	concreteValue := keyUnwrapped
	_, ok := (*x.m)[concreteValue]
	return ok
}

func (x *_Participant_12_map) Clear(key protoreflect.MapKey) {
	if x.m == nil {
		return
	}
	keyUnwrapped := key.String()
	concreteKey := keyUnwrapped
	delete(*x.m, concreteKey)
}

func (x *_Participant_12_map) Get(key protoreflect.MapKey) protoreflect.Value {
	if x.m == nil {
		return protoreflect.Value{}
	}
	keyUnwrapped := key.String()
	concreteKey := keyUnwrapped
	v, ok := (*x.m)[concreteKey]
	if !ok {
		return protoreflect.Value{}
	}
	return protoreflect.ValueOfUint64(v)
}

func (x *_Participant_12_map) Set(key protoreflect.MapKey, value protoreflect.Value) {
	if !key.IsValid() || !value.IsValid() {
		panic("invalid key or value provided")
	}
	keyUnwrapped := key.String()
	concreteKey := keyUnwrapped
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	(*x.m)[concreteKey] = concreteValue
}

func (x *_Participant_12_map) Mutable(key protoreflect.MapKey) protoreflect.Value {
	panic("should not call Mutable on protoreflect.Map whose value is not of type protoreflect.Message")
}

func (x *_Participant_12_map) NewValue() protoreflect.Value {
	v := uint64(0)
	return protoreflect.ValueOfUint64(v)
}

func (x *_Participant_12_map) IsValid() bool {
	return x.m != nil
}

var (
	md_Participant                       protoreflect.MessageDescriptor
	fd_Participant_index                 protoreflect.FieldDescriptor
	fd_Participant_address               protoreflect.FieldDescriptor
	fd_Participant_reputation            protoreflect.FieldDescriptor
	fd_Participant_weight                protoreflect.FieldDescriptor
	fd_Participant_joinTime              protoreflect.FieldDescriptor
	fd_Participant_joinHeight            protoreflect.FieldDescriptor
	fd_Participant_lastInferenceTime     protoreflect.FieldDescriptor
	fd_Participant_inferenceUrl          protoreflect.FieldDescriptor
	fd_Participant_models                protoreflect.FieldDescriptor
	fd_Participant_status                protoreflect.FieldDescriptor
	fd_Participant_promptTokenCount      protoreflect.FieldDescriptor
	fd_Participant_completionTokenCount  protoreflect.FieldDescriptor
	fd_Participant_inferenceCount        protoreflect.FieldDescriptor
	fd_Participant_validatedInferences   protoreflect.FieldDescriptor
	fd_Participant_invalidatedInferences protoreflect.FieldDescriptor
	fd_Participant_coinBalance           protoreflect.FieldDescriptor
	fd_Participant_validatorKey          protoreflect.FieldDescriptor
)

func init() {
	file_inference_inference_participant_proto_init()
	md_Participant = File_inference_inference_participant_proto.Messages().ByName("Participant")
	fd_Participant_index = md_Participant.Fields().ByName("index")
	fd_Participant_address = md_Participant.Fields().ByName("address")
	fd_Participant_reputation = md_Participant.Fields().ByName("reputation")
	fd_Participant_weight = md_Participant.Fields().ByName("weight")
	fd_Participant_joinTime = md_Participant.Fields().ByName("joinTime")
	fd_Participant_joinHeight = md_Participant.Fields().ByName("joinHeight")
	fd_Participant_lastInferenceTime = md_Participant.Fields().ByName("lastInferenceTime")
	fd_Participant_inferenceUrl = md_Participant.Fields().ByName("inferenceUrl")
	fd_Participant_models = md_Participant.Fields().ByName("models")
	fd_Participant_status = md_Participant.Fields().ByName("status")
	fd_Participant_promptTokenCount = md_Participant.Fields().ByName("promptTokenCount")
	fd_Participant_completionTokenCount = md_Participant.Fields().ByName("completionTokenCount")
	fd_Participant_inferenceCount = md_Participant.Fields().ByName("inferenceCount")
	fd_Participant_validatedInferences = md_Participant.Fields().ByName("validatedInferences")
	fd_Participant_invalidatedInferences = md_Participant.Fields().ByName("invalidatedInferences")
	fd_Participant_coinBalance = md_Participant.Fields().ByName("coinBalance")
	fd_Participant_validatorKey = md_Participant.Fields().ByName("validatorKey")
}

var _ protoreflect.Message = (*fastReflection_Participant)(nil)

type fastReflection_Participant Participant

func (x *Participant) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Participant)(x)
}

func (x *Participant) slowProtoReflect() protoreflect.Message {
	mi := &file_inference_inference_participant_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Participant_messageType fastReflection_Participant_messageType
var _ protoreflect.MessageType = fastReflection_Participant_messageType{}

type fastReflection_Participant_messageType struct{}

func (x fastReflection_Participant_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Participant)(nil)
}
func (x fastReflection_Participant_messageType) New() protoreflect.Message {
	return new(fastReflection_Participant)
}
func (x fastReflection_Participant_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Participant
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Participant) Descriptor() protoreflect.MessageDescriptor {
	return md_Participant
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Participant) Type() protoreflect.MessageType {
	return _fastReflection_Participant_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Participant) New() protoreflect.Message {
	return new(fastReflection_Participant)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Participant) Interface() protoreflect.ProtoMessage {
	return (*Participant)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Participant) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Index != "" {
		value := protoreflect.ValueOfString(x.Index)
		if !f(fd_Participant_index, value) {
			return
		}
	}
	if x.Address != "" {
		value := protoreflect.ValueOfString(x.Address)
		if !f(fd_Participant_address, value) {
			return
		}
	}
	if x.Reputation != int32(0) {
		value := protoreflect.ValueOfInt32(x.Reputation)
		if !f(fd_Participant_reputation, value) {
			return
		}
	}
	if x.Weight != int32(0) {
		value := protoreflect.ValueOfInt32(x.Weight)
		if !f(fd_Participant_weight, value) {
			return
		}
	}
	if x.JoinTime != int64(0) {
		value := protoreflect.ValueOfInt64(x.JoinTime)
		if !f(fd_Participant_joinTime, value) {
			return
		}
	}
	if x.JoinHeight != int64(0) {
		value := protoreflect.ValueOfInt64(x.JoinHeight)
		if !f(fd_Participant_joinHeight, value) {
			return
		}
	}
	if x.LastInferenceTime != int64(0) {
		value := protoreflect.ValueOfInt64(x.LastInferenceTime)
		if !f(fd_Participant_lastInferenceTime, value) {
			return
		}
	}
	if x.InferenceUrl != "" {
		value := protoreflect.ValueOfString(x.InferenceUrl)
		if !f(fd_Participant_inferenceUrl, value) {
			return
		}
	}
	if len(x.Models) != 0 {
		value := protoreflect.ValueOfList(&_Participant_9_list{list: &x.Models})
		if !f(fd_Participant_models, value) {
			return
		}
	}
	if x.Status != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Status))
		if !f(fd_Participant_status, value) {
			return
		}
	}
	if len(x.PromptTokenCount) != 0 {
		value := protoreflect.ValueOfMap(&_Participant_11_map{m: &x.PromptTokenCount})
		if !f(fd_Participant_promptTokenCount, value) {
			return
		}
	}
	if len(x.CompletionTokenCount) != 0 {
		value := protoreflect.ValueOfMap(&_Participant_12_map{m: &x.CompletionTokenCount})
		if !f(fd_Participant_completionTokenCount, value) {
			return
		}
	}
	if x.InferenceCount != uint64(0) {
		value := protoreflect.ValueOfUint64(x.InferenceCount)
		if !f(fd_Participant_inferenceCount, value) {
			return
		}
	}
	if x.ValidatedInferences != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ValidatedInferences)
		if !f(fd_Participant_validatedInferences, value) {
			return
		}
	}
	if x.InvalidatedInferences != uint64(0) {
		value := protoreflect.ValueOfUint64(x.InvalidatedInferences)
		if !f(fd_Participant_invalidatedInferences, value) {
			return
		}
	}
	if x.CoinBalance != uint64(0) {
		value := protoreflect.ValueOfUint64(x.CoinBalance)
		if !f(fd_Participant_coinBalance, value) {
			return
		}
	}
	if x.ValidatorKey != "" {
		value := protoreflect.ValueOfString(x.ValidatorKey)
		if !f(fd_Participant_validatorKey, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Participant) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "inference.inference.Participant.index":
		return x.Index != ""
	case "inference.inference.Participant.address":
		return x.Address != ""
	case "inference.inference.Participant.reputation":
		return x.Reputation != int32(0)
	case "inference.inference.Participant.weight":
		return x.Weight != int32(0)
	case "inference.inference.Participant.joinTime":
		return x.JoinTime != int64(0)
	case "inference.inference.Participant.joinHeight":
		return x.JoinHeight != int64(0)
	case "inference.inference.Participant.lastInferenceTime":
		return x.LastInferenceTime != int64(0)
	case "inference.inference.Participant.inferenceUrl":
		return x.InferenceUrl != ""
	case "inference.inference.Participant.models":
		return len(x.Models) != 0
	case "inference.inference.Participant.status":
		return x.Status != 0
	case "inference.inference.Participant.promptTokenCount":
		return len(x.PromptTokenCount) != 0
	case "inference.inference.Participant.completionTokenCount":
		return len(x.CompletionTokenCount) != 0
	case "inference.inference.Participant.inferenceCount":
		return x.InferenceCount != uint64(0)
	case "inference.inference.Participant.validatedInferences":
		return x.ValidatedInferences != uint64(0)
	case "inference.inference.Participant.invalidatedInferences":
		return x.InvalidatedInferences != uint64(0)
	case "inference.inference.Participant.coinBalance":
		return x.CoinBalance != uint64(0)
	case "inference.inference.Participant.validatorKey":
		return x.ValidatorKey != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.Participant"))
		}
		panic(fmt.Errorf("message inference.inference.Participant does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Participant) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "inference.inference.Participant.index":
		x.Index = ""
	case "inference.inference.Participant.address":
		x.Address = ""
	case "inference.inference.Participant.reputation":
		x.Reputation = int32(0)
	case "inference.inference.Participant.weight":
		x.Weight = int32(0)
	case "inference.inference.Participant.joinTime":
		x.JoinTime = int64(0)
	case "inference.inference.Participant.joinHeight":
		x.JoinHeight = int64(0)
	case "inference.inference.Participant.lastInferenceTime":
		x.LastInferenceTime = int64(0)
	case "inference.inference.Participant.inferenceUrl":
		x.InferenceUrl = ""
	case "inference.inference.Participant.models":
		x.Models = nil
	case "inference.inference.Participant.status":
		x.Status = 0
	case "inference.inference.Participant.promptTokenCount":
		x.PromptTokenCount = nil
	case "inference.inference.Participant.completionTokenCount":
		x.CompletionTokenCount = nil
	case "inference.inference.Participant.inferenceCount":
		x.InferenceCount = uint64(0)
	case "inference.inference.Participant.validatedInferences":
		x.ValidatedInferences = uint64(0)
	case "inference.inference.Participant.invalidatedInferences":
		x.InvalidatedInferences = uint64(0)
	case "inference.inference.Participant.coinBalance":
		x.CoinBalance = uint64(0)
	case "inference.inference.Participant.validatorKey":
		x.ValidatorKey = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.Participant"))
		}
		panic(fmt.Errorf("message inference.inference.Participant does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Participant) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "inference.inference.Participant.index":
		value := x.Index
		return protoreflect.ValueOfString(value)
	case "inference.inference.Participant.address":
		value := x.Address
		return protoreflect.ValueOfString(value)
	case "inference.inference.Participant.reputation":
		value := x.Reputation
		return protoreflect.ValueOfInt32(value)
	case "inference.inference.Participant.weight":
		value := x.Weight
		return protoreflect.ValueOfInt32(value)
	case "inference.inference.Participant.joinTime":
		value := x.JoinTime
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.Participant.joinHeight":
		value := x.JoinHeight
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.Participant.lastInferenceTime":
		value := x.LastInferenceTime
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.Participant.inferenceUrl":
		value := x.InferenceUrl
		return protoreflect.ValueOfString(value)
	case "inference.inference.Participant.models":
		if len(x.Models) == 0 {
			return protoreflect.ValueOfList(&_Participant_9_list{})
		}
		listValue := &_Participant_9_list{list: &x.Models}
		return protoreflect.ValueOfList(listValue)
	case "inference.inference.Participant.status":
		value := x.Status
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "inference.inference.Participant.promptTokenCount":
		if len(x.PromptTokenCount) == 0 {
			return protoreflect.ValueOfMap(&_Participant_11_map{})
		}
		mapValue := &_Participant_11_map{m: &x.PromptTokenCount}
		return protoreflect.ValueOfMap(mapValue)
	case "inference.inference.Participant.completionTokenCount":
		if len(x.CompletionTokenCount) == 0 {
			return protoreflect.ValueOfMap(&_Participant_12_map{})
		}
		mapValue := &_Participant_12_map{m: &x.CompletionTokenCount}
		return protoreflect.ValueOfMap(mapValue)
	case "inference.inference.Participant.inferenceCount":
		value := x.InferenceCount
		return protoreflect.ValueOfUint64(value)
	case "inference.inference.Participant.validatedInferences":
		value := x.ValidatedInferences
		return protoreflect.ValueOfUint64(value)
	case "inference.inference.Participant.invalidatedInferences":
		value := x.InvalidatedInferences
		return protoreflect.ValueOfUint64(value)
	case "inference.inference.Participant.coinBalance":
		value := x.CoinBalance
		return protoreflect.ValueOfUint64(value)
	case "inference.inference.Participant.validatorKey":
		value := x.ValidatorKey
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.Participant"))
		}
		panic(fmt.Errorf("message inference.inference.Participant does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Participant) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "inference.inference.Participant.index":
		x.Index = value.Interface().(string)
	case "inference.inference.Participant.address":
		x.Address = value.Interface().(string)
	case "inference.inference.Participant.reputation":
		x.Reputation = int32(value.Int())
	case "inference.inference.Participant.weight":
		x.Weight = int32(value.Int())
	case "inference.inference.Participant.joinTime":
		x.JoinTime = value.Int()
	case "inference.inference.Participant.joinHeight":
		x.JoinHeight = value.Int()
	case "inference.inference.Participant.lastInferenceTime":
		x.LastInferenceTime = value.Int()
	case "inference.inference.Participant.inferenceUrl":
		x.InferenceUrl = value.Interface().(string)
	case "inference.inference.Participant.models":
		lv := value.List()
		clv := lv.(*_Participant_9_list)
		x.Models = *clv.list
	case "inference.inference.Participant.status":
		x.Status = (ParticipantStatus)(value.Enum())
	case "inference.inference.Participant.promptTokenCount":
		mv := value.Map()
		cmv := mv.(*_Participant_11_map)
		x.PromptTokenCount = *cmv.m
	case "inference.inference.Participant.completionTokenCount":
		mv := value.Map()
		cmv := mv.(*_Participant_12_map)
		x.CompletionTokenCount = *cmv.m
	case "inference.inference.Participant.inferenceCount":
		x.InferenceCount = value.Uint()
	case "inference.inference.Participant.validatedInferences":
		x.ValidatedInferences = value.Uint()
	case "inference.inference.Participant.invalidatedInferences":
		x.InvalidatedInferences = value.Uint()
	case "inference.inference.Participant.coinBalance":
		x.CoinBalance = value.Uint()
	case "inference.inference.Participant.validatorKey":
		x.ValidatorKey = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.Participant"))
		}
		panic(fmt.Errorf("message inference.inference.Participant does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Participant) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.Participant.models":
		if x.Models == nil {
			x.Models = []string{}
		}
		value := &_Participant_9_list{list: &x.Models}
		return protoreflect.ValueOfList(value)
	case "inference.inference.Participant.promptTokenCount":
		if x.PromptTokenCount == nil {
			x.PromptTokenCount = make(map[string]uint64)
		}
		value := &_Participant_11_map{m: &x.PromptTokenCount}
		return protoreflect.ValueOfMap(value)
	case "inference.inference.Participant.completionTokenCount":
		if x.CompletionTokenCount == nil {
			x.CompletionTokenCount = make(map[string]uint64)
		}
		value := &_Participant_12_map{m: &x.CompletionTokenCount}
		return protoreflect.ValueOfMap(value)
	case "inference.inference.Participant.index":
		panic(fmt.Errorf("field index of message inference.inference.Participant is not mutable"))
	case "inference.inference.Participant.address":
		panic(fmt.Errorf("field address of message inference.inference.Participant is not mutable"))
	case "inference.inference.Participant.reputation":
		panic(fmt.Errorf("field reputation of message inference.inference.Participant is not mutable"))
	case "inference.inference.Participant.weight":
		panic(fmt.Errorf("field weight of message inference.inference.Participant is not mutable"))
	case "inference.inference.Participant.joinTime":
		panic(fmt.Errorf("field joinTime of message inference.inference.Participant is not mutable"))
	case "inference.inference.Participant.joinHeight":
		panic(fmt.Errorf("field joinHeight of message inference.inference.Participant is not mutable"))
	case "inference.inference.Participant.lastInferenceTime":
		panic(fmt.Errorf("field lastInferenceTime of message inference.inference.Participant is not mutable"))
	case "inference.inference.Participant.inferenceUrl":
		panic(fmt.Errorf("field inferenceUrl of message inference.inference.Participant is not mutable"))
	case "inference.inference.Participant.status":
		panic(fmt.Errorf("field status of message inference.inference.Participant is not mutable"))
	case "inference.inference.Participant.inferenceCount":
		panic(fmt.Errorf("field inferenceCount of message inference.inference.Participant is not mutable"))
	case "inference.inference.Participant.validatedInferences":
		panic(fmt.Errorf("field validatedInferences of message inference.inference.Participant is not mutable"))
	case "inference.inference.Participant.invalidatedInferences":
		panic(fmt.Errorf("field invalidatedInferences of message inference.inference.Participant is not mutable"))
	case "inference.inference.Participant.coinBalance":
		panic(fmt.Errorf("field coinBalance of message inference.inference.Participant is not mutable"))
	case "inference.inference.Participant.validatorKey":
		panic(fmt.Errorf("field validatorKey of message inference.inference.Participant is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.Participant"))
		}
		panic(fmt.Errorf("message inference.inference.Participant does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Participant) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.Participant.index":
		return protoreflect.ValueOfString("")
	case "inference.inference.Participant.address":
		return protoreflect.ValueOfString("")
	case "inference.inference.Participant.reputation":
		return protoreflect.ValueOfInt32(int32(0))
	case "inference.inference.Participant.weight":
		return protoreflect.ValueOfInt32(int32(0))
	case "inference.inference.Participant.joinTime":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.Participant.joinHeight":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.Participant.lastInferenceTime":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.Participant.inferenceUrl":
		return protoreflect.ValueOfString("")
	case "inference.inference.Participant.models":
		list := []string{}
		return protoreflect.ValueOfList(&_Participant_9_list{list: &list})
	case "inference.inference.Participant.status":
		return protoreflect.ValueOfEnum(0)
	case "inference.inference.Participant.promptTokenCount":
		m := make(map[string]uint64)
		return protoreflect.ValueOfMap(&_Participant_11_map{m: &m})
	case "inference.inference.Participant.completionTokenCount":
		m := make(map[string]uint64)
		return protoreflect.ValueOfMap(&_Participant_12_map{m: &m})
	case "inference.inference.Participant.inferenceCount":
		return protoreflect.ValueOfUint64(uint64(0))
	case "inference.inference.Participant.validatedInferences":
		return protoreflect.ValueOfUint64(uint64(0))
	case "inference.inference.Participant.invalidatedInferences":
		return protoreflect.ValueOfUint64(uint64(0))
	case "inference.inference.Participant.coinBalance":
		return protoreflect.ValueOfUint64(uint64(0))
	case "inference.inference.Participant.validatorKey":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.Participant"))
		}
		panic(fmt.Errorf("message inference.inference.Participant does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Participant) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in inference.inference.Participant", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Participant) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Participant) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Participant) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Participant) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Participant)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Index)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Address)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Reputation != 0 {
			n += 1 + runtime.Sov(uint64(x.Reputation))
		}
		if x.Weight != 0 {
			n += 1 + runtime.Sov(uint64(x.Weight))
		}
		if x.JoinTime != 0 {
			n += 1 + runtime.Sov(uint64(x.JoinTime))
		}
		if x.JoinHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.JoinHeight))
		}
		if x.LastInferenceTime != 0 {
			n += 1 + runtime.Sov(uint64(x.LastInferenceTime))
		}
		l = len(x.InferenceUrl)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Models) > 0 {
			for _, s := range x.Models {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.Status != 0 {
			n += 1 + runtime.Sov(uint64(x.Status))
		}
		if len(x.PromptTokenCount) > 0 {
			SiZeMaP := func(k string, v uint64) {
				mapEntrySize := 1 + len(k) + runtime.Sov(uint64(len(k))) + 1 + runtime.Sov(uint64(v))
				n += mapEntrySize + 1 + runtime.Sov(uint64(mapEntrySize))
			}
			if options.Deterministic {
				sortme := make([]string, 0, len(x.PromptTokenCount))
				for k := range x.PromptTokenCount {
					sortme = append(sortme, k)
				}
				sort.Strings(sortme)
				for _, k := range sortme {
					v := x.PromptTokenCount[k]
					SiZeMaP(k, v)
				}
			} else {
				for k, v := range x.PromptTokenCount {
					SiZeMaP(k, v)
				}
			}
		}
		if len(x.CompletionTokenCount) > 0 {
			SiZeMaP := func(k string, v uint64) {
				mapEntrySize := 1 + len(k) + runtime.Sov(uint64(len(k))) + 1 + runtime.Sov(uint64(v))
				n += mapEntrySize + 1 + runtime.Sov(uint64(mapEntrySize))
			}
			if options.Deterministic {
				sortme := make([]string, 0, len(x.CompletionTokenCount))
				for k := range x.CompletionTokenCount {
					sortme = append(sortme, k)
				}
				sort.Strings(sortme)
				for _, k := range sortme {
					v := x.CompletionTokenCount[k]
					SiZeMaP(k, v)
				}
			} else {
				for k, v := range x.CompletionTokenCount {
					SiZeMaP(k, v)
				}
			}
		}
		if x.InferenceCount != 0 {
			n += 1 + runtime.Sov(uint64(x.InferenceCount))
		}
		if x.ValidatedInferences != 0 {
			n += 1 + runtime.Sov(uint64(x.ValidatedInferences))
		}
		if x.InvalidatedInferences != 0 {
			n += 1 + runtime.Sov(uint64(x.InvalidatedInferences))
		}
		if x.CoinBalance != 0 {
			n += 2 + runtime.Sov(uint64(x.CoinBalance))
		}
		l = len(x.ValidatorKey)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Participant)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.ValidatorKey) > 0 {
			i -= len(x.ValidatorKey)
			copy(dAtA[i:], x.ValidatorKey)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ValidatorKey)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
		if x.CoinBalance != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CoinBalance))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x80
		}
		if x.InvalidatedInferences != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.InvalidatedInferences))
			i--
			dAtA[i] = 0x78
		}
		if x.ValidatedInferences != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ValidatedInferences))
			i--
			dAtA[i] = 0x70
		}
		if x.InferenceCount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.InferenceCount))
			i--
			dAtA[i] = 0x68
		}
		if len(x.CompletionTokenCount) > 0 {
			MaRsHaLmAp := func(k string, v uint64) (protoiface.MarshalOutput, error) {
				baseI := i
				i = runtime.EncodeVarint(dAtA, i, uint64(v))
				i--
				dAtA[i] = 0x10
				i -= len(k)
				copy(dAtA[i:], k)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(k)))
				i--
				dAtA[i] = 0xa
				i = runtime.EncodeVarint(dAtA, i, uint64(baseI-i))
				i--
				dAtA[i] = 0x62
				return protoiface.MarshalOutput{}, nil
			}
			if options.Deterministic {
				keysForCompletionTokenCount := make([]string, 0, len(x.CompletionTokenCount))
				for k := range x.CompletionTokenCount {
					keysForCompletionTokenCount = append(keysForCompletionTokenCount, string(k))
				}
				sort.Slice(keysForCompletionTokenCount, func(i, j int) bool {
					return keysForCompletionTokenCount[i] < keysForCompletionTokenCount[j]
				})
				for iNdEx := len(keysForCompletionTokenCount) - 1; iNdEx >= 0; iNdEx-- {
					v := x.CompletionTokenCount[string(keysForCompletionTokenCount[iNdEx])]
					out, err := MaRsHaLmAp(keysForCompletionTokenCount[iNdEx], v)
					if err != nil {
						return out, err
					}
				}
			} else {
				for k := range x.CompletionTokenCount {
					v := x.CompletionTokenCount[k]
					out, err := MaRsHaLmAp(k, v)
					if err != nil {
						return out, err
					}
				}
			}
		}
		if len(x.PromptTokenCount) > 0 {
			MaRsHaLmAp := func(k string, v uint64) (protoiface.MarshalOutput, error) {
				baseI := i
				i = runtime.EncodeVarint(dAtA, i, uint64(v))
				i--
				dAtA[i] = 0x10
				i -= len(k)
				copy(dAtA[i:], k)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(k)))
				i--
				dAtA[i] = 0xa
				i = runtime.EncodeVarint(dAtA, i, uint64(baseI-i))
				i--
				dAtA[i] = 0x5a
				return protoiface.MarshalOutput{}, nil
			}
			if options.Deterministic {
				keysForPromptTokenCount := make([]string, 0, len(x.PromptTokenCount))
				for k := range x.PromptTokenCount {
					keysForPromptTokenCount = append(keysForPromptTokenCount, string(k))
				}
				sort.Slice(keysForPromptTokenCount, func(i, j int) bool {
					return keysForPromptTokenCount[i] < keysForPromptTokenCount[j]
				})
				for iNdEx := len(keysForPromptTokenCount) - 1; iNdEx >= 0; iNdEx-- {
					v := x.PromptTokenCount[string(keysForPromptTokenCount[iNdEx])]
					out, err := MaRsHaLmAp(keysForPromptTokenCount[iNdEx], v)
					if err != nil {
						return out, err
					}
				}
			} else {
				for k := range x.PromptTokenCount {
					v := x.PromptTokenCount[k]
					out, err := MaRsHaLmAp(k, v)
					if err != nil {
						return out, err
					}
				}
			}
		}
		if x.Status != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Status))
			i--
			dAtA[i] = 0x50
		}
		if len(x.Models) > 0 {
			for iNdEx := len(x.Models) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.Models[iNdEx])
				copy(dAtA[i:], x.Models[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Models[iNdEx])))
				i--
				dAtA[i] = 0x4a
			}
		}
		if len(x.InferenceUrl) > 0 {
			i -= len(x.InferenceUrl)
			copy(dAtA[i:], x.InferenceUrl)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.InferenceUrl)))
			i--
			dAtA[i] = 0x42
		}
		if x.LastInferenceTime != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.LastInferenceTime))
			i--
			dAtA[i] = 0x38
		}
		if x.JoinHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.JoinHeight))
			i--
			dAtA[i] = 0x30
		}
		if x.JoinTime != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.JoinTime))
			i--
			dAtA[i] = 0x28
		}
		if x.Weight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Weight))
			i--
			dAtA[i] = 0x20
		}
		if x.Reputation != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Reputation))
			i--
			dAtA[i] = 0x18
		}
		if len(x.Address) > 0 {
			i -= len(x.Address)
			copy(dAtA[i:], x.Address)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Address)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Index) > 0 {
			i -= len(x.Index)
			copy(dAtA[i:], x.Index)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Index)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Participant)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Participant: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Participant: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Index = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Address = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Reputation", wireType)
				}
				x.Reputation = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Reputation |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
				}
				x.Weight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Weight |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field JoinTime", wireType)
				}
				x.JoinTime = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.JoinTime |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field JoinHeight", wireType)
				}
				x.JoinHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.JoinHeight |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastInferenceTime", wireType)
				}
				x.LastInferenceTime = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.LastInferenceTime |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field InferenceUrl", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.InferenceUrl = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Models", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Models = append(x.Models, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 10:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				x.Status = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Status |= ParticipantStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PromptTokenCount", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.PromptTokenCount == nil {
					x.PromptTokenCount = make(map[string]uint64)
				}
				var mapkey string
				var mapvalue uint64
				for iNdEx < postIndex {
					entryPreIndex := iNdEx
					var wire uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						wire |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					fieldNum := int32(wire >> 3)
					if fieldNum == 1 {
						var stringLenmapkey uint64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							stringLenmapkey |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						intStringLenmapkey := int(stringLenmapkey)
						if intStringLenmapkey < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						postStringIndexmapkey := iNdEx + intStringLenmapkey
						if postStringIndexmapkey < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						if postStringIndexmapkey > l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
						iNdEx = postStringIndexmapkey
					} else if fieldNum == 2 {
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							mapvalue |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
					} else {
						iNdEx = entryPreIndex
						skippy, err := runtime.Skip(dAtA[iNdEx:])
						if err != nil {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
						}
						if (skippy < 0) || (iNdEx+skippy) < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						if (iNdEx + skippy) > postIndex {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						iNdEx += skippy
					}
				}
				x.PromptTokenCount[mapkey] = mapvalue
				iNdEx = postIndex
			case 12:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CompletionTokenCount", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.CompletionTokenCount == nil {
					x.CompletionTokenCount = make(map[string]uint64)
				}
				var mapkey string
				var mapvalue uint64
				for iNdEx < postIndex {
					entryPreIndex := iNdEx
					var wire uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						wire |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					fieldNum := int32(wire >> 3)
					if fieldNum == 1 {
						var stringLenmapkey uint64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							stringLenmapkey |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						intStringLenmapkey := int(stringLenmapkey)
						if intStringLenmapkey < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						postStringIndexmapkey := iNdEx + intStringLenmapkey
						if postStringIndexmapkey < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						if postStringIndexmapkey > l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
						iNdEx = postStringIndexmapkey
					} else if fieldNum == 2 {
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							mapvalue |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
					} else {
						iNdEx = entryPreIndex
						skippy, err := runtime.Skip(dAtA[iNdEx:])
						if err != nil {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
						}
						if (skippy < 0) || (iNdEx+skippy) < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						if (iNdEx + skippy) > postIndex {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						iNdEx += skippy
					}
				}
				x.CompletionTokenCount[mapkey] = mapvalue
				iNdEx = postIndex
			case 13:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field InferenceCount", wireType)
				}
				x.InferenceCount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.InferenceCount |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 14:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidatedInferences", wireType)
				}
				x.ValidatedInferences = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ValidatedInferences |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 15:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field InvalidatedInferences", wireType)
				}
				x.InvalidatedInferences = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.InvalidatedInferences |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 16:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CoinBalance", wireType)
				}
				x.CoinBalance = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CoinBalance |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 17:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidatorKey", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ValidatorKey = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: inference/inference/participant.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ParticipantStatus int32

const (
	ParticipantStatus_UNSPECIFIED ParticipantStatus = 0
	ParticipantStatus_ACTIVE      ParticipantStatus = 1
	ParticipantStatus_INACTIVE    ParticipantStatus = 2
	ParticipantStatus_INVALID     ParticipantStatus = 3
	ParticipantStatus_RAMPING     ParticipantStatus = 4
)

// Enum value maps for ParticipantStatus.
var (
	ParticipantStatus_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "ACTIVE",
		2: "INACTIVE",
		3: "INVALID",
		4: "RAMPING",
	}
	ParticipantStatus_value = map[string]int32{
		"UNSPECIFIED": 0,
		"ACTIVE":      1,
		"INACTIVE":    2,
		"INVALID":     3,
		"RAMPING":     4,
	}
)

func (x ParticipantStatus) Enum() *ParticipantStatus {
	p := new(ParticipantStatus)
	*p = x
	return p
}

func (x ParticipantStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParticipantStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_inference_inference_participant_proto_enumTypes[0].Descriptor()
}

func (ParticipantStatus) Type() protoreflect.EnumType {
	return &file_inference_inference_participant_proto_enumTypes[0]
}

func (x ParticipantStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParticipantStatus.Descriptor instead.
func (ParticipantStatus) EnumDescriptor() ([]byte, []int) {
	return file_inference_inference_participant_proto_rawDescGZIP(), []int{0}
}

type Participant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index                 string            `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Address               string            `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Reputation            int32             `protobuf:"varint,3,opt,name=reputation,proto3" json:"reputation,omitempty"`
	Weight                int32             `protobuf:"varint,4,opt,name=weight,proto3" json:"weight,omitempty"`
	JoinTime              int64             `protobuf:"varint,5,opt,name=joinTime,proto3" json:"joinTime,omitempty"`
	JoinHeight            int64             `protobuf:"varint,6,opt,name=joinHeight,proto3" json:"joinHeight,omitempty"`
	LastInferenceTime     int64             `protobuf:"varint,7,opt,name=lastInferenceTime,proto3" json:"lastInferenceTime,omitempty"`
	InferenceUrl          string            `protobuf:"bytes,8,opt,name=inferenceUrl,proto3" json:"inferenceUrl,omitempty"`
	Models                []string          `protobuf:"bytes,9,rep,name=models,proto3" json:"models,omitempty"`
	Status                ParticipantStatus `protobuf:"varint,10,opt,name=status,proto3,enum=inference.inference.ParticipantStatus" json:"status,omitempty"`
	PromptTokenCount      map[string]uint64 `protobuf:"bytes,11,rep,name=promptTokenCount,proto3" json:"promptTokenCount,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	CompletionTokenCount  map[string]uint64 `protobuf:"bytes,12,rep,name=completionTokenCount,proto3" json:"completionTokenCount,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	InferenceCount        uint64            `protobuf:"varint,13,opt,name=inferenceCount,proto3" json:"inferenceCount,omitempty"`
	ValidatedInferences   uint64            `protobuf:"varint,14,opt,name=validatedInferences,proto3" json:"validatedInferences,omitempty"`
	InvalidatedInferences uint64            `protobuf:"varint,15,opt,name=invalidatedInferences,proto3" json:"invalidatedInferences,omitempty"`
	// I don't see how a negative balance makes sense
	CoinBalance  uint64 `protobuf:"varint,16,opt,name=coinBalance,proto3" json:"coinBalance,omitempty"`
	ValidatorKey string `protobuf:"bytes,17,opt,name=validatorKey,proto3" json:"validatorKey,omitempty"`
}

func (x *Participant) Reset() {
	*x = Participant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_inference_participant_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Participant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Participant) ProtoMessage() {}

// Deprecated: Use Participant.ProtoReflect.Descriptor instead.
func (*Participant) Descriptor() ([]byte, []int) {
	return file_inference_inference_participant_proto_rawDescGZIP(), []int{0}
}

func (x *Participant) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

func (x *Participant) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Participant) GetReputation() int32 {
	if x != nil {
		return x.Reputation
	}
	return 0
}

func (x *Participant) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Participant) GetJoinTime() int64 {
	if x != nil {
		return x.JoinTime
	}
	return 0
}

func (x *Participant) GetJoinHeight() int64 {
	if x != nil {
		return x.JoinHeight
	}
	return 0
}

func (x *Participant) GetLastInferenceTime() int64 {
	if x != nil {
		return x.LastInferenceTime
	}
	return 0
}

func (x *Participant) GetInferenceUrl() string {
	if x != nil {
		return x.InferenceUrl
	}
	return ""
}

func (x *Participant) GetModels() []string {
	if x != nil {
		return x.Models
	}
	return nil
}

func (x *Participant) GetStatus() ParticipantStatus {
	if x != nil {
		return x.Status
	}
	return ParticipantStatus_UNSPECIFIED
}

func (x *Participant) GetPromptTokenCount() map[string]uint64 {
	if x != nil {
		return x.PromptTokenCount
	}
	return nil
}

func (x *Participant) GetCompletionTokenCount() map[string]uint64 {
	if x != nil {
		return x.CompletionTokenCount
	}
	return nil
}

func (x *Participant) GetInferenceCount() uint64 {
	if x != nil {
		return x.InferenceCount
	}
	return 0
}

func (x *Participant) GetValidatedInferences() uint64 {
	if x != nil {
		return x.ValidatedInferences
	}
	return 0
}

func (x *Participant) GetInvalidatedInferences() uint64 {
	if x != nil {
		return x.InvalidatedInferences
	}
	return 0
}

func (x *Participant) GetCoinBalance() uint64 {
	if x != nil {
		return x.CoinBalance
	}
	return 0
}

func (x *Participant) GetValidatorKey() string {
	if x != nil {
		return x.ValidatorKey
	}
	return ""
}

var File_inference_inference_participant_proto protoreflect.FileDescriptor

var file_inference_inference_participant_proto_rawDesc = []byte{
	0x0a, 0x25, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0x19, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x93, 0x07, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6a, 0x6f,
	0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6a, 0x6f,
	0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6a, 0x6f, 0x69, 0x6e, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6a, 0x6f, 0x69, 0x6e,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x55, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x26, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x62, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x69, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f,
	0x6d, 0x70, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x6e, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x69,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x69, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x34,
	0x0a, 0x15, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x69, 0x6e, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x6f, 0x69, 0x6e, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x1a, 0x43, 0x0a, 0x15, 0x50, 0x72,
	0x6f, 0x6d, 0x70, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x47, 0x0a, 0x19, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x58, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a,
	0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x41, 0x4d, 0x50, 0x49, 0x4e, 0x47,
	0x10, 0x04, 0x42, 0xbe, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x10,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x24, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x69,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0xa2, 0x02, 0x03, 0x49, 0x49, 0x58, 0xaa, 0x02,
	0x13, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0xca, 0x02, 0x13, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x5c, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0xe2, 0x02, 0x1f, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5c, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x14, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x3a, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_inference_inference_participant_proto_rawDescOnce sync.Once
	file_inference_inference_participant_proto_rawDescData = file_inference_inference_participant_proto_rawDesc
)

func file_inference_inference_participant_proto_rawDescGZIP() []byte {
	file_inference_inference_participant_proto_rawDescOnce.Do(func() {
		file_inference_inference_participant_proto_rawDescData = protoimpl.X.CompressGZIP(file_inference_inference_participant_proto_rawDescData)
	})
	return file_inference_inference_participant_proto_rawDescData
}

var file_inference_inference_participant_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_inference_inference_participant_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_inference_inference_participant_proto_goTypes = []interface{}{
	(ParticipantStatus)(0), // 0: inference.inference.ParticipantStatus
	(*Participant)(nil),    // 1: inference.inference.Participant
	nil,                    // 2: inference.inference.Participant.PromptTokenCountEntry
	nil,                    // 3: inference.inference.Participant.CompletionTokenCountEntry
}
var file_inference_inference_participant_proto_depIdxs = []int32{
	0, // 0: inference.inference.Participant.status:type_name -> inference.inference.ParticipantStatus
	2, // 1: inference.inference.Participant.promptTokenCount:type_name -> inference.inference.Participant.PromptTokenCountEntry
	3, // 2: inference.inference.Participant.completionTokenCount:type_name -> inference.inference.Participant.CompletionTokenCountEntry
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_inference_inference_participant_proto_init() }
func file_inference_inference_participant_proto_init() {
	if File_inference_inference_participant_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_inference_inference_participant_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Participant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_inference_inference_participant_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_inference_inference_participant_proto_goTypes,
		DependencyIndexes: file_inference_inference_participant_proto_depIdxs,
		EnumInfos:         file_inference_inference_participant_proto_enumTypes,
		MessageInfos:      file_inference_inference_participant_proto_msgTypes,
	}.Build()
	File_inference_inference_participant_proto = out.File
	file_inference_inference_participant_proto_rawDesc = nil
	file_inference_inference_participant_proto_goTypes = nil
	file_inference_inference_participant_proto_depIdxs = nil
}

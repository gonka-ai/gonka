// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package inference

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_ProposalDetails                       protoreflect.MessageDescriptor
	fd_ProposalDetails_re_validate_policy_id protoreflect.FieldDescriptor
	fd_ProposalDetails_invalidate_policy_id  protoreflect.FieldDescriptor
	fd_ProposalDetails_policy_address        protoreflect.FieldDescriptor
)

func init() {
	file_inference_inference_inference_proto_init()
	md_ProposalDetails = File_inference_inference_inference_proto.Messages().ByName("ProposalDetails")
	fd_ProposalDetails_re_validate_policy_id = md_ProposalDetails.Fields().ByName("re_validate_policy_id")
	fd_ProposalDetails_invalidate_policy_id = md_ProposalDetails.Fields().ByName("invalidate_policy_id")
	fd_ProposalDetails_policy_address = md_ProposalDetails.Fields().ByName("policy_address")
}

var _ protoreflect.Message = (*fastReflection_ProposalDetails)(nil)

type fastReflection_ProposalDetails ProposalDetails

func (x *ProposalDetails) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ProposalDetails)(x)
}

func (x *ProposalDetails) slowProtoReflect() protoreflect.Message {
	mi := &file_inference_inference_inference_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ProposalDetails_messageType fastReflection_ProposalDetails_messageType
var _ protoreflect.MessageType = fastReflection_ProposalDetails_messageType{}

type fastReflection_ProposalDetails_messageType struct{}

func (x fastReflection_ProposalDetails_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ProposalDetails)(nil)
}
func (x fastReflection_ProposalDetails_messageType) New() protoreflect.Message {
	return new(fastReflection_ProposalDetails)
}
func (x fastReflection_ProposalDetails_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ProposalDetails
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ProposalDetails) Descriptor() protoreflect.MessageDescriptor {
	return md_ProposalDetails
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ProposalDetails) Type() protoreflect.MessageType {
	return _fastReflection_ProposalDetails_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ProposalDetails) New() protoreflect.Message {
	return new(fastReflection_ProposalDetails)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ProposalDetails) Interface() protoreflect.ProtoMessage {
	return (*ProposalDetails)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ProposalDetails) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.ReValidatePolicyId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ReValidatePolicyId)
		if !f(fd_ProposalDetails_re_validate_policy_id, value) {
			return
		}
	}
	if x.InvalidatePolicyId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.InvalidatePolicyId)
		if !f(fd_ProposalDetails_invalidate_policy_id, value) {
			return
		}
	}
	if x.PolicyAddress != "" {
		value := protoreflect.ValueOfString(x.PolicyAddress)
		if !f(fd_ProposalDetails_policy_address, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ProposalDetails) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "inference.inference.ProposalDetails.re_validate_policy_id":
		return x.ReValidatePolicyId != uint64(0)
	case "inference.inference.ProposalDetails.invalidate_policy_id":
		return x.InvalidatePolicyId != uint64(0)
	case "inference.inference.ProposalDetails.policy_address":
		return x.PolicyAddress != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.ProposalDetails"))
		}
		panic(fmt.Errorf("message inference.inference.ProposalDetails does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ProposalDetails) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "inference.inference.ProposalDetails.re_validate_policy_id":
		x.ReValidatePolicyId = uint64(0)
	case "inference.inference.ProposalDetails.invalidate_policy_id":
		x.InvalidatePolicyId = uint64(0)
	case "inference.inference.ProposalDetails.policy_address":
		x.PolicyAddress = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.ProposalDetails"))
		}
		panic(fmt.Errorf("message inference.inference.ProposalDetails does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ProposalDetails) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "inference.inference.ProposalDetails.re_validate_policy_id":
		value := x.ReValidatePolicyId
		return protoreflect.ValueOfUint64(value)
	case "inference.inference.ProposalDetails.invalidate_policy_id":
		value := x.InvalidatePolicyId
		return protoreflect.ValueOfUint64(value)
	case "inference.inference.ProposalDetails.policy_address":
		value := x.PolicyAddress
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.ProposalDetails"))
		}
		panic(fmt.Errorf("message inference.inference.ProposalDetails does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ProposalDetails) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "inference.inference.ProposalDetails.re_validate_policy_id":
		x.ReValidatePolicyId = value.Uint()
	case "inference.inference.ProposalDetails.invalidate_policy_id":
		x.InvalidatePolicyId = value.Uint()
	case "inference.inference.ProposalDetails.policy_address":
		x.PolicyAddress = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.ProposalDetails"))
		}
		panic(fmt.Errorf("message inference.inference.ProposalDetails does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ProposalDetails) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.ProposalDetails.re_validate_policy_id":
		panic(fmt.Errorf("field re_validate_policy_id of message inference.inference.ProposalDetails is not mutable"))
	case "inference.inference.ProposalDetails.invalidate_policy_id":
		panic(fmt.Errorf("field invalidate_policy_id of message inference.inference.ProposalDetails is not mutable"))
	case "inference.inference.ProposalDetails.policy_address":
		panic(fmt.Errorf("field policy_address of message inference.inference.ProposalDetails is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.ProposalDetails"))
		}
		panic(fmt.Errorf("message inference.inference.ProposalDetails does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ProposalDetails) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.ProposalDetails.re_validate_policy_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "inference.inference.ProposalDetails.invalidate_policy_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "inference.inference.ProposalDetails.policy_address":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.ProposalDetails"))
		}
		panic(fmt.Errorf("message inference.inference.ProposalDetails does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ProposalDetails) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in inference.inference.ProposalDetails", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ProposalDetails) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ProposalDetails) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ProposalDetails) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ProposalDetails) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ProposalDetails)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.ReValidatePolicyId != 0 {
			n += 1 + runtime.Sov(uint64(x.ReValidatePolicyId))
		}
		if x.InvalidatePolicyId != 0 {
			n += 1 + runtime.Sov(uint64(x.InvalidatePolicyId))
		}
		l = len(x.PolicyAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ProposalDetails)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.PolicyAddress) > 0 {
			i -= len(x.PolicyAddress)
			copy(dAtA[i:], x.PolicyAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PolicyAddress)))
			i--
			dAtA[i] = 0x1a
		}
		if x.InvalidatePolicyId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.InvalidatePolicyId))
			i--
			dAtA[i] = 0x10
		}
		if x.ReValidatePolicyId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ReValidatePolicyId))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ProposalDetails)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ProposalDetails: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ProposalDetails: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ReValidatePolicyId", wireType)
				}
				x.ReValidatePolicyId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ReValidatePolicyId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field InvalidatePolicyId", wireType)
				}
				x.InvalidatePolicyId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.InvalidatePolicyId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PolicyAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PolicyAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_Inference_23_list)(nil)

type _Inference_23_list struct {
	list *[]string
}

func (x *_Inference_23_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Inference_23_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_Inference_23_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_Inference_23_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_Inference_23_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message Inference at list field ValidatedBy as it is not of Message kind"))
}

func (x *_Inference_23_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_Inference_23_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_Inference_23_list) IsValid() bool {
	return x.list != nil
}

var (
	md_Inference                              protoreflect.MessageDescriptor
	fd_Inference_index                        protoreflect.FieldDescriptor
	fd_Inference_inference_id                 protoreflect.FieldDescriptor
	fd_Inference_prompt_hash                  protoreflect.FieldDescriptor
	fd_Inference_prompt_payload               protoreflect.FieldDescriptor
	fd_Inference_response_hash                protoreflect.FieldDescriptor
	fd_Inference_response_payload             protoreflect.FieldDescriptor
	fd_Inference_prompt_token_count           protoreflect.FieldDescriptor
	fd_Inference_completion_token_count       protoreflect.FieldDescriptor
	fd_Inference_requested_by                 protoreflect.FieldDescriptor
	fd_Inference_executed_by                  protoreflect.FieldDescriptor
	fd_Inference_status                       protoreflect.FieldDescriptor
	fd_Inference_start_block_height           protoreflect.FieldDescriptor
	fd_Inference_end_block_height             protoreflect.FieldDescriptor
	fd_Inference_start_block_timestamp        protoreflect.FieldDescriptor
	fd_Inference_end_block_timestamp          protoreflect.FieldDescriptor
	fd_Inference_model                        protoreflect.FieldDescriptor
	fd_Inference_max_tokens                   protoreflect.FieldDescriptor
	fd_Inference_actual_cost                  protoreflect.FieldDescriptor
	fd_Inference_escrow_amount                protoreflect.FieldDescriptor
	fd_Inference_proposal_details             protoreflect.FieldDescriptor
	fd_Inference_epoch_group_id               protoreflect.FieldDescriptor
	fd_Inference_assigned_to                  protoreflect.FieldDescriptor
	fd_Inference_validated_by                 protoreflect.FieldDescriptor
	fd_Inference_node_version                 protoreflect.FieldDescriptor
	fd_Inference_epoch_id                     protoreflect.FieldDescriptor
	fd_Inference_epoch_poc_start_block_height protoreflect.FieldDescriptor
	fd_Inference_transferred_by               protoreflect.FieldDescriptor
	fd_Inference_request_timestamp            protoreflect.FieldDescriptor
	fd_Inference_transfer_signature           protoreflect.FieldDescriptor
	fd_Inference_execution_signature          protoreflect.FieldDescriptor
	fd_Inference_original_prompt              protoreflect.FieldDescriptor
	fd_Inference_per_token_price              protoreflect.FieldDescriptor
)

func init() {
	file_inference_inference_inference_proto_init()
	md_Inference = File_inference_inference_inference_proto.Messages().ByName("Inference")
	fd_Inference_index = md_Inference.Fields().ByName("index")
	fd_Inference_inference_id = md_Inference.Fields().ByName("inference_id")
	fd_Inference_prompt_hash = md_Inference.Fields().ByName("prompt_hash")
	fd_Inference_prompt_payload = md_Inference.Fields().ByName("prompt_payload")
	fd_Inference_response_hash = md_Inference.Fields().ByName("response_hash")
	fd_Inference_response_payload = md_Inference.Fields().ByName("response_payload")
	fd_Inference_prompt_token_count = md_Inference.Fields().ByName("prompt_token_count")
	fd_Inference_completion_token_count = md_Inference.Fields().ByName("completion_token_count")
	fd_Inference_requested_by = md_Inference.Fields().ByName("requested_by")
	fd_Inference_executed_by = md_Inference.Fields().ByName("executed_by")
	fd_Inference_status = md_Inference.Fields().ByName("status")
	fd_Inference_start_block_height = md_Inference.Fields().ByName("start_block_height")
	fd_Inference_end_block_height = md_Inference.Fields().ByName("end_block_height")
	fd_Inference_start_block_timestamp = md_Inference.Fields().ByName("start_block_timestamp")
	fd_Inference_end_block_timestamp = md_Inference.Fields().ByName("end_block_timestamp")
	fd_Inference_model = md_Inference.Fields().ByName("model")
	fd_Inference_max_tokens = md_Inference.Fields().ByName("max_tokens")
	fd_Inference_actual_cost = md_Inference.Fields().ByName("actual_cost")
	fd_Inference_escrow_amount = md_Inference.Fields().ByName("escrow_amount")
	fd_Inference_proposal_details = md_Inference.Fields().ByName("proposal_details")
	fd_Inference_epoch_group_id = md_Inference.Fields().ByName("epoch_group_id")
	fd_Inference_assigned_to = md_Inference.Fields().ByName("assigned_to")
	fd_Inference_validated_by = md_Inference.Fields().ByName("validated_by")
	fd_Inference_node_version = md_Inference.Fields().ByName("node_version")
	fd_Inference_epoch_id = md_Inference.Fields().ByName("epoch_id")
	fd_Inference_epoch_poc_start_block_height = md_Inference.Fields().ByName("epoch_poc_start_block_height")
	fd_Inference_transferred_by = md_Inference.Fields().ByName("transferred_by")
	fd_Inference_request_timestamp = md_Inference.Fields().ByName("request_timestamp")
	fd_Inference_transfer_signature = md_Inference.Fields().ByName("transfer_signature")
	fd_Inference_execution_signature = md_Inference.Fields().ByName("execution_signature")
	fd_Inference_original_prompt = md_Inference.Fields().ByName("original_prompt")
	fd_Inference_per_token_price = md_Inference.Fields().ByName("per_token_price")
}

var _ protoreflect.Message = (*fastReflection_Inference)(nil)

type fastReflection_Inference Inference

func (x *Inference) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Inference)(x)
}

func (x *Inference) slowProtoReflect() protoreflect.Message {
	mi := &file_inference_inference_inference_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Inference_messageType fastReflection_Inference_messageType
var _ protoreflect.MessageType = fastReflection_Inference_messageType{}

type fastReflection_Inference_messageType struct{}

func (x fastReflection_Inference_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Inference)(nil)
}
func (x fastReflection_Inference_messageType) New() protoreflect.Message {
	return new(fastReflection_Inference)
}
func (x fastReflection_Inference_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Inference
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Inference) Descriptor() protoreflect.MessageDescriptor {
	return md_Inference
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Inference) Type() protoreflect.MessageType {
	return _fastReflection_Inference_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Inference) New() protoreflect.Message {
	return new(fastReflection_Inference)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Inference) Interface() protoreflect.ProtoMessage {
	return (*Inference)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Inference) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Index != "" {
		value := protoreflect.ValueOfString(x.Index)
		if !f(fd_Inference_index, value) {
			return
		}
	}
	if x.InferenceId != "" {
		value := protoreflect.ValueOfString(x.InferenceId)
		if !f(fd_Inference_inference_id, value) {
			return
		}
	}
	if x.PromptHash != "" {
		value := protoreflect.ValueOfString(x.PromptHash)
		if !f(fd_Inference_prompt_hash, value) {
			return
		}
	}
	if x.PromptPayload != "" {
		value := protoreflect.ValueOfString(x.PromptPayload)
		if !f(fd_Inference_prompt_payload, value) {
			return
		}
	}
	if x.ResponseHash != "" {
		value := protoreflect.ValueOfString(x.ResponseHash)
		if !f(fd_Inference_response_hash, value) {
			return
		}
	}
	if x.ResponsePayload != "" {
		value := protoreflect.ValueOfString(x.ResponsePayload)
		if !f(fd_Inference_response_payload, value) {
			return
		}
	}
	if x.PromptTokenCount != uint64(0) {
		value := protoreflect.ValueOfUint64(x.PromptTokenCount)
		if !f(fd_Inference_prompt_token_count, value) {
			return
		}
	}
	if x.CompletionTokenCount != uint64(0) {
		value := protoreflect.ValueOfUint64(x.CompletionTokenCount)
		if !f(fd_Inference_completion_token_count, value) {
			return
		}
	}
	if x.RequestedBy != "" {
		value := protoreflect.ValueOfString(x.RequestedBy)
		if !f(fd_Inference_requested_by, value) {
			return
		}
	}
	if x.ExecutedBy != "" {
		value := protoreflect.ValueOfString(x.ExecutedBy)
		if !f(fd_Inference_executed_by, value) {
			return
		}
	}
	if x.Status != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Status))
		if !f(fd_Inference_status, value) {
			return
		}
	}
	if x.StartBlockHeight != int64(0) {
		value := protoreflect.ValueOfInt64(x.StartBlockHeight)
		if !f(fd_Inference_start_block_height, value) {
			return
		}
	}
	if x.EndBlockHeight != int64(0) {
		value := protoreflect.ValueOfInt64(x.EndBlockHeight)
		if !f(fd_Inference_end_block_height, value) {
			return
		}
	}
	if x.StartBlockTimestamp != int64(0) {
		value := protoreflect.ValueOfInt64(x.StartBlockTimestamp)
		if !f(fd_Inference_start_block_timestamp, value) {
			return
		}
	}
	if x.EndBlockTimestamp != int64(0) {
		value := protoreflect.ValueOfInt64(x.EndBlockTimestamp)
		if !f(fd_Inference_end_block_timestamp, value) {
			return
		}
	}
	if x.Model != "" {
		value := protoreflect.ValueOfString(x.Model)
		if !f(fd_Inference_model, value) {
			return
		}
	}
	if x.MaxTokens != uint64(0) {
		value := protoreflect.ValueOfUint64(x.MaxTokens)
		if !f(fd_Inference_max_tokens, value) {
			return
		}
	}
	if x.ActualCost != int64(0) {
		value := protoreflect.ValueOfInt64(x.ActualCost)
		if !f(fd_Inference_actual_cost, value) {
			return
		}
	}
	if x.EscrowAmount != int64(0) {
		value := protoreflect.ValueOfInt64(x.EscrowAmount)
		if !f(fd_Inference_escrow_amount, value) {
			return
		}
	}
	if x.ProposalDetails != nil {
		value := protoreflect.ValueOfMessage(x.ProposalDetails.ProtoReflect())
		if !f(fd_Inference_proposal_details, value) {
			return
		}
	}
	if x.EpochGroupId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.EpochGroupId)
		if !f(fd_Inference_epoch_group_id, value) {
			return
		}
	}
	if x.AssignedTo != "" {
		value := protoreflect.ValueOfString(x.AssignedTo)
		if !f(fd_Inference_assigned_to, value) {
			return
		}
	}
	if len(x.ValidatedBy) != 0 {
		value := protoreflect.ValueOfList(&_Inference_23_list{list: &x.ValidatedBy})
		if !f(fd_Inference_validated_by, value) {
			return
		}
	}
	if x.NodeVersion != "" {
		value := protoreflect.ValueOfString(x.NodeVersion)
		if !f(fd_Inference_node_version, value) {
			return
		}
	}
	if x.EpochId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.EpochId)
		if !f(fd_Inference_epoch_id, value) {
			return
		}
	}
	if x.EpochPocStartBlockHeight != uint64(0) {
		value := protoreflect.ValueOfUint64(x.EpochPocStartBlockHeight)
		if !f(fd_Inference_epoch_poc_start_block_height, value) {
			return
		}
	}
	if x.TransferredBy != "" {
		value := protoreflect.ValueOfString(x.TransferredBy)
		if !f(fd_Inference_transferred_by, value) {
			return
		}
	}
	if x.RequestTimestamp != int64(0) {
		value := protoreflect.ValueOfInt64(x.RequestTimestamp)
		if !f(fd_Inference_request_timestamp, value) {
			return
		}
	}
	if x.TransferSignature != "" {
		value := protoreflect.ValueOfString(x.TransferSignature)
		if !f(fd_Inference_transfer_signature, value) {
			return
		}
	}
	if x.ExecutionSignature != "" {
		value := protoreflect.ValueOfString(x.ExecutionSignature)
		if !f(fd_Inference_execution_signature, value) {
			return
		}
	}
	if x.OriginalPrompt != "" {
		value := protoreflect.ValueOfString(x.OriginalPrompt)
		if !f(fd_Inference_original_prompt, value) {
			return
		}
	}
	if x.PerTokenPrice != uint64(0) {
		value := protoreflect.ValueOfUint64(x.PerTokenPrice)
		if !f(fd_Inference_per_token_price, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Inference) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "inference.inference.Inference.index":
		return x.Index != ""
	case "inference.inference.Inference.inference_id":
		return x.InferenceId != ""
	case "inference.inference.Inference.prompt_hash":
		return x.PromptHash != ""
	case "inference.inference.Inference.prompt_payload":
		return x.PromptPayload != ""
	case "inference.inference.Inference.response_hash":
		return x.ResponseHash != ""
	case "inference.inference.Inference.response_payload":
		return x.ResponsePayload != ""
	case "inference.inference.Inference.prompt_token_count":
		return x.PromptTokenCount != uint64(0)
	case "inference.inference.Inference.completion_token_count":
		return x.CompletionTokenCount != uint64(0)
	case "inference.inference.Inference.requested_by":
		return x.RequestedBy != ""
	case "inference.inference.Inference.executed_by":
		return x.ExecutedBy != ""
	case "inference.inference.Inference.status":
		return x.Status != 0
	case "inference.inference.Inference.start_block_height":
		return x.StartBlockHeight != int64(0)
	case "inference.inference.Inference.end_block_height":
		return x.EndBlockHeight != int64(0)
	case "inference.inference.Inference.start_block_timestamp":
		return x.StartBlockTimestamp != int64(0)
	case "inference.inference.Inference.end_block_timestamp":
		return x.EndBlockTimestamp != int64(0)
	case "inference.inference.Inference.model":
		return x.Model != ""
	case "inference.inference.Inference.max_tokens":
		return x.MaxTokens != uint64(0)
	case "inference.inference.Inference.actual_cost":
		return x.ActualCost != int64(0)
	case "inference.inference.Inference.escrow_amount":
		return x.EscrowAmount != int64(0)
	case "inference.inference.Inference.proposal_details":
		return x.ProposalDetails != nil
	case "inference.inference.Inference.epoch_group_id":
		return x.EpochGroupId != uint64(0)
	case "inference.inference.Inference.assigned_to":
		return x.AssignedTo != ""
	case "inference.inference.Inference.validated_by":
		return len(x.ValidatedBy) != 0
	case "inference.inference.Inference.node_version":
		return x.NodeVersion != ""
	case "inference.inference.Inference.epoch_id":
		return x.EpochId != uint64(0)
	case "inference.inference.Inference.epoch_poc_start_block_height":
		return x.EpochPocStartBlockHeight != uint64(0)
	case "inference.inference.Inference.transferred_by":
		return x.TransferredBy != ""
	case "inference.inference.Inference.request_timestamp":
		return x.RequestTimestamp != int64(0)
	case "inference.inference.Inference.transfer_signature":
		return x.TransferSignature != ""
	case "inference.inference.Inference.execution_signature":
		return x.ExecutionSignature != ""
	case "inference.inference.Inference.original_prompt":
		return x.OriginalPrompt != ""
	case "inference.inference.Inference.per_token_price":
		return x.PerTokenPrice != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.Inference"))
		}
		panic(fmt.Errorf("message inference.inference.Inference does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Inference) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "inference.inference.Inference.index":
		x.Index = ""
	case "inference.inference.Inference.inference_id":
		x.InferenceId = ""
	case "inference.inference.Inference.prompt_hash":
		x.PromptHash = ""
	case "inference.inference.Inference.prompt_payload":
		x.PromptPayload = ""
	case "inference.inference.Inference.response_hash":
		x.ResponseHash = ""
	case "inference.inference.Inference.response_payload":
		x.ResponsePayload = ""
	case "inference.inference.Inference.prompt_token_count":
		x.PromptTokenCount = uint64(0)
	case "inference.inference.Inference.completion_token_count":
		x.CompletionTokenCount = uint64(0)
	case "inference.inference.Inference.requested_by":
		x.RequestedBy = ""
	case "inference.inference.Inference.executed_by":
		x.ExecutedBy = ""
	case "inference.inference.Inference.status":
		x.Status = 0
	case "inference.inference.Inference.start_block_height":
		x.StartBlockHeight = int64(0)
	case "inference.inference.Inference.end_block_height":
		x.EndBlockHeight = int64(0)
	case "inference.inference.Inference.start_block_timestamp":
		x.StartBlockTimestamp = int64(0)
	case "inference.inference.Inference.end_block_timestamp":
		x.EndBlockTimestamp = int64(0)
	case "inference.inference.Inference.model":
		x.Model = ""
	case "inference.inference.Inference.max_tokens":
		x.MaxTokens = uint64(0)
	case "inference.inference.Inference.actual_cost":
		x.ActualCost = int64(0)
	case "inference.inference.Inference.escrow_amount":
		x.EscrowAmount = int64(0)
	case "inference.inference.Inference.proposal_details":
		x.ProposalDetails = nil
	case "inference.inference.Inference.epoch_group_id":
		x.EpochGroupId = uint64(0)
	case "inference.inference.Inference.assigned_to":
		x.AssignedTo = ""
	case "inference.inference.Inference.validated_by":
		x.ValidatedBy = nil
	case "inference.inference.Inference.node_version":
		x.NodeVersion = ""
	case "inference.inference.Inference.epoch_id":
		x.EpochId = uint64(0)
	case "inference.inference.Inference.epoch_poc_start_block_height":
		x.EpochPocStartBlockHeight = uint64(0)
	case "inference.inference.Inference.transferred_by":
		x.TransferredBy = ""
	case "inference.inference.Inference.request_timestamp":
		x.RequestTimestamp = int64(0)
	case "inference.inference.Inference.transfer_signature":
		x.TransferSignature = ""
	case "inference.inference.Inference.execution_signature":
		x.ExecutionSignature = ""
	case "inference.inference.Inference.original_prompt":
		x.OriginalPrompt = ""
	case "inference.inference.Inference.per_token_price":
		x.PerTokenPrice = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.Inference"))
		}
		panic(fmt.Errorf("message inference.inference.Inference does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Inference) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "inference.inference.Inference.index":
		value := x.Index
		return protoreflect.ValueOfString(value)
	case "inference.inference.Inference.inference_id":
		value := x.InferenceId
		return protoreflect.ValueOfString(value)
	case "inference.inference.Inference.prompt_hash":
		value := x.PromptHash
		return protoreflect.ValueOfString(value)
	case "inference.inference.Inference.prompt_payload":
		value := x.PromptPayload
		return protoreflect.ValueOfString(value)
	case "inference.inference.Inference.response_hash":
		value := x.ResponseHash
		return protoreflect.ValueOfString(value)
	case "inference.inference.Inference.response_payload":
		value := x.ResponsePayload
		return protoreflect.ValueOfString(value)
	case "inference.inference.Inference.prompt_token_count":
		value := x.PromptTokenCount
		return protoreflect.ValueOfUint64(value)
	case "inference.inference.Inference.completion_token_count":
		value := x.CompletionTokenCount
		return protoreflect.ValueOfUint64(value)
	case "inference.inference.Inference.requested_by":
		value := x.RequestedBy
		return protoreflect.ValueOfString(value)
	case "inference.inference.Inference.executed_by":
		value := x.ExecutedBy
		return protoreflect.ValueOfString(value)
	case "inference.inference.Inference.status":
		value := x.Status
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "inference.inference.Inference.start_block_height":
		value := x.StartBlockHeight
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.Inference.end_block_height":
		value := x.EndBlockHeight
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.Inference.start_block_timestamp":
		value := x.StartBlockTimestamp
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.Inference.end_block_timestamp":
		value := x.EndBlockTimestamp
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.Inference.model":
		value := x.Model
		return protoreflect.ValueOfString(value)
	case "inference.inference.Inference.max_tokens":
		value := x.MaxTokens
		return protoreflect.ValueOfUint64(value)
	case "inference.inference.Inference.actual_cost":
		value := x.ActualCost
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.Inference.escrow_amount":
		value := x.EscrowAmount
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.Inference.proposal_details":
		value := x.ProposalDetails
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "inference.inference.Inference.epoch_group_id":
		value := x.EpochGroupId
		return protoreflect.ValueOfUint64(value)
	case "inference.inference.Inference.assigned_to":
		value := x.AssignedTo
		return protoreflect.ValueOfString(value)
	case "inference.inference.Inference.validated_by":
		if len(x.ValidatedBy) == 0 {
			return protoreflect.ValueOfList(&_Inference_23_list{})
		}
		listValue := &_Inference_23_list{list: &x.ValidatedBy}
		return protoreflect.ValueOfList(listValue)
	case "inference.inference.Inference.node_version":
		value := x.NodeVersion
		return protoreflect.ValueOfString(value)
	case "inference.inference.Inference.epoch_id":
		value := x.EpochId
		return protoreflect.ValueOfUint64(value)
	case "inference.inference.Inference.epoch_poc_start_block_height":
		value := x.EpochPocStartBlockHeight
		return protoreflect.ValueOfUint64(value)
	case "inference.inference.Inference.transferred_by":
		value := x.TransferredBy
		return protoreflect.ValueOfString(value)
	case "inference.inference.Inference.request_timestamp":
		value := x.RequestTimestamp
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.Inference.transfer_signature":
		value := x.TransferSignature
		return protoreflect.ValueOfString(value)
	case "inference.inference.Inference.execution_signature":
		value := x.ExecutionSignature
		return protoreflect.ValueOfString(value)
	case "inference.inference.Inference.original_prompt":
		value := x.OriginalPrompt
		return protoreflect.ValueOfString(value)
	case "inference.inference.Inference.per_token_price":
		value := x.PerTokenPrice
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.Inference"))
		}
		panic(fmt.Errorf("message inference.inference.Inference does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Inference) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "inference.inference.Inference.index":
		x.Index = value.Interface().(string)
	case "inference.inference.Inference.inference_id":
		x.InferenceId = value.Interface().(string)
	case "inference.inference.Inference.prompt_hash":
		x.PromptHash = value.Interface().(string)
	case "inference.inference.Inference.prompt_payload":
		x.PromptPayload = value.Interface().(string)
	case "inference.inference.Inference.response_hash":
		x.ResponseHash = value.Interface().(string)
	case "inference.inference.Inference.response_payload":
		x.ResponsePayload = value.Interface().(string)
	case "inference.inference.Inference.prompt_token_count":
		x.PromptTokenCount = value.Uint()
	case "inference.inference.Inference.completion_token_count":
		x.CompletionTokenCount = value.Uint()
	case "inference.inference.Inference.requested_by":
		x.RequestedBy = value.Interface().(string)
	case "inference.inference.Inference.executed_by":
		x.ExecutedBy = value.Interface().(string)
	case "inference.inference.Inference.status":
		x.Status = (InferenceStatus)(value.Enum())
	case "inference.inference.Inference.start_block_height":
		x.StartBlockHeight = value.Int()
	case "inference.inference.Inference.end_block_height":
		x.EndBlockHeight = value.Int()
	case "inference.inference.Inference.start_block_timestamp":
		x.StartBlockTimestamp = value.Int()
	case "inference.inference.Inference.end_block_timestamp":
		x.EndBlockTimestamp = value.Int()
	case "inference.inference.Inference.model":
		x.Model = value.Interface().(string)
	case "inference.inference.Inference.max_tokens":
		x.MaxTokens = value.Uint()
	case "inference.inference.Inference.actual_cost":
		x.ActualCost = value.Int()
	case "inference.inference.Inference.escrow_amount":
		x.EscrowAmount = value.Int()
	case "inference.inference.Inference.proposal_details":
		x.ProposalDetails = value.Message().Interface().(*ProposalDetails)
	case "inference.inference.Inference.epoch_group_id":
		x.EpochGroupId = value.Uint()
	case "inference.inference.Inference.assigned_to":
		x.AssignedTo = value.Interface().(string)
	case "inference.inference.Inference.validated_by":
		lv := value.List()
		clv := lv.(*_Inference_23_list)
		x.ValidatedBy = *clv.list
	case "inference.inference.Inference.node_version":
		x.NodeVersion = value.Interface().(string)
	case "inference.inference.Inference.epoch_id":
		x.EpochId = value.Uint()
	case "inference.inference.Inference.epoch_poc_start_block_height":
		x.EpochPocStartBlockHeight = value.Uint()
	case "inference.inference.Inference.transferred_by":
		x.TransferredBy = value.Interface().(string)
	case "inference.inference.Inference.request_timestamp":
		x.RequestTimestamp = value.Int()
	case "inference.inference.Inference.transfer_signature":
		x.TransferSignature = value.Interface().(string)
	case "inference.inference.Inference.execution_signature":
		x.ExecutionSignature = value.Interface().(string)
	case "inference.inference.Inference.original_prompt":
		x.OriginalPrompt = value.Interface().(string)
	case "inference.inference.Inference.per_token_price":
		x.PerTokenPrice = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.Inference"))
		}
		panic(fmt.Errorf("message inference.inference.Inference does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Inference) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.Inference.proposal_details":
		if x.ProposalDetails == nil {
			x.ProposalDetails = new(ProposalDetails)
		}
		return protoreflect.ValueOfMessage(x.ProposalDetails.ProtoReflect())
	case "inference.inference.Inference.validated_by":
		if x.ValidatedBy == nil {
			x.ValidatedBy = []string{}
		}
		value := &_Inference_23_list{list: &x.ValidatedBy}
		return protoreflect.ValueOfList(value)
	case "inference.inference.Inference.index":
		panic(fmt.Errorf("field index of message inference.inference.Inference is not mutable"))
	case "inference.inference.Inference.inference_id":
		panic(fmt.Errorf("field inference_id of message inference.inference.Inference is not mutable"))
	case "inference.inference.Inference.prompt_hash":
		panic(fmt.Errorf("field prompt_hash of message inference.inference.Inference is not mutable"))
	case "inference.inference.Inference.prompt_payload":
		panic(fmt.Errorf("field prompt_payload of message inference.inference.Inference is not mutable"))
	case "inference.inference.Inference.response_hash":
		panic(fmt.Errorf("field response_hash of message inference.inference.Inference is not mutable"))
	case "inference.inference.Inference.response_payload":
		panic(fmt.Errorf("field response_payload of message inference.inference.Inference is not mutable"))
	case "inference.inference.Inference.prompt_token_count":
		panic(fmt.Errorf("field prompt_token_count of message inference.inference.Inference is not mutable"))
	case "inference.inference.Inference.completion_token_count":
		panic(fmt.Errorf("field completion_token_count of message inference.inference.Inference is not mutable"))
	case "inference.inference.Inference.requested_by":
		panic(fmt.Errorf("field requested_by of message inference.inference.Inference is not mutable"))
	case "inference.inference.Inference.executed_by":
		panic(fmt.Errorf("field executed_by of message inference.inference.Inference is not mutable"))
	case "inference.inference.Inference.status":
		panic(fmt.Errorf("field status of message inference.inference.Inference is not mutable"))
	case "inference.inference.Inference.start_block_height":
		panic(fmt.Errorf("field start_block_height of message inference.inference.Inference is not mutable"))
	case "inference.inference.Inference.end_block_height":
		panic(fmt.Errorf("field end_block_height of message inference.inference.Inference is not mutable"))
	case "inference.inference.Inference.start_block_timestamp":
		panic(fmt.Errorf("field start_block_timestamp of message inference.inference.Inference is not mutable"))
	case "inference.inference.Inference.end_block_timestamp":
		panic(fmt.Errorf("field end_block_timestamp of message inference.inference.Inference is not mutable"))
	case "inference.inference.Inference.model":
		panic(fmt.Errorf("field model of message inference.inference.Inference is not mutable"))
	case "inference.inference.Inference.max_tokens":
		panic(fmt.Errorf("field max_tokens of message inference.inference.Inference is not mutable"))
	case "inference.inference.Inference.actual_cost":
		panic(fmt.Errorf("field actual_cost of message inference.inference.Inference is not mutable"))
	case "inference.inference.Inference.escrow_amount":
		panic(fmt.Errorf("field escrow_amount of message inference.inference.Inference is not mutable"))
	case "inference.inference.Inference.epoch_group_id":
		panic(fmt.Errorf("field epoch_group_id of message inference.inference.Inference is not mutable"))
	case "inference.inference.Inference.assigned_to":
		panic(fmt.Errorf("field assigned_to of message inference.inference.Inference is not mutable"))
	case "inference.inference.Inference.node_version":
		panic(fmt.Errorf("field node_version of message inference.inference.Inference is not mutable"))
	case "inference.inference.Inference.epoch_id":
		panic(fmt.Errorf("field epoch_id of message inference.inference.Inference is not mutable"))
	case "inference.inference.Inference.epoch_poc_start_block_height":
		panic(fmt.Errorf("field epoch_poc_start_block_height of message inference.inference.Inference is not mutable"))
	case "inference.inference.Inference.transferred_by":
		panic(fmt.Errorf("field transferred_by of message inference.inference.Inference is not mutable"))
	case "inference.inference.Inference.request_timestamp":
		panic(fmt.Errorf("field request_timestamp of message inference.inference.Inference is not mutable"))
	case "inference.inference.Inference.transfer_signature":
		panic(fmt.Errorf("field transfer_signature of message inference.inference.Inference is not mutable"))
	case "inference.inference.Inference.execution_signature":
		panic(fmt.Errorf("field execution_signature of message inference.inference.Inference is not mutable"))
	case "inference.inference.Inference.original_prompt":
		panic(fmt.Errorf("field original_prompt of message inference.inference.Inference is not mutable"))
	case "inference.inference.Inference.per_token_price":
		panic(fmt.Errorf("field per_token_price of message inference.inference.Inference is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.Inference"))
		}
		panic(fmt.Errorf("message inference.inference.Inference does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Inference) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.Inference.index":
		return protoreflect.ValueOfString("")
	case "inference.inference.Inference.inference_id":
		return protoreflect.ValueOfString("")
	case "inference.inference.Inference.prompt_hash":
		return protoreflect.ValueOfString("")
	case "inference.inference.Inference.prompt_payload":
		return protoreflect.ValueOfString("")
	case "inference.inference.Inference.response_hash":
		return protoreflect.ValueOfString("")
	case "inference.inference.Inference.response_payload":
		return protoreflect.ValueOfString("")
	case "inference.inference.Inference.prompt_token_count":
		return protoreflect.ValueOfUint64(uint64(0))
	case "inference.inference.Inference.completion_token_count":
		return protoreflect.ValueOfUint64(uint64(0))
	case "inference.inference.Inference.requested_by":
		return protoreflect.ValueOfString("")
	case "inference.inference.Inference.executed_by":
		return protoreflect.ValueOfString("")
	case "inference.inference.Inference.status":
		return protoreflect.ValueOfEnum(0)
	case "inference.inference.Inference.start_block_height":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.Inference.end_block_height":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.Inference.start_block_timestamp":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.Inference.end_block_timestamp":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.Inference.model":
		return protoreflect.ValueOfString("")
	case "inference.inference.Inference.max_tokens":
		return protoreflect.ValueOfUint64(uint64(0))
	case "inference.inference.Inference.actual_cost":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.Inference.escrow_amount":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.Inference.proposal_details":
		m := new(ProposalDetails)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "inference.inference.Inference.epoch_group_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "inference.inference.Inference.assigned_to":
		return protoreflect.ValueOfString("")
	case "inference.inference.Inference.validated_by":
		list := []string{}
		return protoreflect.ValueOfList(&_Inference_23_list{list: &list})
	case "inference.inference.Inference.node_version":
		return protoreflect.ValueOfString("")
	case "inference.inference.Inference.epoch_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "inference.inference.Inference.epoch_poc_start_block_height":
		return protoreflect.ValueOfUint64(uint64(0))
	case "inference.inference.Inference.transferred_by":
		return protoreflect.ValueOfString("")
	case "inference.inference.Inference.request_timestamp":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.Inference.transfer_signature":
		return protoreflect.ValueOfString("")
	case "inference.inference.Inference.execution_signature":
		return protoreflect.ValueOfString("")
	case "inference.inference.Inference.original_prompt":
		return protoreflect.ValueOfString("")
	case "inference.inference.Inference.per_token_price":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.Inference"))
		}
		panic(fmt.Errorf("message inference.inference.Inference does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Inference) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in inference.inference.Inference", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Inference) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Inference) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Inference) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Inference) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Inference)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Index)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.InferenceId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.PromptHash)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.PromptPayload)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ResponseHash)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ResponsePayload)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.PromptTokenCount != 0 {
			n += 1 + runtime.Sov(uint64(x.PromptTokenCount))
		}
		if x.CompletionTokenCount != 0 {
			n += 1 + runtime.Sov(uint64(x.CompletionTokenCount))
		}
		l = len(x.RequestedBy)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ExecutedBy)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Status != 0 {
			n += 1 + runtime.Sov(uint64(x.Status))
		}
		if x.StartBlockHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.StartBlockHeight))
		}
		if x.EndBlockHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.EndBlockHeight))
		}
		if x.StartBlockTimestamp != 0 {
			n += 1 + runtime.Sov(uint64(x.StartBlockTimestamp))
		}
		if x.EndBlockTimestamp != 0 {
			n += 1 + runtime.Sov(uint64(x.EndBlockTimestamp))
		}
		l = len(x.Model)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.MaxTokens != 0 {
			n += 2 + runtime.Sov(uint64(x.MaxTokens))
		}
		if x.ActualCost != 0 {
			n += 2 + runtime.Sov(uint64(x.ActualCost))
		}
		if x.EscrowAmount != 0 {
			n += 2 + runtime.Sov(uint64(x.EscrowAmount))
		}
		if x.ProposalDetails != nil {
			l = options.Size(x.ProposalDetails)
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.EpochGroupId != 0 {
			n += 2 + runtime.Sov(uint64(x.EpochGroupId))
		}
		l = len(x.AssignedTo)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if len(x.ValidatedBy) > 0 {
			for _, s := range x.ValidatedBy {
				l = len(s)
				n += 2 + l + runtime.Sov(uint64(l))
			}
		}
		l = len(x.NodeVersion)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.EpochId != 0 {
			n += 2 + runtime.Sov(uint64(x.EpochId))
		}
		if x.EpochPocStartBlockHeight != 0 {
			n += 2 + runtime.Sov(uint64(x.EpochPocStartBlockHeight))
		}
		l = len(x.TransferredBy)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.RequestTimestamp != 0 {
			n += 2 + runtime.Sov(uint64(x.RequestTimestamp))
		}
		l = len(x.TransferSignature)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ExecutionSignature)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		l = len(x.OriginalPrompt)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.PerTokenPrice != 0 {
			n += 2 + runtime.Sov(uint64(x.PerTokenPrice))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Inference)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.PerTokenPrice != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PerTokenPrice))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x80
		}
		if len(x.OriginalPrompt) > 0 {
			i -= len(x.OriginalPrompt)
			copy(dAtA[i:], x.OriginalPrompt)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.OriginalPrompt)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xfa
		}
		if len(x.ExecutionSignature) > 0 {
			i -= len(x.ExecutionSignature)
			copy(dAtA[i:], x.ExecutionSignature)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ExecutionSignature)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xf2
		}
		if len(x.TransferSignature) > 0 {
			i -= len(x.TransferSignature)
			copy(dAtA[i:], x.TransferSignature)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TransferSignature)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xea
		}
		if x.RequestTimestamp != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.RequestTimestamp))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xe0
		}
		if len(x.TransferredBy) > 0 {
			i -= len(x.TransferredBy)
			copy(dAtA[i:], x.TransferredBy)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TransferredBy)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xda
		}
		if x.EpochPocStartBlockHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EpochPocStartBlockHeight))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xd0
		}
		if x.EpochId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EpochId))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xc8
		}
		if len(x.NodeVersion) > 0 {
			i -= len(x.NodeVersion)
			copy(dAtA[i:], x.NodeVersion)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.NodeVersion)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xc2
		}
		if len(x.ValidatedBy) > 0 {
			for iNdEx := len(x.ValidatedBy) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.ValidatedBy[iNdEx])
				copy(dAtA[i:], x.ValidatedBy[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ValidatedBy[iNdEx])))
				i--
				dAtA[i] = 0x1
				i--
				dAtA[i] = 0xba
			}
		}
		if len(x.AssignedTo) > 0 {
			i -= len(x.AssignedTo)
			copy(dAtA[i:], x.AssignedTo)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AssignedTo)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
		if x.EpochGroupId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EpochGroupId))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa8
		}
		if x.ProposalDetails != nil {
			encoded, err := options.Marshal(x.ProposalDetails)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
		if x.EscrowAmount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EscrowAmount))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x98
		}
		if x.ActualCost != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ActualCost))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x90
		}
		if x.MaxTokens != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaxTokens))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x88
		}
		if len(x.Model) > 0 {
			i -= len(x.Model)
			copy(dAtA[i:], x.Model)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Model)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
		if x.EndBlockTimestamp != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EndBlockTimestamp))
			i--
			dAtA[i] = 0x78
		}
		if x.StartBlockTimestamp != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.StartBlockTimestamp))
			i--
			dAtA[i] = 0x70
		}
		if x.EndBlockHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EndBlockHeight))
			i--
			dAtA[i] = 0x68
		}
		if x.StartBlockHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.StartBlockHeight))
			i--
			dAtA[i] = 0x60
		}
		if x.Status != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Status))
			i--
			dAtA[i] = 0x58
		}
		if len(x.ExecutedBy) > 0 {
			i -= len(x.ExecutedBy)
			copy(dAtA[i:], x.ExecutedBy)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ExecutedBy)))
			i--
			dAtA[i] = 0x52
		}
		if len(x.RequestedBy) > 0 {
			i -= len(x.RequestedBy)
			copy(dAtA[i:], x.RequestedBy)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RequestedBy)))
			i--
			dAtA[i] = 0x4a
		}
		if x.CompletionTokenCount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CompletionTokenCount))
			i--
			dAtA[i] = 0x40
		}
		if x.PromptTokenCount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PromptTokenCount))
			i--
			dAtA[i] = 0x38
		}
		if len(x.ResponsePayload) > 0 {
			i -= len(x.ResponsePayload)
			copy(dAtA[i:], x.ResponsePayload)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ResponsePayload)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.ResponseHash) > 0 {
			i -= len(x.ResponseHash)
			copy(dAtA[i:], x.ResponseHash)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ResponseHash)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.PromptPayload) > 0 {
			i -= len(x.PromptPayload)
			copy(dAtA[i:], x.PromptPayload)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PromptPayload)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.PromptHash) > 0 {
			i -= len(x.PromptHash)
			copy(dAtA[i:], x.PromptHash)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PromptHash)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.InferenceId) > 0 {
			i -= len(x.InferenceId)
			copy(dAtA[i:], x.InferenceId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.InferenceId)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Index) > 0 {
			i -= len(x.Index)
			copy(dAtA[i:], x.Index)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Index)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Inference)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Inference: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Inference: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Index = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field InferenceId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.InferenceId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PromptHash", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PromptHash = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PromptPayload", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PromptPayload = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ResponseHash", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ResponseHash = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ResponsePayload", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ResponsePayload = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PromptTokenCount", wireType)
				}
				x.PromptTokenCount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PromptTokenCount |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CompletionTokenCount", wireType)
				}
				x.CompletionTokenCount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CompletionTokenCount |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RequestedBy", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RequestedBy = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ExecutedBy", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ExecutedBy = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 11:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				x.Status = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Status |= InferenceStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 12:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StartBlockHeight", wireType)
				}
				x.StartBlockHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.StartBlockHeight |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 13:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EndBlockHeight", wireType)
				}
				x.EndBlockHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EndBlockHeight |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 14:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StartBlockTimestamp", wireType)
				}
				x.StartBlockTimestamp = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.StartBlockTimestamp |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 15:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EndBlockTimestamp", wireType)
				}
				x.EndBlockTimestamp = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EndBlockTimestamp |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 16:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Model = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 17:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxTokens", wireType)
				}
				x.MaxTokens = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaxTokens |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 18:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ActualCost", wireType)
				}
				x.ActualCost = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ActualCost |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 19:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EscrowAmount", wireType)
				}
				x.EscrowAmount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EscrowAmount |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 20:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ProposalDetails", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.ProposalDetails == nil {
					x.ProposalDetails = &ProposalDetails{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ProposalDetails); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 21:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EpochGroupId", wireType)
				}
				x.EpochGroupId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EpochGroupId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 22:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AssignedTo", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AssignedTo = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 23:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidatedBy", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ValidatedBy = append(x.ValidatedBy, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 24:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NodeVersion", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.NodeVersion = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 25:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EpochId", wireType)
				}
				x.EpochId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EpochId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 26:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EpochPocStartBlockHeight", wireType)
				}
				x.EpochPocStartBlockHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EpochPocStartBlockHeight |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 27:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TransferredBy", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TransferredBy = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 28:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RequestTimestamp", wireType)
				}
				x.RequestTimestamp = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.RequestTimestamp |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 29:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TransferSignature", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TransferSignature = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 30:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ExecutionSignature", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ExecutionSignature = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 31:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OriginalPrompt", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.OriginalPrompt = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 32:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PerTokenPrice", wireType)
				}
				x.PerTokenPrice = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PerTokenPrice |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: inference/inference/inference.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InferenceStatus int32

const (
	InferenceStatus_STARTED     InferenceStatus = 0
	InferenceStatus_FINISHED    InferenceStatus = 1
	InferenceStatus_VALIDATED   InferenceStatus = 2
	InferenceStatus_INVALIDATED InferenceStatus = 3
	InferenceStatus_VOTING      InferenceStatus = 4
	InferenceStatus_EXPIRED     InferenceStatus = 5
)

// Enum value maps for InferenceStatus.
var (
	InferenceStatus_name = map[int32]string{
		0: "STARTED",
		1: "FINISHED",
		2: "VALIDATED",
		3: "INVALIDATED",
		4: "VOTING",
		5: "EXPIRED",
	}
	InferenceStatus_value = map[string]int32{
		"STARTED":     0,
		"FINISHED":    1,
		"VALIDATED":   2,
		"INVALIDATED": 3,
		"VOTING":      4,
		"EXPIRED":     5,
	}
)

func (x InferenceStatus) Enum() *InferenceStatus {
	p := new(InferenceStatus)
	*p = x
	return p
}

func (x InferenceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InferenceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_inference_inference_inference_proto_enumTypes[0].Descriptor()
}

func (InferenceStatus) Type() protoreflect.EnumType {
	return &file_inference_inference_inference_proto_enumTypes[0]
}

func (x InferenceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InferenceStatus.Descriptor instead.
func (InferenceStatus) EnumDescriptor() ([]byte, []int) {
	return file_inference_inference_inference_proto_rawDescGZIP(), []int{0}
}

type ProposalDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReValidatePolicyId uint64 `protobuf:"varint,1,opt,name=re_validate_policy_id,json=reValidatePolicyId,proto3" json:"re_validate_policy_id,omitempty"`
	InvalidatePolicyId uint64 `protobuf:"varint,2,opt,name=invalidate_policy_id,json=invalidatePolicyId,proto3" json:"invalidate_policy_id,omitempty"`
	PolicyAddress      string `protobuf:"bytes,3,opt,name=policy_address,json=policyAddress,proto3" json:"policy_address,omitempty"`
}

func (x *ProposalDetails) Reset() {
	*x = ProposalDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_inference_inference_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposalDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposalDetails) ProtoMessage() {}

// Deprecated: Use ProposalDetails.ProtoReflect.Descriptor instead.
func (*ProposalDetails) Descriptor() ([]byte, []int) {
	return file_inference_inference_inference_proto_rawDescGZIP(), []int{0}
}

func (x *ProposalDetails) GetReValidatePolicyId() uint64 {
	if x != nil {
		return x.ReValidatePolicyId
	}
	return 0
}

func (x *ProposalDetails) GetInvalidatePolicyId() uint64 {
	if x != nil {
		return x.InvalidatePolicyId
	}
	return 0
}

func (x *ProposalDetails) GetPolicyAddress() string {
	if x != nil {
		return x.PolicyAddress
	}
	return ""
}

type Inference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index                    string           `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	InferenceId              string           `protobuf:"bytes,2,opt,name=inference_id,json=inferenceId,proto3" json:"inference_id,omitempty"`
	PromptHash               string           `protobuf:"bytes,3,opt,name=prompt_hash,json=promptHash,proto3" json:"prompt_hash,omitempty"`
	PromptPayload            string           `protobuf:"bytes,4,opt,name=prompt_payload,json=promptPayload,proto3" json:"prompt_payload,omitempty"`
	ResponseHash             string           `protobuf:"bytes,5,opt,name=response_hash,json=responseHash,proto3" json:"response_hash,omitempty"`
	ResponsePayload          string           `protobuf:"bytes,6,opt,name=response_payload,json=responsePayload,proto3" json:"response_payload,omitempty"`
	PromptTokenCount         uint64           `protobuf:"varint,7,opt,name=prompt_token_count,json=promptTokenCount,proto3" json:"prompt_token_count,omitempty"`
	CompletionTokenCount     uint64           `protobuf:"varint,8,opt,name=completion_token_count,json=completionTokenCount,proto3" json:"completion_token_count,omitempty"`
	RequestedBy              string           `protobuf:"bytes,9,opt,name=requested_by,json=requestedBy,proto3" json:"requested_by,omitempty"`
	ExecutedBy               string           `protobuf:"bytes,10,opt,name=executed_by,json=executedBy,proto3" json:"executed_by,omitempty"`
	Status                   InferenceStatus  `protobuf:"varint,11,opt,name=status,proto3,enum=inference.inference.InferenceStatus" json:"status,omitempty"`
	StartBlockHeight         int64            `protobuf:"varint,12,opt,name=start_block_height,json=startBlockHeight,proto3" json:"start_block_height,omitempty"`
	EndBlockHeight           int64            `protobuf:"varint,13,opt,name=end_block_height,json=endBlockHeight,proto3" json:"end_block_height,omitempty"`
	StartBlockTimestamp      int64            `protobuf:"varint,14,opt,name=start_block_timestamp,json=startBlockTimestamp,proto3" json:"start_block_timestamp,omitempty"`
	EndBlockTimestamp        int64            `protobuf:"varint,15,opt,name=end_block_timestamp,json=endBlockTimestamp,proto3" json:"end_block_timestamp,omitempty"`
	Model                    string           `protobuf:"bytes,16,opt,name=model,proto3" json:"model,omitempty"`
	MaxTokens                uint64           `protobuf:"varint,17,opt,name=max_tokens,json=maxTokens,proto3" json:"max_tokens,omitempty"`
	ActualCost               int64            `protobuf:"varint,18,opt,name=actual_cost,json=actualCost,proto3" json:"actual_cost,omitempty"`
	EscrowAmount             int64            `protobuf:"varint,19,opt,name=escrow_amount,json=escrowAmount,proto3" json:"escrow_amount,omitempty"`
	ProposalDetails          *ProposalDetails `protobuf:"bytes,20,opt,name=proposal_details,json=proposalDetails,proto3" json:"proposal_details,omitempty"`
	EpochGroupId             uint64           `protobuf:"varint,21,opt,name=epoch_group_id,json=epochGroupId,proto3" json:"epoch_group_id,omitempty"` // DEPRECATED: now use epoch_poc_start_block_height. Renaming
	AssignedTo               string           `protobuf:"bytes,22,opt,name=assigned_to,json=assignedTo,proto3" json:"assigned_to,omitempty"`
	ValidatedBy              []string         `protobuf:"bytes,23,rep,name=validated_by,json=validatedBy,proto3" json:"validated_by,omitempty"`
	NodeVersion              string           `protobuf:"bytes,24,opt,name=node_version,json=nodeVersion,proto3" json:"node_version,omitempty"`
	EpochId                  uint64           `protobuf:"varint,25,opt,name=epoch_id,json=epochId,proto3" json:"epoch_id,omitempty"`
	EpochPocStartBlockHeight uint64           `protobuf:"varint,26,opt,name=epoch_poc_start_block_height,json=epochPocStartBlockHeight,proto3" json:"epoch_poc_start_block_height,omitempty"`
	TransferredBy            string           `protobuf:"bytes,27,opt,name=transferred_by,json=transferredBy,proto3" json:"transferred_by,omitempty"`
	RequestTimestamp         int64            `protobuf:"varint,28,opt,name=request_timestamp,json=requestTimestamp,proto3" json:"request_timestamp,omitempty"`
	TransferSignature        string           `protobuf:"bytes,29,opt,name=transfer_signature,json=transferSignature,proto3" json:"transfer_signature,omitempty"`
	ExecutionSignature       string           `protobuf:"bytes,30,opt,name=execution_signature,json=executionSignature,proto3" json:"execution_signature,omitempty"`
	OriginalPrompt           string           `protobuf:"bytes,31,opt,name=original_prompt,json=originalPrompt,proto3" json:"original_prompt,omitempty"`
	PerTokenPrice            uint64           `protobuf:"varint,32,opt,name=per_token_price,json=perTokenPrice,proto3" json:"per_token_price,omitempty"` // Locked-in per-token price when inference started (for dynamic pricing)
}

func (x *Inference) Reset() {
	*x = Inference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_inference_inference_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Inference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Inference) ProtoMessage() {}

// Deprecated: Use Inference.ProtoReflect.Descriptor instead.
func (*Inference) Descriptor() ([]byte, []int) {
	return file_inference_inference_inference_proto_rawDescGZIP(), []int{1}
}

func (x *Inference) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

func (x *Inference) GetInferenceId() string {
	if x != nil {
		return x.InferenceId
	}
	return ""
}

func (x *Inference) GetPromptHash() string {
	if x != nil {
		return x.PromptHash
	}
	return ""
}

func (x *Inference) GetPromptPayload() string {
	if x != nil {
		return x.PromptPayload
	}
	return ""
}

func (x *Inference) GetResponseHash() string {
	if x != nil {
		return x.ResponseHash
	}
	return ""
}

func (x *Inference) GetResponsePayload() string {
	if x != nil {
		return x.ResponsePayload
	}
	return ""
}

func (x *Inference) GetPromptTokenCount() uint64 {
	if x != nil {
		return x.PromptTokenCount
	}
	return 0
}

func (x *Inference) GetCompletionTokenCount() uint64 {
	if x != nil {
		return x.CompletionTokenCount
	}
	return 0
}

func (x *Inference) GetRequestedBy() string {
	if x != nil {
		return x.RequestedBy
	}
	return ""
}

func (x *Inference) GetExecutedBy() string {
	if x != nil {
		return x.ExecutedBy
	}
	return ""
}

func (x *Inference) GetStatus() InferenceStatus {
	if x != nil {
		return x.Status
	}
	return InferenceStatus_STARTED
}

func (x *Inference) GetStartBlockHeight() int64 {
	if x != nil {
		return x.StartBlockHeight
	}
	return 0
}

func (x *Inference) GetEndBlockHeight() int64 {
	if x != nil {
		return x.EndBlockHeight
	}
	return 0
}

func (x *Inference) GetStartBlockTimestamp() int64 {
	if x != nil {
		return x.StartBlockTimestamp
	}
	return 0
}

func (x *Inference) GetEndBlockTimestamp() int64 {
	if x != nil {
		return x.EndBlockTimestamp
	}
	return 0
}

func (x *Inference) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *Inference) GetMaxTokens() uint64 {
	if x != nil {
		return x.MaxTokens
	}
	return 0
}

func (x *Inference) GetActualCost() int64 {
	if x != nil {
		return x.ActualCost
	}
	return 0
}

func (x *Inference) GetEscrowAmount() int64 {
	if x != nil {
		return x.EscrowAmount
	}
	return 0
}

func (x *Inference) GetProposalDetails() *ProposalDetails {
	if x != nil {
		return x.ProposalDetails
	}
	return nil
}

func (x *Inference) GetEpochGroupId() uint64 {
	if x != nil {
		return x.EpochGroupId
	}
	return 0
}

func (x *Inference) GetAssignedTo() string {
	if x != nil {
		return x.AssignedTo
	}
	return ""
}

func (x *Inference) GetValidatedBy() []string {
	if x != nil {
		return x.ValidatedBy
	}
	return nil
}

func (x *Inference) GetNodeVersion() string {
	if x != nil {
		return x.NodeVersion
	}
	return ""
}

func (x *Inference) GetEpochId() uint64 {
	if x != nil {
		return x.EpochId
	}
	return 0
}

func (x *Inference) GetEpochPocStartBlockHeight() uint64 {
	if x != nil {
		return x.EpochPocStartBlockHeight
	}
	return 0
}

func (x *Inference) GetTransferredBy() string {
	if x != nil {
		return x.TransferredBy
	}
	return ""
}

func (x *Inference) GetRequestTimestamp() int64 {
	if x != nil {
		return x.RequestTimestamp
	}
	return 0
}

func (x *Inference) GetTransferSignature() string {
	if x != nil {
		return x.TransferSignature
	}
	return ""
}

func (x *Inference) GetExecutionSignature() string {
	if x != nil {
		return x.ExecutionSignature
	}
	return ""
}

func (x *Inference) GetOriginalPrompt() string {
	if x != nil {
		return x.OriginalPrompt
	}
	return ""
}

func (x *Inference) GetPerTokenPrice() uint64 {
	if x != nil {
		return x.PerTokenPrice
	}
	return 0
}

var File_inference_inference_inference_proto protoreflect.FileDescriptor

var file_inference_inference_inference_proto_rawDesc = []byte{
	0x0a, 0x23, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x0f, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x31,
	0x0a, 0x15, 0x72, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x72,
	0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49,
	0x64, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x12, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xb7, 0x0a, 0x0a, 0x09, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6d,
	0x70, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x29,
	0x0a, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x6f,
	0x6d, 0x70, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x24, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2c, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x28, 0x0a,
	0x10, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2e, 0x0a, 0x13, 0x65,
	0x6e, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x65, 0x6e, 0x64, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6f, 0x73,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x73, 0x63, 0x72, 0x6f, 0x77, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x73, 0x63, 0x72, 0x6f, 0x77,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x6f, 0x12, 0x21,
	0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x17,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x69, 0x64,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x49, 0x64, 0x12,
	0x3e, 0x0a, 0x1c, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x70, 0x6f, 0x63, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x50, 0x6f, 0x63, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x72, 0x65, 0x64, 0x42, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f,
	0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x26, 0x0a, 0x0f,
	0x70, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x2a, 0x65, 0x0a, 0x0f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x41, 0x52, 0x54,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x56, 0x4f, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x0b,
	0x0a, 0x07, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x05, 0x42, 0xbc, 0x01, 0x0a, 0x17,
	0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x24, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0xa2,
	0x02, 0x03, 0x49, 0x49, 0x58, 0xaa, 0x02, 0x13, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x2e, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0xca, 0x02, 0x13, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5c, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0xe2, 0x02, 0x1f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5c, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x14, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a,
	0x3a, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_inference_inference_inference_proto_rawDescOnce sync.Once
	file_inference_inference_inference_proto_rawDescData = file_inference_inference_inference_proto_rawDesc
)

func file_inference_inference_inference_proto_rawDescGZIP() []byte {
	file_inference_inference_inference_proto_rawDescOnce.Do(func() {
		file_inference_inference_inference_proto_rawDescData = protoimpl.X.CompressGZIP(file_inference_inference_inference_proto_rawDescData)
	})
	return file_inference_inference_inference_proto_rawDescData
}

var file_inference_inference_inference_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_inference_inference_inference_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_inference_inference_inference_proto_goTypes = []interface{}{
	(InferenceStatus)(0),    // 0: inference.inference.InferenceStatus
	(*ProposalDetails)(nil), // 1: inference.inference.ProposalDetails
	(*Inference)(nil),       // 2: inference.inference.Inference
}
var file_inference_inference_inference_proto_depIdxs = []int32{
	0, // 0: inference.inference.Inference.status:type_name -> inference.inference.InferenceStatus
	1, // 1: inference.inference.Inference.proposal_details:type_name -> inference.inference.ProposalDetails
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_inference_inference_inference_proto_init() }
func file_inference_inference_inference_proto_init() {
	if File_inference_inference_inference_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_inference_inference_inference_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposalDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_inference_inference_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Inference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_inference_inference_inference_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_inference_inference_inference_proto_goTypes,
		DependencyIndexes: file_inference_inference_inference_proto_depIdxs,
		EnumInfos:         file_inference_inference_inference_proto_enumTypes,
		MessageInfos:      file_inference_inference_inference_proto_msgTypes,
	}.Build()
	File_inference_inference_inference_proto = out.File
	file_inference_inference_inference_proto_rawDesc = nil
	file_inference_inference_inference_proto_goTypes = nil
	file_inference_inference_inference_proto_depIdxs = nil
}

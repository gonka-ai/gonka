// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package inference

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_EpochGroupData_6_list)(nil)

type _EpochGroupData_6_list struct {
	list *[]*SeedSignature
}

func (x *_EpochGroupData_6_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_EpochGroupData_6_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_EpochGroupData_6_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*SeedSignature)
	(*x.list)[i] = concreteValue
}

func (x *_EpochGroupData_6_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*SeedSignature)
	*x.list = append(*x.list, concreteValue)
}

func (x *_EpochGroupData_6_list) AppendMutable() protoreflect.Value {
	v := new(SeedSignature)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_EpochGroupData_6_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_EpochGroupData_6_list) NewElement() protoreflect.Value {
	v := new(SeedSignature)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_EpochGroupData_6_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_EpochGroupData_8_list)(nil)

type _EpochGroupData_8_list struct {
	list *[]*ValidationWeight
}

func (x *_EpochGroupData_8_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_EpochGroupData_8_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_EpochGroupData_8_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*ValidationWeight)
	(*x.list)[i] = concreteValue
}

func (x *_EpochGroupData_8_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*ValidationWeight)
	*x.list = append(*x.list, concreteValue)
}

func (x *_EpochGroupData_8_list) AppendMutable() protoreflect.Value {
	v := new(ValidationWeight)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_EpochGroupData_8_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_EpochGroupData_8_list) NewElement() protoreflect.Value {
	v := new(ValidationWeight)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_EpochGroupData_8_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_EpochGroupData_15_list)(nil)

type _EpochGroupData_15_list struct {
	list *[]string
}

func (x *_EpochGroupData_15_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_EpochGroupData_15_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_EpochGroupData_15_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_EpochGroupData_15_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_EpochGroupData_15_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message EpochGroupData at list field SubGroupModels as it is not of Message kind"))
}

func (x *_EpochGroupData_15_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_EpochGroupData_15_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_EpochGroupData_15_list) IsValid() bool {
	return x.list != nil
}

var (
	md_EpochGroupData                         protoreflect.MessageDescriptor
	fd_EpochGroupData_poc_start_block_height  protoreflect.FieldDescriptor
	fd_EpochGroupData_epoch_group_id          protoreflect.FieldDescriptor
	fd_EpochGroupData_epoch_policy            protoreflect.FieldDescriptor
	fd_EpochGroupData_effective_block_height  protoreflect.FieldDescriptor
	fd_EpochGroupData_last_block_height       protoreflect.FieldDescriptor
	fd_EpochGroupData_member_seed_signatures  protoreflect.FieldDescriptor
	fd_EpochGroupData_validation_weights      protoreflect.FieldDescriptor
	fd_EpochGroupData_unit_of_compute_price   protoreflect.FieldDescriptor
	fd_EpochGroupData_number_of_requests      protoreflect.FieldDescriptor
	fd_EpochGroupData_previous_epoch_requests protoreflect.FieldDescriptor
	fd_EpochGroupData_validation_params       protoreflect.FieldDescriptor
	fd_EpochGroupData_total_weight            protoreflect.FieldDescriptor
	fd_EpochGroupData_model_id                protoreflect.FieldDescriptor
	fd_EpochGroupData_sub_group_models        protoreflect.FieldDescriptor
	fd_EpochGroupData_model_snapshot          protoreflect.FieldDescriptor
)

func init() {
	file_inference_inference_epoch_group_data_proto_init()
	md_EpochGroupData = File_inference_inference_epoch_group_data_proto.Messages().ByName("EpochGroupData")
	fd_EpochGroupData_poc_start_block_height = md_EpochGroupData.Fields().ByName("poc_start_block_height")
	fd_EpochGroupData_epoch_group_id = md_EpochGroupData.Fields().ByName("epoch_group_id")
	fd_EpochGroupData_epoch_policy = md_EpochGroupData.Fields().ByName("epoch_policy")
	fd_EpochGroupData_effective_block_height = md_EpochGroupData.Fields().ByName("effective_block_height")
	fd_EpochGroupData_last_block_height = md_EpochGroupData.Fields().ByName("last_block_height")
	fd_EpochGroupData_member_seed_signatures = md_EpochGroupData.Fields().ByName("member_seed_signatures")
	fd_EpochGroupData_validation_weights = md_EpochGroupData.Fields().ByName("validation_weights")
	fd_EpochGroupData_unit_of_compute_price = md_EpochGroupData.Fields().ByName("unit_of_compute_price")
	fd_EpochGroupData_number_of_requests = md_EpochGroupData.Fields().ByName("number_of_requests")
	fd_EpochGroupData_previous_epoch_requests = md_EpochGroupData.Fields().ByName("previous_epoch_requests")
	fd_EpochGroupData_validation_params = md_EpochGroupData.Fields().ByName("validation_params")
	fd_EpochGroupData_total_weight = md_EpochGroupData.Fields().ByName("total_weight")
	fd_EpochGroupData_model_id = md_EpochGroupData.Fields().ByName("model_id")
	fd_EpochGroupData_sub_group_models = md_EpochGroupData.Fields().ByName("sub_group_models")
	fd_EpochGroupData_model_snapshot = md_EpochGroupData.Fields().ByName("model_snapshot")
}

var _ protoreflect.Message = (*fastReflection_EpochGroupData)(nil)

type fastReflection_EpochGroupData EpochGroupData

func (x *EpochGroupData) ProtoReflect() protoreflect.Message {
	return (*fastReflection_EpochGroupData)(x)
}

func (x *EpochGroupData) slowProtoReflect() protoreflect.Message {
	mi := &file_inference_inference_epoch_group_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_EpochGroupData_messageType fastReflection_EpochGroupData_messageType
var _ protoreflect.MessageType = fastReflection_EpochGroupData_messageType{}

type fastReflection_EpochGroupData_messageType struct{}

func (x fastReflection_EpochGroupData_messageType) Zero() protoreflect.Message {
	return (*fastReflection_EpochGroupData)(nil)
}
func (x fastReflection_EpochGroupData_messageType) New() protoreflect.Message {
	return new(fastReflection_EpochGroupData)
}
func (x fastReflection_EpochGroupData_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_EpochGroupData
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_EpochGroupData) Descriptor() protoreflect.MessageDescriptor {
	return md_EpochGroupData
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_EpochGroupData) Type() protoreflect.MessageType {
	return _fastReflection_EpochGroupData_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_EpochGroupData) New() protoreflect.Message {
	return new(fastReflection_EpochGroupData)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_EpochGroupData) Interface() protoreflect.ProtoMessage {
	return (*EpochGroupData)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_EpochGroupData) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.PocStartBlockHeight != uint64(0) {
		value := protoreflect.ValueOfUint64(x.PocStartBlockHeight)
		if !f(fd_EpochGroupData_poc_start_block_height, value) {
			return
		}
	}
	if x.EpochGroupId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.EpochGroupId)
		if !f(fd_EpochGroupData_epoch_group_id, value) {
			return
		}
	}
	if x.EpochPolicy != "" {
		value := protoreflect.ValueOfString(x.EpochPolicy)
		if !f(fd_EpochGroupData_epoch_policy, value) {
			return
		}
	}
	if x.EffectiveBlockHeight != int64(0) {
		value := protoreflect.ValueOfInt64(x.EffectiveBlockHeight)
		if !f(fd_EpochGroupData_effective_block_height, value) {
			return
		}
	}
	if x.LastBlockHeight != int64(0) {
		value := protoreflect.ValueOfInt64(x.LastBlockHeight)
		if !f(fd_EpochGroupData_last_block_height, value) {
			return
		}
	}
	if len(x.MemberSeedSignatures) != 0 {
		value := protoreflect.ValueOfList(&_EpochGroupData_6_list{list: &x.MemberSeedSignatures})
		if !f(fd_EpochGroupData_member_seed_signatures, value) {
			return
		}
	}
	if len(x.ValidationWeights) != 0 {
		value := protoreflect.ValueOfList(&_EpochGroupData_8_list{list: &x.ValidationWeights})
		if !f(fd_EpochGroupData_validation_weights, value) {
			return
		}
	}
	if x.UnitOfComputePrice != int64(0) {
		value := protoreflect.ValueOfInt64(x.UnitOfComputePrice)
		if !f(fd_EpochGroupData_unit_of_compute_price, value) {
			return
		}
	}
	if x.NumberOfRequests != int64(0) {
		value := protoreflect.ValueOfInt64(x.NumberOfRequests)
		if !f(fd_EpochGroupData_number_of_requests, value) {
			return
		}
	}
	if x.PreviousEpochRequests != int64(0) {
		value := protoreflect.ValueOfInt64(x.PreviousEpochRequests)
		if !f(fd_EpochGroupData_previous_epoch_requests, value) {
			return
		}
	}
	if x.ValidationParams != nil {
		value := protoreflect.ValueOfMessage(x.ValidationParams.ProtoReflect())
		if !f(fd_EpochGroupData_validation_params, value) {
			return
		}
	}
	if x.TotalWeight != int64(0) {
		value := protoreflect.ValueOfInt64(x.TotalWeight)
		if !f(fd_EpochGroupData_total_weight, value) {
			return
		}
	}
	if x.ModelId != "" {
		value := protoreflect.ValueOfString(x.ModelId)
		if !f(fd_EpochGroupData_model_id, value) {
			return
		}
	}
	if len(x.SubGroupModels) != 0 {
		value := protoreflect.ValueOfList(&_EpochGroupData_15_list{list: &x.SubGroupModels})
		if !f(fd_EpochGroupData_sub_group_models, value) {
			return
		}
	}
	if x.ModelSnapshot != nil {
		value := protoreflect.ValueOfMessage(x.ModelSnapshot.ProtoReflect())
		if !f(fd_EpochGroupData_model_snapshot, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_EpochGroupData) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "inference.inference.EpochGroupData.poc_start_block_height":
		return x.PocStartBlockHeight != uint64(0)
	case "inference.inference.EpochGroupData.epoch_group_id":
		return x.EpochGroupId != uint64(0)
	case "inference.inference.EpochGroupData.epoch_policy":
		return x.EpochPolicy != ""
	case "inference.inference.EpochGroupData.effective_block_height":
		return x.EffectiveBlockHeight != int64(0)
	case "inference.inference.EpochGroupData.last_block_height":
		return x.LastBlockHeight != int64(0)
	case "inference.inference.EpochGroupData.member_seed_signatures":
		return len(x.MemberSeedSignatures) != 0
	case "inference.inference.EpochGroupData.validation_weights":
		return len(x.ValidationWeights) != 0
	case "inference.inference.EpochGroupData.unit_of_compute_price":
		return x.UnitOfComputePrice != int64(0)
	case "inference.inference.EpochGroupData.number_of_requests":
		return x.NumberOfRequests != int64(0)
	case "inference.inference.EpochGroupData.previous_epoch_requests":
		return x.PreviousEpochRequests != int64(0)
	case "inference.inference.EpochGroupData.validation_params":
		return x.ValidationParams != nil
	case "inference.inference.EpochGroupData.total_weight":
		return x.TotalWeight != int64(0)
	case "inference.inference.EpochGroupData.model_id":
		return x.ModelId != ""
	case "inference.inference.EpochGroupData.sub_group_models":
		return len(x.SubGroupModels) != 0
	case "inference.inference.EpochGroupData.model_snapshot":
		return x.ModelSnapshot != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.EpochGroupData"))
		}
		panic(fmt.Errorf("message inference.inference.EpochGroupData does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EpochGroupData) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "inference.inference.EpochGroupData.poc_start_block_height":
		x.PocStartBlockHeight = uint64(0)
	case "inference.inference.EpochGroupData.epoch_group_id":
		x.EpochGroupId = uint64(0)
	case "inference.inference.EpochGroupData.epoch_policy":
		x.EpochPolicy = ""
	case "inference.inference.EpochGroupData.effective_block_height":
		x.EffectiveBlockHeight = int64(0)
	case "inference.inference.EpochGroupData.last_block_height":
		x.LastBlockHeight = int64(0)
	case "inference.inference.EpochGroupData.member_seed_signatures":
		x.MemberSeedSignatures = nil
	case "inference.inference.EpochGroupData.validation_weights":
		x.ValidationWeights = nil
	case "inference.inference.EpochGroupData.unit_of_compute_price":
		x.UnitOfComputePrice = int64(0)
	case "inference.inference.EpochGroupData.number_of_requests":
		x.NumberOfRequests = int64(0)
	case "inference.inference.EpochGroupData.previous_epoch_requests":
		x.PreviousEpochRequests = int64(0)
	case "inference.inference.EpochGroupData.validation_params":
		x.ValidationParams = nil
	case "inference.inference.EpochGroupData.total_weight":
		x.TotalWeight = int64(0)
	case "inference.inference.EpochGroupData.model_id":
		x.ModelId = ""
	case "inference.inference.EpochGroupData.sub_group_models":
		x.SubGroupModels = nil
	case "inference.inference.EpochGroupData.model_snapshot":
		x.ModelSnapshot = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.EpochGroupData"))
		}
		panic(fmt.Errorf("message inference.inference.EpochGroupData does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_EpochGroupData) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "inference.inference.EpochGroupData.poc_start_block_height":
		value := x.PocStartBlockHeight
		return protoreflect.ValueOfUint64(value)
	case "inference.inference.EpochGroupData.epoch_group_id":
		value := x.EpochGroupId
		return protoreflect.ValueOfUint64(value)
	case "inference.inference.EpochGroupData.epoch_policy":
		value := x.EpochPolicy
		return protoreflect.ValueOfString(value)
	case "inference.inference.EpochGroupData.effective_block_height":
		value := x.EffectiveBlockHeight
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.EpochGroupData.last_block_height":
		value := x.LastBlockHeight
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.EpochGroupData.member_seed_signatures":
		if len(x.MemberSeedSignatures) == 0 {
			return protoreflect.ValueOfList(&_EpochGroupData_6_list{})
		}
		listValue := &_EpochGroupData_6_list{list: &x.MemberSeedSignatures}
		return protoreflect.ValueOfList(listValue)
	case "inference.inference.EpochGroupData.validation_weights":
		if len(x.ValidationWeights) == 0 {
			return protoreflect.ValueOfList(&_EpochGroupData_8_list{})
		}
		listValue := &_EpochGroupData_8_list{list: &x.ValidationWeights}
		return protoreflect.ValueOfList(listValue)
	case "inference.inference.EpochGroupData.unit_of_compute_price":
		value := x.UnitOfComputePrice
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.EpochGroupData.number_of_requests":
		value := x.NumberOfRequests
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.EpochGroupData.previous_epoch_requests":
		value := x.PreviousEpochRequests
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.EpochGroupData.validation_params":
		value := x.ValidationParams
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "inference.inference.EpochGroupData.total_weight":
		value := x.TotalWeight
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.EpochGroupData.model_id":
		value := x.ModelId
		return protoreflect.ValueOfString(value)
	case "inference.inference.EpochGroupData.sub_group_models":
		if len(x.SubGroupModels) == 0 {
			return protoreflect.ValueOfList(&_EpochGroupData_15_list{})
		}
		listValue := &_EpochGroupData_15_list{list: &x.SubGroupModels}
		return protoreflect.ValueOfList(listValue)
	case "inference.inference.EpochGroupData.model_snapshot":
		value := x.ModelSnapshot
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.EpochGroupData"))
		}
		panic(fmt.Errorf("message inference.inference.EpochGroupData does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EpochGroupData) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "inference.inference.EpochGroupData.poc_start_block_height":
		x.PocStartBlockHeight = value.Uint()
	case "inference.inference.EpochGroupData.epoch_group_id":
		x.EpochGroupId = value.Uint()
	case "inference.inference.EpochGroupData.epoch_policy":
		x.EpochPolicy = value.Interface().(string)
	case "inference.inference.EpochGroupData.effective_block_height":
		x.EffectiveBlockHeight = value.Int()
	case "inference.inference.EpochGroupData.last_block_height":
		x.LastBlockHeight = value.Int()
	case "inference.inference.EpochGroupData.member_seed_signatures":
		lv := value.List()
		clv := lv.(*_EpochGroupData_6_list)
		x.MemberSeedSignatures = *clv.list
	case "inference.inference.EpochGroupData.validation_weights":
		lv := value.List()
		clv := lv.(*_EpochGroupData_8_list)
		x.ValidationWeights = *clv.list
	case "inference.inference.EpochGroupData.unit_of_compute_price":
		x.UnitOfComputePrice = value.Int()
	case "inference.inference.EpochGroupData.number_of_requests":
		x.NumberOfRequests = value.Int()
	case "inference.inference.EpochGroupData.previous_epoch_requests":
		x.PreviousEpochRequests = value.Int()
	case "inference.inference.EpochGroupData.validation_params":
		x.ValidationParams = value.Message().Interface().(*ValidationParams)
	case "inference.inference.EpochGroupData.total_weight":
		x.TotalWeight = value.Int()
	case "inference.inference.EpochGroupData.model_id":
		x.ModelId = value.Interface().(string)
	case "inference.inference.EpochGroupData.sub_group_models":
		lv := value.List()
		clv := lv.(*_EpochGroupData_15_list)
		x.SubGroupModels = *clv.list
	case "inference.inference.EpochGroupData.model_snapshot":
		x.ModelSnapshot = value.Message().Interface().(*Model)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.EpochGroupData"))
		}
		panic(fmt.Errorf("message inference.inference.EpochGroupData does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EpochGroupData) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.EpochGroupData.member_seed_signatures":
		if x.MemberSeedSignatures == nil {
			x.MemberSeedSignatures = []*SeedSignature{}
		}
		value := &_EpochGroupData_6_list{list: &x.MemberSeedSignatures}
		return protoreflect.ValueOfList(value)
	case "inference.inference.EpochGroupData.validation_weights":
		if x.ValidationWeights == nil {
			x.ValidationWeights = []*ValidationWeight{}
		}
		value := &_EpochGroupData_8_list{list: &x.ValidationWeights}
		return protoreflect.ValueOfList(value)
	case "inference.inference.EpochGroupData.validation_params":
		if x.ValidationParams == nil {
			x.ValidationParams = new(ValidationParams)
		}
		return protoreflect.ValueOfMessage(x.ValidationParams.ProtoReflect())
	case "inference.inference.EpochGroupData.sub_group_models":
		if x.SubGroupModels == nil {
			x.SubGroupModels = []string{}
		}
		value := &_EpochGroupData_15_list{list: &x.SubGroupModels}
		return protoreflect.ValueOfList(value)
	case "inference.inference.EpochGroupData.model_snapshot":
		if x.ModelSnapshot == nil {
			x.ModelSnapshot = new(Model)
		}
		return protoreflect.ValueOfMessage(x.ModelSnapshot.ProtoReflect())
	case "inference.inference.EpochGroupData.poc_start_block_height":
		panic(fmt.Errorf("field poc_start_block_height of message inference.inference.EpochGroupData is not mutable"))
	case "inference.inference.EpochGroupData.epoch_group_id":
		panic(fmt.Errorf("field epoch_group_id of message inference.inference.EpochGroupData is not mutable"))
	case "inference.inference.EpochGroupData.epoch_policy":
		panic(fmt.Errorf("field epoch_policy of message inference.inference.EpochGroupData is not mutable"))
	case "inference.inference.EpochGroupData.effective_block_height":
		panic(fmt.Errorf("field effective_block_height of message inference.inference.EpochGroupData is not mutable"))
	case "inference.inference.EpochGroupData.last_block_height":
		panic(fmt.Errorf("field last_block_height of message inference.inference.EpochGroupData is not mutable"))
	case "inference.inference.EpochGroupData.unit_of_compute_price":
		panic(fmt.Errorf("field unit_of_compute_price of message inference.inference.EpochGroupData is not mutable"))
	case "inference.inference.EpochGroupData.number_of_requests":
		panic(fmt.Errorf("field number_of_requests of message inference.inference.EpochGroupData is not mutable"))
	case "inference.inference.EpochGroupData.previous_epoch_requests":
		panic(fmt.Errorf("field previous_epoch_requests of message inference.inference.EpochGroupData is not mutable"))
	case "inference.inference.EpochGroupData.total_weight":
		panic(fmt.Errorf("field total_weight of message inference.inference.EpochGroupData is not mutable"))
	case "inference.inference.EpochGroupData.model_id":
		panic(fmt.Errorf("field model_id of message inference.inference.EpochGroupData is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.EpochGroupData"))
		}
		panic(fmt.Errorf("message inference.inference.EpochGroupData does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_EpochGroupData) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.EpochGroupData.poc_start_block_height":
		return protoreflect.ValueOfUint64(uint64(0))
	case "inference.inference.EpochGroupData.epoch_group_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "inference.inference.EpochGroupData.epoch_policy":
		return protoreflect.ValueOfString("")
	case "inference.inference.EpochGroupData.effective_block_height":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.EpochGroupData.last_block_height":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.EpochGroupData.member_seed_signatures":
		list := []*SeedSignature{}
		return protoreflect.ValueOfList(&_EpochGroupData_6_list{list: &list})
	case "inference.inference.EpochGroupData.validation_weights":
		list := []*ValidationWeight{}
		return protoreflect.ValueOfList(&_EpochGroupData_8_list{list: &list})
	case "inference.inference.EpochGroupData.unit_of_compute_price":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.EpochGroupData.number_of_requests":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.EpochGroupData.previous_epoch_requests":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.EpochGroupData.validation_params":
		m := new(ValidationParams)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "inference.inference.EpochGroupData.total_weight":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.EpochGroupData.model_id":
		return protoreflect.ValueOfString("")
	case "inference.inference.EpochGroupData.sub_group_models":
		list := []string{}
		return protoreflect.ValueOfList(&_EpochGroupData_15_list{list: &list})
	case "inference.inference.EpochGroupData.model_snapshot":
		m := new(Model)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.EpochGroupData"))
		}
		panic(fmt.Errorf("message inference.inference.EpochGroupData does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_EpochGroupData) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in inference.inference.EpochGroupData", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_EpochGroupData) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EpochGroupData) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_EpochGroupData) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_EpochGroupData) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*EpochGroupData)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.PocStartBlockHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.PocStartBlockHeight))
		}
		if x.EpochGroupId != 0 {
			n += 1 + runtime.Sov(uint64(x.EpochGroupId))
		}
		l = len(x.EpochPolicy)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.EffectiveBlockHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.EffectiveBlockHeight))
		}
		if x.LastBlockHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.LastBlockHeight))
		}
		if len(x.MemberSeedSignatures) > 0 {
			for _, e := range x.MemberSeedSignatures {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.ValidationWeights) > 0 {
			for _, e := range x.ValidationWeights {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.UnitOfComputePrice != 0 {
			n += 1 + runtime.Sov(uint64(x.UnitOfComputePrice))
		}
		if x.NumberOfRequests != 0 {
			n += 1 + runtime.Sov(uint64(x.NumberOfRequests))
		}
		if x.PreviousEpochRequests != 0 {
			n += 1 + runtime.Sov(uint64(x.PreviousEpochRequests))
		}
		if x.ValidationParams != nil {
			l = options.Size(x.ValidationParams)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.TotalWeight != 0 {
			n += 1 + runtime.Sov(uint64(x.TotalWeight))
		}
		l = len(x.ModelId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.SubGroupModels) > 0 {
			for _, s := range x.SubGroupModels {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.ModelSnapshot != nil {
			l = options.Size(x.ModelSnapshot)
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*EpochGroupData)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.ModelSnapshot != nil {
			encoded, err := options.Marshal(x.ModelSnapshot)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
		if len(x.SubGroupModels) > 0 {
			for iNdEx := len(x.SubGroupModels) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.SubGroupModels[iNdEx])
				copy(dAtA[i:], x.SubGroupModels[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SubGroupModels[iNdEx])))
				i--
				dAtA[i] = 0x7a
			}
		}
		if len(x.ModelId) > 0 {
			i -= len(x.ModelId)
			copy(dAtA[i:], x.ModelId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ModelId)))
			i--
			dAtA[i] = 0x72
		}
		if x.TotalWeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TotalWeight))
			i--
			dAtA[i] = 0x68
		}
		if x.ValidationParams != nil {
			encoded, err := options.Marshal(x.ValidationParams)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x62
		}
		if x.PreviousEpochRequests != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PreviousEpochRequests))
			i--
			dAtA[i] = 0x58
		}
		if x.NumberOfRequests != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.NumberOfRequests))
			i--
			dAtA[i] = 0x50
		}
		if x.UnitOfComputePrice != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.UnitOfComputePrice))
			i--
			dAtA[i] = 0x48
		}
		if len(x.ValidationWeights) > 0 {
			for iNdEx := len(x.ValidationWeights) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.ValidationWeights[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x42
			}
		}
		if len(x.MemberSeedSignatures) > 0 {
			for iNdEx := len(x.MemberSeedSignatures) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.MemberSeedSignatures[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x32
			}
		}
		if x.LastBlockHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.LastBlockHeight))
			i--
			dAtA[i] = 0x28
		}
		if x.EffectiveBlockHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EffectiveBlockHeight))
			i--
			dAtA[i] = 0x20
		}
		if len(x.EpochPolicy) > 0 {
			i -= len(x.EpochPolicy)
			copy(dAtA[i:], x.EpochPolicy)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.EpochPolicy)))
			i--
			dAtA[i] = 0x1a
		}
		if x.EpochGroupId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EpochGroupId))
			i--
			dAtA[i] = 0x10
		}
		if x.PocStartBlockHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PocStartBlockHeight))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*EpochGroupData)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EpochGroupData: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EpochGroupData: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PocStartBlockHeight", wireType)
				}
				x.PocStartBlockHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PocStartBlockHeight |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EpochGroupId", wireType)
				}
				x.EpochGroupId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EpochGroupId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EpochPolicy", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.EpochPolicy = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EffectiveBlockHeight", wireType)
				}
				x.EffectiveBlockHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EffectiveBlockHeight |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastBlockHeight", wireType)
				}
				x.LastBlockHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.LastBlockHeight |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MemberSeedSignatures", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MemberSeedSignatures = append(x.MemberSeedSignatures, &SeedSignature{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.MemberSeedSignatures[len(x.MemberSeedSignatures)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidationWeights", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ValidationWeights = append(x.ValidationWeights, &ValidationWeight{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ValidationWeights[len(x.ValidationWeights)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field UnitOfComputePrice", wireType)
				}
				x.UnitOfComputePrice = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.UnitOfComputePrice |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 10:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NumberOfRequests", wireType)
				}
				x.NumberOfRequests = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.NumberOfRequests |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 11:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PreviousEpochRequests", wireType)
				}
				x.PreviousEpochRequests = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PreviousEpochRequests |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 12:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidationParams", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.ValidationParams == nil {
					x.ValidationParams = &ValidationParams{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ValidationParams); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 13:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalWeight", wireType)
				}
				x.TotalWeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TotalWeight |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 14:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ModelId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ModelId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 15:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SubGroupModels", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SubGroupModels = append(x.SubGroupModels, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 16:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ModelSnapshot", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.ModelSnapshot == nil {
					x.ModelSnapshot = &Model{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ModelSnapshot); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_ValidationWeight_4_list)(nil)

type _ValidationWeight_4_list struct {
	list *[]*MLNodeInfo
}

func (x *_ValidationWeight_4_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_ValidationWeight_4_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_ValidationWeight_4_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*MLNodeInfo)
	(*x.list)[i] = concreteValue
}

func (x *_ValidationWeight_4_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*MLNodeInfo)
	*x.list = append(*x.list, concreteValue)
}

func (x *_ValidationWeight_4_list) AppendMutable() protoreflect.Value {
	v := new(MLNodeInfo)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_ValidationWeight_4_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_ValidationWeight_4_list) NewElement() protoreflect.Value {
	v := new(MLNodeInfo)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_ValidationWeight_4_list) IsValid() bool {
	return x.list != nil
}

var (
	md_ValidationWeight                protoreflect.MessageDescriptor
	fd_ValidationWeight_member_address protoreflect.FieldDescriptor
	fd_ValidationWeight_weight         protoreflect.FieldDescriptor
	fd_ValidationWeight_reputation     protoreflect.FieldDescriptor
	fd_ValidationWeight_ml_nodes       protoreflect.FieldDescriptor
)

func init() {
	file_inference_inference_epoch_group_data_proto_init()
	md_ValidationWeight = File_inference_inference_epoch_group_data_proto.Messages().ByName("ValidationWeight")
	fd_ValidationWeight_member_address = md_ValidationWeight.Fields().ByName("member_address")
	fd_ValidationWeight_weight = md_ValidationWeight.Fields().ByName("weight")
	fd_ValidationWeight_reputation = md_ValidationWeight.Fields().ByName("reputation")
	fd_ValidationWeight_ml_nodes = md_ValidationWeight.Fields().ByName("ml_nodes")
}

var _ protoreflect.Message = (*fastReflection_ValidationWeight)(nil)

type fastReflection_ValidationWeight ValidationWeight

func (x *ValidationWeight) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ValidationWeight)(x)
}

func (x *ValidationWeight) slowProtoReflect() protoreflect.Message {
	mi := &file_inference_inference_epoch_group_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ValidationWeight_messageType fastReflection_ValidationWeight_messageType
var _ protoreflect.MessageType = fastReflection_ValidationWeight_messageType{}

type fastReflection_ValidationWeight_messageType struct{}

func (x fastReflection_ValidationWeight_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ValidationWeight)(nil)
}
func (x fastReflection_ValidationWeight_messageType) New() protoreflect.Message {
	return new(fastReflection_ValidationWeight)
}
func (x fastReflection_ValidationWeight_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ValidationWeight
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ValidationWeight) Descriptor() protoreflect.MessageDescriptor {
	return md_ValidationWeight
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ValidationWeight) Type() protoreflect.MessageType {
	return _fastReflection_ValidationWeight_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ValidationWeight) New() protoreflect.Message {
	return new(fastReflection_ValidationWeight)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ValidationWeight) Interface() protoreflect.ProtoMessage {
	return (*ValidationWeight)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ValidationWeight) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.MemberAddress != "" {
		value := protoreflect.ValueOfString(x.MemberAddress)
		if !f(fd_ValidationWeight_member_address, value) {
			return
		}
	}
	if x.Weight != int64(0) {
		value := protoreflect.ValueOfInt64(x.Weight)
		if !f(fd_ValidationWeight_weight, value) {
			return
		}
	}
	if x.Reputation != int32(0) {
		value := protoreflect.ValueOfInt32(x.Reputation)
		if !f(fd_ValidationWeight_reputation, value) {
			return
		}
	}
	if len(x.MlNodes) != 0 {
		value := protoreflect.ValueOfList(&_ValidationWeight_4_list{list: &x.MlNodes})
		if !f(fd_ValidationWeight_ml_nodes, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ValidationWeight) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "inference.inference.ValidationWeight.member_address":
		return x.MemberAddress != ""
	case "inference.inference.ValidationWeight.weight":
		return x.Weight != int64(0)
	case "inference.inference.ValidationWeight.reputation":
		return x.Reputation != int32(0)
	case "inference.inference.ValidationWeight.ml_nodes":
		return len(x.MlNodes) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.ValidationWeight"))
		}
		panic(fmt.Errorf("message inference.inference.ValidationWeight does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ValidationWeight) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "inference.inference.ValidationWeight.member_address":
		x.MemberAddress = ""
	case "inference.inference.ValidationWeight.weight":
		x.Weight = int64(0)
	case "inference.inference.ValidationWeight.reputation":
		x.Reputation = int32(0)
	case "inference.inference.ValidationWeight.ml_nodes":
		x.MlNodes = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.ValidationWeight"))
		}
		panic(fmt.Errorf("message inference.inference.ValidationWeight does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ValidationWeight) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "inference.inference.ValidationWeight.member_address":
		value := x.MemberAddress
		return protoreflect.ValueOfString(value)
	case "inference.inference.ValidationWeight.weight":
		value := x.Weight
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.ValidationWeight.reputation":
		value := x.Reputation
		return protoreflect.ValueOfInt32(value)
	case "inference.inference.ValidationWeight.ml_nodes":
		if len(x.MlNodes) == 0 {
			return protoreflect.ValueOfList(&_ValidationWeight_4_list{})
		}
		listValue := &_ValidationWeight_4_list{list: &x.MlNodes}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.ValidationWeight"))
		}
		panic(fmt.Errorf("message inference.inference.ValidationWeight does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ValidationWeight) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "inference.inference.ValidationWeight.member_address":
		x.MemberAddress = value.Interface().(string)
	case "inference.inference.ValidationWeight.weight":
		x.Weight = value.Int()
	case "inference.inference.ValidationWeight.reputation":
		x.Reputation = int32(value.Int())
	case "inference.inference.ValidationWeight.ml_nodes":
		lv := value.List()
		clv := lv.(*_ValidationWeight_4_list)
		x.MlNodes = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.ValidationWeight"))
		}
		panic(fmt.Errorf("message inference.inference.ValidationWeight does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ValidationWeight) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.ValidationWeight.ml_nodes":
		if x.MlNodes == nil {
			x.MlNodes = []*MLNodeInfo{}
		}
		value := &_ValidationWeight_4_list{list: &x.MlNodes}
		return protoreflect.ValueOfList(value)
	case "inference.inference.ValidationWeight.member_address":
		panic(fmt.Errorf("field member_address of message inference.inference.ValidationWeight is not mutable"))
	case "inference.inference.ValidationWeight.weight":
		panic(fmt.Errorf("field weight of message inference.inference.ValidationWeight is not mutable"))
	case "inference.inference.ValidationWeight.reputation":
		panic(fmt.Errorf("field reputation of message inference.inference.ValidationWeight is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.ValidationWeight"))
		}
		panic(fmt.Errorf("message inference.inference.ValidationWeight does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ValidationWeight) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.ValidationWeight.member_address":
		return protoreflect.ValueOfString("")
	case "inference.inference.ValidationWeight.weight":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.ValidationWeight.reputation":
		return protoreflect.ValueOfInt32(int32(0))
	case "inference.inference.ValidationWeight.ml_nodes":
		list := []*MLNodeInfo{}
		return protoreflect.ValueOfList(&_ValidationWeight_4_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.ValidationWeight"))
		}
		panic(fmt.Errorf("message inference.inference.ValidationWeight does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ValidationWeight) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in inference.inference.ValidationWeight", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ValidationWeight) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ValidationWeight) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ValidationWeight) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ValidationWeight) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ValidationWeight)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.MemberAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Weight != 0 {
			n += 1 + runtime.Sov(uint64(x.Weight))
		}
		if x.Reputation != 0 {
			n += 1 + runtime.Sov(uint64(x.Reputation))
		}
		if len(x.MlNodes) > 0 {
			for _, e := range x.MlNodes {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ValidationWeight)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.MlNodes) > 0 {
			for iNdEx := len(x.MlNodes) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.MlNodes[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x22
			}
		}
		if x.Reputation != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Reputation))
			i--
			dAtA[i] = 0x18
		}
		if x.Weight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Weight))
			i--
			dAtA[i] = 0x10
		}
		if len(x.MemberAddress) > 0 {
			i -= len(x.MemberAddress)
			copy(dAtA[i:], x.MemberAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MemberAddress)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ValidationWeight)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ValidationWeight: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ValidationWeight: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MemberAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MemberAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
				}
				x.Weight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Weight |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Reputation", wireType)
				}
				x.Reputation = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Reputation |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MlNodes", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MlNodes = append(x.MlNodes, &MLNodeInfo{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.MlNodes[len(x.MlNodes)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_SeedSignature                protoreflect.MessageDescriptor
	fd_SeedSignature_member_address protoreflect.FieldDescriptor
	fd_SeedSignature_signature      protoreflect.FieldDescriptor
)

func init() {
	file_inference_inference_epoch_group_data_proto_init()
	md_SeedSignature = File_inference_inference_epoch_group_data_proto.Messages().ByName("SeedSignature")
	fd_SeedSignature_member_address = md_SeedSignature.Fields().ByName("member_address")
	fd_SeedSignature_signature = md_SeedSignature.Fields().ByName("signature")
}

var _ protoreflect.Message = (*fastReflection_SeedSignature)(nil)

type fastReflection_SeedSignature SeedSignature

func (x *SeedSignature) ProtoReflect() protoreflect.Message {
	return (*fastReflection_SeedSignature)(x)
}

func (x *SeedSignature) slowProtoReflect() protoreflect.Message {
	mi := &file_inference_inference_epoch_group_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_SeedSignature_messageType fastReflection_SeedSignature_messageType
var _ protoreflect.MessageType = fastReflection_SeedSignature_messageType{}

type fastReflection_SeedSignature_messageType struct{}

func (x fastReflection_SeedSignature_messageType) Zero() protoreflect.Message {
	return (*fastReflection_SeedSignature)(nil)
}
func (x fastReflection_SeedSignature_messageType) New() protoreflect.Message {
	return new(fastReflection_SeedSignature)
}
func (x fastReflection_SeedSignature_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_SeedSignature
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_SeedSignature) Descriptor() protoreflect.MessageDescriptor {
	return md_SeedSignature
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_SeedSignature) Type() protoreflect.MessageType {
	return _fastReflection_SeedSignature_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_SeedSignature) New() protoreflect.Message {
	return new(fastReflection_SeedSignature)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_SeedSignature) Interface() protoreflect.ProtoMessage {
	return (*SeedSignature)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_SeedSignature) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.MemberAddress != "" {
		value := protoreflect.ValueOfString(x.MemberAddress)
		if !f(fd_SeedSignature_member_address, value) {
			return
		}
	}
	if x.Signature != "" {
		value := protoreflect.ValueOfString(x.Signature)
		if !f(fd_SeedSignature_signature, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_SeedSignature) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "inference.inference.SeedSignature.member_address":
		return x.MemberAddress != ""
	case "inference.inference.SeedSignature.signature":
		return x.Signature != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.SeedSignature"))
		}
		panic(fmt.Errorf("message inference.inference.SeedSignature does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SeedSignature) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "inference.inference.SeedSignature.member_address":
		x.MemberAddress = ""
	case "inference.inference.SeedSignature.signature":
		x.Signature = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.SeedSignature"))
		}
		panic(fmt.Errorf("message inference.inference.SeedSignature does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_SeedSignature) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "inference.inference.SeedSignature.member_address":
		value := x.MemberAddress
		return protoreflect.ValueOfString(value)
	case "inference.inference.SeedSignature.signature":
		value := x.Signature
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.SeedSignature"))
		}
		panic(fmt.Errorf("message inference.inference.SeedSignature does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SeedSignature) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "inference.inference.SeedSignature.member_address":
		x.MemberAddress = value.Interface().(string)
	case "inference.inference.SeedSignature.signature":
		x.Signature = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.SeedSignature"))
		}
		panic(fmt.Errorf("message inference.inference.SeedSignature does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SeedSignature) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.SeedSignature.member_address":
		panic(fmt.Errorf("field member_address of message inference.inference.SeedSignature is not mutable"))
	case "inference.inference.SeedSignature.signature":
		panic(fmt.Errorf("field signature of message inference.inference.SeedSignature is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.SeedSignature"))
		}
		panic(fmt.Errorf("message inference.inference.SeedSignature does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_SeedSignature) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.SeedSignature.member_address":
		return protoreflect.ValueOfString("")
	case "inference.inference.SeedSignature.signature":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.SeedSignature"))
		}
		panic(fmt.Errorf("message inference.inference.SeedSignature does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_SeedSignature) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in inference.inference.SeedSignature", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_SeedSignature) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SeedSignature) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_SeedSignature) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_SeedSignature) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*SeedSignature)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.MemberAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Signature)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*SeedSignature)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Signature) > 0 {
			i -= len(x.Signature)
			copy(dAtA[i:], x.Signature)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Signature)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.MemberAddress) > 0 {
			i -= len(x.MemberAddress)
			copy(dAtA[i:], x.MemberAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MemberAddress)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*SeedSignature)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SeedSignature: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SeedSignature: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MemberAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MemberAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Signature = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_MLNodeInfo            protoreflect.MessageDescriptor
	fd_MLNodeInfo_node_id    protoreflect.FieldDescriptor
	fd_MLNodeInfo_throughput protoreflect.FieldDescriptor
	fd_MLNodeInfo_poc_weight protoreflect.FieldDescriptor
)

func init() {
	file_inference_inference_epoch_group_data_proto_init()
	md_MLNodeInfo = File_inference_inference_epoch_group_data_proto.Messages().ByName("MLNodeInfo")
	fd_MLNodeInfo_node_id = md_MLNodeInfo.Fields().ByName("node_id")
	fd_MLNodeInfo_throughput = md_MLNodeInfo.Fields().ByName("throughput")
	fd_MLNodeInfo_poc_weight = md_MLNodeInfo.Fields().ByName("poc_weight")
}

var _ protoreflect.Message = (*fastReflection_MLNodeInfo)(nil)

type fastReflection_MLNodeInfo MLNodeInfo

func (x *MLNodeInfo) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MLNodeInfo)(x)
}

func (x *MLNodeInfo) slowProtoReflect() protoreflect.Message {
	mi := &file_inference_inference_epoch_group_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MLNodeInfo_messageType fastReflection_MLNodeInfo_messageType
var _ protoreflect.MessageType = fastReflection_MLNodeInfo_messageType{}

type fastReflection_MLNodeInfo_messageType struct{}

func (x fastReflection_MLNodeInfo_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MLNodeInfo)(nil)
}
func (x fastReflection_MLNodeInfo_messageType) New() protoreflect.Message {
	return new(fastReflection_MLNodeInfo)
}
func (x fastReflection_MLNodeInfo_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MLNodeInfo
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MLNodeInfo) Descriptor() protoreflect.MessageDescriptor {
	return md_MLNodeInfo
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MLNodeInfo) Type() protoreflect.MessageType {
	return _fastReflection_MLNodeInfo_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MLNodeInfo) New() protoreflect.Message {
	return new(fastReflection_MLNodeInfo)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MLNodeInfo) Interface() protoreflect.ProtoMessage {
	return (*MLNodeInfo)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MLNodeInfo) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.NodeId != "" {
		value := protoreflect.ValueOfString(x.NodeId)
		if !f(fd_MLNodeInfo_node_id, value) {
			return
		}
	}
	if x.Throughput != int64(0) {
		value := protoreflect.ValueOfInt64(x.Throughput)
		if !f(fd_MLNodeInfo_throughput, value) {
			return
		}
	}
	if x.PocWeight != int64(0) {
		value := protoreflect.ValueOfInt64(x.PocWeight)
		if !f(fd_MLNodeInfo_poc_weight, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MLNodeInfo) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "inference.inference.MLNodeInfo.node_id":
		return x.NodeId != ""
	case "inference.inference.MLNodeInfo.throughput":
		return x.Throughput != int64(0)
	case "inference.inference.MLNodeInfo.poc_weight":
		return x.PocWeight != int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.MLNodeInfo"))
		}
		panic(fmt.Errorf("message inference.inference.MLNodeInfo does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MLNodeInfo) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "inference.inference.MLNodeInfo.node_id":
		x.NodeId = ""
	case "inference.inference.MLNodeInfo.throughput":
		x.Throughput = int64(0)
	case "inference.inference.MLNodeInfo.poc_weight":
		x.PocWeight = int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.MLNodeInfo"))
		}
		panic(fmt.Errorf("message inference.inference.MLNodeInfo does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MLNodeInfo) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "inference.inference.MLNodeInfo.node_id":
		value := x.NodeId
		return protoreflect.ValueOfString(value)
	case "inference.inference.MLNodeInfo.throughput":
		value := x.Throughput
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.MLNodeInfo.poc_weight":
		value := x.PocWeight
		return protoreflect.ValueOfInt64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.MLNodeInfo"))
		}
		panic(fmt.Errorf("message inference.inference.MLNodeInfo does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MLNodeInfo) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "inference.inference.MLNodeInfo.node_id":
		x.NodeId = value.Interface().(string)
	case "inference.inference.MLNodeInfo.throughput":
		x.Throughput = value.Int()
	case "inference.inference.MLNodeInfo.poc_weight":
		x.PocWeight = value.Int()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.MLNodeInfo"))
		}
		panic(fmt.Errorf("message inference.inference.MLNodeInfo does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MLNodeInfo) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.MLNodeInfo.node_id":
		panic(fmt.Errorf("field node_id of message inference.inference.MLNodeInfo is not mutable"))
	case "inference.inference.MLNodeInfo.throughput":
		panic(fmt.Errorf("field throughput of message inference.inference.MLNodeInfo is not mutable"))
	case "inference.inference.MLNodeInfo.poc_weight":
		panic(fmt.Errorf("field poc_weight of message inference.inference.MLNodeInfo is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.MLNodeInfo"))
		}
		panic(fmt.Errorf("message inference.inference.MLNodeInfo does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MLNodeInfo) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.MLNodeInfo.node_id":
		return protoreflect.ValueOfString("")
	case "inference.inference.MLNodeInfo.throughput":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.MLNodeInfo.poc_weight":
		return protoreflect.ValueOfInt64(int64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.MLNodeInfo"))
		}
		panic(fmt.Errorf("message inference.inference.MLNodeInfo does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MLNodeInfo) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in inference.inference.MLNodeInfo", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MLNodeInfo) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MLNodeInfo) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MLNodeInfo) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MLNodeInfo) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MLNodeInfo)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.NodeId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Throughput != 0 {
			n += 1 + runtime.Sov(uint64(x.Throughput))
		}
		if x.PocWeight != 0 {
			n += 1 + runtime.Sov(uint64(x.PocWeight))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MLNodeInfo)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.PocWeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PocWeight))
			i--
			dAtA[i] = 0x18
		}
		if x.Throughput != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Throughput))
			i--
			dAtA[i] = 0x10
		}
		if len(x.NodeId) > 0 {
			i -= len(x.NodeId)
			copy(dAtA[i:], x.NodeId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.NodeId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MLNodeInfo)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MLNodeInfo: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MLNodeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.NodeId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Throughput", wireType)
				}
				x.Throughput = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Throughput |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PocWeight", wireType)
				}
				x.PocWeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PocWeight |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: inference/inference/epoch_group_data.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// These top two values are uint64s because they are IDs, not numerical values.
type EpochGroupData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PocStartBlockHeight   uint64              `protobuf:"varint,1,opt,name=poc_start_block_height,json=pocStartBlockHeight,proto3" json:"poc_start_block_height,omitempty"`
	EpochGroupId          uint64              `protobuf:"varint,2,opt,name=epoch_group_id,json=epochGroupId,proto3" json:"epoch_group_id,omitempty"`
	EpochPolicy           string              `protobuf:"bytes,3,opt,name=epoch_policy,json=epochPolicy,proto3" json:"epoch_policy,omitempty"`
	EffectiveBlockHeight  int64               `protobuf:"varint,4,opt,name=effective_block_height,json=effectiveBlockHeight,proto3" json:"effective_block_height,omitempty"`
	LastBlockHeight       int64               `protobuf:"varint,5,opt,name=last_block_height,json=lastBlockHeight,proto3" json:"last_block_height,omitempty"`
	MemberSeedSignatures  []*SeedSignature    `protobuf:"bytes,6,rep,name=member_seed_signatures,json=memberSeedSignatures,proto3" json:"member_seed_signatures,omitempty"`
	ValidationWeights     []*ValidationWeight `protobuf:"bytes,8,rep,name=validation_weights,json=validationWeights,proto3" json:"validation_weights,omitempty"`
	UnitOfComputePrice    int64               `protobuf:"varint,9,opt,name=unit_of_compute_price,json=unitOfComputePrice,proto3" json:"unit_of_compute_price,omitempty"`
	NumberOfRequests      int64               `protobuf:"varint,10,opt,name=number_of_requests,json=numberOfRequests,proto3" json:"number_of_requests,omitempty"`
	PreviousEpochRequests int64               `protobuf:"varint,11,opt,name=previous_epoch_requests,json=previousEpochRequests,proto3" json:"previous_epoch_requests,omitempty"`
	ValidationParams      *ValidationParams   `protobuf:"bytes,12,opt,name=validation_params,json=validationParams,proto3" json:"validation_params,omitempty"`
	TotalWeight           int64               `protobuf:"varint,13,opt,name=total_weight,json=totalWeight,proto3" json:"total_weight,omitempty"`
	// If model_id is empty, this is the parent EpochGroup
	// If model_id is set, this is a sub EpochGroup for that specific model
	ModelId string `protobuf:"bytes,14,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	// List of model IDs for sub EpochGroups, only used in parent EpochGroup
	SubGroupModels []string `protobuf:"bytes,15,rep,name=sub_group_models,json=subGroupModels,proto3" json:"sub_group_models,omitempty"`
	ModelSnapshot  *Model   `protobuf:"bytes,16,opt,name=model_snapshot,json=modelSnapshot,proto3" json:"model_snapshot,omitempty"`
}

func (x *EpochGroupData) Reset() {
	*x = EpochGroupData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_inference_epoch_group_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpochGroupData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpochGroupData) ProtoMessage() {}

// Deprecated: Use EpochGroupData.ProtoReflect.Descriptor instead.
func (*EpochGroupData) Descriptor() ([]byte, []int) {
	return file_inference_inference_epoch_group_data_proto_rawDescGZIP(), []int{0}
}

func (x *EpochGroupData) GetPocStartBlockHeight() uint64 {
	if x != nil {
		return x.PocStartBlockHeight
	}
	return 0
}

func (x *EpochGroupData) GetEpochGroupId() uint64 {
	if x != nil {
		return x.EpochGroupId
	}
	return 0
}

func (x *EpochGroupData) GetEpochPolicy() string {
	if x != nil {
		return x.EpochPolicy
	}
	return ""
}

func (x *EpochGroupData) GetEffectiveBlockHeight() int64 {
	if x != nil {
		return x.EffectiveBlockHeight
	}
	return 0
}

func (x *EpochGroupData) GetLastBlockHeight() int64 {
	if x != nil {
		return x.LastBlockHeight
	}
	return 0
}

func (x *EpochGroupData) GetMemberSeedSignatures() []*SeedSignature {
	if x != nil {
		return x.MemberSeedSignatures
	}
	return nil
}

func (x *EpochGroupData) GetValidationWeights() []*ValidationWeight {
	if x != nil {
		return x.ValidationWeights
	}
	return nil
}

func (x *EpochGroupData) GetUnitOfComputePrice() int64 {
	if x != nil {
		return x.UnitOfComputePrice
	}
	return 0
}

func (x *EpochGroupData) GetNumberOfRequests() int64 {
	if x != nil {
		return x.NumberOfRequests
	}
	return 0
}

func (x *EpochGroupData) GetPreviousEpochRequests() int64 {
	if x != nil {
		return x.PreviousEpochRequests
	}
	return 0
}

func (x *EpochGroupData) GetValidationParams() *ValidationParams {
	if x != nil {
		return x.ValidationParams
	}
	return nil
}

func (x *EpochGroupData) GetTotalWeight() int64 {
	if x != nil {
		return x.TotalWeight
	}
	return 0
}

func (x *EpochGroupData) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *EpochGroupData) GetSubGroupModels() []string {
	if x != nil {
		return x.SubGroupModels
	}
	return nil
}

func (x *EpochGroupData) GetModelSnapshot() *Model {
	if x != nil {
		return x.ModelSnapshot
	}
	return nil
}

type ValidationWeight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberAddress string `protobuf:"bytes,1,opt,name=member_address,json=memberAddress,proto3" json:"member_address,omitempty"`
	Weight        int64  `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
	Reputation    int32  `protobuf:"varint,3,opt,name=reputation,proto3" json:"reputation,omitempty"`
	// We may decide to move ml_nodes directly to EpochGroupData,
	// but for now, this is a good solution.
	MlNodes []*MLNodeInfo `protobuf:"bytes,4,rep,name=ml_nodes,json=mlNodes,proto3" json:"ml_nodes,omitempty"`
}

func (x *ValidationWeight) Reset() {
	*x = ValidationWeight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_inference_epoch_group_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidationWeight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationWeight) ProtoMessage() {}

// Deprecated: Use ValidationWeight.ProtoReflect.Descriptor instead.
func (*ValidationWeight) Descriptor() ([]byte, []int) {
	return file_inference_inference_epoch_group_data_proto_rawDescGZIP(), []int{1}
}

func (x *ValidationWeight) GetMemberAddress() string {
	if x != nil {
		return x.MemberAddress
	}
	return ""
}

func (x *ValidationWeight) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *ValidationWeight) GetReputation() int32 {
	if x != nil {
		return x.Reputation
	}
	return 0
}

func (x *ValidationWeight) GetMlNodes() []*MLNodeInfo {
	if x != nil {
		return x.MlNodes
	}
	return nil
}

type SeedSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberAddress string `protobuf:"bytes,1,opt,name=member_address,json=memberAddress,proto3" json:"member_address,omitempty"`
	Signature     string `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *SeedSignature) Reset() {
	*x = SeedSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_inference_epoch_group_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeedSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeedSignature) ProtoMessage() {}

// Deprecated: Use SeedSignature.ProtoReflect.Descriptor instead.
func (*SeedSignature) Descriptor() ([]byte, []int) {
	return file_inference_inference_epoch_group_data_proto_rawDescGZIP(), []int{2}
}

func (x *SeedSignature) GetMemberAddress() string {
	if x != nil {
		return x.MemberAddress
	}
	return ""
}

func (x *SeedSignature) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

type MLNodeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId     string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Throughput int64  `protobuf:"varint,2,opt,name=throughput,proto3" json:"throughput,omitempty"`
	PocWeight  int64  `protobuf:"varint,3,opt,name=poc_weight,json=pocWeight,proto3" json:"poc_weight,omitempty"`
}

func (x *MLNodeInfo) Reset() {
	*x = MLNodeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_inference_epoch_group_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MLNodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MLNodeInfo) ProtoMessage() {}

// Deprecated: Use MLNodeInfo.ProtoReflect.Descriptor instead.
func (*MLNodeInfo) Descriptor() ([]byte, []int) {
	return file_inference_inference_epoch_group_data_proto_rawDescGZIP(), []int{3}
}

func (x *MLNodeInfo) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *MLNodeInfo) GetThroughput() int64 {
	if x != nil {
		return x.Throughput
	}
	return 0
}

func (x *MLNodeInfo) GetPocWeight() int64 {
	if x != nil {
		return x.PocWeight
	}
	return 0
}

var File_inference_inference_epoch_group_data_proto protoreflect.FileDescriptor

var file_inference_inference_epoch_group_data_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x69, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x1a, 0x25, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x69, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb8, 0x06, 0x0a, 0x0e,
	0x45, 0x70, 0x6f, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x33,
	0x0a, 0x16, 0x70, 0x6f, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13,
	0x70, 0x6f, 0x63, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x34, 0x0a, 0x16,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6c,
	0x61, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x58,
	0x0a, 0x16, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x14, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x65, 0x65, 0x64, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x12, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x11, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x31,
	0x0a, 0x15, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x75,
	0x6e, 0x69, 0x74, 0x4f, 0x66, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12,
	0x36, 0x0a, 0x17, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x15, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x52, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x69,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x75, 0x62,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0xad, 0x01, 0x0a, 0x10, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65,
	0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x72, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x08, 0x6d, 0x6c,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x4d, 0x4c, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6d,
	0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x54, 0x0a, 0x0d, 0x53, 0x65, 0x65, 0x64, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x64, 0x0a, 0x0a,
	0x4d, 0x4c, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68,
	0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x63, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x6f, 0x63, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x42, 0xc1, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13,
	0x45, 0x70, 0x6f, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x24, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b,
	0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x2f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0xa2, 0x02, 0x03, 0x49, 0x49,
	0x58, 0xaa, 0x02, 0x13, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0xca, 0x02, 0x13, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x5c, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0xe2, 0x02, 0x1f,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5c, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x14, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x3a, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_inference_inference_epoch_group_data_proto_rawDescOnce sync.Once
	file_inference_inference_epoch_group_data_proto_rawDescData = file_inference_inference_epoch_group_data_proto_rawDesc
)

func file_inference_inference_epoch_group_data_proto_rawDescGZIP() []byte {
	file_inference_inference_epoch_group_data_proto_rawDescOnce.Do(func() {
		file_inference_inference_epoch_group_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_inference_inference_epoch_group_data_proto_rawDescData)
	})
	return file_inference_inference_epoch_group_data_proto_rawDescData
}

var file_inference_inference_epoch_group_data_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_inference_inference_epoch_group_data_proto_goTypes = []interface{}{
	(*EpochGroupData)(nil),   // 0: inference.inference.EpochGroupData
	(*ValidationWeight)(nil), // 1: inference.inference.ValidationWeight
	(*SeedSignature)(nil),    // 2: inference.inference.SeedSignature
	(*MLNodeInfo)(nil),       // 3: inference.inference.MLNodeInfo
	(*ValidationParams)(nil), // 4: inference.inference.ValidationParams
	(*Model)(nil),            // 5: inference.inference.Model
}
var file_inference_inference_epoch_group_data_proto_depIdxs = []int32{
	2, // 0: inference.inference.EpochGroupData.member_seed_signatures:type_name -> inference.inference.SeedSignature
	1, // 1: inference.inference.EpochGroupData.validation_weights:type_name -> inference.inference.ValidationWeight
	4, // 2: inference.inference.EpochGroupData.validation_params:type_name -> inference.inference.ValidationParams
	5, // 3: inference.inference.EpochGroupData.model_snapshot:type_name -> inference.inference.Model
	3, // 4: inference.inference.ValidationWeight.ml_nodes:type_name -> inference.inference.MLNodeInfo
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_inference_inference_epoch_group_data_proto_init() }
func file_inference_inference_epoch_group_data_proto_init() {
	if File_inference_inference_epoch_group_data_proto != nil {
		return
	}
	file_inference_inference_participant_proto_init()
	file_inference_inference_params_proto_init()
	file_inference_inference_model_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_inference_inference_epoch_group_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpochGroupData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_inference_epoch_group_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidationWeight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_inference_epoch_group_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeedSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_inference_epoch_group_data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MLNodeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_inference_inference_epoch_group_data_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_inference_inference_epoch_group_data_proto_goTypes,
		DependencyIndexes: file_inference_inference_epoch_group_data_proto_depIdxs,
		MessageInfos:      file_inference_inference_epoch_group_data_proto_msgTypes,
	}.Build()
	File_inference_inference_epoch_group_data_proto = out.File
	file_inference_inference_epoch_group_data_proto_rawDesc = nil
	file_inference_inference_epoch_group_data_proto_goTypes = nil
	file_inference_inference_epoch_group_data_proto_depIdxs = nil
}

// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package inference

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_ActiveParticipants_1_list)(nil)

type _ActiveParticipants_1_list struct {
	list *[]*ActiveParticipant
}

func (x *_ActiveParticipants_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_ActiveParticipants_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_ActiveParticipants_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*ActiveParticipant)
	(*x.list)[i] = concreteValue
}

func (x *_ActiveParticipants_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*ActiveParticipant)
	*x.list = append(*x.list, concreteValue)
}

func (x *_ActiveParticipants_1_list) AppendMutable() protoreflect.Value {
	v := new(ActiveParticipant)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_ActiveParticipants_1_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_ActiveParticipants_1_list) NewElement() protoreflect.Value {
	v := new(ActiveParticipant)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_ActiveParticipants_1_list) IsValid() bool {
	return x.list != nil
}

var (
	md_ActiveParticipants                         protoreflect.MessageDescriptor
	fd_ActiveParticipants_participants            protoreflect.FieldDescriptor
	fd_ActiveParticipants_epoch_group_id          protoreflect.FieldDescriptor
	fd_ActiveParticipants_poc_start_block_height  protoreflect.FieldDescriptor
	fd_ActiveParticipants_effective_block_height  protoreflect.FieldDescriptor
	fd_ActiveParticipants_created_at_block_height protoreflect.FieldDescriptor
)

func init() {
	file_inference_inference_activeparticipants_proto_init()
	md_ActiveParticipants = File_inference_inference_activeparticipants_proto.Messages().ByName("ActiveParticipants")
	fd_ActiveParticipants_participants = md_ActiveParticipants.Fields().ByName("participants")
	fd_ActiveParticipants_epoch_group_id = md_ActiveParticipants.Fields().ByName("epoch_group_id")
	fd_ActiveParticipants_poc_start_block_height = md_ActiveParticipants.Fields().ByName("poc_start_block_height")
	fd_ActiveParticipants_effective_block_height = md_ActiveParticipants.Fields().ByName("effective_block_height")
	fd_ActiveParticipants_created_at_block_height = md_ActiveParticipants.Fields().ByName("created_at_block_height")
}

var _ protoreflect.Message = (*fastReflection_ActiveParticipants)(nil)

type fastReflection_ActiveParticipants ActiveParticipants

func (x *ActiveParticipants) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ActiveParticipants)(x)
}

func (x *ActiveParticipants) slowProtoReflect() protoreflect.Message {
	mi := &file_inference_inference_activeparticipants_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ActiveParticipants_messageType fastReflection_ActiveParticipants_messageType
var _ protoreflect.MessageType = fastReflection_ActiveParticipants_messageType{}

type fastReflection_ActiveParticipants_messageType struct{}

func (x fastReflection_ActiveParticipants_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ActiveParticipants)(nil)
}
func (x fastReflection_ActiveParticipants_messageType) New() protoreflect.Message {
	return new(fastReflection_ActiveParticipants)
}
func (x fastReflection_ActiveParticipants_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ActiveParticipants
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ActiveParticipants) Descriptor() protoreflect.MessageDescriptor {
	return md_ActiveParticipants
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ActiveParticipants) Type() protoreflect.MessageType {
	return _fastReflection_ActiveParticipants_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ActiveParticipants) New() protoreflect.Message {
	return new(fastReflection_ActiveParticipants)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ActiveParticipants) Interface() protoreflect.ProtoMessage {
	return (*ActiveParticipants)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ActiveParticipants) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.Participants) != 0 {
		value := protoreflect.ValueOfList(&_ActiveParticipants_1_list{list: &x.Participants})
		if !f(fd_ActiveParticipants_participants, value) {
			return
		}
	}
	if x.EpochGroupId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.EpochGroupId)
		if !f(fd_ActiveParticipants_epoch_group_id, value) {
			return
		}
	}
	if x.PocStartBlockHeight != int64(0) {
		value := protoreflect.ValueOfInt64(x.PocStartBlockHeight)
		if !f(fd_ActiveParticipants_poc_start_block_height, value) {
			return
		}
	}
	if x.EffectiveBlockHeight != int64(0) {
		value := protoreflect.ValueOfInt64(x.EffectiveBlockHeight)
		if !f(fd_ActiveParticipants_effective_block_height, value) {
			return
		}
	}
	if x.CreatedAtBlockHeight != int64(0) {
		value := protoreflect.ValueOfInt64(x.CreatedAtBlockHeight)
		if !f(fd_ActiveParticipants_created_at_block_height, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ActiveParticipants) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "inference.inference.ActiveParticipants.participants":
		return len(x.Participants) != 0
	case "inference.inference.ActiveParticipants.epoch_group_id":
		return x.EpochGroupId != uint64(0)
	case "inference.inference.ActiveParticipants.poc_start_block_height":
		return x.PocStartBlockHeight != int64(0)
	case "inference.inference.ActiveParticipants.effective_block_height":
		return x.EffectiveBlockHeight != int64(0)
	case "inference.inference.ActiveParticipants.created_at_block_height":
		return x.CreatedAtBlockHeight != int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.ActiveParticipants"))
		}
		panic(fmt.Errorf("message inference.inference.ActiveParticipants does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ActiveParticipants) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "inference.inference.ActiveParticipants.participants":
		x.Participants = nil
	case "inference.inference.ActiveParticipants.epoch_group_id":
		x.EpochGroupId = uint64(0)
	case "inference.inference.ActiveParticipants.poc_start_block_height":
		x.PocStartBlockHeight = int64(0)
	case "inference.inference.ActiveParticipants.effective_block_height":
		x.EffectiveBlockHeight = int64(0)
	case "inference.inference.ActiveParticipants.created_at_block_height":
		x.CreatedAtBlockHeight = int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.ActiveParticipants"))
		}
		panic(fmt.Errorf("message inference.inference.ActiveParticipants does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ActiveParticipants) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "inference.inference.ActiveParticipants.participants":
		if len(x.Participants) == 0 {
			return protoreflect.ValueOfList(&_ActiveParticipants_1_list{})
		}
		listValue := &_ActiveParticipants_1_list{list: &x.Participants}
		return protoreflect.ValueOfList(listValue)
	case "inference.inference.ActiveParticipants.epoch_group_id":
		value := x.EpochGroupId
		return protoreflect.ValueOfUint64(value)
	case "inference.inference.ActiveParticipants.poc_start_block_height":
		value := x.PocStartBlockHeight
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.ActiveParticipants.effective_block_height":
		value := x.EffectiveBlockHeight
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.ActiveParticipants.created_at_block_height":
		value := x.CreatedAtBlockHeight
		return protoreflect.ValueOfInt64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.ActiveParticipants"))
		}
		panic(fmt.Errorf("message inference.inference.ActiveParticipants does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ActiveParticipants) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "inference.inference.ActiveParticipants.participants":
		lv := value.List()
		clv := lv.(*_ActiveParticipants_1_list)
		x.Participants = *clv.list
	case "inference.inference.ActiveParticipants.epoch_group_id":
		x.EpochGroupId = value.Uint()
	case "inference.inference.ActiveParticipants.poc_start_block_height":
		x.PocStartBlockHeight = value.Int()
	case "inference.inference.ActiveParticipants.effective_block_height":
		x.EffectiveBlockHeight = value.Int()
	case "inference.inference.ActiveParticipants.created_at_block_height":
		x.CreatedAtBlockHeight = value.Int()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.ActiveParticipants"))
		}
		panic(fmt.Errorf("message inference.inference.ActiveParticipants does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ActiveParticipants) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.ActiveParticipants.participants":
		if x.Participants == nil {
			x.Participants = []*ActiveParticipant{}
		}
		value := &_ActiveParticipants_1_list{list: &x.Participants}
		return protoreflect.ValueOfList(value)
	case "inference.inference.ActiveParticipants.epoch_group_id":
		panic(fmt.Errorf("field epoch_group_id of message inference.inference.ActiveParticipants is not mutable"))
	case "inference.inference.ActiveParticipants.poc_start_block_height":
		panic(fmt.Errorf("field poc_start_block_height of message inference.inference.ActiveParticipants is not mutable"))
	case "inference.inference.ActiveParticipants.effective_block_height":
		panic(fmt.Errorf("field effective_block_height of message inference.inference.ActiveParticipants is not mutable"))
	case "inference.inference.ActiveParticipants.created_at_block_height":
		panic(fmt.Errorf("field created_at_block_height of message inference.inference.ActiveParticipants is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.ActiveParticipants"))
		}
		panic(fmt.Errorf("message inference.inference.ActiveParticipants does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ActiveParticipants) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.ActiveParticipants.participants":
		list := []*ActiveParticipant{}
		return protoreflect.ValueOfList(&_ActiveParticipants_1_list{list: &list})
	case "inference.inference.ActiveParticipants.epoch_group_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "inference.inference.ActiveParticipants.poc_start_block_height":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.ActiveParticipants.effective_block_height":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.ActiveParticipants.created_at_block_height":
		return protoreflect.ValueOfInt64(int64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.ActiveParticipants"))
		}
		panic(fmt.Errorf("message inference.inference.ActiveParticipants does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ActiveParticipants) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in inference.inference.ActiveParticipants", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ActiveParticipants) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ActiveParticipants) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ActiveParticipants) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ActiveParticipants) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ActiveParticipants)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.Participants) > 0 {
			for _, e := range x.Participants {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.EpochGroupId != 0 {
			n += 1 + runtime.Sov(uint64(x.EpochGroupId))
		}
		if x.PocStartBlockHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.PocStartBlockHeight))
		}
		if x.EffectiveBlockHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.EffectiveBlockHeight))
		}
		if x.CreatedAtBlockHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.CreatedAtBlockHeight))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ActiveParticipants)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.CreatedAtBlockHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CreatedAtBlockHeight))
			i--
			dAtA[i] = 0x28
		}
		if x.EffectiveBlockHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EffectiveBlockHeight))
			i--
			dAtA[i] = 0x20
		}
		if x.PocStartBlockHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PocStartBlockHeight))
			i--
			dAtA[i] = 0x18
		}
		if x.EpochGroupId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EpochGroupId))
			i--
			dAtA[i] = 0x10
		}
		if len(x.Participants) > 0 {
			for iNdEx := len(x.Participants) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Participants[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0xa
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ActiveParticipants)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ActiveParticipants: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ActiveParticipants: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Participants", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Participants = append(x.Participants, &ActiveParticipant{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Participants[len(x.Participants)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EpochGroupId", wireType)
				}
				x.EpochGroupId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EpochGroupId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PocStartBlockHeight", wireType)
				}
				x.PocStartBlockHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PocStartBlockHeight |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EffectiveBlockHeight", wireType)
				}
				x.EffectiveBlockHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EffectiveBlockHeight |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CreatedAtBlockHeight", wireType)
				}
				x.CreatedAtBlockHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CreatedAtBlockHeight |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_ActiveParticipant_5_list)(nil)

type _ActiveParticipant_5_list struct {
	list *[]string
}

func (x *_ActiveParticipant_5_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_ActiveParticipant_5_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_ActiveParticipant_5_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_ActiveParticipant_5_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_ActiveParticipant_5_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message ActiveParticipant at list field Models as it is not of Message kind"))
}

func (x *_ActiveParticipant_5_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_ActiveParticipant_5_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_ActiveParticipant_5_list) IsValid() bool {
	return x.list != nil
}

var (
	md_ActiveParticipant               protoreflect.MessageDescriptor
	fd_ActiveParticipant_index         protoreflect.FieldDescriptor
	fd_ActiveParticipant_validator_key protoreflect.FieldDescriptor
	fd_ActiveParticipant_weight        protoreflect.FieldDescriptor
	fd_ActiveParticipant_inference_url protoreflect.FieldDescriptor
	fd_ActiveParticipant_models        protoreflect.FieldDescriptor
	fd_ActiveParticipant_seed          protoreflect.FieldDescriptor
)

func init() {
	file_inference_inference_activeparticipants_proto_init()
	md_ActiveParticipant = File_inference_inference_activeparticipants_proto.Messages().ByName("ActiveParticipant")
	fd_ActiveParticipant_index = md_ActiveParticipant.Fields().ByName("index")
	fd_ActiveParticipant_validator_key = md_ActiveParticipant.Fields().ByName("validator_key")
	fd_ActiveParticipant_weight = md_ActiveParticipant.Fields().ByName("weight")
	fd_ActiveParticipant_inference_url = md_ActiveParticipant.Fields().ByName("inference_url")
	fd_ActiveParticipant_models = md_ActiveParticipant.Fields().ByName("models")
	fd_ActiveParticipant_seed = md_ActiveParticipant.Fields().ByName("seed")
}

var _ protoreflect.Message = (*fastReflection_ActiveParticipant)(nil)

type fastReflection_ActiveParticipant ActiveParticipant

func (x *ActiveParticipant) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ActiveParticipant)(x)
}

func (x *ActiveParticipant) slowProtoReflect() protoreflect.Message {
	mi := &file_inference_inference_activeparticipants_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ActiveParticipant_messageType fastReflection_ActiveParticipant_messageType
var _ protoreflect.MessageType = fastReflection_ActiveParticipant_messageType{}

type fastReflection_ActiveParticipant_messageType struct{}

func (x fastReflection_ActiveParticipant_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ActiveParticipant)(nil)
}
func (x fastReflection_ActiveParticipant_messageType) New() protoreflect.Message {
	return new(fastReflection_ActiveParticipant)
}
func (x fastReflection_ActiveParticipant_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ActiveParticipant
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ActiveParticipant) Descriptor() protoreflect.MessageDescriptor {
	return md_ActiveParticipant
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ActiveParticipant) Type() protoreflect.MessageType {
	return _fastReflection_ActiveParticipant_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ActiveParticipant) New() protoreflect.Message {
	return new(fastReflection_ActiveParticipant)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ActiveParticipant) Interface() protoreflect.ProtoMessage {
	return (*ActiveParticipant)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ActiveParticipant) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Index != "" {
		value := protoreflect.ValueOfString(x.Index)
		if !f(fd_ActiveParticipant_index, value) {
			return
		}
	}
	if x.ValidatorKey != "" {
		value := protoreflect.ValueOfString(x.ValidatorKey)
		if !f(fd_ActiveParticipant_validator_key, value) {
			return
		}
	}
	if x.Weight != int64(0) {
		value := protoreflect.ValueOfInt64(x.Weight)
		if !f(fd_ActiveParticipant_weight, value) {
			return
		}
	}
	if x.InferenceUrl != "" {
		value := protoreflect.ValueOfString(x.InferenceUrl)
		if !f(fd_ActiveParticipant_inference_url, value) {
			return
		}
	}
	if len(x.Models) != 0 {
		value := protoreflect.ValueOfList(&_ActiveParticipant_5_list{list: &x.Models})
		if !f(fd_ActiveParticipant_models, value) {
			return
		}
	}
	if x.Seed != nil {
		value := protoreflect.ValueOfMessage(x.Seed.ProtoReflect())
		if !f(fd_ActiveParticipant_seed, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ActiveParticipant) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "inference.inference.ActiveParticipant.index":
		return x.Index != ""
	case "inference.inference.ActiveParticipant.validator_key":
		return x.ValidatorKey != ""
	case "inference.inference.ActiveParticipant.weight":
		return x.Weight != int64(0)
	case "inference.inference.ActiveParticipant.inference_url":
		return x.InferenceUrl != ""
	case "inference.inference.ActiveParticipant.models":
		return len(x.Models) != 0
	case "inference.inference.ActiveParticipant.seed":
		return x.Seed != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.ActiveParticipant"))
		}
		panic(fmt.Errorf("message inference.inference.ActiveParticipant does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ActiveParticipant) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "inference.inference.ActiveParticipant.index":
		x.Index = ""
	case "inference.inference.ActiveParticipant.validator_key":
		x.ValidatorKey = ""
	case "inference.inference.ActiveParticipant.weight":
		x.Weight = int64(0)
	case "inference.inference.ActiveParticipant.inference_url":
		x.InferenceUrl = ""
	case "inference.inference.ActiveParticipant.models":
		x.Models = nil
	case "inference.inference.ActiveParticipant.seed":
		x.Seed = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.ActiveParticipant"))
		}
		panic(fmt.Errorf("message inference.inference.ActiveParticipant does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ActiveParticipant) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "inference.inference.ActiveParticipant.index":
		value := x.Index
		return protoreflect.ValueOfString(value)
	case "inference.inference.ActiveParticipant.validator_key":
		value := x.ValidatorKey
		return protoreflect.ValueOfString(value)
	case "inference.inference.ActiveParticipant.weight":
		value := x.Weight
		return protoreflect.ValueOfInt64(value)
	case "inference.inference.ActiveParticipant.inference_url":
		value := x.InferenceUrl
		return protoreflect.ValueOfString(value)
	case "inference.inference.ActiveParticipant.models":
		if len(x.Models) == 0 {
			return protoreflect.ValueOfList(&_ActiveParticipant_5_list{})
		}
		listValue := &_ActiveParticipant_5_list{list: &x.Models}
		return protoreflect.ValueOfList(listValue)
	case "inference.inference.ActiveParticipant.seed":
		value := x.Seed
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.ActiveParticipant"))
		}
		panic(fmt.Errorf("message inference.inference.ActiveParticipant does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ActiveParticipant) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "inference.inference.ActiveParticipant.index":
		x.Index = value.Interface().(string)
	case "inference.inference.ActiveParticipant.validator_key":
		x.ValidatorKey = value.Interface().(string)
	case "inference.inference.ActiveParticipant.weight":
		x.Weight = value.Int()
	case "inference.inference.ActiveParticipant.inference_url":
		x.InferenceUrl = value.Interface().(string)
	case "inference.inference.ActiveParticipant.models":
		lv := value.List()
		clv := lv.(*_ActiveParticipant_5_list)
		x.Models = *clv.list
	case "inference.inference.ActiveParticipant.seed":
		x.Seed = value.Message().Interface().(*RandomSeed)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.ActiveParticipant"))
		}
		panic(fmt.Errorf("message inference.inference.ActiveParticipant does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ActiveParticipant) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.ActiveParticipant.models":
		if x.Models == nil {
			x.Models = []string{}
		}
		value := &_ActiveParticipant_5_list{list: &x.Models}
		return protoreflect.ValueOfList(value)
	case "inference.inference.ActiveParticipant.seed":
		if x.Seed == nil {
			x.Seed = new(RandomSeed)
		}
		return protoreflect.ValueOfMessage(x.Seed.ProtoReflect())
	case "inference.inference.ActiveParticipant.index":
		panic(fmt.Errorf("field index of message inference.inference.ActiveParticipant is not mutable"))
	case "inference.inference.ActiveParticipant.validator_key":
		panic(fmt.Errorf("field validator_key of message inference.inference.ActiveParticipant is not mutable"))
	case "inference.inference.ActiveParticipant.weight":
		panic(fmt.Errorf("field weight of message inference.inference.ActiveParticipant is not mutable"))
	case "inference.inference.ActiveParticipant.inference_url":
		panic(fmt.Errorf("field inference_url of message inference.inference.ActiveParticipant is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.ActiveParticipant"))
		}
		panic(fmt.Errorf("message inference.inference.ActiveParticipant does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ActiveParticipant) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.inference.ActiveParticipant.index":
		return protoreflect.ValueOfString("")
	case "inference.inference.ActiveParticipant.validator_key":
		return protoreflect.ValueOfString("")
	case "inference.inference.ActiveParticipant.weight":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.inference.ActiveParticipant.inference_url":
		return protoreflect.ValueOfString("")
	case "inference.inference.ActiveParticipant.models":
		list := []string{}
		return protoreflect.ValueOfList(&_ActiveParticipant_5_list{list: &list})
	case "inference.inference.ActiveParticipant.seed":
		m := new(RandomSeed)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.inference.ActiveParticipant"))
		}
		panic(fmt.Errorf("message inference.inference.ActiveParticipant does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ActiveParticipant) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in inference.inference.ActiveParticipant", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ActiveParticipant) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ActiveParticipant) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ActiveParticipant) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ActiveParticipant) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ActiveParticipant)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Index)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ValidatorKey)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Weight != 0 {
			n += 1 + runtime.Sov(uint64(x.Weight))
		}
		l = len(x.InferenceUrl)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Models) > 0 {
			for _, s := range x.Models {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.Seed != nil {
			l = options.Size(x.Seed)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ActiveParticipant)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Seed != nil {
			encoded, err := options.Marshal(x.Seed)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.Models) > 0 {
			for iNdEx := len(x.Models) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.Models[iNdEx])
				copy(dAtA[i:], x.Models[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Models[iNdEx])))
				i--
				dAtA[i] = 0x2a
			}
		}
		if len(x.InferenceUrl) > 0 {
			i -= len(x.InferenceUrl)
			copy(dAtA[i:], x.InferenceUrl)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.InferenceUrl)))
			i--
			dAtA[i] = 0x22
		}
		if x.Weight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Weight))
			i--
			dAtA[i] = 0x18
		}
		if len(x.ValidatorKey) > 0 {
			i -= len(x.ValidatorKey)
			copy(dAtA[i:], x.ValidatorKey)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ValidatorKey)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Index) > 0 {
			i -= len(x.Index)
			copy(dAtA[i:], x.Index)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Index)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ActiveParticipant)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ActiveParticipant: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ActiveParticipant: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Index = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidatorKey", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ValidatorKey = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
				}
				x.Weight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Weight |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field InferenceUrl", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.InferenceUrl = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Models", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Models = append(x.Models, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Seed", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Seed == nil {
					x.Seed = &RandomSeed{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Seed); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: inference/inference/activeparticipants.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Not added to the Genesis, because at genesis it's constructed based on Participants
type ActiveParticipants struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Participants         []*ActiveParticipant `protobuf:"bytes,1,rep,name=participants,proto3" json:"participants,omitempty"`
	EpochGroupId         uint64               `protobuf:"varint,2,opt,name=epoch_group_id,json=epochGroupId,proto3" json:"epoch_group_id,omitempty"`
	PocStartBlockHeight  int64                `protobuf:"varint,3,opt,name=poc_start_block_height,json=pocStartBlockHeight,proto3" json:"poc_start_block_height,omitempty"`
	EffectiveBlockHeight int64                `protobuf:"varint,4,opt,name=effective_block_height,json=effectiveBlockHeight,proto3" json:"effective_block_height,omitempty"`
	CreatedAtBlockHeight int64                `protobuf:"varint,5,opt,name=created_at_block_height,json=createdAtBlockHeight,proto3" json:"created_at_block_height,omitempty"` // Same as effective_block_height???
}

func (x *ActiveParticipants) Reset() {
	*x = ActiveParticipants{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_inference_activeparticipants_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActiveParticipants) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveParticipants) ProtoMessage() {}

// Deprecated: Use ActiveParticipants.ProtoReflect.Descriptor instead.
func (*ActiveParticipants) Descriptor() ([]byte, []int) {
	return file_inference_inference_activeparticipants_proto_rawDescGZIP(), []int{0}
}

func (x *ActiveParticipants) GetParticipants() []*ActiveParticipant {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *ActiveParticipants) GetEpochGroupId() uint64 {
	if x != nil {
		return x.EpochGroupId
	}
	return 0
}

func (x *ActiveParticipants) GetPocStartBlockHeight() int64 {
	if x != nil {
		return x.PocStartBlockHeight
	}
	return 0
}

func (x *ActiveParticipants) GetEffectiveBlockHeight() int64 {
	if x != nil {
		return x.EffectiveBlockHeight
	}
	return 0
}

func (x *ActiveParticipants) GetCreatedAtBlockHeight() int64 {
	if x != nil {
		return x.CreatedAtBlockHeight
	}
	return 0
}

type ActiveParticipant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index        string      `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	ValidatorKey string      `protobuf:"bytes,2,opt,name=validator_key,json=validatorKey,proto3" json:"validator_key,omitempty"`
	Weight       int64       `protobuf:"varint,3,opt,name=weight,proto3" json:"weight,omitempty"`
	InferenceUrl string      `protobuf:"bytes,4,opt,name=inference_url,json=inferenceUrl,proto3" json:"inference_url,omitempty"`
	Models       []string    `protobuf:"bytes,5,rep,name=models,proto3" json:"models,omitempty"`
	Seed         *RandomSeed `protobuf:"bytes,6,opt,name=seed,proto3" json:"seed,omitempty"`
}

func (x *ActiveParticipant) Reset() {
	*x = ActiveParticipant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_inference_activeparticipants_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActiveParticipant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveParticipant) ProtoMessage() {}

// Deprecated: Use ActiveParticipant.ProtoReflect.Descriptor instead.
func (*ActiveParticipant) Descriptor() ([]byte, []int) {
	return file_inference_inference_activeparticipants_proto_rawDescGZIP(), []int{1}
}

func (x *ActiveParticipant) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

func (x *ActiveParticipant) GetValidatorKey() string {
	if x != nil {
		return x.ValidatorKey
	}
	return ""
}

func (x *ActiveParticipant) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *ActiveParticipant) GetInferenceUrl() string {
	if x != nil {
		return x.InferenceUrl
	}
	return ""
}

func (x *ActiveParticipant) GetModels() []string {
	if x != nil {
		return x.Models
	}
	return nil
}

func (x *ActiveParticipant) GetSeed() *RandomSeed {
	if x != nil {
		return x.Seed
	}
	return nil
}

var File_inference_inference_activeparticipants_proto protoreflect.FileDescriptor

var file_inference_inference_activeparticipants_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13,
	0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x1a, 0x25, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x69,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f,
	0x73, 0x65, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa8, 0x02, 0x0a, 0x12, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x73, 0x12, 0x4a, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52,
	0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x0a,
	0x0e, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x70, 0x6f, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x13, 0x70, 0x6f, 0x63, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x35,
	0x0a, 0x17, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xd8, 0x01, 0x0a, 0x11, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x33, 0x0a, 0x04, 0x73,
	0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x65, 0x65, 0x64, 0x52, 0x04, 0x73, 0x65, 0x65, 0x64,
	0x42, 0xc5, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x17, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x24, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73,
	0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0xa2, 0x02, 0x03,
	0x49, 0x49, 0x58, 0xaa, 0x02, 0x13, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0xca, 0x02, 0x13, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x5c, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0xe2,
	0x02, 0x1f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5c, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x14, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x3a, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_inference_inference_activeparticipants_proto_rawDescOnce sync.Once
	file_inference_inference_activeparticipants_proto_rawDescData = file_inference_inference_activeparticipants_proto_rawDesc
)

func file_inference_inference_activeparticipants_proto_rawDescGZIP() []byte {
	file_inference_inference_activeparticipants_proto_rawDescOnce.Do(func() {
		file_inference_inference_activeparticipants_proto_rawDescData = protoimpl.X.CompressGZIP(file_inference_inference_activeparticipants_proto_rawDescData)
	})
	return file_inference_inference_activeparticipants_proto_rawDescData
}

var file_inference_inference_activeparticipants_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_inference_inference_activeparticipants_proto_goTypes = []interface{}{
	(*ActiveParticipants)(nil), // 0: inference.inference.ActiveParticipants
	(*ActiveParticipant)(nil),  // 1: inference.inference.ActiveParticipant
	(*RandomSeed)(nil),         // 2: inference.inference.RandomSeed
}
var file_inference_inference_activeparticipants_proto_depIdxs = []int32{
	1, // 0: inference.inference.ActiveParticipants.participants:type_name -> inference.inference.ActiveParticipant
	2, // 1: inference.inference.ActiveParticipant.seed:type_name -> inference.inference.RandomSeed
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_inference_inference_activeparticipants_proto_init() }
func file_inference_inference_activeparticipants_proto_init() {
	if File_inference_inference_activeparticipants_proto != nil {
		return
	}
	file_inference_inference_random_seed_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_inference_inference_activeparticipants_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActiveParticipants); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_inference_activeparticipants_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActiveParticipant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_inference_inference_activeparticipants_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_inference_inference_activeparticipants_proto_goTypes,
		DependencyIndexes: file_inference_inference_activeparticipants_proto_depIdxs,
		MessageInfos:      file_inference_inference_activeparticipants_proto_msgTypes,
	}.Build()
	File_inference_inference_activeparticipants_proto = out.File
	file_inference_inference_activeparticipants_proto_rawDesc = nil
	file_inference_inference_activeparticipants_proto_goTypes = nil
	file_inference_inference_activeparticipants_proto_depIdxs = nil
}

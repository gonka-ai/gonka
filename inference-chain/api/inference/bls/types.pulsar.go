// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package bls

import (
	_ "cosmossdk.io/api/amino"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_BLSParticipantInfo                      protoreflect.MessageDescriptor
	fd_BLSParticipantInfo_address              protoreflect.FieldDescriptor
	fd_BLSParticipantInfo_percentage_weight    protoreflect.FieldDescriptor
	fd_BLSParticipantInfo_secp256k1_public_key protoreflect.FieldDescriptor
	fd_BLSParticipantInfo_slot_start_index     protoreflect.FieldDescriptor
	fd_BLSParticipantInfo_slot_end_index       protoreflect.FieldDescriptor
)

func init() {
	file_inference_bls_types_proto_init()
	md_BLSParticipantInfo = File_inference_bls_types_proto.Messages().ByName("BLSParticipantInfo")
	fd_BLSParticipantInfo_address = md_BLSParticipantInfo.Fields().ByName("address")
	fd_BLSParticipantInfo_percentage_weight = md_BLSParticipantInfo.Fields().ByName("percentage_weight")
	fd_BLSParticipantInfo_secp256k1_public_key = md_BLSParticipantInfo.Fields().ByName("secp256k1_public_key")
	fd_BLSParticipantInfo_slot_start_index = md_BLSParticipantInfo.Fields().ByName("slot_start_index")
	fd_BLSParticipantInfo_slot_end_index = md_BLSParticipantInfo.Fields().ByName("slot_end_index")
}

var _ protoreflect.Message = (*fastReflection_BLSParticipantInfo)(nil)

type fastReflection_BLSParticipantInfo BLSParticipantInfo

func (x *BLSParticipantInfo) ProtoReflect() protoreflect.Message {
	return (*fastReflection_BLSParticipantInfo)(x)
}

func (x *BLSParticipantInfo) slowProtoReflect() protoreflect.Message {
	mi := &file_inference_bls_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_BLSParticipantInfo_messageType fastReflection_BLSParticipantInfo_messageType
var _ protoreflect.MessageType = fastReflection_BLSParticipantInfo_messageType{}

type fastReflection_BLSParticipantInfo_messageType struct{}

func (x fastReflection_BLSParticipantInfo_messageType) Zero() protoreflect.Message {
	return (*fastReflection_BLSParticipantInfo)(nil)
}
func (x fastReflection_BLSParticipantInfo_messageType) New() protoreflect.Message {
	return new(fastReflection_BLSParticipantInfo)
}
func (x fastReflection_BLSParticipantInfo_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_BLSParticipantInfo
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_BLSParticipantInfo) Descriptor() protoreflect.MessageDescriptor {
	return md_BLSParticipantInfo
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_BLSParticipantInfo) Type() protoreflect.MessageType {
	return _fastReflection_BLSParticipantInfo_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_BLSParticipantInfo) New() protoreflect.Message {
	return new(fastReflection_BLSParticipantInfo)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_BLSParticipantInfo) Interface() protoreflect.ProtoMessage {
	return (*BLSParticipantInfo)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_BLSParticipantInfo) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Address != "" {
		value := protoreflect.ValueOfString(x.Address)
		if !f(fd_BLSParticipantInfo_address, value) {
			return
		}
	}
	if x.PercentageWeight != "" {
		value := protoreflect.ValueOfString(x.PercentageWeight)
		if !f(fd_BLSParticipantInfo_percentage_weight, value) {
			return
		}
	}
	if len(x.Secp256K1PublicKey) != 0 {
		value := protoreflect.ValueOfBytes(x.Secp256K1PublicKey)
		if !f(fd_BLSParticipantInfo_secp256k1_public_key, value) {
			return
		}
	}
	if x.SlotStartIndex != uint32(0) {
		value := protoreflect.ValueOfUint32(x.SlotStartIndex)
		if !f(fd_BLSParticipantInfo_slot_start_index, value) {
			return
		}
	}
	if x.SlotEndIndex != uint32(0) {
		value := protoreflect.ValueOfUint32(x.SlotEndIndex)
		if !f(fd_BLSParticipantInfo_slot_end_index, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_BLSParticipantInfo) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "inference.bls.BLSParticipantInfo.address":
		return x.Address != ""
	case "inference.bls.BLSParticipantInfo.percentage_weight":
		return x.PercentageWeight != ""
	case "inference.bls.BLSParticipantInfo.secp256k1_public_key":
		return len(x.Secp256K1PublicKey) != 0
	case "inference.bls.BLSParticipantInfo.slot_start_index":
		return x.SlotStartIndex != uint32(0)
	case "inference.bls.BLSParticipantInfo.slot_end_index":
		return x.SlotEndIndex != uint32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.BLSParticipantInfo"))
		}
		panic(fmt.Errorf("message inference.bls.BLSParticipantInfo does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BLSParticipantInfo) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "inference.bls.BLSParticipantInfo.address":
		x.Address = ""
	case "inference.bls.BLSParticipantInfo.percentage_weight":
		x.PercentageWeight = ""
	case "inference.bls.BLSParticipantInfo.secp256k1_public_key":
		x.Secp256K1PublicKey = nil
	case "inference.bls.BLSParticipantInfo.slot_start_index":
		x.SlotStartIndex = uint32(0)
	case "inference.bls.BLSParticipantInfo.slot_end_index":
		x.SlotEndIndex = uint32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.BLSParticipantInfo"))
		}
		panic(fmt.Errorf("message inference.bls.BLSParticipantInfo does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_BLSParticipantInfo) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "inference.bls.BLSParticipantInfo.address":
		value := x.Address
		return protoreflect.ValueOfString(value)
	case "inference.bls.BLSParticipantInfo.percentage_weight":
		value := x.PercentageWeight
		return protoreflect.ValueOfString(value)
	case "inference.bls.BLSParticipantInfo.secp256k1_public_key":
		value := x.Secp256K1PublicKey
		return protoreflect.ValueOfBytes(value)
	case "inference.bls.BLSParticipantInfo.slot_start_index":
		value := x.SlotStartIndex
		return protoreflect.ValueOfUint32(value)
	case "inference.bls.BLSParticipantInfo.slot_end_index":
		value := x.SlotEndIndex
		return protoreflect.ValueOfUint32(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.BLSParticipantInfo"))
		}
		panic(fmt.Errorf("message inference.bls.BLSParticipantInfo does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BLSParticipantInfo) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "inference.bls.BLSParticipantInfo.address":
		x.Address = value.Interface().(string)
	case "inference.bls.BLSParticipantInfo.percentage_weight":
		x.PercentageWeight = value.Interface().(string)
	case "inference.bls.BLSParticipantInfo.secp256k1_public_key":
		x.Secp256K1PublicKey = value.Bytes()
	case "inference.bls.BLSParticipantInfo.slot_start_index":
		x.SlotStartIndex = uint32(value.Uint())
	case "inference.bls.BLSParticipantInfo.slot_end_index":
		x.SlotEndIndex = uint32(value.Uint())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.BLSParticipantInfo"))
		}
		panic(fmt.Errorf("message inference.bls.BLSParticipantInfo does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BLSParticipantInfo) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.bls.BLSParticipantInfo.address":
		panic(fmt.Errorf("field address of message inference.bls.BLSParticipantInfo is not mutable"))
	case "inference.bls.BLSParticipantInfo.percentage_weight":
		panic(fmt.Errorf("field percentage_weight of message inference.bls.BLSParticipantInfo is not mutable"))
	case "inference.bls.BLSParticipantInfo.secp256k1_public_key":
		panic(fmt.Errorf("field secp256k1_public_key of message inference.bls.BLSParticipantInfo is not mutable"))
	case "inference.bls.BLSParticipantInfo.slot_start_index":
		panic(fmt.Errorf("field slot_start_index of message inference.bls.BLSParticipantInfo is not mutable"))
	case "inference.bls.BLSParticipantInfo.slot_end_index":
		panic(fmt.Errorf("field slot_end_index of message inference.bls.BLSParticipantInfo is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.BLSParticipantInfo"))
		}
		panic(fmt.Errorf("message inference.bls.BLSParticipantInfo does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_BLSParticipantInfo) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.bls.BLSParticipantInfo.address":
		return protoreflect.ValueOfString("")
	case "inference.bls.BLSParticipantInfo.percentage_weight":
		return protoreflect.ValueOfString("")
	case "inference.bls.BLSParticipantInfo.secp256k1_public_key":
		return protoreflect.ValueOfBytes(nil)
	case "inference.bls.BLSParticipantInfo.slot_start_index":
		return protoreflect.ValueOfUint32(uint32(0))
	case "inference.bls.BLSParticipantInfo.slot_end_index":
		return protoreflect.ValueOfUint32(uint32(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.BLSParticipantInfo"))
		}
		panic(fmt.Errorf("message inference.bls.BLSParticipantInfo does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_BLSParticipantInfo) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in inference.bls.BLSParticipantInfo", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_BLSParticipantInfo) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BLSParticipantInfo) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_BLSParticipantInfo) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_BLSParticipantInfo) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*BLSParticipantInfo)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Address)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.PercentageWeight)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Secp256K1PublicKey)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.SlotStartIndex != 0 {
			n += 1 + runtime.Sov(uint64(x.SlotStartIndex))
		}
		if x.SlotEndIndex != 0 {
			n += 1 + runtime.Sov(uint64(x.SlotEndIndex))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*BLSParticipantInfo)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.SlotEndIndex != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.SlotEndIndex))
			i--
			dAtA[i] = 0x28
		}
		if x.SlotStartIndex != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.SlotStartIndex))
			i--
			dAtA[i] = 0x20
		}
		if len(x.Secp256K1PublicKey) > 0 {
			i -= len(x.Secp256K1PublicKey)
			copy(dAtA[i:], x.Secp256K1PublicKey)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Secp256K1PublicKey)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.PercentageWeight) > 0 {
			i -= len(x.PercentageWeight)
			copy(dAtA[i:], x.PercentageWeight)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PercentageWeight)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Address) > 0 {
			i -= len(x.Address)
			copy(dAtA[i:], x.Address)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Address)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*BLSParticipantInfo)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: BLSParticipantInfo: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: BLSParticipantInfo: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Address = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PercentageWeight", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PercentageWeight = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Secp256K1PublicKey", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Secp256K1PublicKey = append(x.Secp256K1PublicKey[:0], dAtA[iNdEx:postIndex]...)
				if x.Secp256K1PublicKey == nil {
					x.Secp256K1PublicKey = []byte{}
				}
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SlotStartIndex", wireType)
				}
				x.SlotStartIndex = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.SlotStartIndex |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SlotEndIndex", wireType)
				}
				x.SlotEndIndex = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.SlotEndIndex |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_EncryptedSharesForParticipant_1_list)(nil)

type _EncryptedSharesForParticipant_1_list struct {
	list *[][]byte
}

func (x *_EncryptedSharesForParticipant_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_EncryptedSharesForParticipant_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfBytes((*x.list)[i])
}

func (x *_EncryptedSharesForParticipant_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Bytes()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_EncryptedSharesForParticipant_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Bytes()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_EncryptedSharesForParticipant_1_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message EncryptedSharesForParticipant at list field EncryptedShares as it is not of Message kind"))
}

func (x *_EncryptedSharesForParticipant_1_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_EncryptedSharesForParticipant_1_list) NewElement() protoreflect.Value {
	var v []byte
	return protoreflect.ValueOfBytes(v)
}

func (x *_EncryptedSharesForParticipant_1_list) IsValid() bool {
	return x.list != nil
}

var (
	md_EncryptedSharesForParticipant                  protoreflect.MessageDescriptor
	fd_EncryptedSharesForParticipant_encrypted_shares protoreflect.FieldDescriptor
)

func init() {
	file_inference_bls_types_proto_init()
	md_EncryptedSharesForParticipant = File_inference_bls_types_proto.Messages().ByName("EncryptedSharesForParticipant")
	fd_EncryptedSharesForParticipant_encrypted_shares = md_EncryptedSharesForParticipant.Fields().ByName("encrypted_shares")
}

var _ protoreflect.Message = (*fastReflection_EncryptedSharesForParticipant)(nil)

type fastReflection_EncryptedSharesForParticipant EncryptedSharesForParticipant

func (x *EncryptedSharesForParticipant) ProtoReflect() protoreflect.Message {
	return (*fastReflection_EncryptedSharesForParticipant)(x)
}

func (x *EncryptedSharesForParticipant) slowProtoReflect() protoreflect.Message {
	mi := &file_inference_bls_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_EncryptedSharesForParticipant_messageType fastReflection_EncryptedSharesForParticipant_messageType
var _ protoreflect.MessageType = fastReflection_EncryptedSharesForParticipant_messageType{}

type fastReflection_EncryptedSharesForParticipant_messageType struct{}

func (x fastReflection_EncryptedSharesForParticipant_messageType) Zero() protoreflect.Message {
	return (*fastReflection_EncryptedSharesForParticipant)(nil)
}
func (x fastReflection_EncryptedSharesForParticipant_messageType) New() protoreflect.Message {
	return new(fastReflection_EncryptedSharesForParticipant)
}
func (x fastReflection_EncryptedSharesForParticipant_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_EncryptedSharesForParticipant
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_EncryptedSharesForParticipant) Descriptor() protoreflect.MessageDescriptor {
	return md_EncryptedSharesForParticipant
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_EncryptedSharesForParticipant) Type() protoreflect.MessageType {
	return _fastReflection_EncryptedSharesForParticipant_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_EncryptedSharesForParticipant) New() protoreflect.Message {
	return new(fastReflection_EncryptedSharesForParticipant)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_EncryptedSharesForParticipant) Interface() protoreflect.ProtoMessage {
	return (*EncryptedSharesForParticipant)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_EncryptedSharesForParticipant) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.EncryptedShares) != 0 {
		value := protoreflect.ValueOfList(&_EncryptedSharesForParticipant_1_list{list: &x.EncryptedShares})
		if !f(fd_EncryptedSharesForParticipant_encrypted_shares, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_EncryptedSharesForParticipant) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "inference.bls.EncryptedSharesForParticipant.encrypted_shares":
		return len(x.EncryptedShares) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.EncryptedSharesForParticipant"))
		}
		panic(fmt.Errorf("message inference.bls.EncryptedSharesForParticipant does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EncryptedSharesForParticipant) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "inference.bls.EncryptedSharesForParticipant.encrypted_shares":
		x.EncryptedShares = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.EncryptedSharesForParticipant"))
		}
		panic(fmt.Errorf("message inference.bls.EncryptedSharesForParticipant does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_EncryptedSharesForParticipant) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "inference.bls.EncryptedSharesForParticipant.encrypted_shares":
		if len(x.EncryptedShares) == 0 {
			return protoreflect.ValueOfList(&_EncryptedSharesForParticipant_1_list{})
		}
		listValue := &_EncryptedSharesForParticipant_1_list{list: &x.EncryptedShares}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.EncryptedSharesForParticipant"))
		}
		panic(fmt.Errorf("message inference.bls.EncryptedSharesForParticipant does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EncryptedSharesForParticipant) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "inference.bls.EncryptedSharesForParticipant.encrypted_shares":
		lv := value.List()
		clv := lv.(*_EncryptedSharesForParticipant_1_list)
		x.EncryptedShares = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.EncryptedSharesForParticipant"))
		}
		panic(fmt.Errorf("message inference.bls.EncryptedSharesForParticipant does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EncryptedSharesForParticipant) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.bls.EncryptedSharesForParticipant.encrypted_shares":
		if x.EncryptedShares == nil {
			x.EncryptedShares = [][]byte{}
		}
		value := &_EncryptedSharesForParticipant_1_list{list: &x.EncryptedShares}
		return protoreflect.ValueOfList(value)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.EncryptedSharesForParticipant"))
		}
		panic(fmt.Errorf("message inference.bls.EncryptedSharesForParticipant does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_EncryptedSharesForParticipant) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.bls.EncryptedSharesForParticipant.encrypted_shares":
		list := [][]byte{}
		return protoreflect.ValueOfList(&_EncryptedSharesForParticipant_1_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.EncryptedSharesForParticipant"))
		}
		panic(fmt.Errorf("message inference.bls.EncryptedSharesForParticipant does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_EncryptedSharesForParticipant) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in inference.bls.EncryptedSharesForParticipant", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_EncryptedSharesForParticipant) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EncryptedSharesForParticipant) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_EncryptedSharesForParticipant) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_EncryptedSharesForParticipant) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*EncryptedSharesForParticipant)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.EncryptedShares) > 0 {
			for _, b := range x.EncryptedShares {
				l = len(b)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*EncryptedSharesForParticipant)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.EncryptedShares) > 0 {
			for iNdEx := len(x.EncryptedShares) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.EncryptedShares[iNdEx])
				copy(dAtA[i:], x.EncryptedShares[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.EncryptedShares[iNdEx])))
				i--
				dAtA[i] = 0xa
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*EncryptedSharesForParticipant)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EncryptedSharesForParticipant: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EncryptedSharesForParticipant: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EncryptedShares", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.EncryptedShares = append(x.EncryptedShares, make([]byte, postIndex-iNdEx))
				copy(x.EncryptedShares[len(x.EncryptedShares)-1], dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_DealerPartStorage_2_list)(nil)

type _DealerPartStorage_2_list struct {
	list *[][]byte
}

func (x *_DealerPartStorage_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_DealerPartStorage_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfBytes((*x.list)[i])
}

func (x *_DealerPartStorage_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Bytes()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_DealerPartStorage_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Bytes()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_DealerPartStorage_2_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message DealerPartStorage at list field Commitments as it is not of Message kind"))
}

func (x *_DealerPartStorage_2_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_DealerPartStorage_2_list) NewElement() protoreflect.Value {
	var v []byte
	return protoreflect.ValueOfBytes(v)
}

func (x *_DealerPartStorage_2_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_DealerPartStorage_3_list)(nil)

type _DealerPartStorage_3_list struct {
	list *[]*EncryptedSharesForParticipant
}

func (x *_DealerPartStorage_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_DealerPartStorage_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_DealerPartStorage_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*EncryptedSharesForParticipant)
	(*x.list)[i] = concreteValue
}

func (x *_DealerPartStorage_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*EncryptedSharesForParticipant)
	*x.list = append(*x.list, concreteValue)
}

func (x *_DealerPartStorage_3_list) AppendMutable() protoreflect.Value {
	v := new(EncryptedSharesForParticipant)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_DealerPartStorage_3_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_DealerPartStorage_3_list) NewElement() protoreflect.Value {
	v := new(EncryptedSharesForParticipant)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_DealerPartStorage_3_list) IsValid() bool {
	return x.list != nil
}

var (
	md_DealerPartStorage                    protoreflect.MessageDescriptor
	fd_DealerPartStorage_dealer_address     protoreflect.FieldDescriptor
	fd_DealerPartStorage_commitments        protoreflect.FieldDescriptor
	fd_DealerPartStorage_participant_shares protoreflect.FieldDescriptor
)

func init() {
	file_inference_bls_types_proto_init()
	md_DealerPartStorage = File_inference_bls_types_proto.Messages().ByName("DealerPartStorage")
	fd_DealerPartStorage_dealer_address = md_DealerPartStorage.Fields().ByName("dealer_address")
	fd_DealerPartStorage_commitments = md_DealerPartStorage.Fields().ByName("commitments")
	fd_DealerPartStorage_participant_shares = md_DealerPartStorage.Fields().ByName("participant_shares")
}

var _ protoreflect.Message = (*fastReflection_DealerPartStorage)(nil)

type fastReflection_DealerPartStorage DealerPartStorage

func (x *DealerPartStorage) ProtoReflect() protoreflect.Message {
	return (*fastReflection_DealerPartStorage)(x)
}

func (x *DealerPartStorage) slowProtoReflect() protoreflect.Message {
	mi := &file_inference_bls_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_DealerPartStorage_messageType fastReflection_DealerPartStorage_messageType
var _ protoreflect.MessageType = fastReflection_DealerPartStorage_messageType{}

type fastReflection_DealerPartStorage_messageType struct{}

func (x fastReflection_DealerPartStorage_messageType) Zero() protoreflect.Message {
	return (*fastReflection_DealerPartStorage)(nil)
}
func (x fastReflection_DealerPartStorage_messageType) New() protoreflect.Message {
	return new(fastReflection_DealerPartStorage)
}
func (x fastReflection_DealerPartStorage_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_DealerPartStorage
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_DealerPartStorage) Descriptor() protoreflect.MessageDescriptor {
	return md_DealerPartStorage
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_DealerPartStorage) Type() protoreflect.MessageType {
	return _fastReflection_DealerPartStorage_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_DealerPartStorage) New() protoreflect.Message {
	return new(fastReflection_DealerPartStorage)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_DealerPartStorage) Interface() protoreflect.ProtoMessage {
	return (*DealerPartStorage)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_DealerPartStorage) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.DealerAddress != "" {
		value := protoreflect.ValueOfString(x.DealerAddress)
		if !f(fd_DealerPartStorage_dealer_address, value) {
			return
		}
	}
	if len(x.Commitments) != 0 {
		value := protoreflect.ValueOfList(&_DealerPartStorage_2_list{list: &x.Commitments})
		if !f(fd_DealerPartStorage_commitments, value) {
			return
		}
	}
	if len(x.ParticipantShares) != 0 {
		value := protoreflect.ValueOfList(&_DealerPartStorage_3_list{list: &x.ParticipantShares})
		if !f(fd_DealerPartStorage_participant_shares, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_DealerPartStorage) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "inference.bls.DealerPartStorage.dealer_address":
		return x.DealerAddress != ""
	case "inference.bls.DealerPartStorage.commitments":
		return len(x.Commitments) != 0
	case "inference.bls.DealerPartStorage.participant_shares":
		return len(x.ParticipantShares) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.DealerPartStorage"))
		}
		panic(fmt.Errorf("message inference.bls.DealerPartStorage does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DealerPartStorage) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "inference.bls.DealerPartStorage.dealer_address":
		x.DealerAddress = ""
	case "inference.bls.DealerPartStorage.commitments":
		x.Commitments = nil
	case "inference.bls.DealerPartStorage.participant_shares":
		x.ParticipantShares = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.DealerPartStorage"))
		}
		panic(fmt.Errorf("message inference.bls.DealerPartStorage does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_DealerPartStorage) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "inference.bls.DealerPartStorage.dealer_address":
		value := x.DealerAddress
		return protoreflect.ValueOfString(value)
	case "inference.bls.DealerPartStorage.commitments":
		if len(x.Commitments) == 0 {
			return protoreflect.ValueOfList(&_DealerPartStorage_2_list{})
		}
		listValue := &_DealerPartStorage_2_list{list: &x.Commitments}
		return protoreflect.ValueOfList(listValue)
	case "inference.bls.DealerPartStorage.participant_shares":
		if len(x.ParticipantShares) == 0 {
			return protoreflect.ValueOfList(&_DealerPartStorage_3_list{})
		}
		listValue := &_DealerPartStorage_3_list{list: &x.ParticipantShares}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.DealerPartStorage"))
		}
		panic(fmt.Errorf("message inference.bls.DealerPartStorage does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DealerPartStorage) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "inference.bls.DealerPartStorage.dealer_address":
		x.DealerAddress = value.Interface().(string)
	case "inference.bls.DealerPartStorage.commitments":
		lv := value.List()
		clv := lv.(*_DealerPartStorage_2_list)
		x.Commitments = *clv.list
	case "inference.bls.DealerPartStorage.participant_shares":
		lv := value.List()
		clv := lv.(*_DealerPartStorage_3_list)
		x.ParticipantShares = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.DealerPartStorage"))
		}
		panic(fmt.Errorf("message inference.bls.DealerPartStorage does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DealerPartStorage) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.bls.DealerPartStorage.commitments":
		if x.Commitments == nil {
			x.Commitments = [][]byte{}
		}
		value := &_DealerPartStorage_2_list{list: &x.Commitments}
		return protoreflect.ValueOfList(value)
	case "inference.bls.DealerPartStorage.participant_shares":
		if x.ParticipantShares == nil {
			x.ParticipantShares = []*EncryptedSharesForParticipant{}
		}
		value := &_DealerPartStorage_3_list{list: &x.ParticipantShares}
		return protoreflect.ValueOfList(value)
	case "inference.bls.DealerPartStorage.dealer_address":
		panic(fmt.Errorf("field dealer_address of message inference.bls.DealerPartStorage is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.DealerPartStorage"))
		}
		panic(fmt.Errorf("message inference.bls.DealerPartStorage does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_DealerPartStorage) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.bls.DealerPartStorage.dealer_address":
		return protoreflect.ValueOfString("")
	case "inference.bls.DealerPartStorage.commitments":
		list := [][]byte{}
		return protoreflect.ValueOfList(&_DealerPartStorage_2_list{list: &list})
	case "inference.bls.DealerPartStorage.participant_shares":
		list := []*EncryptedSharesForParticipant{}
		return protoreflect.ValueOfList(&_DealerPartStorage_3_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.DealerPartStorage"))
		}
		panic(fmt.Errorf("message inference.bls.DealerPartStorage does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_DealerPartStorage) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in inference.bls.DealerPartStorage", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_DealerPartStorage) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DealerPartStorage) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_DealerPartStorage) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_DealerPartStorage) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*DealerPartStorage)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.DealerAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Commitments) > 0 {
			for _, b := range x.Commitments {
				l = len(b)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.ParticipantShares) > 0 {
			for _, e := range x.ParticipantShares {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*DealerPartStorage)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.ParticipantShares) > 0 {
			for iNdEx := len(x.ParticipantShares) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.ParticipantShares[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1a
			}
		}
		if len(x.Commitments) > 0 {
			for iNdEx := len(x.Commitments) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.Commitments[iNdEx])
				copy(dAtA[i:], x.Commitments[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Commitments[iNdEx])))
				i--
				dAtA[i] = 0x12
			}
		}
		if len(x.DealerAddress) > 0 {
			i -= len(x.DealerAddress)
			copy(dAtA[i:], x.DealerAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.DealerAddress)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*DealerPartStorage)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DealerPartStorage: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DealerPartStorage: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DealerAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DealerAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Commitments", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Commitments = append(x.Commitments, make([]byte, postIndex-iNdEx))
				copy(x.Commitments[len(x.Commitments)-1], dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ParticipantShares", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ParticipantShares = append(x.ParticipantShares, &EncryptedSharesForParticipant{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ParticipantShares[len(x.ParticipantShares)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_VerificationVectorSubmission_1_list)(nil)

type _VerificationVectorSubmission_1_list struct {
	list *[]bool
}

func (x *_VerificationVectorSubmission_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_VerificationVectorSubmission_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfBool((*x.list)[i])
}

func (x *_VerificationVectorSubmission_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Bool()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_VerificationVectorSubmission_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Bool()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_VerificationVectorSubmission_1_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message VerificationVectorSubmission at list field DealerValidity as it is not of Message kind"))
}

func (x *_VerificationVectorSubmission_1_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_VerificationVectorSubmission_1_list) NewElement() protoreflect.Value {
	v := false
	return protoreflect.ValueOfBool(v)
}

func (x *_VerificationVectorSubmission_1_list) IsValid() bool {
	return x.list != nil
}

var (
	md_VerificationVectorSubmission                 protoreflect.MessageDescriptor
	fd_VerificationVectorSubmission_dealer_validity protoreflect.FieldDescriptor
)

func init() {
	file_inference_bls_types_proto_init()
	md_VerificationVectorSubmission = File_inference_bls_types_proto.Messages().ByName("VerificationVectorSubmission")
	fd_VerificationVectorSubmission_dealer_validity = md_VerificationVectorSubmission.Fields().ByName("dealer_validity")
}

var _ protoreflect.Message = (*fastReflection_VerificationVectorSubmission)(nil)

type fastReflection_VerificationVectorSubmission VerificationVectorSubmission

func (x *VerificationVectorSubmission) ProtoReflect() protoreflect.Message {
	return (*fastReflection_VerificationVectorSubmission)(x)
}

func (x *VerificationVectorSubmission) slowProtoReflect() protoreflect.Message {
	mi := &file_inference_bls_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_VerificationVectorSubmission_messageType fastReflection_VerificationVectorSubmission_messageType
var _ protoreflect.MessageType = fastReflection_VerificationVectorSubmission_messageType{}

type fastReflection_VerificationVectorSubmission_messageType struct{}

func (x fastReflection_VerificationVectorSubmission_messageType) Zero() protoreflect.Message {
	return (*fastReflection_VerificationVectorSubmission)(nil)
}
func (x fastReflection_VerificationVectorSubmission_messageType) New() protoreflect.Message {
	return new(fastReflection_VerificationVectorSubmission)
}
func (x fastReflection_VerificationVectorSubmission_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_VerificationVectorSubmission
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_VerificationVectorSubmission) Descriptor() protoreflect.MessageDescriptor {
	return md_VerificationVectorSubmission
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_VerificationVectorSubmission) Type() protoreflect.MessageType {
	return _fastReflection_VerificationVectorSubmission_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_VerificationVectorSubmission) New() protoreflect.Message {
	return new(fastReflection_VerificationVectorSubmission)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_VerificationVectorSubmission) Interface() protoreflect.ProtoMessage {
	return (*VerificationVectorSubmission)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_VerificationVectorSubmission) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.DealerValidity) != 0 {
		value := protoreflect.ValueOfList(&_VerificationVectorSubmission_1_list{list: &x.DealerValidity})
		if !f(fd_VerificationVectorSubmission_dealer_validity, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_VerificationVectorSubmission) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "inference.bls.VerificationVectorSubmission.dealer_validity":
		return len(x.DealerValidity) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.VerificationVectorSubmission"))
		}
		panic(fmt.Errorf("message inference.bls.VerificationVectorSubmission does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VerificationVectorSubmission) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "inference.bls.VerificationVectorSubmission.dealer_validity":
		x.DealerValidity = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.VerificationVectorSubmission"))
		}
		panic(fmt.Errorf("message inference.bls.VerificationVectorSubmission does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_VerificationVectorSubmission) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "inference.bls.VerificationVectorSubmission.dealer_validity":
		if len(x.DealerValidity) == 0 {
			return protoreflect.ValueOfList(&_VerificationVectorSubmission_1_list{})
		}
		listValue := &_VerificationVectorSubmission_1_list{list: &x.DealerValidity}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.VerificationVectorSubmission"))
		}
		panic(fmt.Errorf("message inference.bls.VerificationVectorSubmission does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VerificationVectorSubmission) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "inference.bls.VerificationVectorSubmission.dealer_validity":
		lv := value.List()
		clv := lv.(*_VerificationVectorSubmission_1_list)
		x.DealerValidity = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.VerificationVectorSubmission"))
		}
		panic(fmt.Errorf("message inference.bls.VerificationVectorSubmission does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VerificationVectorSubmission) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.bls.VerificationVectorSubmission.dealer_validity":
		if x.DealerValidity == nil {
			x.DealerValidity = []bool{}
		}
		value := &_VerificationVectorSubmission_1_list{list: &x.DealerValidity}
		return protoreflect.ValueOfList(value)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.VerificationVectorSubmission"))
		}
		panic(fmt.Errorf("message inference.bls.VerificationVectorSubmission does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_VerificationVectorSubmission) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.bls.VerificationVectorSubmission.dealer_validity":
		list := []bool{}
		return protoreflect.ValueOfList(&_VerificationVectorSubmission_1_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.VerificationVectorSubmission"))
		}
		panic(fmt.Errorf("message inference.bls.VerificationVectorSubmission does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_VerificationVectorSubmission) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in inference.bls.VerificationVectorSubmission", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_VerificationVectorSubmission) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VerificationVectorSubmission) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_VerificationVectorSubmission) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_VerificationVectorSubmission) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*VerificationVectorSubmission)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.DealerValidity) > 0 {
			n += 1 + runtime.Sov(uint64(len(x.DealerValidity))) + len(x.DealerValidity)*1
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*VerificationVectorSubmission)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.DealerValidity) > 0 {
			for iNdEx := len(x.DealerValidity) - 1; iNdEx >= 0; iNdEx-- {
				i--
				if x.DealerValidity[iNdEx] {
					dAtA[i] = 1
				} else {
					dAtA[i] = 0
				}
			}
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.DealerValidity)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*VerificationVectorSubmission)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: VerificationVectorSubmission: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: VerificationVectorSubmission: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType == 0 {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					x.DealerValidity = append(x.DealerValidity, bool(v != 0))
				} else if wireType == 2 {
					var packedLen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						packedLen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if packedLen < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					postIndex := iNdEx + packedLen
					if postIndex < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					if postIndex > l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					var elementCount int
					elementCount = packedLen
					if elementCount != 0 && len(x.DealerValidity) == 0 {
						x.DealerValidity = make([]bool, 0, elementCount)
					}
					for iNdEx < postIndex {
						var v int
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							v |= int(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						x.DealerValidity = append(x.DealerValidity, bool(v != 0))
					}
				} else {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DealerValidity", wireType)
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_EpochBLSData_4_list)(nil)

type _EpochBLSData_4_list struct {
	list *[]*BLSParticipantInfo
}

func (x *_EpochBLSData_4_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_EpochBLSData_4_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_EpochBLSData_4_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*BLSParticipantInfo)
	(*x.list)[i] = concreteValue
}

func (x *_EpochBLSData_4_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*BLSParticipantInfo)
	*x.list = append(*x.list, concreteValue)
}

func (x *_EpochBLSData_4_list) AppendMutable() protoreflect.Value {
	v := new(BLSParticipantInfo)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_EpochBLSData_4_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_EpochBLSData_4_list) NewElement() protoreflect.Value {
	v := new(BLSParticipantInfo)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_EpochBLSData_4_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_EpochBLSData_9_list)(nil)

type _EpochBLSData_9_list struct {
	list *[]*DealerPartStorage
}

func (x *_EpochBLSData_9_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_EpochBLSData_9_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_EpochBLSData_9_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*DealerPartStorage)
	(*x.list)[i] = concreteValue
}

func (x *_EpochBLSData_9_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*DealerPartStorage)
	*x.list = append(*x.list, concreteValue)
}

func (x *_EpochBLSData_9_list) AppendMutable() protoreflect.Value {
	v := new(DealerPartStorage)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_EpochBLSData_9_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_EpochBLSData_9_list) NewElement() protoreflect.Value {
	v := new(DealerPartStorage)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_EpochBLSData_9_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_EpochBLSData_10_list)(nil)

type _EpochBLSData_10_list struct {
	list *[]*VerificationVectorSubmission
}

func (x *_EpochBLSData_10_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_EpochBLSData_10_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_EpochBLSData_10_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*VerificationVectorSubmission)
	(*x.list)[i] = concreteValue
}

func (x *_EpochBLSData_10_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*VerificationVectorSubmission)
	*x.list = append(*x.list, concreteValue)
}

func (x *_EpochBLSData_10_list) AppendMutable() protoreflect.Value {
	v := new(VerificationVectorSubmission)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_EpochBLSData_10_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_EpochBLSData_10_list) NewElement() protoreflect.Value {
	v := new(VerificationVectorSubmission)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_EpochBLSData_10_list) IsValid() bool {
	return x.list != nil
}

var (
	md_EpochBLSData                                protoreflect.MessageDescriptor
	fd_EpochBLSData_epoch_id                       protoreflect.FieldDescriptor
	fd_EpochBLSData_i_total_slots                  protoreflect.FieldDescriptor
	fd_EpochBLSData_t_slots_degree                 protoreflect.FieldDescriptor
	fd_EpochBLSData_participants                   protoreflect.FieldDescriptor
	fd_EpochBLSData_dkg_phase                      protoreflect.FieldDescriptor
	fd_EpochBLSData_dealing_phase_deadline_block   protoreflect.FieldDescriptor
	fd_EpochBLSData_verifying_phase_deadline_block protoreflect.FieldDescriptor
	fd_EpochBLSData_group_public_key               protoreflect.FieldDescriptor
	fd_EpochBLSData_dealer_parts                   protoreflect.FieldDescriptor
	fd_EpochBLSData_verification_submissions       protoreflect.FieldDescriptor
)

func init() {
	file_inference_bls_types_proto_init()
	md_EpochBLSData = File_inference_bls_types_proto.Messages().ByName("EpochBLSData")
	fd_EpochBLSData_epoch_id = md_EpochBLSData.Fields().ByName("epoch_id")
	fd_EpochBLSData_i_total_slots = md_EpochBLSData.Fields().ByName("i_total_slots")
	fd_EpochBLSData_t_slots_degree = md_EpochBLSData.Fields().ByName("t_slots_degree")
	fd_EpochBLSData_participants = md_EpochBLSData.Fields().ByName("participants")
	fd_EpochBLSData_dkg_phase = md_EpochBLSData.Fields().ByName("dkg_phase")
	fd_EpochBLSData_dealing_phase_deadline_block = md_EpochBLSData.Fields().ByName("dealing_phase_deadline_block")
	fd_EpochBLSData_verifying_phase_deadline_block = md_EpochBLSData.Fields().ByName("verifying_phase_deadline_block")
	fd_EpochBLSData_group_public_key = md_EpochBLSData.Fields().ByName("group_public_key")
	fd_EpochBLSData_dealer_parts = md_EpochBLSData.Fields().ByName("dealer_parts")
	fd_EpochBLSData_verification_submissions = md_EpochBLSData.Fields().ByName("verification_submissions")
}

var _ protoreflect.Message = (*fastReflection_EpochBLSData)(nil)

type fastReflection_EpochBLSData EpochBLSData

func (x *EpochBLSData) ProtoReflect() protoreflect.Message {
	return (*fastReflection_EpochBLSData)(x)
}

func (x *EpochBLSData) slowProtoReflect() protoreflect.Message {
	mi := &file_inference_bls_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_EpochBLSData_messageType fastReflection_EpochBLSData_messageType
var _ protoreflect.MessageType = fastReflection_EpochBLSData_messageType{}

type fastReflection_EpochBLSData_messageType struct{}

func (x fastReflection_EpochBLSData_messageType) Zero() protoreflect.Message {
	return (*fastReflection_EpochBLSData)(nil)
}
func (x fastReflection_EpochBLSData_messageType) New() protoreflect.Message {
	return new(fastReflection_EpochBLSData)
}
func (x fastReflection_EpochBLSData_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_EpochBLSData
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_EpochBLSData) Descriptor() protoreflect.MessageDescriptor {
	return md_EpochBLSData
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_EpochBLSData) Type() protoreflect.MessageType {
	return _fastReflection_EpochBLSData_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_EpochBLSData) New() protoreflect.Message {
	return new(fastReflection_EpochBLSData)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_EpochBLSData) Interface() protoreflect.ProtoMessage {
	return (*EpochBLSData)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_EpochBLSData) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.EpochId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.EpochId)
		if !f(fd_EpochBLSData_epoch_id, value) {
			return
		}
	}
	if x.ITotalSlots != uint32(0) {
		value := protoreflect.ValueOfUint32(x.ITotalSlots)
		if !f(fd_EpochBLSData_i_total_slots, value) {
			return
		}
	}
	if x.TSlotsDegree != uint32(0) {
		value := protoreflect.ValueOfUint32(x.TSlotsDegree)
		if !f(fd_EpochBLSData_t_slots_degree, value) {
			return
		}
	}
	if len(x.Participants) != 0 {
		value := protoreflect.ValueOfList(&_EpochBLSData_4_list{list: &x.Participants})
		if !f(fd_EpochBLSData_participants, value) {
			return
		}
	}
	if x.DkgPhase != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.DkgPhase))
		if !f(fd_EpochBLSData_dkg_phase, value) {
			return
		}
	}
	if x.DealingPhaseDeadlineBlock != int64(0) {
		value := protoreflect.ValueOfInt64(x.DealingPhaseDeadlineBlock)
		if !f(fd_EpochBLSData_dealing_phase_deadline_block, value) {
			return
		}
	}
	if x.VerifyingPhaseDeadlineBlock != int64(0) {
		value := protoreflect.ValueOfInt64(x.VerifyingPhaseDeadlineBlock)
		if !f(fd_EpochBLSData_verifying_phase_deadline_block, value) {
			return
		}
	}
	if len(x.GroupPublicKey) != 0 {
		value := protoreflect.ValueOfBytes(x.GroupPublicKey)
		if !f(fd_EpochBLSData_group_public_key, value) {
			return
		}
	}
	if len(x.DealerParts) != 0 {
		value := protoreflect.ValueOfList(&_EpochBLSData_9_list{list: &x.DealerParts})
		if !f(fd_EpochBLSData_dealer_parts, value) {
			return
		}
	}
	if len(x.VerificationSubmissions) != 0 {
		value := protoreflect.ValueOfList(&_EpochBLSData_10_list{list: &x.VerificationSubmissions})
		if !f(fd_EpochBLSData_verification_submissions, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_EpochBLSData) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "inference.bls.EpochBLSData.epoch_id":
		return x.EpochId != uint64(0)
	case "inference.bls.EpochBLSData.i_total_slots":
		return x.ITotalSlots != uint32(0)
	case "inference.bls.EpochBLSData.t_slots_degree":
		return x.TSlotsDegree != uint32(0)
	case "inference.bls.EpochBLSData.participants":
		return len(x.Participants) != 0
	case "inference.bls.EpochBLSData.dkg_phase":
		return x.DkgPhase != 0
	case "inference.bls.EpochBLSData.dealing_phase_deadline_block":
		return x.DealingPhaseDeadlineBlock != int64(0)
	case "inference.bls.EpochBLSData.verifying_phase_deadline_block":
		return x.VerifyingPhaseDeadlineBlock != int64(0)
	case "inference.bls.EpochBLSData.group_public_key":
		return len(x.GroupPublicKey) != 0
	case "inference.bls.EpochBLSData.dealer_parts":
		return len(x.DealerParts) != 0
	case "inference.bls.EpochBLSData.verification_submissions":
		return len(x.VerificationSubmissions) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.EpochBLSData"))
		}
		panic(fmt.Errorf("message inference.bls.EpochBLSData does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EpochBLSData) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "inference.bls.EpochBLSData.epoch_id":
		x.EpochId = uint64(0)
	case "inference.bls.EpochBLSData.i_total_slots":
		x.ITotalSlots = uint32(0)
	case "inference.bls.EpochBLSData.t_slots_degree":
		x.TSlotsDegree = uint32(0)
	case "inference.bls.EpochBLSData.participants":
		x.Participants = nil
	case "inference.bls.EpochBLSData.dkg_phase":
		x.DkgPhase = 0
	case "inference.bls.EpochBLSData.dealing_phase_deadline_block":
		x.DealingPhaseDeadlineBlock = int64(0)
	case "inference.bls.EpochBLSData.verifying_phase_deadline_block":
		x.VerifyingPhaseDeadlineBlock = int64(0)
	case "inference.bls.EpochBLSData.group_public_key":
		x.GroupPublicKey = nil
	case "inference.bls.EpochBLSData.dealer_parts":
		x.DealerParts = nil
	case "inference.bls.EpochBLSData.verification_submissions":
		x.VerificationSubmissions = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.EpochBLSData"))
		}
		panic(fmt.Errorf("message inference.bls.EpochBLSData does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_EpochBLSData) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "inference.bls.EpochBLSData.epoch_id":
		value := x.EpochId
		return protoreflect.ValueOfUint64(value)
	case "inference.bls.EpochBLSData.i_total_slots":
		value := x.ITotalSlots
		return protoreflect.ValueOfUint32(value)
	case "inference.bls.EpochBLSData.t_slots_degree":
		value := x.TSlotsDegree
		return protoreflect.ValueOfUint32(value)
	case "inference.bls.EpochBLSData.participants":
		if len(x.Participants) == 0 {
			return protoreflect.ValueOfList(&_EpochBLSData_4_list{})
		}
		listValue := &_EpochBLSData_4_list{list: &x.Participants}
		return protoreflect.ValueOfList(listValue)
	case "inference.bls.EpochBLSData.dkg_phase":
		value := x.DkgPhase
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "inference.bls.EpochBLSData.dealing_phase_deadline_block":
		value := x.DealingPhaseDeadlineBlock
		return protoreflect.ValueOfInt64(value)
	case "inference.bls.EpochBLSData.verifying_phase_deadline_block":
		value := x.VerifyingPhaseDeadlineBlock
		return protoreflect.ValueOfInt64(value)
	case "inference.bls.EpochBLSData.group_public_key":
		value := x.GroupPublicKey
		return protoreflect.ValueOfBytes(value)
	case "inference.bls.EpochBLSData.dealer_parts":
		if len(x.DealerParts) == 0 {
			return protoreflect.ValueOfList(&_EpochBLSData_9_list{})
		}
		listValue := &_EpochBLSData_9_list{list: &x.DealerParts}
		return protoreflect.ValueOfList(listValue)
	case "inference.bls.EpochBLSData.verification_submissions":
		if len(x.VerificationSubmissions) == 0 {
			return protoreflect.ValueOfList(&_EpochBLSData_10_list{})
		}
		listValue := &_EpochBLSData_10_list{list: &x.VerificationSubmissions}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.EpochBLSData"))
		}
		panic(fmt.Errorf("message inference.bls.EpochBLSData does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EpochBLSData) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "inference.bls.EpochBLSData.epoch_id":
		x.EpochId = value.Uint()
	case "inference.bls.EpochBLSData.i_total_slots":
		x.ITotalSlots = uint32(value.Uint())
	case "inference.bls.EpochBLSData.t_slots_degree":
		x.TSlotsDegree = uint32(value.Uint())
	case "inference.bls.EpochBLSData.participants":
		lv := value.List()
		clv := lv.(*_EpochBLSData_4_list)
		x.Participants = *clv.list
	case "inference.bls.EpochBLSData.dkg_phase":
		x.DkgPhase = (DKGPhase)(value.Enum())
	case "inference.bls.EpochBLSData.dealing_phase_deadline_block":
		x.DealingPhaseDeadlineBlock = value.Int()
	case "inference.bls.EpochBLSData.verifying_phase_deadline_block":
		x.VerifyingPhaseDeadlineBlock = value.Int()
	case "inference.bls.EpochBLSData.group_public_key":
		x.GroupPublicKey = value.Bytes()
	case "inference.bls.EpochBLSData.dealer_parts":
		lv := value.List()
		clv := lv.(*_EpochBLSData_9_list)
		x.DealerParts = *clv.list
	case "inference.bls.EpochBLSData.verification_submissions":
		lv := value.List()
		clv := lv.(*_EpochBLSData_10_list)
		x.VerificationSubmissions = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.EpochBLSData"))
		}
		panic(fmt.Errorf("message inference.bls.EpochBLSData does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EpochBLSData) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.bls.EpochBLSData.participants":
		if x.Participants == nil {
			x.Participants = []*BLSParticipantInfo{}
		}
		value := &_EpochBLSData_4_list{list: &x.Participants}
		return protoreflect.ValueOfList(value)
	case "inference.bls.EpochBLSData.dealer_parts":
		if x.DealerParts == nil {
			x.DealerParts = []*DealerPartStorage{}
		}
		value := &_EpochBLSData_9_list{list: &x.DealerParts}
		return protoreflect.ValueOfList(value)
	case "inference.bls.EpochBLSData.verification_submissions":
		if x.VerificationSubmissions == nil {
			x.VerificationSubmissions = []*VerificationVectorSubmission{}
		}
		value := &_EpochBLSData_10_list{list: &x.VerificationSubmissions}
		return protoreflect.ValueOfList(value)
	case "inference.bls.EpochBLSData.epoch_id":
		panic(fmt.Errorf("field epoch_id of message inference.bls.EpochBLSData is not mutable"))
	case "inference.bls.EpochBLSData.i_total_slots":
		panic(fmt.Errorf("field i_total_slots of message inference.bls.EpochBLSData is not mutable"))
	case "inference.bls.EpochBLSData.t_slots_degree":
		panic(fmt.Errorf("field t_slots_degree of message inference.bls.EpochBLSData is not mutable"))
	case "inference.bls.EpochBLSData.dkg_phase":
		panic(fmt.Errorf("field dkg_phase of message inference.bls.EpochBLSData is not mutable"))
	case "inference.bls.EpochBLSData.dealing_phase_deadline_block":
		panic(fmt.Errorf("field dealing_phase_deadline_block of message inference.bls.EpochBLSData is not mutable"))
	case "inference.bls.EpochBLSData.verifying_phase_deadline_block":
		panic(fmt.Errorf("field verifying_phase_deadline_block of message inference.bls.EpochBLSData is not mutable"))
	case "inference.bls.EpochBLSData.group_public_key":
		panic(fmt.Errorf("field group_public_key of message inference.bls.EpochBLSData is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.EpochBLSData"))
		}
		panic(fmt.Errorf("message inference.bls.EpochBLSData does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_EpochBLSData) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.bls.EpochBLSData.epoch_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "inference.bls.EpochBLSData.i_total_slots":
		return protoreflect.ValueOfUint32(uint32(0))
	case "inference.bls.EpochBLSData.t_slots_degree":
		return protoreflect.ValueOfUint32(uint32(0))
	case "inference.bls.EpochBLSData.participants":
		list := []*BLSParticipantInfo{}
		return protoreflect.ValueOfList(&_EpochBLSData_4_list{list: &list})
	case "inference.bls.EpochBLSData.dkg_phase":
		return protoreflect.ValueOfEnum(0)
	case "inference.bls.EpochBLSData.dealing_phase_deadline_block":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.bls.EpochBLSData.verifying_phase_deadline_block":
		return protoreflect.ValueOfInt64(int64(0))
	case "inference.bls.EpochBLSData.group_public_key":
		return protoreflect.ValueOfBytes(nil)
	case "inference.bls.EpochBLSData.dealer_parts":
		list := []*DealerPartStorage{}
		return protoreflect.ValueOfList(&_EpochBLSData_9_list{list: &list})
	case "inference.bls.EpochBLSData.verification_submissions":
		list := []*VerificationVectorSubmission{}
		return protoreflect.ValueOfList(&_EpochBLSData_10_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.EpochBLSData"))
		}
		panic(fmt.Errorf("message inference.bls.EpochBLSData does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_EpochBLSData) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in inference.bls.EpochBLSData", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_EpochBLSData) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EpochBLSData) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_EpochBLSData) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_EpochBLSData) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*EpochBLSData)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.EpochId != 0 {
			n += 1 + runtime.Sov(uint64(x.EpochId))
		}
		if x.ITotalSlots != 0 {
			n += 1 + runtime.Sov(uint64(x.ITotalSlots))
		}
		if x.TSlotsDegree != 0 {
			n += 1 + runtime.Sov(uint64(x.TSlotsDegree))
		}
		if len(x.Participants) > 0 {
			for _, e := range x.Participants {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.DkgPhase != 0 {
			n += 1 + runtime.Sov(uint64(x.DkgPhase))
		}
		if x.DealingPhaseDeadlineBlock != 0 {
			n += 1 + runtime.Sov(uint64(x.DealingPhaseDeadlineBlock))
		}
		if x.VerifyingPhaseDeadlineBlock != 0 {
			n += 1 + runtime.Sov(uint64(x.VerifyingPhaseDeadlineBlock))
		}
		l = len(x.GroupPublicKey)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.DealerParts) > 0 {
			for _, e := range x.DealerParts {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.VerificationSubmissions) > 0 {
			for _, e := range x.VerificationSubmissions {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*EpochBLSData)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.VerificationSubmissions) > 0 {
			for iNdEx := len(x.VerificationSubmissions) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.VerificationSubmissions[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x52
			}
		}
		if len(x.DealerParts) > 0 {
			for iNdEx := len(x.DealerParts) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.DealerParts[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x4a
			}
		}
		if len(x.GroupPublicKey) > 0 {
			i -= len(x.GroupPublicKey)
			copy(dAtA[i:], x.GroupPublicKey)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.GroupPublicKey)))
			i--
			dAtA[i] = 0x42
		}
		if x.VerifyingPhaseDeadlineBlock != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.VerifyingPhaseDeadlineBlock))
			i--
			dAtA[i] = 0x38
		}
		if x.DealingPhaseDeadlineBlock != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.DealingPhaseDeadlineBlock))
			i--
			dAtA[i] = 0x30
		}
		if x.DkgPhase != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.DkgPhase))
			i--
			dAtA[i] = 0x28
		}
		if len(x.Participants) > 0 {
			for iNdEx := len(x.Participants) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Participants[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x22
			}
		}
		if x.TSlotsDegree != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TSlotsDegree))
			i--
			dAtA[i] = 0x18
		}
		if x.ITotalSlots != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ITotalSlots))
			i--
			dAtA[i] = 0x10
		}
		if x.EpochId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EpochId))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*EpochBLSData)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EpochBLSData: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EpochBLSData: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EpochId", wireType)
				}
				x.EpochId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EpochId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ITotalSlots", wireType)
				}
				x.ITotalSlots = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ITotalSlots |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TSlotsDegree", wireType)
				}
				x.TSlotsDegree = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TSlotsDegree |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Participants", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Participants = append(x.Participants, &BLSParticipantInfo{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Participants[len(x.Participants)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DkgPhase", wireType)
				}
				x.DkgPhase = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.DkgPhase |= DKGPhase(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DealingPhaseDeadlineBlock", wireType)
				}
				x.DealingPhaseDeadlineBlock = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.DealingPhaseDeadlineBlock |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field VerifyingPhaseDeadlineBlock", wireType)
				}
				x.VerifyingPhaseDeadlineBlock = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.VerifyingPhaseDeadlineBlock |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field GroupPublicKey", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.GroupPublicKey = append(x.GroupPublicKey[:0], dAtA[iNdEx:postIndex]...)
				if x.GroupPublicKey == nil {
					x.GroupPublicKey = []byte{}
				}
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DealerParts", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DealerParts = append(x.DealerParts, &DealerPartStorage{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.DealerParts[len(x.DealerParts)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field VerificationSubmissions", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.VerificationSubmissions = append(x.VerificationSubmissions, &VerificationVectorSubmission{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.VerificationSubmissions[len(x.VerificationSubmissions)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: inference/bls/types.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DKGPhase defines the different phases of the Distributed Key Generation process
type DKGPhase int32

const (
	// UNDEFINED represents an uninitialized or unknown phase
	DKGPhase_DKG_PHASE_UNDEFINED DKGPhase = 0
	// DEALING represents the phase where participants submit their dealing parts
	DKGPhase_DKG_PHASE_DEALING DKGPhase = 1
	// VERIFYING represents the phase where participants verify dealing parts
	DKGPhase_DKG_PHASE_VERIFYING DKGPhase = 2
	// COMPLETED represents the phase where DKG has successfully completed
	DKGPhase_DKG_PHASE_COMPLETED DKGPhase = 3
	// FAILED represents the phase where DKG has failed
	DKGPhase_DKG_PHASE_FAILED DKGPhase = 4
)

// Enum value maps for DKGPhase.
var (
	DKGPhase_name = map[int32]string{
		0: "DKG_PHASE_UNDEFINED",
		1: "DKG_PHASE_DEALING",
		2: "DKG_PHASE_VERIFYING",
		3: "DKG_PHASE_COMPLETED",
		4: "DKG_PHASE_FAILED",
	}
	DKGPhase_value = map[string]int32{
		"DKG_PHASE_UNDEFINED": 0,
		"DKG_PHASE_DEALING":   1,
		"DKG_PHASE_VERIFYING": 2,
		"DKG_PHASE_COMPLETED": 3,
		"DKG_PHASE_FAILED":    4,
	}
)

func (x DKGPhase) Enum() *DKGPhase {
	p := new(DKGPhase)
	*p = x
	return p
}

func (x DKGPhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DKGPhase) Descriptor() protoreflect.EnumDescriptor {
	return file_inference_bls_types_proto_enumTypes[0].Descriptor()
}

func (DKGPhase) Type() protoreflect.EnumType {
	return &file_inference_bls_types_proto_enumTypes[0]
}

func (x DKGPhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DKGPhase.Descriptor instead.
func (DKGPhase) EnumDescriptor() ([]byte, []int) {
	return file_inference_bls_types_proto_rawDescGZIP(), []int{0}
}

// BLSParticipantInfo contains information about a participant in the DKG process
type BLSParticipantInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// address is the participant's address
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// percentage_weight is the participant's weight in the validation set (as string for sdk.Dec compatibility)
	PercentageWeight string `protobuf:"bytes,2,opt,name=percentage_weight,json=percentageWeight,proto3" json:"percentage_weight,omitempty"`
	// secp256k1_public_key is the participant's secp256k1 public key for encryption
	Secp256K1PublicKey []byte `protobuf:"bytes,3,opt,name=secp256k1_public_key,json=secp256k1PublicKey,proto3" json:"secp256k1_public_key,omitempty"`
	// slot_start_index is the first slot index assigned to this participant
	SlotStartIndex uint32 `protobuf:"varint,4,opt,name=slot_start_index,json=slotStartIndex,proto3" json:"slot_start_index,omitempty"`
	// slot_end_index is the last slot index assigned to this participant (inclusive)
	SlotEndIndex uint32 `protobuf:"varint,5,opt,name=slot_end_index,json=slotEndIndex,proto3" json:"slot_end_index,omitempty"`
}

func (x *BLSParticipantInfo) Reset() {
	*x = BLSParticipantInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_bls_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BLSParticipantInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BLSParticipantInfo) ProtoMessage() {}

// Deprecated: Use BLSParticipantInfo.ProtoReflect.Descriptor instead.
func (*BLSParticipantInfo) Descriptor() ([]byte, []int) {
	return file_inference_bls_types_proto_rawDescGZIP(), []int{0}
}

func (x *BLSParticipantInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *BLSParticipantInfo) GetPercentageWeight() string {
	if x != nil {
		return x.PercentageWeight
	}
	return ""
}

func (x *BLSParticipantInfo) GetSecp256K1PublicKey() []byte {
	if x != nil {
		return x.Secp256K1PublicKey
	}
	return nil
}

func (x *BLSParticipantInfo) GetSlotStartIndex() uint32 {
	if x != nil {
		return x.SlotStartIndex
	}
	return 0
}

func (x *BLSParticipantInfo) GetSlotEndIndex() uint32 {
	if x != nil {
		return x.SlotEndIndex
	}
	return 0
}

// EncryptedSharesForParticipant contains encrypted shares for a specific participant
type EncryptedSharesForParticipant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// encrypted_shares contains shares for participant's slot range in order
	// Index i = share for slot (participant.slot_start_index + i)
	EncryptedShares [][]byte `protobuf:"bytes,1,rep,name=encrypted_shares,json=encryptedShares,proto3" json:"encrypted_shares,omitempty"`
}

func (x *EncryptedSharesForParticipant) Reset() {
	*x = EncryptedSharesForParticipant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_bls_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptedSharesForParticipant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptedSharesForParticipant) ProtoMessage() {}

// Deprecated: Use EncryptedSharesForParticipant.ProtoReflect.Descriptor instead.
func (*EncryptedSharesForParticipant) Descriptor() ([]byte, []int) {
	return file_inference_bls_types_proto_rawDescGZIP(), []int{1}
}

func (x *EncryptedSharesForParticipant) GetEncryptedShares() [][]byte {
	if x != nil {
		return x.EncryptedShares
	}
	return nil
}

// DealerPartStorage contains the storage format for a dealer's contribution to DKG
type DealerPartStorage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// dealer_address is the address of the dealer who submitted this part
	DealerAddress string `protobuf:"bytes,1,opt,name=dealer_address,json=dealerAddress,proto3" json:"dealer_address,omitempty"`
	// commitments are the G2 points C_kj = g * a_kj representing polynomial commitments
	Commitments [][]byte `protobuf:"bytes,2,rep,name=commitments,proto3" json:"commitments,omitempty"`
	// participant_shares contains encrypted shares for all participants in order
	// Index i = shares for EpochBLSData.participants[i]
	ParticipantShares []*EncryptedSharesForParticipant `protobuf:"bytes,3,rep,name=participant_shares,json=participantShares,proto3" json:"participant_shares,omitempty"`
}

func (x *DealerPartStorage) Reset() {
	*x = DealerPartStorage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_bls_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DealerPartStorage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DealerPartStorage) ProtoMessage() {}

// Deprecated: Use DealerPartStorage.ProtoReflect.Descriptor instead.
func (*DealerPartStorage) Descriptor() ([]byte, []int) {
	return file_inference_bls_types_proto_rawDescGZIP(), []int{2}
}

func (x *DealerPartStorage) GetDealerAddress() string {
	if x != nil {
		return x.DealerAddress
	}
	return ""
}

func (x *DealerPartStorage) GetCommitments() [][]byte {
	if x != nil {
		return x.Commitments
	}
	return nil
}

func (x *DealerPartStorage) GetParticipantShares() []*EncryptedSharesForParticipant {
	if x != nil {
		return x.ParticipantShares
	}
	return nil
}

// VerificationVectorSubmission contains verification results from a specific participant
type VerificationVectorSubmission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// dealer_validity bitmap indicating which dealers this participant verified as valid
	// Index i corresponds to EpochBLSData.participants[i] as dealer
	// true = dealer's shares verified correctly; false = failed verification or no submission
	// Empty array indicates participant has not submitted verification yet
	DealerValidity []bool `protobuf:"varint,1,rep,packed,name=dealer_validity,json=dealerValidity,proto3" json:"dealer_validity,omitempty"`
}

func (x *VerificationVectorSubmission) Reset() {
	*x = VerificationVectorSubmission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_bls_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerificationVectorSubmission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerificationVectorSubmission) ProtoMessage() {}

// Deprecated: Use VerificationVectorSubmission.ProtoReflect.Descriptor instead.
func (*VerificationVectorSubmission) Descriptor() ([]byte, []int) {
	return file_inference_bls_types_proto_rawDescGZIP(), []int{3}
}

func (x *VerificationVectorSubmission) GetDealerValidity() []bool {
	if x != nil {
		return x.DealerValidity
	}
	return nil
}

// EpochBLSData contains all information about a DKG round for a specific epoch
type EpochBLSData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// epoch_id uniquely identifies this DKG round
	EpochId uint64 `protobuf:"varint,1,opt,name=epoch_id,json=epochId,proto3" json:"epoch_id,omitempty"`
	// i_total_slots is the total number of slots in the DKG
	ITotalSlots uint32 `protobuf:"varint,2,opt,name=i_total_slots,json=iTotalSlots,proto3" json:"i_total_slots,omitempty"`
	// t_slots_degree is the polynomial degree t for the threshold scheme
	TSlotsDegree uint32 `protobuf:"varint,3,opt,name=t_slots_degree,json=tSlotsDegree,proto3" json:"t_slots_degree,omitempty"`
	// participants contains information about all participants in this DKG round
	Participants []*BLSParticipantInfo `protobuf:"bytes,4,rep,name=participants,proto3" json:"participants,omitempty"`
	// dkg_phase indicates the current phase of the DKG process
	DkgPhase DKGPhase `protobuf:"varint,5,opt,name=dkg_phase,json=dkgPhase,proto3,enum=inference.bls.DKGPhase" json:"dkg_phase,omitempty"`
	// dealing_phase_deadline_block is the block height deadline for the dealing phase
	DealingPhaseDeadlineBlock int64 `protobuf:"varint,6,opt,name=dealing_phase_deadline_block,json=dealingPhaseDeadlineBlock,proto3" json:"dealing_phase_deadline_block,omitempty"`
	// verifying_phase_deadline_block is the block height deadline for the verification phase
	VerifyingPhaseDeadlineBlock int64 `protobuf:"varint,7,opt,name=verifying_phase_deadline_block,json=verifyingPhaseDeadlineBlock,proto3" json:"verifying_phase_deadline_block,omitempty"`
	// group_public_key is the final group public key (G2 point) when DKG completes
	GroupPublicKey []byte `protobuf:"bytes,8,opt,name=group_public_key,json=groupPublicKey,proto3" json:"group_public_key,omitempty"`
	// dealer_parts contains dealer contributions in the same order as participants array
	// dealer_parts[i] corresponds to participants[i]'s dealer contribution
	// nil/empty entries indicate that participant has not submitted their dealer part yet
	DealerParts []*DealerPartStorage `protobuf:"bytes,9,rep,name=dealer_parts,json=dealerParts,proto3" json:"dealer_parts,omitempty"`
	// verification_submissions contains verification results from each participant
	// Each entry tracks which dealers that participant verified as valid
	VerificationSubmissions []*VerificationVectorSubmission `protobuf:"bytes,10,rep,name=verification_submissions,json=verificationSubmissions,proto3" json:"verification_submissions,omitempty"`
}

func (x *EpochBLSData) Reset() {
	*x = EpochBLSData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_bls_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpochBLSData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpochBLSData) ProtoMessage() {}

// Deprecated: Use EpochBLSData.ProtoReflect.Descriptor instead.
func (*EpochBLSData) Descriptor() ([]byte, []int) {
	return file_inference_bls_types_proto_rawDescGZIP(), []int{4}
}

func (x *EpochBLSData) GetEpochId() uint64 {
	if x != nil {
		return x.EpochId
	}
	return 0
}

func (x *EpochBLSData) GetITotalSlots() uint32 {
	if x != nil {
		return x.ITotalSlots
	}
	return 0
}

func (x *EpochBLSData) GetTSlotsDegree() uint32 {
	if x != nil {
		return x.TSlotsDegree
	}
	return 0
}

func (x *EpochBLSData) GetParticipants() []*BLSParticipantInfo {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *EpochBLSData) GetDkgPhase() DKGPhase {
	if x != nil {
		return x.DkgPhase
	}
	return DKGPhase_DKG_PHASE_UNDEFINED
}

func (x *EpochBLSData) GetDealingPhaseDeadlineBlock() int64 {
	if x != nil {
		return x.DealingPhaseDeadlineBlock
	}
	return 0
}

func (x *EpochBLSData) GetVerifyingPhaseDeadlineBlock() int64 {
	if x != nil {
		return x.VerifyingPhaseDeadlineBlock
	}
	return 0
}

func (x *EpochBLSData) GetGroupPublicKey() []byte {
	if x != nil {
		return x.GroupPublicKey
	}
	return nil
}

func (x *EpochBLSData) GetDealerParts() []*DealerPartStorage {
	if x != nil {
		return x.DealerParts
	}
	return nil
}

func (x *EpochBLSData) GetVerificationSubmissions() []*VerificationVectorSubmission {
	if x != nil {
		return x.VerificationSubmissions
	}
	return nil
}

var File_inference_bls_types_proto protoreflect.FileDescriptor

var file_inference_bls_types_proto_rawDesc = []byte{
	0x0a, 0x19, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x62, 0x6c, 0x73, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x69, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x6c, 0x73, 0x1a, 0x11, 0x61, 0x6d, 0x69, 0x6e,
	0x6f, 0x2f, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x90,
	0x02, 0x0a, 0x12, 0x42, 0x4c, 0x53, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x5e, 0x0a, 0x11, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00,
	0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f,
	0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2,
	0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x10, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x30, 0x0a, 0x14, 0x73, 0x65, 0x63, 0x70, 0x32, 0x35, 0x36, 0x6b, 0x31, 0x5f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x73,
	0x65, 0x63, 0x70, 0x32, 0x35, 0x36, 0x6b, 0x31, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x6c, 0x6f,
	0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x0e, 0x73,
	0x6c, 0x6f, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x6c, 0x6f, 0x74, 0x45, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x22, 0x4a, 0x0a, 0x1d, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0f, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x22, 0xb9, 0x01,
	0x0a, 0x11, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x61,
	0x6c, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x5b, 0x0a, 0x12,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x6c, 0x73, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x22, 0x47, 0x0a, 0x1c, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x61,
	0x6c, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x08, 0x52, 0x0e, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x22, 0xd3, 0x04, 0x0a, 0x0c, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x42, 0x4c, 0x53, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0d, 0x69, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x69, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x6c, 0x6f,
	0x74, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x5f, 0x64, 0x65,
	0x67, 0x72, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x53, 0x6c, 0x6f,
	0x74, 0x73, 0x44, 0x65, 0x67, 0x72, 0x65, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x6c, 0x73, 0x2e, 0x42,
	0x4c, 0x53, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x09, 0x64, 0x6b, 0x67, 0x5f, 0x70, 0x68, 0x61,
	0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x6c, 0x73, 0x2e, 0x44, 0x4b, 0x47, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x52, 0x08, 0x64, 0x6b, 0x67, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x64,
	0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x61,
	0x64, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x19, 0x64, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x68, 0x61, 0x73, 0x65, 0x44,
	0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x43, 0x0a, 0x1e,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f,
	0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x43, 0x0a, 0x0c, 0x64,
	0x65, 0x61, 0x6c, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x6c,
	0x73, 0x2e, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x73,
	0x12, 0x66, 0x0a, 0x18, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x62,
	0x6c, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x17, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2a, 0x82, 0x01, 0x0a, 0x08, 0x44, 0x4b, 0x47,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x4b, 0x47, 0x5f, 0x50, 0x48, 0x41,
	0x53, 0x45, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15,
	0x0a, 0x11, 0x44, 0x4b, 0x47, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x44, 0x45, 0x41, 0x4c,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x4b, 0x47, 0x5f, 0x50, 0x48, 0x41,
	0x53, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x17,
	0x0a, 0x13, 0x44, 0x4b, 0x47, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x4b, 0x47, 0x5f, 0x50,
	0x48, 0x41, 0x53, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x42, 0x94, 0x01,
	0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x62, 0x6c, 0x73, 0x42, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x1e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x62, 0x6c,
	0x73, 0xa2, 0x02, 0x03, 0x49, 0x42, 0x58, 0xaa, 0x02, 0x0d, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x2e, 0x42, 0x6c, 0x73, 0xca, 0x02, 0x0d, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x5c, 0x42, 0x6c, 0x73, 0xe2, 0x02, 0x19, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x5c, 0x42, 0x6c, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x0e, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a,
	0x3a, 0x42, 0x6c, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_inference_bls_types_proto_rawDescOnce sync.Once
	file_inference_bls_types_proto_rawDescData = file_inference_bls_types_proto_rawDesc
)

func file_inference_bls_types_proto_rawDescGZIP() []byte {
	file_inference_bls_types_proto_rawDescOnce.Do(func() {
		file_inference_bls_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_inference_bls_types_proto_rawDescData)
	})
	return file_inference_bls_types_proto_rawDescData
}

var file_inference_bls_types_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_inference_bls_types_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_inference_bls_types_proto_goTypes = []interface{}{
	(DKGPhase)(0),                         // 0: inference.bls.DKGPhase
	(*BLSParticipantInfo)(nil),            // 1: inference.bls.BLSParticipantInfo
	(*EncryptedSharesForParticipant)(nil), // 2: inference.bls.EncryptedSharesForParticipant
	(*DealerPartStorage)(nil),             // 3: inference.bls.DealerPartStorage
	(*VerificationVectorSubmission)(nil),  // 4: inference.bls.VerificationVectorSubmission
	(*EpochBLSData)(nil),                  // 5: inference.bls.EpochBLSData
}
var file_inference_bls_types_proto_depIdxs = []int32{
	2, // 0: inference.bls.DealerPartStorage.participant_shares:type_name -> inference.bls.EncryptedSharesForParticipant
	1, // 1: inference.bls.EpochBLSData.participants:type_name -> inference.bls.BLSParticipantInfo
	0, // 2: inference.bls.EpochBLSData.dkg_phase:type_name -> inference.bls.DKGPhase
	3, // 3: inference.bls.EpochBLSData.dealer_parts:type_name -> inference.bls.DealerPartStorage
	4, // 4: inference.bls.EpochBLSData.verification_submissions:type_name -> inference.bls.VerificationVectorSubmission
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_inference_bls_types_proto_init() }
func file_inference_bls_types_proto_init() {
	if File_inference_bls_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_inference_bls_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BLSParticipantInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_bls_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptedSharesForParticipant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_bls_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DealerPartStorage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_bls_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerificationVectorSubmission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_bls_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpochBLSData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_inference_bls_types_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_inference_bls_types_proto_goTypes,
		DependencyIndexes: file_inference_bls_types_proto_depIdxs,
		EnumInfos:         file_inference_bls_types_proto_enumTypes,
		MessageInfos:      file_inference_bls_types_proto_msgTypes,
	}.Build()
	File_inference_bls_types_proto = out.File
	file_inference_bls_types_proto_rawDesc = nil
	file_inference_bls_types_proto_goTypes = nil
	file_inference_bls_types_proto_depIdxs = nil
}

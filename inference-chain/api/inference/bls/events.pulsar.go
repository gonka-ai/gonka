// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package bls

import (
	_ "cosmossdk.io/api/amino"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_EventKeyGenerationInitiated_4_list)(nil)

type _EventKeyGenerationInitiated_4_list struct {
	list *[]*BLSParticipantInfo
}

func (x *_EventKeyGenerationInitiated_4_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_EventKeyGenerationInitiated_4_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_EventKeyGenerationInitiated_4_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*BLSParticipantInfo)
	(*x.list)[i] = concreteValue
}

func (x *_EventKeyGenerationInitiated_4_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*BLSParticipantInfo)
	*x.list = append(*x.list, concreteValue)
}

func (x *_EventKeyGenerationInitiated_4_list) AppendMutable() protoreflect.Value {
	v := new(BLSParticipantInfo)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_EventKeyGenerationInitiated_4_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_EventKeyGenerationInitiated_4_list) NewElement() protoreflect.Value {
	v := new(BLSParticipantInfo)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_EventKeyGenerationInitiated_4_list) IsValid() bool {
	return x.list != nil
}

var (
	md_EventKeyGenerationInitiated                protoreflect.MessageDescriptor
	fd_EventKeyGenerationInitiated_epoch_id       protoreflect.FieldDescriptor
	fd_EventKeyGenerationInitiated_i_total_slots  protoreflect.FieldDescriptor
	fd_EventKeyGenerationInitiated_t_slots_degree protoreflect.FieldDescriptor
	fd_EventKeyGenerationInitiated_participants   protoreflect.FieldDescriptor
)

func init() {
	file_inference_bls_events_proto_init()
	md_EventKeyGenerationInitiated = File_inference_bls_events_proto.Messages().ByName("EventKeyGenerationInitiated")
	fd_EventKeyGenerationInitiated_epoch_id = md_EventKeyGenerationInitiated.Fields().ByName("epoch_id")
	fd_EventKeyGenerationInitiated_i_total_slots = md_EventKeyGenerationInitiated.Fields().ByName("i_total_slots")
	fd_EventKeyGenerationInitiated_t_slots_degree = md_EventKeyGenerationInitiated.Fields().ByName("t_slots_degree")
	fd_EventKeyGenerationInitiated_participants = md_EventKeyGenerationInitiated.Fields().ByName("participants")
}

var _ protoreflect.Message = (*fastReflection_EventKeyGenerationInitiated)(nil)

type fastReflection_EventKeyGenerationInitiated EventKeyGenerationInitiated

func (x *EventKeyGenerationInitiated) ProtoReflect() protoreflect.Message {
	return (*fastReflection_EventKeyGenerationInitiated)(x)
}

func (x *EventKeyGenerationInitiated) slowProtoReflect() protoreflect.Message {
	mi := &file_inference_bls_events_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_EventKeyGenerationInitiated_messageType fastReflection_EventKeyGenerationInitiated_messageType
var _ protoreflect.MessageType = fastReflection_EventKeyGenerationInitiated_messageType{}

type fastReflection_EventKeyGenerationInitiated_messageType struct{}

func (x fastReflection_EventKeyGenerationInitiated_messageType) Zero() protoreflect.Message {
	return (*fastReflection_EventKeyGenerationInitiated)(nil)
}
func (x fastReflection_EventKeyGenerationInitiated_messageType) New() protoreflect.Message {
	return new(fastReflection_EventKeyGenerationInitiated)
}
func (x fastReflection_EventKeyGenerationInitiated_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_EventKeyGenerationInitiated
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_EventKeyGenerationInitiated) Descriptor() protoreflect.MessageDescriptor {
	return md_EventKeyGenerationInitiated
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_EventKeyGenerationInitiated) Type() protoreflect.MessageType {
	return _fastReflection_EventKeyGenerationInitiated_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_EventKeyGenerationInitiated) New() protoreflect.Message {
	return new(fastReflection_EventKeyGenerationInitiated)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_EventKeyGenerationInitiated) Interface() protoreflect.ProtoMessage {
	return (*EventKeyGenerationInitiated)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_EventKeyGenerationInitiated) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.EpochId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.EpochId)
		if !f(fd_EventKeyGenerationInitiated_epoch_id, value) {
			return
		}
	}
	if x.ITotalSlots != uint32(0) {
		value := protoreflect.ValueOfUint32(x.ITotalSlots)
		if !f(fd_EventKeyGenerationInitiated_i_total_slots, value) {
			return
		}
	}
	if x.TSlotsDegree != uint32(0) {
		value := protoreflect.ValueOfUint32(x.TSlotsDegree)
		if !f(fd_EventKeyGenerationInitiated_t_slots_degree, value) {
			return
		}
	}
	if len(x.Participants) != 0 {
		value := protoreflect.ValueOfList(&_EventKeyGenerationInitiated_4_list{list: &x.Participants})
		if !f(fd_EventKeyGenerationInitiated_participants, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_EventKeyGenerationInitiated) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "inference.bls.EventKeyGenerationInitiated.epoch_id":
		return x.EpochId != uint64(0)
	case "inference.bls.EventKeyGenerationInitiated.i_total_slots":
		return x.ITotalSlots != uint32(0)
	case "inference.bls.EventKeyGenerationInitiated.t_slots_degree":
		return x.TSlotsDegree != uint32(0)
	case "inference.bls.EventKeyGenerationInitiated.participants":
		return len(x.Participants) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.EventKeyGenerationInitiated"))
		}
		panic(fmt.Errorf("message inference.bls.EventKeyGenerationInitiated does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventKeyGenerationInitiated) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "inference.bls.EventKeyGenerationInitiated.epoch_id":
		x.EpochId = uint64(0)
	case "inference.bls.EventKeyGenerationInitiated.i_total_slots":
		x.ITotalSlots = uint32(0)
	case "inference.bls.EventKeyGenerationInitiated.t_slots_degree":
		x.TSlotsDegree = uint32(0)
	case "inference.bls.EventKeyGenerationInitiated.participants":
		x.Participants = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.EventKeyGenerationInitiated"))
		}
		panic(fmt.Errorf("message inference.bls.EventKeyGenerationInitiated does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_EventKeyGenerationInitiated) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "inference.bls.EventKeyGenerationInitiated.epoch_id":
		value := x.EpochId
		return protoreflect.ValueOfUint64(value)
	case "inference.bls.EventKeyGenerationInitiated.i_total_slots":
		value := x.ITotalSlots
		return protoreflect.ValueOfUint32(value)
	case "inference.bls.EventKeyGenerationInitiated.t_slots_degree":
		value := x.TSlotsDegree
		return protoreflect.ValueOfUint32(value)
	case "inference.bls.EventKeyGenerationInitiated.participants":
		if len(x.Participants) == 0 {
			return protoreflect.ValueOfList(&_EventKeyGenerationInitiated_4_list{})
		}
		listValue := &_EventKeyGenerationInitiated_4_list{list: &x.Participants}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.EventKeyGenerationInitiated"))
		}
		panic(fmt.Errorf("message inference.bls.EventKeyGenerationInitiated does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventKeyGenerationInitiated) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "inference.bls.EventKeyGenerationInitiated.epoch_id":
		x.EpochId = value.Uint()
	case "inference.bls.EventKeyGenerationInitiated.i_total_slots":
		x.ITotalSlots = uint32(value.Uint())
	case "inference.bls.EventKeyGenerationInitiated.t_slots_degree":
		x.TSlotsDegree = uint32(value.Uint())
	case "inference.bls.EventKeyGenerationInitiated.participants":
		lv := value.List()
		clv := lv.(*_EventKeyGenerationInitiated_4_list)
		x.Participants = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.EventKeyGenerationInitiated"))
		}
		panic(fmt.Errorf("message inference.bls.EventKeyGenerationInitiated does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventKeyGenerationInitiated) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.bls.EventKeyGenerationInitiated.participants":
		if x.Participants == nil {
			x.Participants = []*BLSParticipantInfo{}
		}
		value := &_EventKeyGenerationInitiated_4_list{list: &x.Participants}
		return protoreflect.ValueOfList(value)
	case "inference.bls.EventKeyGenerationInitiated.epoch_id":
		panic(fmt.Errorf("field epoch_id of message inference.bls.EventKeyGenerationInitiated is not mutable"))
	case "inference.bls.EventKeyGenerationInitiated.i_total_slots":
		panic(fmt.Errorf("field i_total_slots of message inference.bls.EventKeyGenerationInitiated is not mutable"))
	case "inference.bls.EventKeyGenerationInitiated.t_slots_degree":
		panic(fmt.Errorf("field t_slots_degree of message inference.bls.EventKeyGenerationInitiated is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.EventKeyGenerationInitiated"))
		}
		panic(fmt.Errorf("message inference.bls.EventKeyGenerationInitiated does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_EventKeyGenerationInitiated) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.bls.EventKeyGenerationInitiated.epoch_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "inference.bls.EventKeyGenerationInitiated.i_total_slots":
		return protoreflect.ValueOfUint32(uint32(0))
	case "inference.bls.EventKeyGenerationInitiated.t_slots_degree":
		return protoreflect.ValueOfUint32(uint32(0))
	case "inference.bls.EventKeyGenerationInitiated.participants":
		list := []*BLSParticipantInfo{}
		return protoreflect.ValueOfList(&_EventKeyGenerationInitiated_4_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.EventKeyGenerationInitiated"))
		}
		panic(fmt.Errorf("message inference.bls.EventKeyGenerationInitiated does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_EventKeyGenerationInitiated) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in inference.bls.EventKeyGenerationInitiated", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_EventKeyGenerationInitiated) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventKeyGenerationInitiated) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_EventKeyGenerationInitiated) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_EventKeyGenerationInitiated) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*EventKeyGenerationInitiated)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.EpochId != 0 {
			n += 1 + runtime.Sov(uint64(x.EpochId))
		}
		if x.ITotalSlots != 0 {
			n += 1 + runtime.Sov(uint64(x.ITotalSlots))
		}
		if x.TSlotsDegree != 0 {
			n += 1 + runtime.Sov(uint64(x.TSlotsDegree))
		}
		if len(x.Participants) > 0 {
			for _, e := range x.Participants {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*EventKeyGenerationInitiated)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Participants) > 0 {
			for iNdEx := len(x.Participants) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Participants[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x22
			}
		}
		if x.TSlotsDegree != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TSlotsDegree))
			i--
			dAtA[i] = 0x18
		}
		if x.ITotalSlots != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ITotalSlots))
			i--
			dAtA[i] = 0x10
		}
		if x.EpochId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EpochId))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*EventKeyGenerationInitiated)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EventKeyGenerationInitiated: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EventKeyGenerationInitiated: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EpochId", wireType)
				}
				x.EpochId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EpochId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ITotalSlots", wireType)
				}
				x.ITotalSlots = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ITotalSlots |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TSlotsDegree", wireType)
				}
				x.TSlotsDegree = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TSlotsDegree |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Participants", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Participants = append(x.Participants, &BLSParticipantInfo{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Participants[len(x.Participants)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_EventDealerPartSubmitted                protoreflect.MessageDescriptor
	fd_EventDealerPartSubmitted_epoch_id       protoreflect.FieldDescriptor
	fd_EventDealerPartSubmitted_dealer_address protoreflect.FieldDescriptor
)

func init() {
	file_inference_bls_events_proto_init()
	md_EventDealerPartSubmitted = File_inference_bls_events_proto.Messages().ByName("EventDealerPartSubmitted")
	fd_EventDealerPartSubmitted_epoch_id = md_EventDealerPartSubmitted.Fields().ByName("epoch_id")
	fd_EventDealerPartSubmitted_dealer_address = md_EventDealerPartSubmitted.Fields().ByName("dealer_address")
}

var _ protoreflect.Message = (*fastReflection_EventDealerPartSubmitted)(nil)

type fastReflection_EventDealerPartSubmitted EventDealerPartSubmitted

func (x *EventDealerPartSubmitted) ProtoReflect() protoreflect.Message {
	return (*fastReflection_EventDealerPartSubmitted)(x)
}

func (x *EventDealerPartSubmitted) slowProtoReflect() protoreflect.Message {
	mi := &file_inference_bls_events_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_EventDealerPartSubmitted_messageType fastReflection_EventDealerPartSubmitted_messageType
var _ protoreflect.MessageType = fastReflection_EventDealerPartSubmitted_messageType{}

type fastReflection_EventDealerPartSubmitted_messageType struct{}

func (x fastReflection_EventDealerPartSubmitted_messageType) Zero() protoreflect.Message {
	return (*fastReflection_EventDealerPartSubmitted)(nil)
}
func (x fastReflection_EventDealerPartSubmitted_messageType) New() protoreflect.Message {
	return new(fastReflection_EventDealerPartSubmitted)
}
func (x fastReflection_EventDealerPartSubmitted_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_EventDealerPartSubmitted
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_EventDealerPartSubmitted) Descriptor() protoreflect.MessageDescriptor {
	return md_EventDealerPartSubmitted
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_EventDealerPartSubmitted) Type() protoreflect.MessageType {
	return _fastReflection_EventDealerPartSubmitted_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_EventDealerPartSubmitted) New() protoreflect.Message {
	return new(fastReflection_EventDealerPartSubmitted)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_EventDealerPartSubmitted) Interface() protoreflect.ProtoMessage {
	return (*EventDealerPartSubmitted)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_EventDealerPartSubmitted) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.EpochId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.EpochId)
		if !f(fd_EventDealerPartSubmitted_epoch_id, value) {
			return
		}
	}
	if x.DealerAddress != "" {
		value := protoreflect.ValueOfString(x.DealerAddress)
		if !f(fd_EventDealerPartSubmitted_dealer_address, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_EventDealerPartSubmitted) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "inference.bls.EventDealerPartSubmitted.epoch_id":
		return x.EpochId != uint64(0)
	case "inference.bls.EventDealerPartSubmitted.dealer_address":
		return x.DealerAddress != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.EventDealerPartSubmitted"))
		}
		panic(fmt.Errorf("message inference.bls.EventDealerPartSubmitted does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventDealerPartSubmitted) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "inference.bls.EventDealerPartSubmitted.epoch_id":
		x.EpochId = uint64(0)
	case "inference.bls.EventDealerPartSubmitted.dealer_address":
		x.DealerAddress = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.EventDealerPartSubmitted"))
		}
		panic(fmt.Errorf("message inference.bls.EventDealerPartSubmitted does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_EventDealerPartSubmitted) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "inference.bls.EventDealerPartSubmitted.epoch_id":
		value := x.EpochId
		return protoreflect.ValueOfUint64(value)
	case "inference.bls.EventDealerPartSubmitted.dealer_address":
		value := x.DealerAddress
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.EventDealerPartSubmitted"))
		}
		panic(fmt.Errorf("message inference.bls.EventDealerPartSubmitted does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventDealerPartSubmitted) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "inference.bls.EventDealerPartSubmitted.epoch_id":
		x.EpochId = value.Uint()
	case "inference.bls.EventDealerPartSubmitted.dealer_address":
		x.DealerAddress = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.EventDealerPartSubmitted"))
		}
		panic(fmt.Errorf("message inference.bls.EventDealerPartSubmitted does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventDealerPartSubmitted) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.bls.EventDealerPartSubmitted.epoch_id":
		panic(fmt.Errorf("field epoch_id of message inference.bls.EventDealerPartSubmitted is not mutable"))
	case "inference.bls.EventDealerPartSubmitted.dealer_address":
		panic(fmt.Errorf("field dealer_address of message inference.bls.EventDealerPartSubmitted is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.EventDealerPartSubmitted"))
		}
		panic(fmt.Errorf("message inference.bls.EventDealerPartSubmitted does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_EventDealerPartSubmitted) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.bls.EventDealerPartSubmitted.epoch_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "inference.bls.EventDealerPartSubmitted.dealer_address":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.EventDealerPartSubmitted"))
		}
		panic(fmt.Errorf("message inference.bls.EventDealerPartSubmitted does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_EventDealerPartSubmitted) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in inference.bls.EventDealerPartSubmitted", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_EventDealerPartSubmitted) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventDealerPartSubmitted) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_EventDealerPartSubmitted) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_EventDealerPartSubmitted) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*EventDealerPartSubmitted)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.EpochId != 0 {
			n += 1 + runtime.Sov(uint64(x.EpochId))
		}
		l = len(x.DealerAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*EventDealerPartSubmitted)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.DealerAddress) > 0 {
			i -= len(x.DealerAddress)
			copy(dAtA[i:], x.DealerAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.DealerAddress)))
			i--
			dAtA[i] = 0x12
		}
		if x.EpochId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EpochId))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*EventDealerPartSubmitted)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EventDealerPartSubmitted: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EventDealerPartSubmitted: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EpochId", wireType)
				}
				x.EpochId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EpochId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DealerAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DealerAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_EventVerifyingPhaseStarted                                protoreflect.MessageDescriptor
	fd_EventVerifyingPhaseStarted_epoch_id                       protoreflect.FieldDescriptor
	fd_EventVerifyingPhaseStarted_verifying_phase_deadline_block protoreflect.FieldDescriptor
	fd_EventVerifyingPhaseStarted_epoch_data                     protoreflect.FieldDescriptor
)

func init() {
	file_inference_bls_events_proto_init()
	md_EventVerifyingPhaseStarted = File_inference_bls_events_proto.Messages().ByName("EventVerifyingPhaseStarted")
	fd_EventVerifyingPhaseStarted_epoch_id = md_EventVerifyingPhaseStarted.Fields().ByName("epoch_id")
	fd_EventVerifyingPhaseStarted_verifying_phase_deadline_block = md_EventVerifyingPhaseStarted.Fields().ByName("verifying_phase_deadline_block")
	fd_EventVerifyingPhaseStarted_epoch_data = md_EventVerifyingPhaseStarted.Fields().ByName("epoch_data")
}

var _ protoreflect.Message = (*fastReflection_EventVerifyingPhaseStarted)(nil)

type fastReflection_EventVerifyingPhaseStarted EventVerifyingPhaseStarted

func (x *EventVerifyingPhaseStarted) ProtoReflect() protoreflect.Message {
	return (*fastReflection_EventVerifyingPhaseStarted)(x)
}

func (x *EventVerifyingPhaseStarted) slowProtoReflect() protoreflect.Message {
	mi := &file_inference_bls_events_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_EventVerifyingPhaseStarted_messageType fastReflection_EventVerifyingPhaseStarted_messageType
var _ protoreflect.MessageType = fastReflection_EventVerifyingPhaseStarted_messageType{}

type fastReflection_EventVerifyingPhaseStarted_messageType struct{}

func (x fastReflection_EventVerifyingPhaseStarted_messageType) Zero() protoreflect.Message {
	return (*fastReflection_EventVerifyingPhaseStarted)(nil)
}
func (x fastReflection_EventVerifyingPhaseStarted_messageType) New() protoreflect.Message {
	return new(fastReflection_EventVerifyingPhaseStarted)
}
func (x fastReflection_EventVerifyingPhaseStarted_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_EventVerifyingPhaseStarted
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_EventVerifyingPhaseStarted) Descriptor() protoreflect.MessageDescriptor {
	return md_EventVerifyingPhaseStarted
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_EventVerifyingPhaseStarted) Type() protoreflect.MessageType {
	return _fastReflection_EventVerifyingPhaseStarted_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_EventVerifyingPhaseStarted) New() protoreflect.Message {
	return new(fastReflection_EventVerifyingPhaseStarted)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_EventVerifyingPhaseStarted) Interface() protoreflect.ProtoMessage {
	return (*EventVerifyingPhaseStarted)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_EventVerifyingPhaseStarted) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.EpochId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.EpochId)
		if !f(fd_EventVerifyingPhaseStarted_epoch_id, value) {
			return
		}
	}
	if x.VerifyingPhaseDeadlineBlock != uint64(0) {
		value := protoreflect.ValueOfUint64(x.VerifyingPhaseDeadlineBlock)
		if !f(fd_EventVerifyingPhaseStarted_verifying_phase_deadline_block, value) {
			return
		}
	}
	if x.EpochData != nil {
		value := protoreflect.ValueOfMessage(x.EpochData.ProtoReflect())
		if !f(fd_EventVerifyingPhaseStarted_epoch_data, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_EventVerifyingPhaseStarted) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "inference.bls.EventVerifyingPhaseStarted.epoch_id":
		return x.EpochId != uint64(0)
	case "inference.bls.EventVerifyingPhaseStarted.verifying_phase_deadline_block":
		return x.VerifyingPhaseDeadlineBlock != uint64(0)
	case "inference.bls.EventVerifyingPhaseStarted.epoch_data":
		return x.EpochData != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.EventVerifyingPhaseStarted"))
		}
		panic(fmt.Errorf("message inference.bls.EventVerifyingPhaseStarted does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventVerifyingPhaseStarted) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "inference.bls.EventVerifyingPhaseStarted.epoch_id":
		x.EpochId = uint64(0)
	case "inference.bls.EventVerifyingPhaseStarted.verifying_phase_deadline_block":
		x.VerifyingPhaseDeadlineBlock = uint64(0)
	case "inference.bls.EventVerifyingPhaseStarted.epoch_data":
		x.EpochData = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.EventVerifyingPhaseStarted"))
		}
		panic(fmt.Errorf("message inference.bls.EventVerifyingPhaseStarted does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_EventVerifyingPhaseStarted) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "inference.bls.EventVerifyingPhaseStarted.epoch_id":
		value := x.EpochId
		return protoreflect.ValueOfUint64(value)
	case "inference.bls.EventVerifyingPhaseStarted.verifying_phase_deadline_block":
		value := x.VerifyingPhaseDeadlineBlock
		return protoreflect.ValueOfUint64(value)
	case "inference.bls.EventVerifyingPhaseStarted.epoch_data":
		value := x.EpochData
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.EventVerifyingPhaseStarted"))
		}
		panic(fmt.Errorf("message inference.bls.EventVerifyingPhaseStarted does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventVerifyingPhaseStarted) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "inference.bls.EventVerifyingPhaseStarted.epoch_id":
		x.EpochId = value.Uint()
	case "inference.bls.EventVerifyingPhaseStarted.verifying_phase_deadline_block":
		x.VerifyingPhaseDeadlineBlock = value.Uint()
	case "inference.bls.EventVerifyingPhaseStarted.epoch_data":
		x.EpochData = value.Message().Interface().(*EpochBLSData)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.EventVerifyingPhaseStarted"))
		}
		panic(fmt.Errorf("message inference.bls.EventVerifyingPhaseStarted does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventVerifyingPhaseStarted) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.bls.EventVerifyingPhaseStarted.epoch_data":
		if x.EpochData == nil {
			x.EpochData = new(EpochBLSData)
		}
		return protoreflect.ValueOfMessage(x.EpochData.ProtoReflect())
	case "inference.bls.EventVerifyingPhaseStarted.epoch_id":
		panic(fmt.Errorf("field epoch_id of message inference.bls.EventVerifyingPhaseStarted is not mutable"))
	case "inference.bls.EventVerifyingPhaseStarted.verifying_phase_deadline_block":
		panic(fmt.Errorf("field verifying_phase_deadline_block of message inference.bls.EventVerifyingPhaseStarted is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.EventVerifyingPhaseStarted"))
		}
		panic(fmt.Errorf("message inference.bls.EventVerifyingPhaseStarted does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_EventVerifyingPhaseStarted) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.bls.EventVerifyingPhaseStarted.epoch_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "inference.bls.EventVerifyingPhaseStarted.verifying_phase_deadline_block":
		return protoreflect.ValueOfUint64(uint64(0))
	case "inference.bls.EventVerifyingPhaseStarted.epoch_data":
		m := new(EpochBLSData)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.EventVerifyingPhaseStarted"))
		}
		panic(fmt.Errorf("message inference.bls.EventVerifyingPhaseStarted does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_EventVerifyingPhaseStarted) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in inference.bls.EventVerifyingPhaseStarted", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_EventVerifyingPhaseStarted) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventVerifyingPhaseStarted) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_EventVerifyingPhaseStarted) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_EventVerifyingPhaseStarted) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*EventVerifyingPhaseStarted)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.EpochId != 0 {
			n += 1 + runtime.Sov(uint64(x.EpochId))
		}
		if x.VerifyingPhaseDeadlineBlock != 0 {
			n += 1 + runtime.Sov(uint64(x.VerifyingPhaseDeadlineBlock))
		}
		if x.EpochData != nil {
			l = options.Size(x.EpochData)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*EventVerifyingPhaseStarted)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.EpochData != nil {
			encoded, err := options.Marshal(x.EpochData)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if x.VerifyingPhaseDeadlineBlock != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.VerifyingPhaseDeadlineBlock))
			i--
			dAtA[i] = 0x10
		}
		if x.EpochId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EpochId))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*EventVerifyingPhaseStarted)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EventVerifyingPhaseStarted: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EventVerifyingPhaseStarted: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EpochId", wireType)
				}
				x.EpochId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EpochId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field VerifyingPhaseDeadlineBlock", wireType)
				}
				x.VerifyingPhaseDeadlineBlock = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.VerifyingPhaseDeadlineBlock |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EpochData", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.EpochData == nil {
					x.EpochData = &EpochBLSData{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.EpochData); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_EventDKGFailed            protoreflect.MessageDescriptor
	fd_EventDKGFailed_epoch_id   protoreflect.FieldDescriptor
	fd_EventDKGFailed_reason     protoreflect.FieldDescriptor
	fd_EventDKGFailed_epoch_data protoreflect.FieldDescriptor
)

func init() {
	file_inference_bls_events_proto_init()
	md_EventDKGFailed = File_inference_bls_events_proto.Messages().ByName("EventDKGFailed")
	fd_EventDKGFailed_epoch_id = md_EventDKGFailed.Fields().ByName("epoch_id")
	fd_EventDKGFailed_reason = md_EventDKGFailed.Fields().ByName("reason")
	fd_EventDKGFailed_epoch_data = md_EventDKGFailed.Fields().ByName("epoch_data")
}

var _ protoreflect.Message = (*fastReflection_EventDKGFailed)(nil)

type fastReflection_EventDKGFailed EventDKGFailed

func (x *EventDKGFailed) ProtoReflect() protoreflect.Message {
	return (*fastReflection_EventDKGFailed)(x)
}

func (x *EventDKGFailed) slowProtoReflect() protoreflect.Message {
	mi := &file_inference_bls_events_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_EventDKGFailed_messageType fastReflection_EventDKGFailed_messageType
var _ protoreflect.MessageType = fastReflection_EventDKGFailed_messageType{}

type fastReflection_EventDKGFailed_messageType struct{}

func (x fastReflection_EventDKGFailed_messageType) Zero() protoreflect.Message {
	return (*fastReflection_EventDKGFailed)(nil)
}
func (x fastReflection_EventDKGFailed_messageType) New() protoreflect.Message {
	return new(fastReflection_EventDKGFailed)
}
func (x fastReflection_EventDKGFailed_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_EventDKGFailed
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_EventDKGFailed) Descriptor() protoreflect.MessageDescriptor {
	return md_EventDKGFailed
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_EventDKGFailed) Type() protoreflect.MessageType {
	return _fastReflection_EventDKGFailed_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_EventDKGFailed) New() protoreflect.Message {
	return new(fastReflection_EventDKGFailed)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_EventDKGFailed) Interface() protoreflect.ProtoMessage {
	return (*EventDKGFailed)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_EventDKGFailed) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.EpochId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.EpochId)
		if !f(fd_EventDKGFailed_epoch_id, value) {
			return
		}
	}
	if x.Reason != "" {
		value := protoreflect.ValueOfString(x.Reason)
		if !f(fd_EventDKGFailed_reason, value) {
			return
		}
	}
	if x.EpochData != nil {
		value := protoreflect.ValueOfMessage(x.EpochData.ProtoReflect())
		if !f(fd_EventDKGFailed_epoch_data, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_EventDKGFailed) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "inference.bls.EventDKGFailed.epoch_id":
		return x.EpochId != uint64(0)
	case "inference.bls.EventDKGFailed.reason":
		return x.Reason != ""
	case "inference.bls.EventDKGFailed.epoch_data":
		return x.EpochData != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.EventDKGFailed"))
		}
		panic(fmt.Errorf("message inference.bls.EventDKGFailed does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventDKGFailed) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "inference.bls.EventDKGFailed.epoch_id":
		x.EpochId = uint64(0)
	case "inference.bls.EventDKGFailed.reason":
		x.Reason = ""
	case "inference.bls.EventDKGFailed.epoch_data":
		x.EpochData = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.EventDKGFailed"))
		}
		panic(fmt.Errorf("message inference.bls.EventDKGFailed does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_EventDKGFailed) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "inference.bls.EventDKGFailed.epoch_id":
		value := x.EpochId
		return protoreflect.ValueOfUint64(value)
	case "inference.bls.EventDKGFailed.reason":
		value := x.Reason
		return protoreflect.ValueOfString(value)
	case "inference.bls.EventDKGFailed.epoch_data":
		value := x.EpochData
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.EventDKGFailed"))
		}
		panic(fmt.Errorf("message inference.bls.EventDKGFailed does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventDKGFailed) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "inference.bls.EventDKGFailed.epoch_id":
		x.EpochId = value.Uint()
	case "inference.bls.EventDKGFailed.reason":
		x.Reason = value.Interface().(string)
	case "inference.bls.EventDKGFailed.epoch_data":
		x.EpochData = value.Message().Interface().(*EpochBLSData)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.EventDKGFailed"))
		}
		panic(fmt.Errorf("message inference.bls.EventDKGFailed does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventDKGFailed) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.bls.EventDKGFailed.epoch_data":
		if x.EpochData == nil {
			x.EpochData = new(EpochBLSData)
		}
		return protoreflect.ValueOfMessage(x.EpochData.ProtoReflect())
	case "inference.bls.EventDKGFailed.epoch_id":
		panic(fmt.Errorf("field epoch_id of message inference.bls.EventDKGFailed is not mutable"))
	case "inference.bls.EventDKGFailed.reason":
		panic(fmt.Errorf("field reason of message inference.bls.EventDKGFailed is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.EventDKGFailed"))
		}
		panic(fmt.Errorf("message inference.bls.EventDKGFailed does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_EventDKGFailed) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.bls.EventDKGFailed.epoch_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "inference.bls.EventDKGFailed.reason":
		return protoreflect.ValueOfString("")
	case "inference.bls.EventDKGFailed.epoch_data":
		m := new(EpochBLSData)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.EventDKGFailed"))
		}
		panic(fmt.Errorf("message inference.bls.EventDKGFailed does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_EventDKGFailed) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in inference.bls.EventDKGFailed", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_EventDKGFailed) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventDKGFailed) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_EventDKGFailed) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_EventDKGFailed) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*EventDKGFailed)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.EpochId != 0 {
			n += 1 + runtime.Sov(uint64(x.EpochId))
		}
		l = len(x.Reason)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.EpochData != nil {
			l = options.Size(x.EpochData)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*EventDKGFailed)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.EpochData != nil {
			encoded, err := options.Marshal(x.EpochData)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Reason) > 0 {
			i -= len(x.Reason)
			copy(dAtA[i:], x.Reason)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Reason)))
			i--
			dAtA[i] = 0x12
		}
		if x.EpochId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EpochId))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*EventDKGFailed)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EventDKGFailed: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EventDKGFailed: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EpochId", wireType)
				}
				x.EpochId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EpochId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Reason = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EpochData", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.EpochData == nil {
					x.EpochData = &EpochBLSData{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.EpochData); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_EventVerificationVectorSubmitted                     protoreflect.MessageDescriptor
	fd_EventVerificationVectorSubmitted_epoch_id            protoreflect.FieldDescriptor
	fd_EventVerificationVectorSubmitted_participant_address protoreflect.FieldDescriptor
)

func init() {
	file_inference_bls_events_proto_init()
	md_EventVerificationVectorSubmitted = File_inference_bls_events_proto.Messages().ByName("EventVerificationVectorSubmitted")
	fd_EventVerificationVectorSubmitted_epoch_id = md_EventVerificationVectorSubmitted.Fields().ByName("epoch_id")
	fd_EventVerificationVectorSubmitted_participant_address = md_EventVerificationVectorSubmitted.Fields().ByName("participant_address")
}

var _ protoreflect.Message = (*fastReflection_EventVerificationVectorSubmitted)(nil)

type fastReflection_EventVerificationVectorSubmitted EventVerificationVectorSubmitted

func (x *EventVerificationVectorSubmitted) ProtoReflect() protoreflect.Message {
	return (*fastReflection_EventVerificationVectorSubmitted)(x)
}

func (x *EventVerificationVectorSubmitted) slowProtoReflect() protoreflect.Message {
	mi := &file_inference_bls_events_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_EventVerificationVectorSubmitted_messageType fastReflection_EventVerificationVectorSubmitted_messageType
var _ protoreflect.MessageType = fastReflection_EventVerificationVectorSubmitted_messageType{}

type fastReflection_EventVerificationVectorSubmitted_messageType struct{}

func (x fastReflection_EventVerificationVectorSubmitted_messageType) Zero() protoreflect.Message {
	return (*fastReflection_EventVerificationVectorSubmitted)(nil)
}
func (x fastReflection_EventVerificationVectorSubmitted_messageType) New() protoreflect.Message {
	return new(fastReflection_EventVerificationVectorSubmitted)
}
func (x fastReflection_EventVerificationVectorSubmitted_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_EventVerificationVectorSubmitted
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_EventVerificationVectorSubmitted) Descriptor() protoreflect.MessageDescriptor {
	return md_EventVerificationVectorSubmitted
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_EventVerificationVectorSubmitted) Type() protoreflect.MessageType {
	return _fastReflection_EventVerificationVectorSubmitted_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_EventVerificationVectorSubmitted) New() protoreflect.Message {
	return new(fastReflection_EventVerificationVectorSubmitted)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_EventVerificationVectorSubmitted) Interface() protoreflect.ProtoMessage {
	return (*EventVerificationVectorSubmitted)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_EventVerificationVectorSubmitted) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.EpochId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.EpochId)
		if !f(fd_EventVerificationVectorSubmitted_epoch_id, value) {
			return
		}
	}
	if x.ParticipantAddress != "" {
		value := protoreflect.ValueOfString(x.ParticipantAddress)
		if !f(fd_EventVerificationVectorSubmitted_participant_address, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_EventVerificationVectorSubmitted) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "inference.bls.EventVerificationVectorSubmitted.epoch_id":
		return x.EpochId != uint64(0)
	case "inference.bls.EventVerificationVectorSubmitted.participant_address":
		return x.ParticipantAddress != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.EventVerificationVectorSubmitted"))
		}
		panic(fmt.Errorf("message inference.bls.EventVerificationVectorSubmitted does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventVerificationVectorSubmitted) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "inference.bls.EventVerificationVectorSubmitted.epoch_id":
		x.EpochId = uint64(0)
	case "inference.bls.EventVerificationVectorSubmitted.participant_address":
		x.ParticipantAddress = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.EventVerificationVectorSubmitted"))
		}
		panic(fmt.Errorf("message inference.bls.EventVerificationVectorSubmitted does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_EventVerificationVectorSubmitted) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "inference.bls.EventVerificationVectorSubmitted.epoch_id":
		value := x.EpochId
		return protoreflect.ValueOfUint64(value)
	case "inference.bls.EventVerificationVectorSubmitted.participant_address":
		value := x.ParticipantAddress
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.EventVerificationVectorSubmitted"))
		}
		panic(fmt.Errorf("message inference.bls.EventVerificationVectorSubmitted does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventVerificationVectorSubmitted) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "inference.bls.EventVerificationVectorSubmitted.epoch_id":
		x.EpochId = value.Uint()
	case "inference.bls.EventVerificationVectorSubmitted.participant_address":
		x.ParticipantAddress = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.EventVerificationVectorSubmitted"))
		}
		panic(fmt.Errorf("message inference.bls.EventVerificationVectorSubmitted does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventVerificationVectorSubmitted) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.bls.EventVerificationVectorSubmitted.epoch_id":
		panic(fmt.Errorf("field epoch_id of message inference.bls.EventVerificationVectorSubmitted is not mutable"))
	case "inference.bls.EventVerificationVectorSubmitted.participant_address":
		panic(fmt.Errorf("field participant_address of message inference.bls.EventVerificationVectorSubmitted is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.EventVerificationVectorSubmitted"))
		}
		panic(fmt.Errorf("message inference.bls.EventVerificationVectorSubmitted does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_EventVerificationVectorSubmitted) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.bls.EventVerificationVectorSubmitted.epoch_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "inference.bls.EventVerificationVectorSubmitted.participant_address":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.EventVerificationVectorSubmitted"))
		}
		panic(fmt.Errorf("message inference.bls.EventVerificationVectorSubmitted does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_EventVerificationVectorSubmitted) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in inference.bls.EventVerificationVectorSubmitted", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_EventVerificationVectorSubmitted) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventVerificationVectorSubmitted) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_EventVerificationVectorSubmitted) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_EventVerificationVectorSubmitted) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*EventVerificationVectorSubmitted)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.EpochId != 0 {
			n += 1 + runtime.Sov(uint64(x.EpochId))
		}
		l = len(x.ParticipantAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*EventVerificationVectorSubmitted)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.ParticipantAddress) > 0 {
			i -= len(x.ParticipantAddress)
			copy(dAtA[i:], x.ParticipantAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ParticipantAddress)))
			i--
			dAtA[i] = 0x12
		}
		if x.EpochId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EpochId))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*EventVerificationVectorSubmitted)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EventVerificationVectorSubmitted: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EventVerificationVectorSubmitted: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EpochId", wireType)
				}
				x.EpochId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EpochId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ParticipantAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ParticipantAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_EventGroupPublicKeyGenerated                  protoreflect.MessageDescriptor
	fd_EventGroupPublicKeyGenerated_epoch_id         protoreflect.FieldDescriptor
	fd_EventGroupPublicKeyGenerated_group_public_key protoreflect.FieldDescriptor
	fd_EventGroupPublicKeyGenerated_i_total_slots    protoreflect.FieldDescriptor
	fd_EventGroupPublicKeyGenerated_t_slots_degree   protoreflect.FieldDescriptor
	fd_EventGroupPublicKeyGenerated_epoch_data       protoreflect.FieldDescriptor
)

func init() {
	file_inference_bls_events_proto_init()
	md_EventGroupPublicKeyGenerated = File_inference_bls_events_proto.Messages().ByName("EventGroupPublicKeyGenerated")
	fd_EventGroupPublicKeyGenerated_epoch_id = md_EventGroupPublicKeyGenerated.Fields().ByName("epoch_id")
	fd_EventGroupPublicKeyGenerated_group_public_key = md_EventGroupPublicKeyGenerated.Fields().ByName("group_public_key")
	fd_EventGroupPublicKeyGenerated_i_total_slots = md_EventGroupPublicKeyGenerated.Fields().ByName("i_total_slots")
	fd_EventGroupPublicKeyGenerated_t_slots_degree = md_EventGroupPublicKeyGenerated.Fields().ByName("t_slots_degree")
	fd_EventGroupPublicKeyGenerated_epoch_data = md_EventGroupPublicKeyGenerated.Fields().ByName("epoch_data")
}

var _ protoreflect.Message = (*fastReflection_EventGroupPublicKeyGenerated)(nil)

type fastReflection_EventGroupPublicKeyGenerated EventGroupPublicKeyGenerated

func (x *EventGroupPublicKeyGenerated) ProtoReflect() protoreflect.Message {
	return (*fastReflection_EventGroupPublicKeyGenerated)(x)
}

func (x *EventGroupPublicKeyGenerated) slowProtoReflect() protoreflect.Message {
	mi := &file_inference_bls_events_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_EventGroupPublicKeyGenerated_messageType fastReflection_EventGroupPublicKeyGenerated_messageType
var _ protoreflect.MessageType = fastReflection_EventGroupPublicKeyGenerated_messageType{}

type fastReflection_EventGroupPublicKeyGenerated_messageType struct{}

func (x fastReflection_EventGroupPublicKeyGenerated_messageType) Zero() protoreflect.Message {
	return (*fastReflection_EventGroupPublicKeyGenerated)(nil)
}
func (x fastReflection_EventGroupPublicKeyGenerated_messageType) New() protoreflect.Message {
	return new(fastReflection_EventGroupPublicKeyGenerated)
}
func (x fastReflection_EventGroupPublicKeyGenerated_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_EventGroupPublicKeyGenerated
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_EventGroupPublicKeyGenerated) Descriptor() protoreflect.MessageDescriptor {
	return md_EventGroupPublicKeyGenerated
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_EventGroupPublicKeyGenerated) Type() protoreflect.MessageType {
	return _fastReflection_EventGroupPublicKeyGenerated_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_EventGroupPublicKeyGenerated) New() protoreflect.Message {
	return new(fastReflection_EventGroupPublicKeyGenerated)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_EventGroupPublicKeyGenerated) Interface() protoreflect.ProtoMessage {
	return (*EventGroupPublicKeyGenerated)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_EventGroupPublicKeyGenerated) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.EpochId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.EpochId)
		if !f(fd_EventGroupPublicKeyGenerated_epoch_id, value) {
			return
		}
	}
	if len(x.GroupPublicKey) != 0 {
		value := protoreflect.ValueOfBytes(x.GroupPublicKey)
		if !f(fd_EventGroupPublicKeyGenerated_group_public_key, value) {
			return
		}
	}
	if x.ITotalSlots != uint32(0) {
		value := protoreflect.ValueOfUint32(x.ITotalSlots)
		if !f(fd_EventGroupPublicKeyGenerated_i_total_slots, value) {
			return
		}
	}
	if x.TSlotsDegree != uint32(0) {
		value := protoreflect.ValueOfUint32(x.TSlotsDegree)
		if !f(fd_EventGroupPublicKeyGenerated_t_slots_degree, value) {
			return
		}
	}
	if x.EpochData != nil {
		value := protoreflect.ValueOfMessage(x.EpochData.ProtoReflect())
		if !f(fd_EventGroupPublicKeyGenerated_epoch_data, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_EventGroupPublicKeyGenerated) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "inference.bls.EventGroupPublicKeyGenerated.epoch_id":
		return x.EpochId != uint64(0)
	case "inference.bls.EventGroupPublicKeyGenerated.group_public_key":
		return len(x.GroupPublicKey) != 0
	case "inference.bls.EventGroupPublicKeyGenerated.i_total_slots":
		return x.ITotalSlots != uint32(0)
	case "inference.bls.EventGroupPublicKeyGenerated.t_slots_degree":
		return x.TSlotsDegree != uint32(0)
	case "inference.bls.EventGroupPublicKeyGenerated.epoch_data":
		return x.EpochData != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.EventGroupPublicKeyGenerated"))
		}
		panic(fmt.Errorf("message inference.bls.EventGroupPublicKeyGenerated does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventGroupPublicKeyGenerated) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "inference.bls.EventGroupPublicKeyGenerated.epoch_id":
		x.EpochId = uint64(0)
	case "inference.bls.EventGroupPublicKeyGenerated.group_public_key":
		x.GroupPublicKey = nil
	case "inference.bls.EventGroupPublicKeyGenerated.i_total_slots":
		x.ITotalSlots = uint32(0)
	case "inference.bls.EventGroupPublicKeyGenerated.t_slots_degree":
		x.TSlotsDegree = uint32(0)
	case "inference.bls.EventGroupPublicKeyGenerated.epoch_data":
		x.EpochData = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.EventGroupPublicKeyGenerated"))
		}
		panic(fmt.Errorf("message inference.bls.EventGroupPublicKeyGenerated does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_EventGroupPublicKeyGenerated) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "inference.bls.EventGroupPublicKeyGenerated.epoch_id":
		value := x.EpochId
		return protoreflect.ValueOfUint64(value)
	case "inference.bls.EventGroupPublicKeyGenerated.group_public_key":
		value := x.GroupPublicKey
		return protoreflect.ValueOfBytes(value)
	case "inference.bls.EventGroupPublicKeyGenerated.i_total_slots":
		value := x.ITotalSlots
		return protoreflect.ValueOfUint32(value)
	case "inference.bls.EventGroupPublicKeyGenerated.t_slots_degree":
		value := x.TSlotsDegree
		return protoreflect.ValueOfUint32(value)
	case "inference.bls.EventGroupPublicKeyGenerated.epoch_data":
		value := x.EpochData
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.EventGroupPublicKeyGenerated"))
		}
		panic(fmt.Errorf("message inference.bls.EventGroupPublicKeyGenerated does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventGroupPublicKeyGenerated) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "inference.bls.EventGroupPublicKeyGenerated.epoch_id":
		x.EpochId = value.Uint()
	case "inference.bls.EventGroupPublicKeyGenerated.group_public_key":
		x.GroupPublicKey = value.Bytes()
	case "inference.bls.EventGroupPublicKeyGenerated.i_total_slots":
		x.ITotalSlots = uint32(value.Uint())
	case "inference.bls.EventGroupPublicKeyGenerated.t_slots_degree":
		x.TSlotsDegree = uint32(value.Uint())
	case "inference.bls.EventGroupPublicKeyGenerated.epoch_data":
		x.EpochData = value.Message().Interface().(*EpochBLSData)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.EventGroupPublicKeyGenerated"))
		}
		panic(fmt.Errorf("message inference.bls.EventGroupPublicKeyGenerated does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventGroupPublicKeyGenerated) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.bls.EventGroupPublicKeyGenerated.epoch_data":
		if x.EpochData == nil {
			x.EpochData = new(EpochBLSData)
		}
		return protoreflect.ValueOfMessage(x.EpochData.ProtoReflect())
	case "inference.bls.EventGroupPublicKeyGenerated.epoch_id":
		panic(fmt.Errorf("field epoch_id of message inference.bls.EventGroupPublicKeyGenerated is not mutable"))
	case "inference.bls.EventGroupPublicKeyGenerated.group_public_key":
		panic(fmt.Errorf("field group_public_key of message inference.bls.EventGroupPublicKeyGenerated is not mutable"))
	case "inference.bls.EventGroupPublicKeyGenerated.i_total_slots":
		panic(fmt.Errorf("field i_total_slots of message inference.bls.EventGroupPublicKeyGenerated is not mutable"))
	case "inference.bls.EventGroupPublicKeyGenerated.t_slots_degree":
		panic(fmt.Errorf("field t_slots_degree of message inference.bls.EventGroupPublicKeyGenerated is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.EventGroupPublicKeyGenerated"))
		}
		panic(fmt.Errorf("message inference.bls.EventGroupPublicKeyGenerated does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_EventGroupPublicKeyGenerated) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "inference.bls.EventGroupPublicKeyGenerated.epoch_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "inference.bls.EventGroupPublicKeyGenerated.group_public_key":
		return protoreflect.ValueOfBytes(nil)
	case "inference.bls.EventGroupPublicKeyGenerated.i_total_slots":
		return protoreflect.ValueOfUint32(uint32(0))
	case "inference.bls.EventGroupPublicKeyGenerated.t_slots_degree":
		return protoreflect.ValueOfUint32(uint32(0))
	case "inference.bls.EventGroupPublicKeyGenerated.epoch_data":
		m := new(EpochBLSData)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: inference.bls.EventGroupPublicKeyGenerated"))
		}
		panic(fmt.Errorf("message inference.bls.EventGroupPublicKeyGenerated does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_EventGroupPublicKeyGenerated) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in inference.bls.EventGroupPublicKeyGenerated", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_EventGroupPublicKeyGenerated) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EventGroupPublicKeyGenerated) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_EventGroupPublicKeyGenerated) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_EventGroupPublicKeyGenerated) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*EventGroupPublicKeyGenerated)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.EpochId != 0 {
			n += 1 + runtime.Sov(uint64(x.EpochId))
		}
		l = len(x.GroupPublicKey)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.ITotalSlots != 0 {
			n += 1 + runtime.Sov(uint64(x.ITotalSlots))
		}
		if x.TSlotsDegree != 0 {
			n += 1 + runtime.Sov(uint64(x.TSlotsDegree))
		}
		if x.EpochData != nil {
			l = options.Size(x.EpochData)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*EventGroupPublicKeyGenerated)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.EpochData != nil {
			encoded, err := options.Marshal(x.EpochData)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x2a
		}
		if x.TSlotsDegree != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TSlotsDegree))
			i--
			dAtA[i] = 0x20
		}
		if x.ITotalSlots != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ITotalSlots))
			i--
			dAtA[i] = 0x18
		}
		if len(x.GroupPublicKey) > 0 {
			i -= len(x.GroupPublicKey)
			copy(dAtA[i:], x.GroupPublicKey)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.GroupPublicKey)))
			i--
			dAtA[i] = 0x12
		}
		if x.EpochId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EpochId))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*EventGroupPublicKeyGenerated)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EventGroupPublicKeyGenerated: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EventGroupPublicKeyGenerated: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EpochId", wireType)
				}
				x.EpochId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EpochId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field GroupPublicKey", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.GroupPublicKey = append(x.GroupPublicKey[:0], dAtA[iNdEx:postIndex]...)
				if x.GroupPublicKey == nil {
					x.GroupPublicKey = []byte{}
				}
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ITotalSlots", wireType)
				}
				x.ITotalSlots = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ITotalSlots |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TSlotsDegree", wireType)
				}
				x.TSlotsDegree = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TSlotsDegree |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EpochData", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.EpochData == nil {
					x.EpochData = &EpochBLSData{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.EpochData); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: inference/bls/events.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// EventKeyGenerationInitiated is emitted when DKG is initiated for an epoch
type EventKeyGenerationInitiated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// epoch_id uniquely identifies this DKG round
	EpochId uint64 `protobuf:"varint,1,opt,name=epoch_id,json=epochId,proto3" json:"epoch_id,omitempty"`
	// i_total_slots is the total number of slots in the DKG
	ITotalSlots uint32 `protobuf:"varint,2,opt,name=i_total_slots,json=iTotalSlots,proto3" json:"i_total_slots,omitempty"`
	// t_slots_degree is the polynomial degree t for the threshold scheme
	TSlotsDegree uint32 `protobuf:"varint,3,opt,name=t_slots_degree,json=tSlotsDegree,proto3" json:"t_slots_degree,omitempty"`
	// participants contains information about all participants in this DKG round
	Participants []*BLSParticipantInfo `protobuf:"bytes,4,rep,name=participants,proto3" json:"participants,omitempty"`
}

func (x *EventKeyGenerationInitiated) Reset() {
	*x = EventKeyGenerationInitiated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_bls_events_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventKeyGenerationInitiated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventKeyGenerationInitiated) ProtoMessage() {}

// Deprecated: Use EventKeyGenerationInitiated.ProtoReflect.Descriptor instead.
func (*EventKeyGenerationInitiated) Descriptor() ([]byte, []int) {
	return file_inference_bls_events_proto_rawDescGZIP(), []int{0}
}

func (x *EventKeyGenerationInitiated) GetEpochId() uint64 {
	if x != nil {
		return x.EpochId
	}
	return 0
}

func (x *EventKeyGenerationInitiated) GetITotalSlots() uint32 {
	if x != nil {
		return x.ITotalSlots
	}
	return 0
}

func (x *EventKeyGenerationInitiated) GetTSlotsDegree() uint32 {
	if x != nil {
		return x.TSlotsDegree
	}
	return 0
}

func (x *EventKeyGenerationInitiated) GetParticipants() []*BLSParticipantInfo {
	if x != nil {
		return x.Participants
	}
	return nil
}

// EventDealerPartSubmitted is emitted when a participant submits their dealer part
type EventDealerPartSubmitted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// epoch_id identifies the DKG round this dealer part belongs to
	EpochId uint64 `protobuf:"varint,1,opt,name=epoch_id,json=epochId,proto3" json:"epoch_id,omitempty"`
	// dealer_address is the address of the dealer who submitted their part
	DealerAddress string `protobuf:"bytes,2,opt,name=dealer_address,json=dealerAddress,proto3" json:"dealer_address,omitempty"`
}

func (x *EventDealerPartSubmitted) Reset() {
	*x = EventDealerPartSubmitted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_bls_events_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventDealerPartSubmitted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventDealerPartSubmitted) ProtoMessage() {}

// Deprecated: Use EventDealerPartSubmitted.ProtoReflect.Descriptor instead.
func (*EventDealerPartSubmitted) Descriptor() ([]byte, []int) {
	return file_inference_bls_events_proto_rawDescGZIP(), []int{1}
}

func (x *EventDealerPartSubmitted) GetEpochId() uint64 {
	if x != nil {
		return x.EpochId
	}
	return 0
}

func (x *EventDealerPartSubmitted) GetDealerAddress() string {
	if x != nil {
		return x.DealerAddress
	}
	return ""
}

// EventVerifyingPhaseStarted is emitted when the DKG transitions to the verification phase
type EventVerifyingPhaseStarted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// epoch_id identifies the DKG round entering verification phase
	EpochId uint64 `protobuf:"varint,1,opt,name=epoch_id,json=epochId,proto3" json:"epoch_id,omitempty"`
	// verifying_phase_deadline_block is the block height deadline for the verification phase
	VerifyingPhaseDeadlineBlock uint64 `protobuf:"varint,2,opt,name=verifying_phase_deadline_block,json=verifyingPhaseDeadlineBlock,proto3" json:"verifying_phase_deadline_block,omitempty"`
	// epoch_data contains the complete epoch BLS data at the time of transition
	EpochData *EpochBLSData `protobuf:"bytes,3,opt,name=epoch_data,json=epochData,proto3" json:"epoch_data,omitempty"`
}

func (x *EventVerifyingPhaseStarted) Reset() {
	*x = EventVerifyingPhaseStarted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_bls_events_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventVerifyingPhaseStarted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventVerifyingPhaseStarted) ProtoMessage() {}

// Deprecated: Use EventVerifyingPhaseStarted.ProtoReflect.Descriptor instead.
func (*EventVerifyingPhaseStarted) Descriptor() ([]byte, []int) {
	return file_inference_bls_events_proto_rawDescGZIP(), []int{2}
}

func (x *EventVerifyingPhaseStarted) GetEpochId() uint64 {
	if x != nil {
		return x.EpochId
	}
	return 0
}

func (x *EventVerifyingPhaseStarted) GetVerifyingPhaseDeadlineBlock() uint64 {
	if x != nil {
		return x.VerifyingPhaseDeadlineBlock
	}
	return 0
}

func (x *EventVerifyingPhaseStarted) GetEpochData() *EpochBLSData {
	if x != nil {
		return x.EpochData
	}
	return nil
}

// EventDKGFailed is emitted when a DKG round fails
type EventDKGFailed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// epoch_id identifies the DKG round that failed
	EpochId uint64 `protobuf:"varint,1,opt,name=epoch_id,json=epochId,proto3" json:"epoch_id,omitempty"`
	// reason describes why the DKG failed
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	// epoch_data contains the complete epoch BLS data at the time of failure
	EpochData *EpochBLSData `protobuf:"bytes,3,opt,name=epoch_data,json=epochData,proto3" json:"epoch_data,omitempty"`
}

func (x *EventDKGFailed) Reset() {
	*x = EventDKGFailed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_bls_events_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventDKGFailed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventDKGFailed) ProtoMessage() {}

// Deprecated: Use EventDKGFailed.ProtoReflect.Descriptor instead.
func (*EventDKGFailed) Descriptor() ([]byte, []int) {
	return file_inference_bls_events_proto_rawDescGZIP(), []int{3}
}

func (x *EventDKGFailed) GetEpochId() uint64 {
	if x != nil {
		return x.EpochId
	}
	return 0
}

func (x *EventDKGFailed) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *EventDKGFailed) GetEpochData() *EpochBLSData {
	if x != nil {
		return x.EpochData
	}
	return nil
}

// EventVerificationVectorSubmitted is emitted when a participant submits their verification vector
type EventVerificationVectorSubmitted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// epoch_id identifies the DKG round this verification submission belongs to
	EpochId uint64 `protobuf:"varint,1,opt,name=epoch_id,json=epochId,proto3" json:"epoch_id,omitempty"`
	// participant_address is the address of the participant who submitted verification
	ParticipantAddress string `protobuf:"bytes,2,opt,name=participant_address,json=participantAddress,proto3" json:"participant_address,omitempty"`
}

func (x *EventVerificationVectorSubmitted) Reset() {
	*x = EventVerificationVectorSubmitted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_bls_events_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventVerificationVectorSubmitted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventVerificationVectorSubmitted) ProtoMessage() {}

// Deprecated: Use EventVerificationVectorSubmitted.ProtoReflect.Descriptor instead.
func (*EventVerificationVectorSubmitted) Descriptor() ([]byte, []int) {
	return file_inference_bls_events_proto_rawDescGZIP(), []int{4}
}

func (x *EventVerificationVectorSubmitted) GetEpochId() uint64 {
	if x != nil {
		return x.EpochId
	}
	return 0
}

func (x *EventVerificationVectorSubmitted) GetParticipantAddress() string {
	if x != nil {
		return x.ParticipantAddress
	}
	return ""
}

// EventGroupPublicKeyGenerated is emitted when the DKG completes successfully and group public key is computed
type EventGroupPublicKeyGenerated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// epoch_id uniquely identifies this DKG round
	EpochId uint64 `protobuf:"varint,1,opt,name=epoch_id,json=epochId,proto3" json:"epoch_id,omitempty"`
	// group_public_key is the final aggregated group public key (compressed G2 format, 96 bytes)
	GroupPublicKey []byte `protobuf:"bytes,2,opt,name=group_public_key,json=groupPublicKey,proto3" json:"group_public_key,omitempty"`
	// i_total_slots is the total number of slots in the DKG
	ITotalSlots uint32 `protobuf:"varint,3,opt,name=i_total_slots,json=iTotalSlots,proto3" json:"i_total_slots,omitempty"`
	// t_slots_degree is the polynomial degree t for the threshold scheme
	TSlotsDegree uint32 `protobuf:"varint,4,opt,name=t_slots_degree,json=tSlotsDegree,proto3" json:"t_slots_degree,omitempty"`
	// epoch_data contains the complete epoch BLS data at the time of completion
	EpochData *EpochBLSData `protobuf:"bytes,5,opt,name=epoch_data,json=epochData,proto3" json:"epoch_data,omitempty"`
}

func (x *EventGroupPublicKeyGenerated) Reset() {
	*x = EventGroupPublicKeyGenerated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inference_bls_events_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventGroupPublicKeyGenerated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventGroupPublicKeyGenerated) ProtoMessage() {}

// Deprecated: Use EventGroupPublicKeyGenerated.ProtoReflect.Descriptor instead.
func (*EventGroupPublicKeyGenerated) Descriptor() ([]byte, []int) {
	return file_inference_bls_events_proto_rawDescGZIP(), []int{5}
}

func (x *EventGroupPublicKeyGenerated) GetEpochId() uint64 {
	if x != nil {
		return x.EpochId
	}
	return 0
}

func (x *EventGroupPublicKeyGenerated) GetGroupPublicKey() []byte {
	if x != nil {
		return x.GroupPublicKey
	}
	return nil
}

func (x *EventGroupPublicKeyGenerated) GetITotalSlots() uint32 {
	if x != nil {
		return x.ITotalSlots
	}
	return 0
}

func (x *EventGroupPublicKeyGenerated) GetTSlotsDegree() uint32 {
	if x != nil {
		return x.TSlotsDegree
	}
	return 0
}

func (x *EventGroupPublicKeyGenerated) GetEpochData() *EpochBLSData {
	if x != nil {
		return x.EpochData
	}
	return nil
}

var File_inference_bls_events_proto protoreflect.FileDescriptor

var file_inference_bls_events_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x62, 0x6c, 0x73, 0x2f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x69, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x6c, 0x73, 0x1a, 0x11, 0x61, 0x6d, 0x69,
	0x6e, 0x6f, 0x2f, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x19, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x62, 0x6c, 0x73, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcf, 0x01, 0x0a, 0x1b, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x69, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x5f, 0x73,
	0x6c, 0x6f, 0x74, 0x73, 0x5f, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x44, 0x65, 0x67, 0x72, 0x65, 0x65, 0x12,
	0x4b, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x2e, 0x62, 0x6c, 0x73, 0x2e, 0x42, 0x4c, 0x53, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0c,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x22, 0x76, 0x0a, 0x18,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0e, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xd2, 0xb4, 0x2d,
	0x14, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0xbe, 0x01, 0x0a, 0x1a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x50, 0x68, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x49, 0x64, 0x12, 0x43,
	0x0a, 0x1e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x69, 0x6e,
	0x67, 0x50, 0x68, 0x61, 0x73, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x40, 0x0a, 0x0a, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x2e, 0x62, 0x6c, 0x73, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x42, 0x4c, 0x53,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x09, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x44, 0x61, 0x74, 0x61, 0x22, 0x85, 0x01, 0x0a, 0x0e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44,
	0x4b, 0x47, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0a, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x6c, 0x73, 0x2e,
	0x45, 0x70, 0x6f, 0x63, 0x68, 0x42, 0x4c, 0x53, 0x44, 0x61, 0x74, 0x61, 0x42, 0x04, 0xc8, 0xde,
	0x1f, 0x00, 0x52, 0x09, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x22, 0x88, 0x01,
	0x0a, 0x20, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x49, 0x64, 0x12, 0x49, 0x0a,
	0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xd2, 0xb4, 0x2d, 0x14,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xef, 0x01, 0x0a, 0x1c, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x22,
	0x0a, 0x0d, 0x69, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x69, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x6c, 0x6f,
	0x74, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x5f, 0x64, 0x65,
	0x67, 0x72, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x53, 0x6c, 0x6f,
	0x74, 0x73, 0x44, 0x65, 0x67, 0x72, 0x65, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x6c, 0x73, 0x2e, 0x45, 0x70, 0x6f,
	0x63, 0x68, 0x42, 0x4c, 0x53, 0x44, 0x61, 0x74, 0x61, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52,
	0x09, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x42, 0x95, 0x01, 0x0a, 0x11, 0x63,
	0x6f, 0x6d, 0x2e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x62, 0x6c, 0x73,
	0x42, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x1e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x62, 0x6c, 0x73, 0xa2,
	0x02, 0x03, 0x49, 0x42, 0x58, 0xaa, 0x02, 0x0d, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x2e, 0x42, 0x6c, 0x73, 0xca, 0x02, 0x0d, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x5c, 0x42, 0x6c, 0x73, 0xe2, 0x02, 0x19, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x5c, 0x42, 0x6c, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x0e, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x3a, 0x42,
	0x6c, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_inference_bls_events_proto_rawDescOnce sync.Once
	file_inference_bls_events_proto_rawDescData = file_inference_bls_events_proto_rawDesc
)

func file_inference_bls_events_proto_rawDescGZIP() []byte {
	file_inference_bls_events_proto_rawDescOnce.Do(func() {
		file_inference_bls_events_proto_rawDescData = protoimpl.X.CompressGZIP(file_inference_bls_events_proto_rawDescData)
	})
	return file_inference_bls_events_proto_rawDescData
}

var file_inference_bls_events_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_inference_bls_events_proto_goTypes = []interface{}{
	(*EventKeyGenerationInitiated)(nil),      // 0: inference.bls.EventKeyGenerationInitiated
	(*EventDealerPartSubmitted)(nil),         // 1: inference.bls.EventDealerPartSubmitted
	(*EventVerifyingPhaseStarted)(nil),       // 2: inference.bls.EventVerifyingPhaseStarted
	(*EventDKGFailed)(nil),                   // 3: inference.bls.EventDKGFailed
	(*EventVerificationVectorSubmitted)(nil), // 4: inference.bls.EventVerificationVectorSubmitted
	(*EventGroupPublicKeyGenerated)(nil),     // 5: inference.bls.EventGroupPublicKeyGenerated
	(*BLSParticipantInfo)(nil),               // 6: inference.bls.BLSParticipantInfo
	(*EpochBLSData)(nil),                     // 7: inference.bls.EpochBLSData
}
var file_inference_bls_events_proto_depIdxs = []int32{
	6, // 0: inference.bls.EventKeyGenerationInitiated.participants:type_name -> inference.bls.BLSParticipantInfo
	7, // 1: inference.bls.EventVerifyingPhaseStarted.epoch_data:type_name -> inference.bls.EpochBLSData
	7, // 2: inference.bls.EventDKGFailed.epoch_data:type_name -> inference.bls.EpochBLSData
	7, // 3: inference.bls.EventGroupPublicKeyGenerated.epoch_data:type_name -> inference.bls.EpochBLSData
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_inference_bls_events_proto_init() }
func file_inference_bls_events_proto_init() {
	if File_inference_bls_events_proto != nil {
		return
	}
	file_inference_bls_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_inference_bls_events_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventKeyGenerationInitiated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_bls_events_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventDealerPartSubmitted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_bls_events_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventVerifyingPhaseStarted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_bls_events_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventDKGFailed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_bls_events_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventVerificationVectorSubmitted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inference_bls_events_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventGroupPublicKeyGenerated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_inference_bls_events_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_inference_bls_events_proto_goTypes,
		DependencyIndexes: file_inference_bls_events_proto_depIdxs,
		MessageInfos:      file_inference_bls_events_proto_msgTypes,
	}.Build()
	File_inference_bls_events_proto = out.File
	file_inference_bls_events_proto_rawDesc = nil
	file_inference_bls_events_proto_goTypes = nil
	file_inference_bls_events_proto_depIdxs = nil
}

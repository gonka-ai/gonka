name: Update Voting Configuration
on:
  pull_request:
    branches:
      - '**'
  workflow_run:
    workflows: [ "Build and Release to race-releases" ]
    types:
      - completed
  workflow_dispatch: # Allows manual triggering

jobs:
  vote_for_update:
    runs-on: ubuntu-latest
    # Run if manually dispatched OR if triggered by a successful workflow_run
    # if: github.event_name == 'workflow_dispatch' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')

    permissions:
      contents: 'read'
      id-token: 'write'
      packages: 'write'
      actions: 'read' # Still needed if workflow_run triggers and we download artifact

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Download release tag artifact (if triggered by workflow_run)
        if: github.event_name == 'workflow_run' # Only run this step if triggered by another workflow
        uses: actions/download-artifact@v4
        with:
          name: release-tag-artifact
          run-id: ${{ github.event.workflow_run.id }}
          # Artifact will be downloaded to GITHUB_WORKSPACE (e.g., release_tag.txt)
          # No explicit path needed, it downloads to the root.
        # Continue even if artifact download fails for some reason, next step handles missing file.
        continue-on-error: true


      - name: Determine Release Tag
        id: release_info
        run: |
          DEFAULT_TAG="v0.0.0-manual-test" # Default tag for manual runs or if artifact is missing
          TAG_VALUE="$DEFAULT_TAG"

          if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            echo "Workflow triggered by 'workflow_run'."
            if [[ -f release_tag.txt ]]; then
              TAG_VALUE=$(cat release_tag.txt)
              echo "Using tag from downloaded artifact: $TAG_VALUE"
            else
              echo "WARNING: 'workflow_run' trigger but release_tag.txt not found (or download failed). Using default tag: $TAG_VALUE"
            fi
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "Workflow triggered by 'workflow_dispatch'. Using default tag: $TAG_VALUE"
          else
            echo "Workflow triggered by '${{ github.event_name }}'. Using default tag: $TAG_VALUE"
          fi
          echo "Final Release Tag: $TAG_VALUE"
          echo "release_tag=$TAG_VALUE" >> $GITHUB_OUTPUT

      - uses: ./.github/actions/gcp-auth-and-gcloud-setup # Assumes this sets up gcloud CLI

      - name: Install kubectl
        uses: azure/setup-kubectl@v4

      - name: Define GCE/K8s parameters for script
        id: params
        run: |
          echo "GCE_PROJECT_ID_PARAM=$(gcloud config get-value project)" >> $GITHUB_OUTPUT
          echo "GCE_ZONE_PARAM=us-central1-a" >> $GITHUB_OUTPUT
          echo "K8S_CONTROL_PLANE_NAME_PARAM=k8s-control-plane" >> $GITHUB_OUTPUT
          echo "K8S_CONTROL_PLANE_USER_PARAM=dev" >> $GITHUB_OUTPUT

      - name: Execute Voting Update Script (Python)
        env:
          RELEASE_TAG: ${{ steps.release_info.outputs.release_tag }}
          GCE_PROJECT_ID: ${{ steps.params.outputs.GCE_PROJECT_ID_PARAM }}
          GCE_ZONE: ${{ steps.params.outputs.GCE_ZONE_PARAM }}
          K8S_CONTROL_PLANE_NAME: ${{ steps.params.outputs.K8S_CONTROL_PLANE_NAME_PARAM }}
          K8S_CONTROL_PLANE_USER: ${{ steps.params.outputs.K8S_CONTROL_PLANE_USER_PARAM }}
          PYTHONUNBUFFERED: "1"
        run: python ./.github/scripts/execute_voting_update.py
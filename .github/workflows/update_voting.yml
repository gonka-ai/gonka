name: Update Voting Configuration
on:
  pull_request:
    branches:
      - '**'

jobs:
  vote_for_update:
    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: 'write'
      packages: 'write' # Added for pushing to GHCR

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Required for git describe --always to work accurately

      - uses: ./.github/actions/gcp-auth-and-gcloud-setup

      - name: Define GCE/K8s parameters
        id: params
        run: |
          echo "GCE_PROJECT_ID=$(gcloud config get-value project)" >> $GITHUB_OUTPUT
          echo "GCE_ZONE=us-central1-a" >> $GITHUB_OUTPUT
          echo "K8S_CONTROL_PLANE_NAME=k8s-control-plane" >> $GITHUB_OUTPUT
          echo "K8S_CONTROL_PLANE_USER=dev" >> $GITHUB_OUTPUT
          echo "K8S_WORKER_1_NAME=k8s-worker-1" >> $GITHUB_OUTPUT
          echo "K8S_WORKER_2_NAME=k8s-worker-2" >> $GITHUB_OUTPUT
          echo "K8S_WORKER_3_NAME=k8s-worker-3" >> $GITHUB_OUTPUT

      - name: Install kubectl
        uses: azure/setup-kubectl@v4

      - name: Print kubectl and kustomize versions
        run: |
          echo "kubectl client version:"
          kubectl version --client -o yaml # -o yaml gives more structured output

      - name: Configure kubectl
        env:
          GCE_PROJECT_ID: ${{ steps.params.outputs.GCE_PROJECT_ID }}
          GCE_ZONE: ${{ steps.params.outputs.GCE_ZONE }}
          K8S_CONTROL_PLANE_NAME: ${{ steps.params.outputs.K8S_CONTROL_PLANE_NAME }}
          K8S_CONTROL_PLANE_USER: ${{ steps.params.outputs.K8S_CONTROL_PLANE_USER }}
        run: |
          echo "Fetching kubeconfig from ${K8S_CONTROL_PLANE_NAME} in zone ${GCE_ZONE}..."
          mkdir -p $HOME/.kube
          gcloud compute scp ${K8S_CONTROL_PLANE_USER}@${K8S_CONTROL_PLANE_NAME}:~/.kube/config $HOME/.kube/config --zone ${GCE_ZONE} --project ${GCE_PROJECT_ID}
          export KUBECONFIG=$HOME/.kube/config
          echo "KUBECONFIG=$KUBECONFIG" >> $GITHUB_ENV

          # ---- IMPORTANT: SSH Tunnel (if K8s API server is not directly accessible) ----
          # If your K8s API server isn't publicly accessible, you'll need an SSH tunnel.
          # 1. Uncomment and adapt the following lines.
          # 2. Ensure your kubeconfig (once copied) targets 'https://127.0.0.1:6443' or similar.
          #
          echo "Setting up SSH tunnel to ${K8S_CONTROL_PLANE_NAME}..."
          gcloud compute ssh ${K8S_CONTROL_PLANE_USER}@${K8S_CONTROL_PLANE_NAME} --zone ${GCE_ZONE} --project ${GCE_PROJECT_ID} \
            --ssh-flag="-L 6443:127.0.0.1:6443 -N -f"
          sleep 5 # Give tunnel time to establish
          echo "Kubeconfig modified to use tunnel."
          # ---- End SSH Tunnel Section ----

          echo "Verifying kubectl connection..."
          kubectl cluster-info
          kubectl get nodes --request-timeout=30s
          kubectl get pods --all-namespaces --field-selector spec.nodeName=k8s-worker-1 -o wide
